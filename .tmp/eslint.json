[
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/.eslintrc.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/app.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/hooks.client.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/hooks.server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/auth/middleware.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/auth/session.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/hr/EmployeeModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/layout/Header.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/layout/PageLayout.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/layout/Sidebar.svelte",
    "messages": [
      {
        "ruleId": "svelte/require-optimized-style-attribute",
        "severity": 1,
        "message": "It cannot be optimized because too complex.",
        "line": 82,
        "column": 13,
        "nodeType": "SvelteAttribute",
        "messageId": "complex",
        "endLine": 84,
        "endColumn": 78
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  import { page } from '$app/stores'\n  import {\n    HomeIcon,\n    BarChart3Icon,\n    UsersIcon,\n    BriefcaseIcon,\n    FileTextIcon,\n    SettingsIcon,\n    BanknoteIcon,\n    FlaskConicalIcon,\n    BuildingIcon,\n    CalendarIcon,\n    MessageSquareIcon,\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    DollarSignIcon,\n  } from '@lucide/svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n\n  let { isCollapsed = $bindable(true) } = $props<{ isCollapsed?: boolean }>()\n\n  const navigationItems = [\n    { name: '대시보드', href: '/', icon: HomeIcon },\n    { name: '재무관리', href: '/finance', icon: BanknoteIcon },\n    { name: '급여관리', href: '/salary', icon: DollarSignIcon },\n    { name: '인사관리', href: '/hr', icon: UsersIcon },\n    { name: '연구개발', href: '/project-management', icon: FlaskConicalIcon },\n    { name: '영업관리', href: '/sales', icon: BriefcaseIcon },\n    { name: '고객관리', href: '/crm', icon: BuildingIcon },\n    { name: '일정관리', href: '/calendar', icon: CalendarIcon },\n    { name: '보고서', href: '/reports', icon: FileTextIcon },\n    { name: '분석', href: '/analytics', icon: BarChart3Icon },\n    { name: '메시지', href: '/messages', icon: MessageSquareIcon },\n    { name: '설정', href: '/settings', icon: SettingsIcon },\n  ]\n\n  function toggleCollapse() {\n    isCollapsed = !isCollapsed\n  }\n</script>\n\n<aside\n  class=\"transition-all duration-300 {isCollapsed\n    ? 'w-16'\n    : 'w-64'} flex-shrink-0 h-screen sticky top-0\"\n  style:background=\"var(--color-surface)\"\n  style:border-right=\"1px solid var(--color-border)\"\n>\n  <div class=\"flex h-full flex-col\">\n    <!-- Toggle Button -->\n    <div\n      class=\"flex h-12 items-center justify-center\"\n      style:border-bottom=\"1px solid var(--color-border)\"\n    >\n      <ThemeButton\n        variant=\"ghost\"\n        size=\"sm\"\n        onclick={toggleCollapse}\n        class=\"p-2 transition-colors text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n      >\n        {#if isCollapsed}\n          <ChevronRightIcon size={16} />\n        {:else}\n          <ChevronLeftIcon size={16} />\n        {/if}\n      </ThemeButton>\n    </div>\n\n    <!-- Navigation -->\n    <nav class=\"flex-1 px-3 py-4 space-y-1\">\n      {#each navigationItems as item (item.name)}\n        {@const currentPath = $page.url.pathname}\n        {@const isCurrent =\n          (item.href === '/' && currentPath === '/') ||\n          (item.href !== '/' && currentPath.startsWith(item.href))}\n        <a\n          href={item.href}\n          class=\"group flex items-center px-3 py-3 text-sm font-medium rounded-xl transition-all duration-200 relative\n            {isCurrent ? 'text-white shadow-lg' : 'hover:scale-[1.02] hover:shadow-md'}\"\n          style=\"\n            {isCurrent\n            ? 'background: var(--color-primary);'\n            : 'color: var(--color-text-secondary); background: transparent;'}\n          \"\n          title={isCollapsed ? item.name : ''}\n        >\n          {#if isCurrent}\n            <div\n              class=\"absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-white rounded-r-full\"\n            ></div>\n          {/if}\n          {#if item.icon}\n            <item.icon size={20} class=\"flex-shrink-0 {isCurrent ? 'text-white' : ''}\" />\n          {/if}\n          {#if !isCollapsed}\n            <span class=\"ml-3 font-medium\" class:text-white={isCurrent}>{item.name}</span>\n          {/if}\n          {#if isCurrent && !isCollapsed}\n            <div class=\"ml-auto\">\n              <div class=\"w-2 h-2 bg-white rounded-full\"></div>\n            </div>\n          {/if}\n        </a>\n      {/each}\n    </nav>\n  </div>\n</aside>\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/AnnualBudgetForm.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ParticipationCard.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectBudgetSummary.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectCreationForm.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectDetailView.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectListCard.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectOverviewCard.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ResearcherValidationTable.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/SimpleBudgetForm.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/EmployeeSalaryHistory.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/PayslipGenerator.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/PayslipUploader.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/SalaryContracts.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/SalaryDashboard.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/SalaryHistory.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Badge.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/BudgetModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Card.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/CompanyModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/DeleteConfirmModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/DepartmentModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/EmployeeModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Modal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/OrganizationChart.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/PositionModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Progress.svelte",
    "messages": [
      {
        "ruleId": "svelte/require-optimized-style-attribute",
        "severity": 1,
        "message": "It cannot be optimized because too complex.",
        "line": 16,
        "column": 68,
        "nodeType": "SvelteAttribute",
        "messageId": "complex",
        "endLine": 16,
        "endColumn": 90
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  let { value = 0, class: className = '' } = $props<{\n    value?: number\n    class?: string\n  }>()\n  const clamped = Math.max(0, Math.min(100, value))\n</script>\n\n<div\n  class={`h-2 w-full rounded-full bg-gray-200 overflow-hidden ${className}`}\n  role=\"progressbar\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  aria-valuenow={clamped}\n>\n  <div class=\"h-full bg-primary transition-all duration-300\" style={`width: ${clamped}%`}></div>\n</div>\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/SimpleChart.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeActivityItem.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeAvatar.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeBadge.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeButton.svelte",
    "messages": [
      {
        "ruleId": "svelte/no-at-html-tags",
        "severity": 1,
        "message": "`{@html}` can lead to XSS attack.",
        "line": 176,
        "column": 7,
        "nodeType": "SvelteMustacheTag",
        "messageId": "unexpected",
        "endLine": 176,
        "endColumn": 34
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  // Props\n  interface Props {\n    variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info' | 'ghost'\n    size?:\n      | 'sm'\n      | 'md'\n      | 'lg'\n      | 'xl'\n      | '2xl'\n      | '3xl'\n      | '4xl'\n      | '5xl'\n      | '6xl'\n      | '7xl'\n      | '8xl'\n      | '9xl'\n      | '10xl'\n      | '11xl'\n      | '12xl'\n      | '13xl'\n      | '14xl'\n      | '15xl'\n      | '16xl'\n      | '17xl'\n      | '18xl'\n      | '19xl'\n      | '20xl'\n      | '21xl'\n      | '22xl'\n      | '23xl'\n      | '24xl'\n      | '25xl'\n      | '26xl'\n      | '27xl'\n      | '28xl'\n      | '29xl'\n      | '30xl'\n      | '31xl'\n      | '32xl'\n      | '33xl'\n      | '34xl'\n      | '35xl'\n      | '36xl'\n      | '37xl'\n      | '38xl'\n      | '39xl'\n      | '40xl'\n      | '41xl'\n      | '42xl'\n      | '43xl'\n      | '44xl'\n      | '45xl'\n      | '46xl'\n      | '47xl'\n      | '48xl'\n      | '49xl'\n      | '50xl'\n      | '51xl'\n      | '52xl'\n      | '53xl'\n      | '54xl'\n      | '55xl'\n      | '56xl'\n      | '57xl'\n      | '58xl'\n      | '59xl'\n      | '60xl'\n      | '61xl'\n      | '62xl'\n      | '63xl'\n      | '64xl'\n      | '65xl'\n      | '66xl'\n      | '67xl'\n      | '68xl'\n      | '69xl'\n      | '70xl'\n      | '71xl'\n      | '72xl'\n      | '73xl'\n      | '74xl'\n      | '75xl'\n      | '76xl'\n      | '77xl'\n      | '78xl'\n      | '79xl'\n      | '80xl'\n      | '81xl'\n      | '82xl'\n      | '83xl'\n      | '84xl'\n      | '85xl'\n      | '86xl'\n      | '87xl'\n      | '88xl'\n      | '89xl'\n      | '90xl'\n      | '91xl'\n      | '92xl'\n      | '93xl'\n      | '94xl'\n      | '95xl'\n      | '96xl'\n      | '97xl'\n      | '98xl'\n      | '99xl'\n      | '100xl'\n    disabled?: boolean\n    loading?: boolean\n    onclick?: () => void\n    class?: string\n    children?: any\n  }\n\n  let {\n    variant = 'primary',\n    size = 'md',\n    disabled = false,\n    loading = false,\n    onclick,\n    class: className = '',\n    children,\n    ...restProps\n  }: Props = $props()\n\n  // Get button classes\n  function getButtonClasses(): string {\n    const baseClasses = 'theme-button'\n    const variantClass = `theme-button-${variant}`\n    const sizeClass = `theme-button-${size}`\n    const stateClasses = [\n      disabled ? 'theme-button-disabled' : '',\n      loading ? 'theme-button-loading' : '',\n    ]\n      .filter(Boolean)\n      .join(' ')\n\n    return [baseClasses, variantClass, sizeClass, stateClasses, className].filter(Boolean).join(' ')\n  }\n\n  // Handle click\n  function handleClick(event: MouseEvent) {\n    if (disabled || loading) {\n      event.preventDefault()\n      return\n    }\n\n    if (onclick) {\n      onclick()\n    }\n  }\n\n  // Get loading spinner\n  function getLoadingSpinner(): string {\n    return `\n\t\t\t<svg class=\"theme-button-spinner\" viewBox=\"0 0 24 24\" fill=\"none\">\n\t\t\t\t<circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-dasharray=\"60\" stroke-dashoffset=\"60\">\n\t\t\t\t\t<animate attributeName=\"stroke-dasharray\" dur=\"1.5s\" values=\"0 60;60 0;0 60\" repeatCount=\"indefinite\"/>\n\t\t\t\t\t<animate attributeName=\"stroke-dashoffset\" dur=\"1.5s\" values=\"0;-60;-60\" repeatCount=\"indefinite\"/>\n\t\t\t\t</circle>\n\t\t\t</svg>\n\t\t`\n  }\n</script>\n\n<button\n  type=\"button\"\n  class={getButtonClasses()}\n  onclick={handleClick}\n  disabled={disabled || loading}\n  {...restProps}\n>\n  {#if loading}\n    <span class=\"theme-button-spinner-container\">\n      {@html getLoadingSpinner()}\n    </span>\n  {/if}\n\n  <span class=\"theme-button-content\">\n    {@render children?.()}\n  </span>\n</button>\n\n<style>\n  .theme-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    border: none;\n    border-radius: 8px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .theme-button:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px var(--color-primary);\n  }\n\n  .theme-button:disabled {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n\n  /* Variants */\n  .theme-button-primary {\n    background: var(--color-button-primary);\n    color: white;\n  }\n\n  .theme-button-primary:hover:not(:disabled) {\n    background: var(--color-button-primary-hover);\n  }\n\n  .theme-button-secondary {\n    background: var(--color-button-secondary);\n    color: white;\n  }\n\n  .theme-button-secondary:hover:not(:disabled) {\n    background: var(--color-button-secondary-hover);\n  }\n\n  .theme-button-success {\n    background: var(--color-button-success);\n    color: white;\n  }\n\n  .theme-button-success:hover:not(:disabled) {\n    background: var(--color-button-success-hover);\n  }\n\n  .theme-button-warning {\n    background: var(--color-button-warning);\n    color: #212529;\n  }\n\n  .theme-button-warning:hover:not(:disabled) {\n    background: var(--color-button-warning-hover);\n  }\n\n  .theme-button-error {\n    background: var(--color-button-error);\n    color: white;\n  }\n\n  .theme-button-error:hover:not(:disabled) {\n    background: var(--color-button-error-hover);\n  }\n\n  .theme-button-info {\n    background: var(--color-button-info);\n    color: white;\n  }\n\n  .theme-button-info:hover:not(:disabled) {\n    background: var(--color-button-info-hover);\n  }\n\n  .theme-button-ghost {\n    background: var(--color-button-ghost);\n    color: var(--color-button-ghost-text);\n    border: 1px solid var(--color-button-ghost-border);\n  }\n\n  .theme-button-ghost:hover:not(:disabled) {\n    background: var(--color-button-ghost-hover);\n    color: var(--color-button-ghost-text-hover);\n    border-color: var(--color-button-ghost-border-hover);\n  }\n\n  /* Sizes */\n  .theme-button-sm {\n    padding: 8px 12px;\n    font-size: 12px;\n    min-height: 32px;\n  }\n\n  .theme-button-md {\n    padding: 10px 16px;\n    font-size: 14px;\n    min-height: 40px;\n  }\n\n  .theme-button-lg {\n    padding: 12px 20px;\n    font-size: 16px;\n    min-height: 48px;\n  }\n\n  .theme-button-xl {\n    padding: 14px 24px;\n    font-size: 18px;\n    min-height: 56px;\n  }\n\n  .theme-button-2xl {\n    padding: 16px 28px;\n    font-size: 20px;\n    min-height: 64px;\n  }\n\n  .theme-button-3xl {\n    padding: 18px 32px;\n    font-size: 22px;\n    min-height: 72px;\n  }\n\n  .theme-button-4xl {\n    padding: 20px 36px;\n    font-size: 24px;\n    min-height: 80px;\n  }\n\n  .theme-button-5xl {\n    padding: 22px 40px;\n    font-size: 26px;\n    min-height: 88px;\n  }\n\n  .theme-button-6xl {\n    padding: 24px 44px;\n    font-size: 28px;\n    min-height: 96px;\n  }\n\n  .theme-button-7xl {\n    padding: 26px 48px;\n    font-size: 30px;\n    min-height: 104px;\n  }\n\n  .theme-button-8xl {\n    padding: 28px 52px;\n    font-size: 32px;\n    min-height: 112px;\n  }\n\n  .theme-button-9xl {\n    padding: 30px 56px;\n    font-size: 34px;\n    min-height: 120px;\n  }\n\n  .theme-button-10xl {\n    padding: 32px 60px;\n    font-size: 36px;\n    min-height: 128px;\n  }\n\n  .theme-button-11xl {\n    padding: 34px 64px;\n    font-size: 38px;\n    min-height: 136px;\n  }\n\n  .theme-button-12xl {\n    padding: 36px 68px;\n    font-size: 40px;\n    min-height: 144px;\n  }\n\n  .theme-button-13xl {\n    padding: 38px 72px;\n    font-size: 42px;\n    min-height: 152px;\n  }\n\n  .theme-button-14xl {\n    padding: 40px 76px;\n    font-size: 44px;\n    min-height: 160px;\n  }\n\n  .theme-button-15xl {\n    padding: 42px 80px;\n    font-size: 46px;\n    min-height: 168px;\n  }\n\n  .theme-button-16xl {\n    padding: 44px 84px;\n    font-size: 48px;\n    min-height: 176px;\n  }\n\n  .theme-button-17xl {\n    padding: 46px 88px;\n    font-size: 50px;\n    min-height: 184px;\n  }\n\n  .theme-button-18xl {\n    padding: 48px 92px;\n    font-size: 52px;\n    min-height: 192px;\n  }\n\n  .theme-button-19xl {\n    padding: 50px 96px;\n    font-size: 54px;\n    min-height: 200px;\n  }\n\n  .theme-button-20xl {\n    padding: 52px 100px;\n    font-size: 56px;\n    min-height: 208px;\n  }\n\n  .theme-button-21xl {\n    padding: 54px 104px;\n    font-size: 58px;\n    min-height: 216px;\n  }\n\n  .theme-button-22xl {\n    padding: 56px 108px;\n    font-size: 60px;\n    min-height: 224px;\n  }\n\n  .theme-button-23xl {\n    padding: 58px 112px;\n    font-size: 62px;\n    min-height: 232px;\n  }\n\n  .theme-button-24xl {\n    padding: 60px 116px;\n    font-size: 64px;\n    min-height: 240px;\n  }\n\n  .theme-button-25xl {\n    padding: 62px 120px;\n    font-size: 66px;\n    min-height: 248px;\n  }\n\n  .theme-button-26xl {\n    padding: 64px 124px;\n    font-size: 68px;\n    min-height: 256px;\n  }\n\n  .theme-button-27xl {\n    padding: 66px 128px;\n    font-size: 70px;\n    min-height: 264px;\n  }\n\n  .theme-button-28xl {\n    padding: 68px 132px;\n    font-size: 72px;\n    min-height: 272px;\n  }\n\n  .theme-button-29xl {\n    padding: 70px 136px;\n    font-size: 74px;\n    min-height: 280px;\n  }\n\n  .theme-button-30xl {\n    padding: 72px 140px;\n    font-size: 76px;\n    min-height: 288px;\n  }\n\n  .theme-button-31xl {\n    padding: 74px 144px;\n    font-size: 78px;\n    min-height: 296px;\n  }\n\n  .theme-button-32xl {\n    padding: 76px 148px;\n    font-size: 80px;\n    min-height: 304px;\n  }\n\n  .theme-button-33xl {\n    padding: 78px 152px;\n    font-size: 82px;\n    min-height: 312px;\n  }\n\n  .theme-button-34xl {\n    padding: 80px 156px;\n    font-size: 84px;\n    min-height: 320px;\n  }\n\n  .theme-button-35xl {\n    padding: 82px 160px;\n    font-size: 86px;\n    min-height: 328px;\n  }\n\n  .theme-button-36xl {\n    padding: 84px 164px;\n    font-size: 88px;\n    min-height: 336px;\n  }\n\n  .theme-button-37xl {\n    padding: 86px 168px;\n    font-size: 90px;\n    min-height: 344px;\n  }\n\n  .theme-button-38xl {\n    padding: 88px 172px;\n    font-size: 92px;\n    min-height: 352px;\n  }\n\n  .theme-button-39xl {\n    padding: 90px 176px;\n    font-size: 94px;\n    min-height: 360px;\n  }\n\n  .theme-button-40xl {\n    padding: 92px 180px;\n    font-size: 96px;\n    min-height: 368px;\n  }\n\n  .theme-button-41xl {\n    padding: 94px 184px;\n    font-size: 98px;\n    min-height: 376px;\n  }\n\n  .theme-button-42xl {\n    padding: 96px 188px;\n    font-size: 100px;\n    min-height: 384px;\n  }\n\n  .theme-button-43xl {\n    padding: 98px 192px;\n    font-size: 102px;\n    min-height: 392px;\n  }\n\n  .theme-button-44xl {\n    padding: 100px 196px;\n    font-size: 104px;\n    min-height: 400px;\n  }\n\n  .theme-button-45xl {\n    padding: 102px 200px;\n    font-size: 106px;\n    min-height: 408px;\n  }\n\n  .theme-button-46xl {\n    padding: 104px 204px;\n    font-size: 108px;\n    min-height: 416px;\n  }\n\n  .theme-button-47xl {\n    padding: 106px 208px;\n    font-size: 110px;\n    min-height: 424px;\n  }\n\n  .theme-button-48xl {\n    padding: 108px 212px;\n    font-size: 112px;\n    min-height: 432px;\n  }\n\n  .theme-button-49xl {\n    padding: 110px 216px;\n    font-size: 114px;\n    min-height: 440px;\n  }\n\n  .theme-button-50xl {\n    padding: 112px 220px;\n    font-size: 116px;\n    min-height: 448px;\n  }\n\n  .theme-button-51xl {\n    padding: 114px 224px;\n    font-size: 118px;\n    min-height: 456px;\n  }\n\n  .theme-button-52xl {\n    padding: 116px 228px;\n    font-size: 120px;\n    min-height: 464px;\n  }\n\n  .theme-button-53xl {\n    padding: 118px 232px;\n    font-size: 122px;\n    min-height: 472px;\n  }\n\n  .theme-button-54xl {\n    padding: 120px 236px;\n    font-size: 124px;\n    min-height: 480px;\n  }\n\n  .theme-button-55xl {\n    padding: 122px 240px;\n    font-size: 126px;\n    min-height: 488px;\n  }\n\n  .theme-button-56xl {\n    padding: 124px 244px;\n    font-size: 128px;\n    min-height: 496px;\n  }\n\n  .theme-button-57xl {\n    padding: 126px 248px;\n    font-size: 130px;\n    min-height: 504px;\n  }\n\n  .theme-button-58xl {\n    padding: 128px 252px;\n    font-size: 132px;\n    min-height: 512px;\n  }\n\n  .theme-button-59xl {\n    padding: 130px 256px;\n    font-size: 134px;\n    min-height: 520px;\n  }\n\n  .theme-button-60xl {\n    padding: 132px 260px;\n    font-size: 136px;\n    min-height: 528px;\n  }\n\n  .theme-button-61xl {\n    padding: 134px 264px;\n    font-size: 138px;\n    min-height: 536px;\n  }\n\n  .theme-button-62xl {\n    padding: 136px 268px;\n    font-size: 140px;\n    min-height: 544px;\n  }\n\n  .theme-button-63xl {\n    padding: 138px 272px;\n    font-size: 142px;\n    min-height: 552px;\n  }\n\n  .theme-button-64xl {\n    padding: 140px 276px;\n    font-size: 144px;\n    min-height: 560px;\n  }\n\n  .theme-button-65xl {\n    padding: 142px 280px;\n    font-size: 146px;\n    min-height: 568px;\n  }\n\n  .theme-button-66xl {\n    padding: 144px 284px;\n    font-size: 148px;\n    min-height: 576px;\n  }\n\n  .theme-button-67xl {\n    padding: 146px 288px;\n    font-size: 150px;\n    min-height: 584px;\n  }\n\n  .theme-button-68xl {\n    padding: 148px 292px;\n    font-size: 152px;\n    min-height: 592px;\n  }\n\n  .theme-button-69xl {\n    padding: 150px 296px;\n    font-size: 154px;\n    min-height: 600px;\n  }\n\n  .theme-button-70xl {\n    padding: 152px 300px;\n    font-size: 156px;\n    min-height: 608px;\n  }\n\n  .theme-button-71xl {\n    padding: 154px 304px;\n    font-size: 158px;\n    min-height: 616px;\n  }\n\n  .theme-button-72xl {\n    padding: 156px 308px;\n    font-size: 160px;\n    min-height: 624px;\n  }\n\n  .theme-button-73xl {\n    padding: 158px 312px;\n    font-size: 162px;\n    min-height: 632px;\n  }\n\n  .theme-button-74xl {\n    padding: 160px 316px;\n    font-size: 164px;\n    min-height: 640px;\n  }\n\n  .theme-button-75xl {\n    padding: 162px 320px;\n    font-size: 166px;\n    min-height: 648px;\n  }\n\n  .theme-button-76xl {\n    padding: 164px 324px;\n    font-size: 168px;\n    min-height: 656px;\n  }\n\n  .theme-button-77xl {\n    padding: 166px 328px;\n    font-size: 170px;\n    min-height: 664px;\n  }\n\n  .theme-button-78xl {\n    padding: 168px 332px;\n    font-size: 172px;\n    min-height: 672px;\n  }\n\n  .theme-button-79xl {\n    padding: 170px 336px;\n    font-size: 174px;\n    min-height: 680px;\n  }\n\n  .theme-button-80xl {\n    padding: 172px 340px;\n    font-size: 176px;\n    min-height: 688px;\n  }\n\n  .theme-button-81xl {\n    padding: 174px 344px;\n    font-size: 178px;\n    min-height: 696px;\n  }\n\n  .theme-button-82xl {\n    padding: 176px 348px;\n    font-size: 180px;\n    min-height: 704px;\n  }\n\n  .theme-button-83xl {\n    padding: 178px 352px;\n    font-size: 182px;\n    min-height: 712px;\n  }\n\n  .theme-button-84xl {\n    padding: 180px 356px;\n    font-size: 184px;\n    min-height: 720px;\n  }\n\n  .theme-button-85xl {\n    padding: 182px 360px;\n    font-size: 186px;\n    min-height: 728px;\n  }\n\n  .theme-button-86xl {\n    padding: 184px 364px;\n    font-size: 188px;\n    min-height: 736px;\n  }\n\n  .theme-button-87xl {\n    padding: 186px 368px;\n    font-size: 190px;\n    min-height: 744px;\n  }\n\n  .theme-button-88xl {\n    padding: 188px 372px;\n    font-size: 192px;\n    min-height: 752px;\n  }\n\n  .theme-button-89xl {\n    padding: 190px 376px;\n    font-size: 194px;\n    min-height: 760px;\n  }\n\n  .theme-button-90xl {\n    padding: 192px 380px;\n    font-size: 196px;\n    min-height: 768px;\n  }\n\n  .theme-button-91xl {\n    padding: 194px 384px;\n    font-size: 198px;\n    min-height: 776px;\n  }\n\n  .theme-button-92xl {\n    padding: 196px 388px;\n    font-size: 200px;\n    min-height: 784px;\n  }\n\n  .theme-button-93xl {\n    padding: 198px 392px;\n    font-size: 202px;\n    min-height: 792px;\n  }\n\n  .theme-button-94xl {\n    padding: 200px 396px;\n    font-size: 204px;\n    min-height: 800px;\n  }\n\n  .theme-button-95xl {\n    padding: 202px 400px;\n    font-size: 206px;\n    min-height: 808px;\n  }\n\n  .theme-button-96xl {\n    padding: 204px 404px;\n    font-size: 208px;\n    min-height: 816px;\n  }\n\n  .theme-button-97xl {\n    padding: 206px 408px;\n    font-size: 210px;\n    min-height: 824px;\n  }\n\n  .theme-button-98xl {\n    padding: 208px 412px;\n    font-size: 212px;\n    min-height: 832px;\n  }\n\n  .theme-button-99xl {\n    padding: 210px 416px;\n    font-size: 214px;\n    min-height: 840px;\n  }\n\n  .theme-button-100xl {\n    padding: 212px 420px;\n    font-size: 216px;\n    min-height: 848px;\n  }\n\n  /* Loading state */\n  .theme-button-loading {\n    cursor: wait;\n  }\n\n  .theme-button-spinner-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .theme-button-spinner {\n    width: 16px;\n    height: 16px;\n    animation: spin 1s linear infinite;\n  }\n\n  .theme-button-content {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* Responsive design */\n  @media (max-width: 640px) {\n    .theme-button-sm {\n      padding: 6px 10px;\n      font-size: 11px;\n      min-height: 28px;\n    }\n\n    .theme-button-md {\n      padding: 8px 14px;\n      font-size: 13px;\n      min-height: 36px;\n    }\n\n    .theme-button-lg {\n      padding: 10px 18px;\n      font-size: 15px;\n      min-height: 44px;\n    }\n  }\n</style>\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeCard.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeChartPlaceholder.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeDropdown.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeGrid.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeInput.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeModal.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemePageHeader.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeSectionHeader.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeSpacer.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeStatCard.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeTabs.svelte",
    "messages": [
      {
        "ruleId": "svelte/require-optimized-style-attribute",
        "severity": 1,
        "message": "It cannot be optimized because too complex.",
        "line": 195,
        "column": 17,
        "nodeType": "SvelteAttribute",
        "messageId": "complex",
        "endLine": 195,
        "endColumn": 35
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  import { ChevronLeftIcon, ChevronRightIcon } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  interface Tab {\n    id: string\n    label: string\n    icon?: any\n    badge?: string | number\n    disabled?: boolean\n  }\n\n  interface Props {\n    tabs: Tab[]\n    activeTab?: string\n    children?: any\n    class?: string\n    orientation?: 'horizontal' | 'vertical'\n    size?: 'sm' | 'md' | 'lg'\n    variant?: 'default' | 'pills' | 'underline' | 'cards'\n    scrollable?: boolean\n    onTabChange?: (tabId: string) => void\n  }\n\n  let {\n    tabs,\n    activeTab = $bindable(tabs[0]?.id || ''),\n    children,\n    class: className = '',\n    orientation = 'horizontal',\n    size = 'md',\n    variant = 'default',\n    scrollable = false,\n    onTabChange,\n    ...restProps\n  }: Props = $props()\n\n  let currentTab = $state(activeTab)\n  let tabContainer: HTMLDivElement\n  let scrollPosition = $state(0)\n  let canScrollLeft = $state(false)\n  let canScrollRight = $state(false)\n\n  // 탭 변경 핸들러\n  function handleTabChange(tabId: string) {\n    if (tabs.find((tab) => tab.id === tabId)?.disabled) return\n\n    currentTab = tabId\n    onTabChange?.(tabId)\n  }\n\n  // 스크롤 핸들러\n  function handleScroll() {\n    if (!tabContainer) return\n\n    scrollPosition = tabContainer.scrollLeft\n    canScrollLeft = scrollPosition > 0\n    canScrollRight = scrollPosition < tabContainer.scrollWidth - tabContainer.clientWidth\n  }\n\n  // 스크롤 버튼 핸들러\n  function scrollTabs(direction: 'left' | 'right') {\n    if (!tabContainer) return\n\n    const scrollAmount = 200\n    const newPosition =\n      direction === 'left'\n        ? Math.max(0, scrollPosition - scrollAmount)\n        : Math.min(\n            tabContainer.scrollWidth - tabContainer.clientWidth,\n            scrollPosition + scrollAmount,\n          )\n\n    tabContainer.scrollTo({ left: newPosition, behavior: 'smooth' })\n  }\n\n  // 반응형 탭 크기 클래스\n  const getTabSizeClass = () => {\n    const sizeClasses = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2 text-sm',\n      lg: 'px-6 py-3 text-base',\n    }\n    return sizeClasses[size]\n  }\n\n  // 탭 스타일 클래스\n  const getTabClass = (tab: Tab) => {\n    const isActive = currentTab === tab.id\n    const baseClass = `flex items-center gap-2 transition-all duration-200 ${getTabSizeClass()}`\n\n    if (variant === 'pills') {\n      return `${baseClass} rounded-full ${isActive ? 'text-white shadow-sm' : 'hover:opacity-80'}`\n    }\n\n    if (variant === 'underline') {\n      return `${baseClass} border-b-2 ${\n        isActive ? 'border-blue-500 text-blue-600' : 'border-transparent hover:border-gray-300'\n      }`\n    }\n\n    if (variant === 'cards') {\n      return `${baseClass} rounded-lg border ${\n        isActive ? 'border-blue-500 shadow-sm' : 'border-gray-200 hover:border-gray-300'\n      }`\n    }\n\n    // default variant\n    return `${baseClass} ${isActive ? 'text-white' : 'hover:opacity-80'}`\n  }\n\n  // 탭 스타일\n  const getTabStyle = (tab: Tab) => {\n    const isActive = currentTab === tab.id\n\n    if (variant === 'pills') {\n      return isActive\n        ? 'background: var(--color-primary);'\n        : 'color: var(--color-text-secondary); background: transparent;'\n    }\n\n    if (variant === 'underline') {\n      return isActive ? 'color: var(--color-primary);' : 'color: var(--color-text-secondary);'\n    }\n\n    if (variant === 'cards') {\n      return isActive\n        ? 'background: var(--color-surface-elevated); border-color: var(--color-primary);'\n        : 'background: var(--color-surface); border-color: var(--color-border); color: var(--color-text-secondary);'\n    }\n\n    // default variant\n    return isActive\n      ? 'background: var(--color-primary);'\n      : 'color: var(--color-text-secondary); background: transparent;'\n  }\n\n  onMount(() => {\n    if (scrollable && tabContainer) {\n      handleScroll()\n      tabContainer.addEventListener('scroll', handleScroll)\n    }\n  })\n</script>\n\n<div class=\"theme-tabs {orientation === 'vertical' ? 'flex' : 'block'} {className}\" {...restProps}>\n  <!-- 탭 헤더 -->\n  <div class=\"relative {orientation === 'vertical' ? 'flex-shrink-0 w-48' : 'w-full'}\">\n    {#if scrollable && orientation === 'horizontal'}\n      <!-- 스크롤 버튼들 -->\n      {#if canScrollLeft}\n        <button\n          type=\"button\"\n          onclick={() => scrollTabs('left')}\n          class=\"absolute left-0 top-0 z-10 flex items-center justify-center w-8 h-full bg-white/80 hover:bg-white/90 transition-colors\"\n          style:background=\"var(--color-surface)\"\n        >\n          <ChevronLeftIcon size={16} style=\"color: var(--color-text-secondary);\" />\n        </button>\n      {/if}\n\n      {#if canScrollRight}\n        <button\n          type=\"button\"\n          onclick={() => scrollTabs('right')}\n          class=\"absolute right-0 top-0 z-10 flex items-center justify-center w-8 h-full bg-white/80 hover:bg-white/90 transition-colors\"\n          style:background=\"var(--color-surface)\"\n        >\n          <ChevronRightIcon size={16} style=\"color: var(--color-text-secondary);\" />\n        </button>\n      {/if}\n    {/if}\n\n    <!-- 탭 리스트 -->\n    <div\n      bind:this={tabContainer}\n      class=\"flex {orientation === 'vertical' ? 'flex-col' : 'flex-row'} {scrollable\n        ? 'overflow-x-auto scrollbar-hide'\n        : ''}\"\n      class:border-b={variant === 'default'}\n      style:border-color=\"var(--color-border)\"\n      role=\"tablist\"\n    >\n      {#each tabs as tab, i (i)}\n        <button\n          type=\"button\"\n          role=\"tab\"\n          aria-selected={currentTab === tab.id}\n          aria-controls=\"tabpanel-{tab.id}\"\n          disabled={tab.disabled}\n          onclick={() => handleTabChange(tab.id)}\n          class=\"{getTabClass(tab)} {tab.disabled\n            ? 'opacity-50 cursor-not-allowed'\n            : 'cursor-pointer'}\"\n          style={getTabStyle(tab)}\n          style:opacity={tab.disabled ? '0.5' : null}\n        >\n          {#if tab.icon}\n            <tab.icon size={size === 'sm' ? 16 : size === 'lg' ? 20 : 18} />\n          {/if}\n          <span>{tab.label}</span>\n          {#if tab.badge}\n            <span\n              class=\"inline-flex items-center justify-center px-2 py-0.5 text-xs font-medium rounded-full\"\n              style:background=\"var(--color-primary)\"\n              style:color=\"white\"\n            >\n              {tab.badge}\n            </span>\n          {/if}\n        </button>\n      {/each}\n    </div>\n  </div>\n\n  <!-- 탭 콘텐츠 -->\n  <div class=\"flex-1 {orientation === 'vertical' ? 'ml-6' : 'mt-4'}\">\n    {#each tabs as tab, i (i)}\n      <div\n        role=\"tabpanel\"\n        id=\"tabpanel-{tab.id}\"\n        aria-labelledby=\"tab-{tab.id}\"\n        class={currentTab === tab.id ? 'block' : 'hidden'}\n      >\n        {#if children && typeof children === 'function'}\n          {@render children(tab)}\n        {/if}\n      </div>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n\n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n\n  .theme-tabs button[role='tab']:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n  }\n</style>\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/database/connection.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1813, 1816], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1813, 1816], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 116,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 116,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3103, 3106], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3103, 3106], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 117,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 117,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3139, 3142], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3139, 3142], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 202,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 202,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4642, 4645], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4642, 4645], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 236,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 236,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5472, 5475], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5472, 5475], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { config } from 'dotenv'\nimport type { PoolClient, QueryResult } from 'pg'\nimport { Pool } from 'pg'\nimport { logger } from '$lib/utils/logger'\n\n// Load environment variables\nconfig()\n\n// Database connection pool\nlet pool: Pool | null = null\n\n// Database configuration - AWS only\nconst getDbConfig = () => {\n  return {\n    host: process.env.AWS_DB_HOST || 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n    port: parseInt(process.env.AWS_DB_PORT || '5432'),\n    database: process.env.AWS_DB_NAME || 'postgres',\n    user: process.env.AWS_DB_USER || 'postgres',\n    password: process.env.AWS_DB_PASSWORD || 'viahubdev',\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  }\n}\n\nconst dbConfig = {\n  ...getDbConfig(),\n  max: 20, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // Close idle clients after 30 seconds\n  connectionTimeoutMillis: 10000, // Return an error after 10 seconds if connection could not be established\n  acquireTimeoutMillis: 10000, // Return an error after 10 seconds if client could not be acquired from pool\n}\n\n// Initialize database connection pool\nexport function initializeDatabase(): Pool {\n  if (!pool) {\n    pool = new Pool(dbConfig)\n\n    // Handle pool errors\n    pool.on('error', (err) => {\n      logger.error('Unexpected error on idle client', err)\n      process.exit(-1)\n    })\n\n    // Database connection pool initialized\n  }\n\n  return pool\n}\n\n// Get database connection\nexport async function getConnection(): Promise<PoolClient> {\n  if (!pool) {\n    try {\n      initializeDatabase()\n    } catch (error) {\n      logger.error('Failed to initialize database connection:', error)\n      throw error\n    }\n  }\n\n  return await pool!.connect()\n}\n\n// Execute a query with parameters\nexport async function query<T extends Record<string, unknown> = any>(\n  text: string,\n  params?: unknown[],\n): Promise<QueryResult<T>> {\n  const client = await getConnection()\n  try {\n    const result = await client.query<T>(text, params)\n    return result\n  } finally {\n    client.release()\n  }\n}\n\n// Execute a transaction\nexport async function transaction<T>(callback: (client: PoolClient) => Promise<T>): Promise<T> {\n  const client = await getConnection()\n  try {\n    await client.query('BEGIN')\n    const result = await callback(client)\n    await client.query('COMMIT')\n    return result\n  } catch (error) {\n    await client.query('ROLLBACK')\n    throw error\n  } finally {\n    client.release()\n  }\n}\n\n// Close database connection pool\nexport async function closeDatabase(): Promise<void> {\n  if (pool) {\n    await pool.end()\n    pool = null\n    // Database connection pool closed\n  }\n}\n\n// Database health check\nexport async function healthCheck(): Promise<boolean> {\n  try {\n    // Starting database health check\n    const result = await query('SELECT 1 as health')\n    const isHealthy = result.rows[0]?.health === 1\n\n    return isHealthy\n  } catch (error) {\n    logger.error('Database health check failed:', error)\n    logger.error('Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      code: (error as any)?.code,\n      detail: (error as any)?.detail,\n    })\n    return false\n  }\n}\n\n// Database types\nexport interface DatabaseUser {\n  id: string\n  email: string\n  name: string\n  department?: string\n  position?: string\n  role: string\n  is_active: boolean\n  last_login?: Date\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseCompany {\n  id: string\n  name: string\n  type: string\n  industry?: string\n  status: string\n  contact_person?: string\n  email?: string\n  phone?: string\n  address?: string\n  website?: string\n  revenue?: number\n  employees?: number\n  notes?: string\n  tags: unknown[]\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseProject {\n  id: string\n  code: string\n  title: string\n  description?: string\n  sponsor?: string\n  sponsor_type?: string\n  start_date?: Date\n  end_date?: Date\n  manager_id?: string\n  status: string\n  budget_total?: number\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseExpenseItem {\n  id: string\n  project_id: string\n  category_code: string\n  requester_id: string\n  amount: number\n  currency: string\n  description?: string\n  status: string\n  dept_owner?: string\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseEmployee {\n  id: string\n  employee_id: string\n  user_id?: string\n  first_name: string\n  last_name: string\n  email: string\n  phone?: string\n  department?: string\n  position?: string\n  manager_id?: string\n  employment_type?: string\n  hire_date?: Date\n  salary?: number\n  status: string\n  address?: string\n  emergency_contact?: any\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseTransaction {\n  id: string\n  bank_account_id: string\n  category_id: string\n  amount: number\n  type: string\n  description?: string\n  reference?: string\n  date: Date\n  created_by: string\n  created_at: Date\n  updated_at: Date\n}\n\n// Utility functions for common database operations\nexport class DatabaseService {\n  // 쿼리 메서드\n  static async query(text: string, params?: unknown[]) {\n    return await query(text, params)\n  }\n\n  // User operations\n  static async createUser(userData: Partial<DatabaseUser>): Promise<DatabaseUser> {\n    const result = await query<DatabaseUser>(\n      `INSERT INTO users (email, password_hash, name, department, position, role)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6)\n\t\t\t RETURNING *`,\n      [\n        userData.email,\n        (userData as any).password_hash,\n        userData.name,\n        userData.department,\n        userData.position,\n        userData.role,\n      ],\n    )\n    if (!result.rows[0]) {\n      throw new Error('사용자 생성에 실패했습니다.')\n    }\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getUserById(id: string): Promise<DatabaseUser | null> {\n    const result = await query<DatabaseUser>('SELECT * FROM users WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getUserByEmail(email: string): Promise<DatabaseUser | null> {\n    const result = await query<DatabaseUser>('SELECT * FROM users WHERE email = $1', [email])\n    return result.rows[0] || null\n  }\n\n  static async getUsers(filters?: {\n    department?: string\n    role?: string\n    is_active?: boolean\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseUser[]> {\n    let queryText = 'SELECT * FROM users WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.department) {\n      paramCount++\n      queryText += ` AND department = $${paramCount}`\n      params.push(filters.department)\n    }\n\n    if (filters?.role) {\n      paramCount++\n      queryText += ` AND role = $${paramCount}`\n      params.push(filters.role)\n    }\n\n    if (filters?.is_active !== undefined) {\n      paramCount++\n      queryText += ` AND is_active = $${paramCount}`\n      params.push(filters.is_active)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseUser>(queryText, params)\n    return result.rows\n  }\n\n  // Company operations\n  static async createCompany(companyData: Partial<DatabaseCompany>): Promise<DatabaseCompany> {\n    const result = await query<DatabaseCompany>(\n      `INSERT INTO companies (name, type, industry, status, contact_person, email, phone, address, website, revenue, employees, notes, tags)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)\n\t\t\t RETURNING *`,\n      [\n        companyData.name,\n        companyData.type,\n        companyData.industry,\n        companyData.status,\n        companyData.contact_person,\n        companyData.email,\n        companyData.phone,\n        companyData.address,\n        companyData.website,\n        companyData.revenue,\n        companyData.employees,\n        companyData.notes,\n        JSON.stringify(companyData.tags || []),\n      ],\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getCompanyById(id: string): Promise<DatabaseCompany | null> {\n    const result = await query<DatabaseCompany>('SELECT * FROM companies WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getCompanies(filters?: {\n    type?: string\n    status?: string\n    industry?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseCompany[]> {\n    let queryText = 'SELECT * FROM companies WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.type) {\n      paramCount++\n      queryText += ` AND type = $${paramCount}`\n      params.push(filters.type)\n    }\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    if (filters?.industry) {\n      paramCount++\n      queryText += ` AND industry = $${paramCount}`\n      params.push(filters.industry)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseCompany>(queryText, params)\n    return result.rows\n  }\n\n  // Project operations\n  static async createProject(projectData: Partial<DatabaseProject>): Promise<DatabaseProject> {\n    const result = await query<DatabaseProject>(\n      `INSERT INTO projects (code, title, description, sponsor, sponsor_type, start_date, end_date, manager_id, status, budget_total)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n\t\t\t RETURNING *`,\n      [\n        projectData.code,\n        projectData.title,\n        projectData.description,\n        projectData.sponsor,\n        projectData.sponsor_type,\n        projectData.start_date,\n        projectData.end_date,\n        projectData.manager_id,\n        projectData.status,\n        projectData.budget_total,\n      ],\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getProjectById(id: string): Promise<DatabaseProject | null> {\n    const result = await query<DatabaseProject>('SELECT * FROM projects WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getProjects(filters?: {\n    status?: string\n    manager_id?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseProject[]> {\n    let queryText = 'SELECT * FROM projects WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    if (filters?.manager_id) {\n      paramCount++\n      queryText += ` AND manager_id = $${paramCount}`\n      params.push(filters.manager_id)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseProject>(queryText, params)\n    return result.rows\n  }\n\n  // Expense operations\n  static async createExpenseItem(\n    expenseData: Partial<DatabaseExpenseItem>,\n  ): Promise<DatabaseExpenseItem> {\n    const result = await query<DatabaseExpenseItem>(\n      `INSERT INTO expense_items (project_id, category_code, requester_id, amount, currency, description, status, dept_owner)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n\t\t\t RETURNING *`,\n      [\n        expenseData.project_id,\n        expenseData.category_code,\n        expenseData.requester_id,\n        expenseData.amount,\n        expenseData.currency,\n        expenseData.description,\n        expenseData.status,\n        expenseData.dept_owner,\n      ],\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getExpenseItemById(id: string): Promise<DatabaseExpenseItem | null> {\n    const result = await query<DatabaseExpenseItem>('SELECT * FROM expense_items WHERE id = $1', [\n      id,\n    ])\n    return result.rows[0] || null\n  }\n\n  static async getExpenseItems(filters?: {\n    project_id?: string\n    status?: string\n    requester_id?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseExpenseItem[]> {\n    let queryText = 'SELECT * FROM expense_items WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.project_id) {\n      paramCount++\n      queryText += ` AND project_id = $${paramCount}`\n      params.push(filters.project_id)\n    }\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    if (filters?.requester_id) {\n      paramCount++\n      queryText += ` AND requester_id = $${paramCount}`\n      params.push(filters.requester_id)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseExpenseItem>(queryText, params)\n    return result.rows\n  }\n\n  // Employee operations\n  static async createEmployee(employeeData: Partial<DatabaseEmployee>): Promise<DatabaseEmployee> {\n    const result = await query<DatabaseEmployee>(\n      `INSERT INTO employees (employee_id, user_id, first_name, last_name, email, phone, department, position, manager_id, employment_type, hire_date, salary, status, address, emergency_contact)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n\t\t\t RETURNING *`,\n      [\n        employeeData.employee_id,\n        employeeData.user_id,\n        employeeData.first_name,\n        employeeData.last_name,\n        employeeData.email,\n        employeeData.phone,\n        employeeData.department,\n        employeeData.position,\n        employeeData.manager_id,\n        employeeData.employment_type,\n        employeeData.hire_date,\n        employeeData.salary,\n        employeeData.status,\n        employeeData.address,\n        JSON.stringify(employeeData.emergency_contact || {}),\n      ],\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getEmployeeById(id: string): Promise<DatabaseEmployee | null> {\n    const result = await query<DatabaseEmployee>('SELECT * FROM employees WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getEmployees(filters?: {\n    department?: string\n    status?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseEmployee[]> {\n    let queryText = 'SELECT * FROM employees WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.department) {\n      paramCount++\n      queryText += ` AND department = $${paramCount}`\n      params.push(filters.department)\n    }\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseEmployee>(queryText, params)\n    return result.rows\n  }\n\n  // Transaction operations\n  static async createTransaction(\n    transactionData: Partial<DatabaseTransaction>,\n  ): Promise<DatabaseTransaction> {\n    const result = await query<DatabaseTransaction>(\n      `INSERT INTO transactions (bank_account_id, category_id, amount, type, description, reference, date, created_by)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n\t\t\t RETURNING *`,\n      [\n        transactionData.bank_account_id,\n        transactionData.category_id,\n        transactionData.amount,\n        transactionData.type,\n        transactionData.description,\n        transactionData.reference,\n        transactionData.date,\n        transactionData.created_by,\n      ],\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getTransactionById(id: string): Promise<DatabaseTransaction | null> {\n    const result = await query<DatabaseTransaction>('SELECT * FROM transactions WHERE id = $1', [\n      id,\n    ])\n    return result.rows[0] || null\n  }\n\n  static async getTransactions(filters?: {\n    bank_account_id?: string\n    category_id?: string\n    type?: string\n    date_from?: Date\n    date_to?: Date\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseTransaction[]> {\n    let queryText = 'SELECT * FROM transactions WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.bank_account_id) {\n      paramCount++\n      queryText += ` AND bank_account_id = $${paramCount}`\n      params.push(filters.bank_account_id)\n    }\n\n    if (filters?.category_id) {\n      paramCount++\n      queryText += ` AND category_id = $${paramCount}`\n      params.push(filters.category_id)\n    }\n\n    if (filters?.type) {\n      paramCount++\n      queryText += ` AND type = $${paramCount}`\n      params.push(filters.type)\n    }\n\n    if (filters?.date_from) {\n      paramCount++\n      queryText += ` AND date >= $${paramCount}`\n      params.push(filters.date_from)\n    }\n\n    if (filters?.date_to) {\n      paramCount++\n      queryText += ` AND date <= $${paramCount}`\n      params.push(filters.date_to)\n    }\n\n    queryText += ' ORDER BY date DESC, created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseTransaction>(queryText, params)\n    return result.rows\n  }\n}\n\n// Database will be initialized on first connection\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/attendance.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 303,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 303,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6921, 6924], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6921, 6924], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\n\n// 근태 기록\nexport interface AttendanceRecord {\n  id: string\n  employeeId: string\n  date: string\n  checkIn?: string // HH:MM 형식\n  checkOut?: string // HH:MM 형식\n  workHours?: number // 실제 근무시간 (시간)\n  overtimeHours?: number // 연장근무시간 (시간)\n  status:\n    | 'present'\n    | 'absent'\n    | 'late'\n    | 'early-leave'\n    | 'half-day'\n    | 'vacation'\n    | 'sick-leave'\n    | 'business-trip'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 휴가 유형\nexport interface LeaveType {\n  id: string\n  name: string\n  code: string // 'annual', 'sick', 'personal', 'maternity', 'paternity', 'bereavement'\n  description: string\n  maxDaysPerYear?: number\n  requiresApproval: boolean\n  requiresDocument: boolean\n  canCarryOver: boolean\n  maxCarryOverDays?: number\n  isPaid: boolean\n  color: string // UI 표시용 색상\n  createdAt: string\n}\n\n// 휴가 신청\nexport interface LeaveRequest {\n  id: string\n  employeeId: string\n  leaveTypeId: string\n  startDate: string\n  endDate: string\n  days: number\n  reason: string\n  status: 'pending' | 'approved' | 'rejected' | 'cancelled'\n  requestedAt: string\n  approvedBy?: string\n  approvedAt?: string\n  rejectionReason?: string\n  documentUrl?: string\n  notes?: string\n}\n\n// 휴가 잔여일수\nexport interface LeaveBalance {\n  id: string\n  employeeId: string\n  year: number\n  leaveTypeId: string\n  totalDays: number // 총 부여일수\n  usedDays: number // 사용일수\n  remainingDays: number // 잔여일수\n  carriedOverDays: number // 이월일수\n  createdAt: string\n  updatedAt: string\n}\n\n// 교대/스케줄\nexport interface WorkSchedule {\n  id: string\n  employeeId: string\n  date: string\n  shiftType: 'day' | 'night' | 'evening' | 'flexible'\n  startTime: string // HH:MM\n  endTime: string // HH:MM\n  workHours: number\n  notes?: string\n  createdAt: string\n}\n\n// 초기 데이터\nconst initialLeaveTypes: LeaveType[] = [\n  {\n    id: 'leave-1',\n    name: '연차휴가',\n    code: 'annual',\n    description: '연간 유급휴가',\n    maxDaysPerYear: 15,\n    requiresApproval: true,\n    requiresDocument: false,\n    canCarryOver: true,\n    maxCarryOverDays: 5,\n    isPaid: true,\n    color: '#3B82F6',\n    createdAt: '2023-01-01T00:00:00Z',\n  },\n  {\n    id: 'leave-2',\n    name: '병가',\n    code: 'sick',\n    description: '질병으로 인한 휴가',\n    maxDaysPerYear: 10,\n    requiresApproval: true,\n    requiresDocument: true,\n    canCarryOver: false,\n    isPaid: true,\n    color: '#EF4444',\n    createdAt: '2023-01-01T00:00:00Z',\n  },\n  {\n    id: 'leave-3',\n    name: '개인사정휴가',\n    code: 'personal',\n    description: '개인적인 사정으로 인한 휴가',\n    maxDaysPerYear: 5,\n    requiresApproval: true,\n    requiresDocument: false,\n    canCarryOver: false,\n    isPaid: false,\n    color: '#F59E0B',\n    createdAt: '2023-01-01T00:00:00Z',\n  },\n  {\n    id: 'leave-4',\n    name: '출산휴가',\n    code: 'maternity',\n    description: '출산으로 인한 휴가',\n    maxDaysPerYear: 90,\n    requiresApproval: true,\n    requiresDocument: true,\n    canCarryOver: false,\n    isPaid: true,\n    color: '#EC4899',\n    createdAt: '2023-01-01T00:00:00Z',\n  },\n  {\n    id: 'leave-5',\n    name: '경조사휴가',\n    code: 'bereavement',\n    description: '경조사로 인한 휴가',\n    maxDaysPerYear: 3,\n    requiresApproval: true,\n    requiresDocument: false,\n    canCarryOver: false,\n    isPaid: true,\n    color: '#6B7280',\n    createdAt: '2023-01-01T00:00:00Z',\n  },\n]\n\nconst initialAttendanceRecords: AttendanceRecord[] = [\n  {\n    id: 'attendance-1',\n    employeeId: 'emp-1',\n    date: '2024-01-15',\n    checkIn: '09:00',\n    checkOut: '18:00',\n    workHours: 8,\n    overtimeHours: 0,\n    status: 'present',\n    createdAt: '2024-01-15T09:00:00Z',\n    updatedAt: '2024-01-15T18:00:00Z',\n  },\n  {\n    id: 'attendance-2',\n    employeeId: 'emp-1',\n    date: '2024-01-16',\n    checkIn: '09:15',\n    checkOut: '18:30',\n    workHours: 8.25,\n    overtimeHours: 0.25,\n    status: 'late',\n    notes: '지각 15분',\n    createdAt: '2024-01-16T09:15:00Z',\n    updatedAt: '2024-01-16T18:30:00Z',\n  },\n  {\n    id: 'attendance-3',\n    employeeId: 'emp-2',\n    date: '2024-01-15',\n    checkIn: '09:00',\n    checkOut: '17:30',\n    workHours: 7.5,\n    overtimeHours: 0,\n    status: 'early-leave',\n    notes: '조퇴 30분',\n    createdAt: '2024-01-15T09:00:00Z',\n    updatedAt: '2024-01-15T17:30:00Z',\n  },\n]\n\nconst initialLeaveRequests: LeaveRequest[] = [\n  {\n    id: 'leave-req-1',\n    employeeId: 'emp-1',\n    leaveTypeId: 'leave-1',\n    startDate: '2024-02-01',\n    endDate: '2024-02-03',\n    days: 3,\n    reason: '가족 여행',\n    status: 'approved',\n    requestedAt: '2024-01-20T10:00:00Z',\n    approvedBy: 'emp-3',\n    approvedAt: '2024-01-21T14:00:00Z',\n  },\n  {\n    id: 'leave-req-2',\n    employeeId: 'emp-2',\n    leaveTypeId: 'leave-2',\n    startDate: '2024-01-25',\n    endDate: '2024-01-25',\n    days: 1,\n    reason: '감기로 인한 휴가',\n    status: 'pending',\n    requestedAt: '2024-01-24T16:00:00Z',\n  },\n]\n\nconst initialLeaveBalances: LeaveBalance[] = [\n  {\n    id: 'balance-1',\n    employeeId: 'emp-1',\n    year: 2024,\n    leaveTypeId: 'leave-1',\n    totalDays: 15,\n    usedDays: 3,\n    remainingDays: 12,\n    carriedOverDays: 2,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-20T00:00:00Z',\n  },\n  {\n    id: 'balance-2',\n    employeeId: 'emp-2',\n    year: 2024,\n    leaveTypeId: 'leave-1',\n    totalDays: 15,\n    usedDays: 5,\n    remainingDays: 10,\n    carriedOverDays: 0,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-15T00:00:00Z',\n  },\n]\n\nconst initialWorkSchedules: WorkSchedule[] = [\n  {\n    id: 'schedule-1',\n    employeeId: 'emp-1',\n    date: '2024-01-15',\n    shiftType: 'day',\n    startTime: '09:00',\n    endTime: '18:00',\n    workHours: 8,\n    createdAt: '2024-01-15T00:00:00Z',\n  },\n]\n\n// 스토어 생성\nexport const leaveTypes = writable<LeaveType[]>(initialLeaveTypes)\nexport const attendanceRecords = writable<AttendanceRecord[]>(initialAttendanceRecords)\nexport const leaveRequests = writable<LeaveRequest[]>(initialLeaveRequests)\nexport const leaveBalances = writable<LeaveBalance[]>(initialLeaveBalances)\nexport const workSchedules = writable<WorkSchedule[]>(initialWorkSchedules)\n\n// 근태 기록 관리 함수들\nexport function addAttendanceRecord(\n  record: Omit<AttendanceRecord, 'id' | 'createdAt' | 'updatedAt'>,\n) {\n  const newRecord: AttendanceRecord = {\n    ...record,\n    id: `attendance-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n  attendanceRecords.update((current) => [...current, newRecord])\n}\n\nexport function updateAttendanceRecord(id: string, updates: Partial<AttendanceRecord>) {\n  attendanceRecords.update((current) =>\n    current.map((record) =>\n      record.id === id ? { ...record, ...updates, updatedAt: new Date().toISOString() } : record,\n    ),\n  )\n}\n\nexport function checkIn(employeeId: string, time?: string) {\n  const now =\n    time ||\n    new Date().toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    })\n  const today = new Date().toISOString().split('T')[0]\n\n  // 오늘의 근태 기록이 있는지 확인\n  let existingRecord: any = null\n  attendanceRecords.subscribe((records) => {\n    existingRecord = records.find(\n      (record) => record.employeeId === employeeId && record.date === today,\n    )\n  })\n\n  if (existingRecord) {\n    // 기존 기록 업데이트\n    attendanceRecords.update((current) =>\n      current.map((record) =>\n        record.employeeId === employeeId && record.date === today\n          ? {\n              ...record,\n              checkIn: now,\n              status: 'present',\n              updatedAt: new Date().toISOString(),\n            }\n          : record,\n      ),\n    )\n  } else {\n    // 새 기록 생성\n    addAttendanceRecord({\n      employeeId: employeeId || '',\n      date: today,\n      checkIn: now,\n      status: 'present',\n    })\n  }\n}\n\nexport function checkOut(employeeId: string, time?: string) {\n  const now =\n    time ||\n    new Date().toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    })\n  const today = new Date().toISOString().split('T')[0]\n\n  attendanceRecords.update((current) =>\n    current.map((record) => {\n      if (record.employeeId === employeeId && record.date === today) {\n        const checkInTime = record.checkIn\n        if (checkInTime) {\n          const workHours = calculateWorkHours(checkInTime, now)\n          const overtimeHours = Math.max(0, workHours - 8)\n\n          return {\n            ...record,\n            checkOut: now,\n            workHours,\n            overtimeHours,\n            updatedAt: new Date().toISOString(),\n          }\n        }\n      }\n      return record\n    }),\n  )\n}\n\n// 휴가 유형 관리 함수들\nexport function addLeaveType(leaveType: Omit<LeaveType, 'id' | 'createdAt'>) {\n  const newLeaveType: LeaveType = {\n    ...leaveType,\n    id: `leave-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n  }\n  leaveTypes.update((current) => [...current, newLeaveType])\n}\n\nexport function updateLeaveType(id: string, updates: Partial<LeaveType>) {\n  leaveTypes.update((current) =>\n    current.map((leaveType) => (leaveType.id === id ? { ...leaveType, ...updates } : leaveType)),\n  )\n}\n\n// 휴가 신청 관리 함수들\nexport function requestLeave(request: Omit<LeaveRequest, 'id' | 'requestedAt'>) {\n  const newRequest: LeaveRequest = {\n    ...request,\n    id: `leave-req-${Date.now()}`,\n    requestedAt: new Date().toISOString(),\n  }\n  leaveRequests.update((current) => [...current, newRequest])\n}\n\nexport function approveLeaveRequest(id: string, approvedBy: string) {\n  leaveRequests.update((current) =>\n    current.map((request) =>\n      request.id === id\n        ? {\n            ...request,\n            status: 'approved',\n            approvedBy,\n            approvedAt: new Date().toISOString(),\n          }\n        : request,\n    ),\n  )\n}\n\nexport function rejectLeaveRequest(id: string, rejectionReason: string) {\n  leaveRequests.update((current) =>\n    current.map((request) =>\n      request.id === id\n        ? {\n            ...request,\n            status: 'rejected',\n            rejectionReason,\n          }\n        : request,\n    ),\n  )\n}\n\n// 휴가 잔여일수 관리 함수들\nexport function updateLeaveBalance(\n  employeeId: string,\n  leaveTypeId: string,\n  year: number,\n  usedDays: number,\n) {\n  leaveBalances.update((current) =>\n    current.map((balance) => {\n      if (\n        balance.employeeId === employeeId &&\n        balance.leaveTypeId === leaveTypeId &&\n        balance.year === year\n      ) {\n        const newUsedDays = balance.usedDays + usedDays\n        const newRemainingDays = balance.totalDays - newUsedDays\n\n        return {\n          ...balance,\n          usedDays: newUsedDays,\n          remainingDays: newRemainingDays,\n          updatedAt: new Date().toISOString(),\n        }\n      }\n      return balance\n    }),\n  )\n}\n\nexport function initializeLeaveBalance(employeeId: string, year: number) {\n  const currentYear = new Date().getFullYear()\n  if (year !== currentYear) return\n\n  leaveTypes.subscribe((types) => {\n    leaveBalances.update((current) => {\n      const existingBalances = current.filter(\n        (balance) => balance.employeeId === employeeId && balance.year === year,\n      )\n\n      const newBalances = types\n        .filter((type) => !existingBalances.some((balance) => balance.leaveTypeId === type.id))\n        .map((type) => ({\n          id: `balance-${Date.now()}-${Math.random()}`,\n          employeeId,\n          year,\n          leaveTypeId: type.id,\n          totalDays: type.maxDaysPerYear || 0,\n          usedDays: 0,\n          remainingDays: type.maxDaysPerYear || 0,\n          carriedOverDays: 0,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString(),\n        }))\n\n      return [...current, ...newBalances]\n    })\n  })\n}\n\n// 교대/스케줄 관리 함수들\nexport function addWorkSchedule(schedule: Omit<WorkSchedule, 'id' | 'createdAt'>) {\n  const newSchedule: WorkSchedule = {\n    ...schedule,\n    id: `schedule-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n  }\n  workSchedules.update((current) => [...current, newSchedule])\n}\n\n// 유틸리티 함수들\nexport function calculateWorkHours(checkIn: string, checkOut: string): number {\n  const [checkInHour, checkInMinute] = checkIn.split(':').map(Number)\n  const [checkOutHour, checkOutMinute] = checkOut.split(':').map(Number)\n\n  const checkInMinutes = (checkInHour || 0) * 60 + (checkInMinute || 0)\n  const checkOutMinutes = (checkOutHour || 0) * 60 + (checkOutMinute || 0)\n\n  const workMinutes = checkOutMinutes - checkInMinutes\n  return Math.round((workMinutes / 60) * 100) / 100 // 소수점 둘째 자리까지\n}\n\nexport function getAttendanceByEmployee(\n  employeeId: string,\n  records: AttendanceRecord[],\n): AttendanceRecord[] {\n  return records.filter((record) => record.employeeId === employeeId)\n}\n\nexport function getAttendanceByDateRange(\n  startDate: string,\n  endDate: string,\n  records: AttendanceRecord[],\n): AttendanceRecord[] {\n  return records.filter((record) => record.date >= startDate && record.date <= endDate)\n}\n\nexport function getLeaveRequestsByEmployee(\n  employeeId: string,\n  requests: LeaveRequest[],\n): LeaveRequest[] {\n  return requests.filter((request) => request.employeeId === employeeId)\n}\n\nexport function getLeaveBalanceByEmployee(\n  employeeId: string,\n  balances: LeaveBalance[],\n): LeaveBalance[] {\n  return balances.filter((balance) => balance.employeeId === employeeId)\n}\n\nexport function calculateMonthlyAttendance(\n  employeeId: string,\n  year: number,\n  month: number,\n  records: AttendanceRecord[],\n): {\n  totalDays: number\n  presentDays: number\n  absentDays: number\n  lateDays: number\n  totalWorkHours: number\n  totalOvertimeHours: number\n} {\n  const monthRecords = records.filter((record) => {\n    const recordDate = new Date(record.date)\n    return (\n      record.employeeId === employeeId &&\n      recordDate.getFullYear() === year &&\n      recordDate.getMonth() === month - 1\n    )\n  })\n\n  const totalDays = monthRecords.length\n  const presentDays = monthRecords.filter((record) => record.status === 'present').length\n  const absentDays = monthRecords.filter((record) => record.status === 'absent').length\n  const lateDays = monthRecords.filter((record) => record.status === 'late').length\n  const totalWorkHours = monthRecords.reduce((sum, record) => sum + (record.workHours || 0), 0)\n  const totalOvertimeHours = monthRecords.reduce(\n    (sum, record) => sum + (record.overtimeHours || 0),\n    0,\n  )\n\n  return {\n    totalDays,\n    presentDays,\n    absentDays,\n    lateDays,\n    totalWorkHours,\n    totalOvertimeHours,\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/auth.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/benefits.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/budget.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/funds.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/hr.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/hr/employee-store.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/hr/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/notifications.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 163,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 163,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4222, 4225], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4222, 4225], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 164,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 164,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4283, 4286], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4283, 4286], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 166,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 166,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4392, 4395], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4392, 4395], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\n\nexport interface Notification {\n  id: string\n  type: 'success' | 'warning' | 'error' | 'info'\n  title: string\n  message: string\n  timestamp: string\n  read: boolean\n  actionUrl?: string\n  actionText?: string\n}\n\nexport interface NotificationSettings {\n  budgetOverage: boolean\n  goalDeadlines: boolean\n  lowBalance: boolean\n  dailyReminders: boolean\n  emailNotifications: boolean\n  pushNotifications: boolean\n}\n\n// 초기 알림 설정\nconst initialSettings: NotificationSettings = {\n  budgetOverage: true,\n  goalDeadlines: true,\n  lowBalance: true,\n  dailyReminders: true,\n  emailNotifications: false,\n  pushNotifications: true,\n}\n\n// 초기 알림 데이터\nconst initialNotifications: Notification[] = [\n  {\n    id: '1',\n    type: 'warning',\n    title: '예산 초과 경고',\n    message: '인건비 예산을 80% 이상 사용했습니다.',\n    timestamp: new Date().toISOString(),\n    read: false,\n    actionUrl: '/finance',\n    actionText: '예산 확인',\n  },\n  {\n    id: '2',\n    type: 'info',\n    title: '자금 일보 입력 마감',\n    message: '오전 10시 30분까지 자금 일보 입력을 완료해주세요.',\n    timestamp: new Date(Date.now() - 3600000).toISOString(),\n    read: false,\n    actionUrl: '/finance',\n    actionText: '입력하기',\n  },\n  {\n    id: '3',\n    type: 'error',\n    title: '예산 초과',\n    message: '마케팅 예산을 100% 초과했습니다.',\n    timestamp: new Date(Date.now() - 7200000).toISOString(),\n    read: true,\n    actionUrl: '/finance',\n    actionText: '예산 조정',\n  },\n]\n\n// 스토어 생성\nexport const notifications = writable<Notification[]>(initialNotifications)\nexport const notificationSettings = writable<NotificationSettings>(initialSettings)\n\n// 알림 추가 함수\nexport function addNotification(notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) {\n  const newNotification: Notification = {\n    ...notification,\n    id: `notification-${Date.now()}`,\n    timestamp: new Date().toISOString(),\n    read: false,\n  }\n\n  notifications.update((current) => [newNotification, ...current])\n}\n\n// 알림 읽음 처리\nexport function markAsRead(notificationId: string) {\n  notifications.update((current) =>\n    current.map((notification) =>\n      notification.id === notificationId ? { ...notification, read: true } : notification,\n    ),\n  )\n}\n\n// 모든 알림 읽음 처리\nexport function markAllAsRead() {\n  notifications.update((current) =>\n    current.map((notification) => ({ ...notification, read: true })),\n  )\n}\n\n// 알림 삭제\nexport function deleteNotification(notificationId: string) {\n  notifications.update((current) =>\n    current.filter((notification) => notification.id !== notificationId),\n  )\n}\n\n// 알림 설정 업데이트\nexport function updateNotificationSettings(settings: NotificationSettings) {\n  notificationSettings.set(settings)\n}\n\n// 예산 초과 알림 체크\nexport function checkBudgetOverage(budgetCategories: unknown[]) {\n  budgetCategories.forEach((category) => {\n    const usage = (category.spent / category.amount) * 100\n\n    if (usage >= 100) {\n      addNotification({\n        type: 'error',\n        title: '예산 초과',\n        message: `${category.name} 예산을 ${usage.toFixed(1)}% 초과했습니다.`,\n        actionUrl: '/finance',\n        actionText: '예산 확인',\n      })\n    } else if (usage >= 80) {\n      addNotification({\n        type: 'warning',\n        title: '예산 경고',\n        message: `${category.name} 예산을 ${usage.toFixed(1)}% 사용했습니다.`,\n        actionUrl: '/finance',\n        actionText: '예산 확인',\n      })\n    }\n  })\n}\n\n// 목표 마감일 알림 체크\nexport function checkGoalDeadlines(budgetGoals: unknown[]) {\n  const now = new Date()\n  const oneWeekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)\n\n  budgetGoals.forEach((goal) => {\n    const deadline = new Date(goal.deadline)\n    const progress = (goal.currentAmount / goal.targetAmount) * 100\n\n    if (deadline <= oneWeekFromNow && deadline > now && progress < 100) {\n      const daysLeft = Math.ceil((deadline.getTime() - now.getTime()) / (24 * 60 * 60 * 1000))\n\n      addNotification({\n        type: 'warning',\n        title: '목표 마감일 임박',\n        message: `${goal.name} 목표 마감까지 ${daysLeft}일 남았습니다. (진행률: ${progress.toFixed(1)}%)`,\n        actionUrl: '/finance',\n        actionText: '목표 확인',\n      })\n    }\n  })\n}\n\n// 잔고 부족 알림 체크\nexport function checkLowBalance(bankAccounts: unknown[], transactions: unknown[]) {\n  const monthlyExpense =\n    transactions\n      .filter((t: any) => t.type === 'expense')\n      .reduce((sum: number, t: any) => sum + t.amount, 0) / 12 // 월평균 지출\n\n  const totalBalance = bankAccounts.reduce((sum: number, account: any) => sum + account.balance, 0)\n\n  if (totalBalance < monthlyExpense * 2) {\n    addNotification({\n      type: 'error',\n      title: '잔고 부족 경고',\n      message: `현재 잔고가 2개월 운영비보다 적습니다. (잔고: ${totalBalance.toLocaleString()}원)`,\n      actionUrl: '/finance',\n      actionText: '잔고 확인',\n    })\n  } else if (totalBalance < monthlyExpense * 3) {\n    addNotification({\n      type: 'warning',\n      title: '잔고 주의',\n      message: `현재 잔고가 3개월 운영비보다 적습니다. (잔고: ${totalBalance.toLocaleString()}원)`,\n      actionUrl: '/finance',\n      actionText: '잔고 확인',\n    })\n  }\n}\n\n// 자금 일보 입력 마감 알림\nexport function checkFundsReportDeadline() {\n  const now = new Date()\n  const deadline = new Date()\n  deadline.setHours(10, 30, 0, 0)\n\n  const timeUntilDeadline = deadline.getTime() - now.getTime()\n  const minutesUntilDeadline = Math.floor(timeUntilDeadline / (1000 * 60))\n\n  if (minutesUntilDeadline > 0 && minutesUntilDeadline <= 30) {\n    addNotification({\n      type: 'info',\n      title: '자금 일보 입력 마감',\n      message: `자금 일보 입력 마감까지 ${minutesUntilDeadline}분 남았습니다.`,\n      actionUrl: '/finance',\n      actionText: '입력하기',\n    })\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/onboarding.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 253,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 253,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6481, 6484], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6481, 6484], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\n\n// 온보딩 체크리스트 항목\nexport interface OnboardingChecklistItem {\n  id: string\n  title: string\n  description: string\n  category: 'equipment' | 'account' | 'training' | 'documentation' | 'orientation'\n  assignedTo: string // 담당자 ID\n  dueDate?: string\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled'\n  completedBy?: string\n  completedAt?: string\n  notes?: string\n  required: boolean\n}\n\n// 온보딩 프로세스\nexport interface OnboardingProcess {\n  id: string\n  employeeId: string\n  employeeName: string\n  startDate: string\n  expectedCompletionDate: string\n  actualCompletionDate?: string\n  status: 'not-started' | 'in-progress' | 'completed' | 'cancelled'\n  checklistItems: OnboardingChecklistItem[]\n  mentorId?: string\n  buddyId?: string\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 오프보딩 체크리스트 항목\nexport interface OffboardingChecklistItem {\n  id: string\n  title: string\n  description: string\n  category:\n    | 'equipment-return'\n    | 'account-cleanup'\n    | 'knowledge-transfer'\n    | 'documentation'\n    | 'exit-interview'\n  assignedTo: string\n  dueDate?: string\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled'\n  completedBy?: string\n  completedAt?: string\n  notes?: string\n  required: boolean\n}\n\n// 오프보딩 프로세스\nexport interface OffboardingProcess {\n  id: string\n  employeeId: string\n  employeeName: string\n  lastWorkingDate: string\n  startDate: string\n  expectedCompletionDate: string\n  actualCompletionDate?: string\n  status: 'not-started' | 'in-progress' | 'completed' | 'cancelled'\n  checklistItems: OffboardingChecklistItem[]\n  reason: 'resignation' | 'termination' | 'retirement' | 'contract-end'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 멘토/버디 프로그램\nexport interface MentorBuddy {\n  id: string\n  employeeId: string\n  mentorId?: string\n  buddyId?: string\n  startDate: string\n  endDate?: string\n  status: 'active' | 'completed' | 'cancelled'\n  notes?: string\n  createdAt: string\n}\n\n// 온보딩 템플릿\nexport interface OnboardingTemplate {\n  id: string\n  name: string\n  description: string\n  department?: string\n  position?: string\n  checklistItems: Omit<OnboardingChecklistItem, 'id' | 'status' | 'completedBy' | 'completedAt'>[]\n  createdAt: string\n  updatedAt: string\n}\n\n// 초기 데이터\nconst initialOnboardingTemplates: OnboardingTemplate[] = [\n  {\n    id: 'template-1',\n    name: '신입 개발자 온보딩',\n    description: '신입 개발자를 위한 표준 온보딩 프로세스',\n    department: '개발팀',\n    position: '개발자',\n    checklistItems: [\n      {\n        title: '노트북 및 장비 지급',\n        description: '개발용 노트북, 모니터, 키보드, 마우스 지급',\n        category: 'equipment',\n        assignedTo: 'IT팀',\n        dueDate: '1일차',\n        required: true,\n      },\n      {\n        title: '회사 계정 생성',\n        description: '이메일, 슬랙, GitLab, Jira 계정 생성',\n        category: 'account',\n        assignedTo: 'IT팀',\n        dueDate: '1일차',\n        required: true,\n      },\n      {\n        title: '개발 환경 설정',\n        description: '개발 도구 설치 및 환경 설정',\n        category: 'training',\n        assignedTo: '멘토',\n        dueDate: '2일차',\n        required: true,\n      },\n      {\n        title: '회사 오리엔테이션',\n        description: '회사 소개, 조직도, 업무 프로세스 안내',\n        category: 'orientation',\n        assignedTo: 'HR팀',\n        dueDate: '1일차',\n        required: true,\n      },\n      {\n        title: '보안 교육',\n        description: '정보보안 정책 및 보안 교육',\n        category: 'training',\n        assignedTo: '보안팀',\n        dueDate: '3일차',\n        required: true,\n      },\n    ],\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z',\n  },\n]\n\nconst initialOnboardingProcesses: OnboardingProcess[] = [\n  {\n    id: 'onboarding-1',\n    employeeId: 'emp-1',\n    employeeName: '김철수',\n    startDate: '2023-01-15',\n    expectedCompletionDate: '2023-01-22',\n    actualCompletionDate: '2023-01-20',\n    status: 'completed',\n    mentorId: 'emp-3',\n    buddyId: 'emp-2',\n    checklistItems: [\n      {\n        id: 'item-1',\n        title: '노트북 및 장비 지급',\n        description: '개발용 노트북, 모니터, 키보드, 마우스 지급',\n        category: 'equipment',\n        assignedTo: 'IT팀',\n        dueDate: '2023-01-15',\n        status: 'completed',\n        completedBy: 'IT팀',\n        completedAt: '2023-01-15T10:00:00Z',\n        required: true,\n      },\n      {\n        id: 'item-2',\n        title: '회사 계정 생성',\n        description: '이메일, 슬랙, GitLab, Jira 계정 생성',\n        category: 'account',\n        assignedTo: 'IT팀',\n        dueDate: '2023-01-15',\n        status: 'completed',\n        completedBy: 'IT팀',\n        completedAt: '2023-01-15T11:00:00Z',\n        required: true,\n      },\n    ],\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-20T00:00:00Z',\n  },\n]\n\nconst initialOffboardingProcesses: OffboardingProcess[] = []\n\nconst initialMentorBuddies: MentorBuddy[] = [\n  {\n    id: 'mentor-1',\n    employeeId: 'emp-1',\n    mentorId: 'emp-3',\n    buddyId: 'emp-2',\n    startDate: '2023-01-15',\n    status: 'active',\n    createdAt: '2023-01-15T00:00:00Z',\n  },\n]\n\n// 스토어 생성\nexport const onboardingTemplates = writable<OnboardingTemplate[]>(initialOnboardingTemplates)\nexport const onboardingProcesses = writable<OnboardingProcess[]>(initialOnboardingProcesses)\nexport const offboardingProcesses = writable<OffboardingProcess[]>(initialOffboardingProcesses)\nexport const mentorBuddies = writable<MentorBuddy[]>(initialMentorBuddies)\n\n// 온보딩 템플릿 관리 함수들\nexport function addOnboardingTemplate(\n  template: Omit<OnboardingTemplate, 'id' | 'createdAt' | 'updatedAt'>,\n) {\n  const newTemplate: OnboardingTemplate = {\n    ...template,\n    id: `template-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n  onboardingTemplates.update((current) => [...current, newTemplate])\n}\n\nexport function updateOnboardingTemplate(id: string, updates: Partial<OnboardingTemplate>) {\n  onboardingTemplates.update((current) =>\n    current.map((template) =>\n      template.id === id\n        ? { ...template, ...updates, updatedAt: new Date().toISOString() }\n        : template,\n    ),\n  )\n}\n\n// 온보딩 프로세스 관리 함수들\nexport function createOnboardingProcess(\n  employeeId: string,\n  employeeName: string,\n  templateId?: string,\n  mentorId?: string,\n  buddyId?: string,\n) {\n  let template: OnboardingTemplate | null = null\n  if (templateId) {\n    onboardingTemplates.subscribe((templates) => {\n      template = templates.find((t) => t.id === templateId) || null\n    })()\n  }\n\n  const checklistItems: OnboardingChecklistItem[] =\n    template?.checklistItems?.map((item: any) => ({\n      ...item,\n      id: `item-${Date.now()}-${Math.random()}`,\n      status: 'pending' as const,\n    })) || []\n\n  const newProcess: OnboardingProcess = {\n    id: `onboarding-${Date.now()}`,\n    employeeId: employeeId || '',\n    employeeName: employeeName || '',\n    startDate: new Date().toISOString().split('T')[0] || '',\n    expectedCompletionDate:\n      new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] || '',\n    status: 'not-started',\n    checklistItems,\n    mentorId,\n    buddyId,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  onboardingProcesses.update((current) => [...current, newProcess])\n  return newProcess.id\n}\n\nexport function updateOnboardingProcess(id: string, updates: Partial<OnboardingProcess>) {\n  onboardingProcesses.update((current) =>\n    current.map((process) =>\n      process.id === id ? { ...process, ...updates, updatedAt: new Date().toISOString() } : process,\n    ),\n  )\n}\n\nexport function completeOnboardingChecklistItem(\n  processId: string,\n  itemId: string,\n  completedBy: string,\n  notes?: string,\n) {\n  onboardingProcesses.update((current) =>\n    current.map((process) => {\n      if (process.id === processId) {\n        const updatedItems = process.checklistItems.map((item) => {\n          if (item.id === itemId) {\n            return {\n              ...item,\n              status: 'completed' as const,\n              completedBy,\n              completedAt: new Date().toISOString(),\n              notes,\n            }\n          }\n          return item\n        })\n\n        // 모든 필수 항목이 완료되었는지 확인\n        const allRequiredCompleted = updatedItems\n          .filter((item) => item.required)\n          .every((item) => item.status === 'completed')\n\n        return {\n          ...process,\n          checklistItems: updatedItems,\n          status: allRequiredCompleted ? ('completed' as const) : ('in-progress' as const),\n          actualCompletionDate: allRequiredCompleted\n            ? new Date().toISOString().split('T')[0]\n            : undefined,\n          updatedAt: new Date().toISOString(),\n        }\n      }\n      return process\n    }),\n  )\n}\n\n// 오프보딩 프로세스 관리 함수들\nexport function createOffboardingProcess(\n  employeeId: string,\n  employeeName: string,\n  lastWorkingDate: string,\n  reason: OffboardingProcess['reason'],\n) {\n  const checklistItems: OffboardingChecklistItem[] = [\n    {\n      id: `item-${Date.now()}-1`,\n      title: '장비 반납',\n      description: '노트북, 모니터, 키보드, 마우스 등 회사 장비 반납',\n      category: 'equipment-return',\n      assignedTo: 'IT팀',\n      status: 'pending',\n      required: true,\n    },\n    {\n      id: `item-${Date.now()}-2`,\n      title: '계정 정리',\n      description: '이메일, 슬랙, GitLab, Jira 등 모든 계정 비활성화',\n      category: 'account-cleanup',\n      assignedTo: 'IT팀',\n      status: 'pending',\n      required: true,\n    },\n    {\n      id: `item-${Date.now()}-3`,\n      title: '지식 전수',\n      description: '담당 업무 및 프로젝트 관련 지식 전수',\n      category: 'knowledge-transfer',\n      assignedTo: '직속상사',\n      status: 'pending',\n      required: true,\n    },\n    {\n      id: `item-${Date.now()}-4`,\n      title: '퇴사 인터뷰',\n      description: '퇴사 사유 및 개선사항 인터뷰',\n      category: 'exit-interview',\n      assignedTo: 'HR팀',\n      status: 'pending',\n      required: true,\n    },\n  ]\n\n  const newProcess: OffboardingProcess = {\n    id: `offboarding-${Date.now()}`,\n    employeeId,\n    employeeName,\n    lastWorkingDate: lastWorkingDate || '',\n    startDate: new Date().toISOString().split('T')[0] || '',\n    expectedCompletionDate:\n      new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] || '',\n    status: 'not-started',\n    checklistItems,\n    reason,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  offboardingProcesses.update((current) => [...current, newProcess])\n  return newProcess.id\n}\n\nexport function completeOffboardingChecklistItem(\n  processId: string,\n  itemId: string,\n  completedBy: string,\n  notes?: string,\n) {\n  offboardingProcesses.update((current) =>\n    current.map((process) => {\n      if (process.id === processId) {\n        const updatedItems = process.checklistItems.map((item) => {\n          if (item.id === itemId) {\n            return {\n              ...item,\n              status: 'completed' as const,\n              completedBy,\n              completedAt: new Date().toISOString(),\n              notes,\n            }\n          }\n          return item\n        })\n\n        // 모든 필수 항목이 완료되었는지 확인\n        const allRequiredCompleted = updatedItems\n          .filter((item) => item.required)\n          .every((item) => item.status === 'completed')\n\n        return {\n          ...process,\n          checklistItems: updatedItems,\n          status: allRequiredCompleted ? ('completed' as const) : ('in-progress' as const),\n          actualCompletionDate: allRequiredCompleted\n            ? new Date().toISOString().split('T')[0]\n            : undefined,\n          updatedAt: new Date().toISOString(),\n        }\n      }\n      return process\n    }),\n  )\n}\n\n// 멘토/버디 관리 함수들\nexport function assignMentorBuddy(employeeId: string, mentorId?: string, buddyId?: string) {\n  const newMentorBuddy: MentorBuddy = {\n    id: `mentor-${Date.now()}`,\n    employeeId,\n    mentorId,\n    buddyId: buddyId || '',\n    startDate: new Date().toISOString().split('T')[0] || '',\n    status: 'active',\n    createdAt: new Date().toISOString(),\n  }\n\n  mentorBuddies.update((current) => [...current, newMentorBuddy])\n}\n\nexport function updateMentorBuddy(id: string, updates: Partial<MentorBuddy>) {\n  mentorBuddies.update((current) =>\n    current.map((mentor) => (mentor.id === id ? { ...mentor, ...updates } : mentor)),\n  )\n}\n\n// 유틸리티 함수들\nexport function getOnboardingProcessByEmployee(\n  employeeId: string,\n  processList: OnboardingProcess[],\n): OnboardingProcess | undefined {\n  return processList.find((process) => process.employeeId === employeeId)\n}\n\nexport function getOffboardingProcessByEmployee(\n  employeeId: string,\n  processList: OffboardingProcess[],\n): OffboardingProcess | undefined {\n  return processList.find((process) => process.employeeId === employeeId)\n}\n\nexport function getMentorBuddyByEmployee(\n  employeeId: string,\n  mentorList: MentorBuddy[],\n): MentorBuddy | undefined {\n  return mentorList.find((mentor) => mentor.employeeId === employeeId && mentor.status === 'active')\n}\n\nexport function getOnboardingProgress(process: OnboardingProcess): number {\n  if (process.checklistItems.length === 0) return 0\n  const completedItems = process.checklistItems.filter((item) => item.status === 'completed').length\n  return Math.round((completedItems / process.checklistItems.length) * 100)\n}\n\nexport function getOffboardingProgress(process: OffboardingProcess): number {\n  if (process.checklistItems.length === 0) return 0\n  const completedItems = process.checklistItems.filter((item) => item.status === 'completed').length\n  return Math.round((completedItems / process.checklistItems.length) * 100)\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/performance.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/personnel.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/policies.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/audit-security.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 16,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 16,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [462, 465], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [462, 465], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 17,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 17,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [478, 481], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [478, 481], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4784, 4787], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4784, 4787], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 254,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 254,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6640, 6643], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6640, 6643], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 269,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 269,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7000, 7003], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7000, 7003], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 284,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 284,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7321, 7324], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7321, 7324], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 322,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 322,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8358, 8361], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8358, 8361], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 358,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 358,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9231, 9234], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9231, 9234], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 358,
        "column": 65,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 358,
        "endColumn": 68,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9255, 9258], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9255, 9258], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 361,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 361,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9303, 9306], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9303, 9306], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 498,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 498,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12493, 12496], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12493, 12496], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 516,
        "column": 75,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 516,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12849, 12852], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12849, 12852], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 534,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 534,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13168, 13171], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13168, 13171], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 13,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from '$lib/utils/logger'\nimport { writable } from 'svelte/store'\nimport type { AuditLog, Person } from './types'\n\n// 감사 로그 관리\nexport const auditLogs = writable<AuditLog[]>([])\nexport const securityPolicies = writable<Record<string, unknown>>({})\nexport const accessControl = writable<Record<string, unknown>>({})\n\n// 감사 로그 생성\nexport function createAuditLog(\n  actorId: string,\n  action: string,\n  entity: string,\n  entityId: string,\n  oldData: any,\n  newData: any,\n  metadata?: Record<string, unknown>,\n): string {\n  const auditLog: AuditLog = {\n    id: crypto.randomUUID(),\n    actorId,\n    action,\n    entity,\n    entityId,\n    diff: { old: oldData, new: newData },\n    at: new Date().toISOString(),\n  }\n\n  // 메타데이터 추가\n  if (metadata) {\n    auditLog.metadata = metadata\n  }\n\n  auditLogs.update((logs) => [...logs, auditLog])\n\n  return auditLog.id\n}\n\n// 감사 로그 조회\nexport function getAuditLogs(filters?: {\n  actorId?: string\n  entity?: string\n  entityId?: string\n  action?: string\n  startDate?: string\n  endDate?: string\n}): AuditLog[] {\n  let filteredLogs: AuditLog[] = []\n\n  auditLogs.subscribe((logs) => {\n    filteredLogs = logs.filter((log) => {\n      if (filters?.actorId && log.actorId !== filters.actorId) return false\n      if (filters?.entity && log.entity !== filters.entity) return false\n      if (filters?.entityId && log.entityId !== filters.entityId) return false\n      if (filters?.action && log.action !== filters.action) return false\n      if (filters?.startDate && log.at < filters.startDate) return false\n      if (filters?.endDate && log.at > filters.endDate) return false\n      return true\n    })\n  })()\n\n  return filteredLogs.sort((a, b) => new Date(b.at).getTime() - new Date(a.at).getTime())\n}\n\n// 엔티티별 감사 로그 조회\nexport function getEntityAuditTrail(entity: string, entityId: string): AuditLog[] {\n  return getAuditLogs({ entity, entityId })\n}\n\n// 사용자별 감사 로그 조회\nexport function getUserAuditTrail(actorId: string): AuditLog[] {\n  return getAuditLogs({ actorId })\n}\n\n// 보안 정책 정의\nexport function defineSecurityPolicies(): void {\n  const policies = {\n    password: {\n      minLength: 8,\n      requireUppercase: true,\n      requireLowercase: true,\n      requireNumbers: true,\n      requireSpecialChars: true,\n      maxAge: 90, // days\n      historyCount: 5,\n    },\n    session: {\n      timeout: 30, // minutes\n      maxConcurrent: 3,\n      requireReauth: ['sensitive_operations'],\n    },\n    access: {\n      ipWhitelist: [],\n      ipBlacklist: [],\n      requireMFA: ['admin_operations', 'financial_operations'],\n      auditLevel: 'detailed',\n    },\n    data: {\n      encryption: {\n        atRest: true,\n        inTransit: true,\n        algorithm: 'AES-256',\n      },\n      retention: {\n        auditLogs: 2555, // 7 years in days\n        documents: 1095, // 3 years in days\n        backups: 365, // 1 year in days\n      },\n      anonymization: {\n        enabled: true,\n        fields: ['ssn', 'personal_id', 'bank_account'],\n      },\n    },\n  }\n\n  securityPolicies.set(policies)\n}\n\n// 접근 제어 정책 정의\nexport function defineAccessControlPolicies(): void {\n  const policies: Record<string, unknown> = {\n    roles: {\n      R1: {\n        // 연구원\n        permissions: ['read_own_data', 'create_research_notes', 'upload_documents'],\n        restrictions: ['financial_data', 'personnel_data', 'audit_logs'],\n      },\n      R2: {\n        // PM\n        permissions: ['read_project_data', 'approve_expenses', 'manage_milestones'],\n        restrictions: ['financial_data', 'audit_logs'],\n      },\n      R3: {\n        // 담당부서\n        permissions: ['read_department_data', 'process_expenses', 'manage_documents'],\n        restrictions: ['personnel_data', 'audit_logs'],\n      },\n      R4: {\n        // 경영지원\n        permissions: ['read_financial_data', 'manage_budgets', 'create_bundles'],\n        restrictions: ['audit_logs'],\n      },\n      R5: {\n        // 연구소장\n        permissions: ['read_all_data', 'approve_major_decisions', 'manage_personnel'],\n        restrictions: [],\n      },\n      R6: {\n        // 경영진\n        permissions: ['read_all_data', 'manage_all_resources', 'view_audit_logs'],\n        restrictions: [],\n      },\n      R7: {\n        // 감사\n        permissions: ['read_audit_logs', 'view_all_data', 'export_data'],\n        restrictions: ['modify_data'],\n      },\n    },\n    dataClassification: {\n      public: ['project_titles', 'public_milestones'],\n      internal: ['project_details', 'budget_summaries', 'personnel_summaries'],\n      confidential: ['financial_details', 'personnel_details', 'research_data'],\n      restricted: ['audit_logs', 'security_data', 'personal_identifiers'],\n    },\n  }\n\n  accessControl.set(policies)\n}\n\n// 접근 권한 검증\nexport function checkAccessPermission(\n  userId: string,\n  resource: string,\n  action: string,\n  context?: any,\n): {\n  allowed: boolean\n  reason?: string\n  auditRequired: boolean\n} {\n  // 1. 사용자 역할 확인\n  const user = getUserById(userId)\n  if (!user) {\n    return { allowed: false, reason: 'User not found', auditRequired: true }\n  }\n\n  // 2. 역할별 권한 확인\n  const rolePermissions = getRolePermissions(user.roleSet)\n  if (!rolePermissions.includes(action)) {\n    return {\n      allowed: false,\n      reason: 'Insufficient permissions',\n      auditRequired: true,\n    }\n  }\n\n  // 3. 데이터 분류 확인\n  const dataClassification = getDataClassification(resource)\n  if (\n    dataClassification === 'restricted' &&\n    !user.roleSet.includes('R6') &&\n    !user.roleSet.includes('R7')\n  ) {\n    return {\n      allowed: false,\n      reason: 'Restricted data access',\n      auditRequired: true,\n    }\n  }\n\n  // 4. 컨텍스트 기반 검증\n  if (context) {\n    const contextCheck = validateContext(user, resource, action, context)\n    if (!contextCheck.allowed) {\n      return {\n        allowed: false,\n        reason: contextCheck.reason,\n        auditRequired: true,\n      }\n    }\n  }\n\n  // 5. MFA 요구사항 확인\n  const mfaRequired = isMFARequired(action)\n  if (mfaRequired && !context?.mfaVerified) {\n    return { allowed: false, reason: 'MFA required', auditRequired: false }\n  }\n\n  return { allowed: true, auditRequired: true }\n}\n\n// 사용자 ID로 사용자 정보 가져오기\nfunction getUserById(userId: string): Person | null {\n  // 실제 구현에서는 사용자 스토어에서 가져옴\n  return {\n    id: userId,\n    name: 'Test User',\n    email: 'test@example.com',\n    department: 'Test Department',\n    roleSet: ['R1'],\n    active: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n}\n\n// 역할별 권한 가져오기\nfunction getRolePermissions(roleSet: string[]): string[] {\n  let permissions: string[] = []\n\n  accessControl.subscribe((policies) => {\n    roleSet.forEach((role) => {\n      const rolePolicy = (policies as any).roles?.[role]\n      if (rolePolicy) {\n        permissions = [...permissions, ...rolePolicy.permissions]\n      }\n    })\n  })()\n\n  return [...new Set(permissions)] // 중복 제거\n}\n\n// 데이터 분류 가져오기\nfunction getDataClassification(resource: string): string {\n  let classification = 'public'\n\n  accessControl.subscribe((policies) => {\n    Object.entries((policies as any).dataClassification || {}).forEach(([level, resources]) => {\n      if (Array.isArray(resources) && resources.includes(resource)) {\n        classification = level\n      }\n    })\n  })()\n\n  return classification\n}\n\n// 컨텍스트 기반 검증\nfunction validateContext(\n  user: Person,\n  resource: string,\n  action: string,\n  context: any,\n): { allowed: boolean; reason?: string } {\n  // 1. 소유권 확인\n  if (context.ownerId && context.ownerId !== user.id) {\n    // 소유자가 아닌 경우 추가 권한 확인\n    if (!user.roleSet.includes('R5') && !user.roleSet.includes('R6')) {\n      return { allowed: false, reason: 'Not owner and insufficient role' }\n    }\n  }\n\n  // 2. 프로젝트 접근 권한 확인\n  if (context.projectId) {\n    const hasProjectAccess = checkProjectAccess(user.id, context.projectId)\n    if (!hasProjectAccess) {\n      return { allowed: false, reason: 'No project access' }\n    }\n  }\n\n  // 3. 시간 기반 제한 확인\n  if (context.timeRestriction) {\n    const now = new Date()\n    const restriction = new Date(context.timeRestriction)\n    if (now > restriction) {\n      return { allowed: false, reason: 'Time restriction exceeded' }\n    }\n  }\n\n  return { allowed: true }\n}\n\n// 프로젝트 접근 권한 확인\nfunction checkProjectAccess(_userId: string, _projectId: string): boolean {\n  // 실제 구현에서는 프로젝트 참여자 목록을 확인\n  return true // 모의 구현\n}\n\n// MFA 요구사항 확인\nfunction isMFARequired(action: string): boolean {\n  let policies: any = {}\n\n  securityPolicies.subscribe((p) => {\n    policies = p\n  })()\n\n  return policies.session?.requireReauth?.includes(action) || false\n}\n\n// 보안 이벤트 로깅\nexport function logSecurityEvent(\n  eventType: 'login' | 'logout' | 'access_denied' | 'data_export' | 'suspicious_activity',\n  userId: string,\n  details: Record<string, unknown>,\n): void {\n  const securityLog = {\n    id: crypto.randomUUID(),\n    eventType,\n    userId,\n    details,\n    timestamp: new Date().toISOString(),\n    ipAddress: details.ipAddress || 'unknown',\n    userAgent: details.userAgent || 'unknown',\n  }\n\n  // 보안 로그는 별도 스토어에 저장 (실제 구현)\n  logger.log('Security Event:', securityLog)\n\n  // 감사 로그에도 기록\n  createAuditLog(userId, `security_${eventType}`, 'security', securityLog.id, {}, details, {\n    eventType,\n    ipAddress: details.ipAddress,\n  })\n}\n\n// 데이터 마스킹\nexport function maskSensitiveData(data: any, userRole: string): any {\n  if (!data) return data\n\n  let policies: any = {}\n  securityPolicies.subscribe((p) => {\n    policies = p\n  })()\n\n  const maskFields = policies.data?.anonymization?.fields || []\n\n  if (typeof data === 'object') {\n    const masked = { ...data }\n\n    maskFields.forEach((field) => {\n      if (masked[field]) {\n        masked[field] = maskValue(masked[field], userRole)\n      }\n    })\n\n    return masked\n  }\n\n  return data\n}\n\n// 값 마스킹\nfunction maskValue(value: string, userRole: string): string {\n  // 감사 역할은 전체 값 표시\n  if (userRole === 'R7') {\n    return value\n  }\n\n  // 경영진은 부분 마스킹\n  if (userRole === 'R6') {\n    if (value.length > 4) {\n      return (\n        value.substring(0, 2) + '*'.repeat(value.length - 4) + value.substring(value.length - 2)\n      )\n    }\n    return '*'.repeat(value.length)\n  }\n\n  // 기타 역할은 완전 마스킹\n  return '*'.repeat(value.length)\n}\n\n// 감사 로그 내보내기\nexport function exportAuditLogs(\n  format: 'json' | 'csv' | 'excel',\n  filters?: {\n    startDate?: string\n    endDate?: string\n    entity?: string\n    action?: string\n  },\n): string {\n  const logs = getAuditLogs(filters)\n\n  if (format === 'json') {\n    return JSON.stringify(logs, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader = 'ID,Actor ID,Action,Entity,Entity ID,Timestamp,Details\\n'\n    const csvRows = logs\n      .map(\n        (log) =>\n          `${log.id},${log.actorId},${log.action},${log.entity},${log.entityId},${log.at},\"${JSON.stringify(log.diff).replace(/\"/g, '\"\"')}\"`,\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(logs, null, 2)\n}\n\n// 보안 정책 위반 감지\nexport function detectSecurityViolations(): {\n  violations: Array<{\n    type: string\n    severity: 'low' | 'medium' | 'high' | 'critical'\n    description: string\n    recommendation: string\n  }>\n} {\n  const violations = []\n\n  // 1. 비정상적인 접근 패턴 감지\n  const suspiciousAccess = detectSuspiciousAccess()\n  if (suspiciousAccess.length > 0) {\n    violations.push({\n      type: 'suspicious_access',\n      severity: 'high',\n      description: `${suspiciousAccess.length}건의 비정상적인 접근이 감지되었습니다.`,\n      recommendation: '해당 사용자의 접근을 제한하고 추가 조사를 수행하세요.',\n    })\n  }\n\n  // 2. 권한 상승 시도 감지\n  const privilegeEscalation = detectPrivilegeEscalation()\n  if (privilegeEscalation.length > 0) {\n    violations.push({\n      type: 'privilege_escalation',\n      severity: 'critical',\n      description: `${privilegeEscalation.length}건의 권한 상승 시도가 감지되었습니다.`,\n      recommendation: '즉시 해당 계정을 비활성화하고 보안팀에 보고하세요.',\n    })\n  }\n\n  // 3. 대량 데이터 접근 감지\n  const bulkDataAccess = detectBulkDataAccess()\n  if (bulkDataAccess.length > 0) {\n    violations.push({\n      type: 'bulk_data_access',\n      severity: 'medium',\n      description: `${bulkDataAccess.length}건의 대량 데이터 접근이 감지되었습니다.`,\n      recommendation: '해당 접근의 정당성을 확인하고 필요시 접근을 제한하세요.',\n    })\n  }\n\n  return { violations }\n}\n\n// 비정상적인 접근 패턴 감지\nfunction detectSuspiciousAccess(): unknown[] {\n  // 실제 구현에서는 접근 로그를 분석\n  return []\n}\n\n// 권한 상승 시도 감지\nfunction detectPrivilegeEscalation(): unknown[] {\n  // 실제 구현에서는 권한 변경 로그를 분석\n  return []\n}\n\n// 대량 데이터 접근 감지\nfunction detectBulkDataAccess(): unknown[] {\n  // 실제 구현에서는 데이터 접근 로그를 분석\n  return []\n}\n\n// 보안 정책 업데이트\nexport function updateSecurityPolicy(policyType: string, policyData: any): void {\n  securityPolicies.update((policies) => ({\n    ...policies,\n    [policyType]: policyData,\n  }))\n\n  // 정책 변경 감사 로그\n  createAuditLog(\n    'current-user',\n    'update_security_policy',\n    'security_policy',\n    policyType,\n    {},\n    policyData,\n  )\n}\n\n// 접근 제어 정책 업데이트\nexport function updateAccessControlPolicy(policyType: string, policyData: any): void {\n  accessControl.update((policies) => ({\n    ...policies,\n    [policyType]: policyData,\n  }))\n\n  // 정책 변경 감사 로그\n  createAuditLog(\n    'current-user',\n    'update_access_control',\n    'access_control',\n    policyType,\n    {},\n    policyData,\n  )\n}\n\n// 보안 대시보드 데이터\nexport function getSecurityDashboardData(): any {\n  const recentLogs = getAuditLogs().slice(0, 10)\n  const violations = detectSecurityViolations()\n\n  return {\n    recentLogs,\n    violations: violations.violations,\n    totalLogs: getAuditLogs().length,\n    securityEvents: {\n      login: getAuditLogs({ action: 'security_login' }).length,\n      logout: getAuditLogs({ action: 'security_logout' }).length,\n      accessDenied: getAuditLogs({ action: 'security_access_denied' }).length,\n      dataExport: getAuditLogs({ action: 'security_data_export' }).length,\n    },\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/budget-workflow.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 213,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 213,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5932, 5935], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5932, 5935], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 342,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 342,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9021, 9024], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9021, 9024], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 368,
        "column": 54,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 368,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9666, 9669], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9666, 9669], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 369,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 369,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9685, 9688], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9685, 9688], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\nimport type { Approval, BudgetCategoryMaster, ExpenseItem } from './types'\n\n// 예산 카테고리 마스터 데이터\nexport const budgetCategoryMaster = writable<BudgetCategoryMaster[]>([\n  {\n    categoryCode: 'PERSONNEL_CASH',\n    nameKo: '인건비(현금)',\n    requiredDocs: [\n      {\n        type: 'participation_assignment',\n        required: true,\n        templateId: 'TMP-PA-001',\n      },\n      { type: 'salary_statement', required: true, templateId: 'TMP-SS-001' },\n      { type: 'insurance_tax', required: true, templateId: 'TMP-IT-001' },\n      { type: 'salary_allocation', required: true, templateId: 'TMP-SA-001' },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5,\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R4',\n      secondary: 'R2',\n    },\n  },\n  {\n    categoryCode: 'PERSONNEL_IN_KIND',\n    nameKo: '인건비(현물)',\n    requiredDocs: [\n      {\n        type: 'participation_assignment',\n        required: true,\n        templateId: 'TMP-PA-001',\n      },\n      { type: 'salary_statement', required: true, templateId: 'TMP-SS-001' },\n      { type: 'insurance_tax', required: true, templateId: 'TMP-IT-001' },\n      { type: 'salary_allocation', required: true, templateId: 'TMP-SA-001' },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5,\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R4',\n      secondary: 'R2',\n    },\n  },\n  {\n    categoryCode: 'MATERIAL',\n    nameKo: '재료비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'quote', required: true, templateId: 'TMP-QTE-001' },\n      { type: 'purchase_order', required: true, templateId: 'TMP-PO-001' },\n      { type: 'tax_invoice', required: true },\n      { type: 'delivery_note', required: true },\n      { type: 'inspection_report', required: true, templateId: 'TMP-INS-001' },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 10,\n    },\n    defaultSlaDays: 10,\n    defaultOwners: {\n      primary: 'R3',\n      secondary: 'R4',\n    },\n  },\n  {\n    categoryCode: 'RESEARCH_ACTIVITY',\n    nameKo: '연구활동비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'activity_plan', required: true, templateId: 'TMP-AP-001' },\n      { type: 'activity_report', required: true, templateId: 'TMP-AR-001' },\n      { type: 'receipt', required: true },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5,\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R2',\n      secondary: 'R4',\n    },\n  },\n  {\n    categoryCode: 'TRAVEL',\n    nameKo: '출장비',\n    requiredDocs: [\n      { type: 'travel_plan', required: true, templateId: 'TMP-TP-001' },\n      { type: 'transport_receipt', required: true },\n      { type: 'accommodation_receipt', required: true },\n      { type: 'travel_report', required: true, templateId: 'TMP-TR-001' },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 3,\n    },\n    defaultSlaDays: 3,\n    defaultOwners: {\n      primary: 'R2',\n      secondary: 'R4',\n    },\n  },\n  {\n    categoryCode: 'MEETING',\n    nameKo: '회의비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'attendee_list', required: true, templateId: 'TMP-AL-001' },\n      { type: 'receipt', required: true },\n      { type: 'meeting_minutes', required: true, templateId: 'TMP-MM-001' },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 3,\n    },\n    defaultSlaDays: 3,\n    defaultOwners: {\n      primary: 'R3',\n      secondary: 'R4',\n    },\n  },\n  {\n    categoryCode: 'PATENT',\n    nameKo: '특허출원비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      {\n        type: 'patent_specification',\n        required: true,\n        templateId: 'TMP-PS-001',\n      },\n      { type: 'power_of_attorney', required: true, templateId: 'TMP-POA-001' },\n      { type: 'fee_receipt', required: true },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'LAB_HEAD_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5,\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R3',\n      secondary: 'R4',\n    },\n  },\n  {\n    categoryCode: 'OFFICE_SUPPLIES',\n    nameKo: '사무용품비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'quote', required: true, templateId: 'TMP-QTE-001' },\n      { type: 'receipt', required: true },\n      {\n        type: 'receipt_confirmation',\n        required: true,\n        templateId: 'TMP-RC-001',\n      },\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 3,\n    },\n    defaultSlaDays: 3,\n    defaultOwners: {\n      primary: 'R4',\n      secondary: 'R4',\n    },\n  },\n])\n\n// 워크플로우 상태\nexport const workflowStates = writable<Record<string, unknown>>({})\n\n// 카테고리별 필수 문서 체크리스트 생성\nexport function generateDocumentChecklist(\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[],\n): Array<{\n  type: string\n  required: boolean\n  templateId?: string\n  status: 'pending' | 'uploaded' | 'verified'\n  uploadedAt?: string\n  verifiedBy?: string\n}> {\n  const category = categoryMaster.find((c) => c.categoryCode === categoryCode)\n  if (!category) return []\n\n  return category.requiredDocs.map((doc) => ({\n    type: doc.type,\n    required: doc.required,\n    templateId: doc.templateId,\n    status: 'pending' as const,\n  }))\n}\n\n// 문서 업로드 상태 업데이트\nexport function updateDocumentStatus(\n  expenseId: string,\n  documentType: string,\n  status: 'uploaded' | 'verified',\n  verifiedBy?: string,\n): void {\n  workflowStates.update((states) => {\n    const expenseState = states[expenseId] || { documents: [] }\n    const docIndex = expenseState.documents.findIndex((doc: any) => doc.type === documentType)\n\n    if (docIndex !== -1) {\n      expenseState.documents[docIndex] = {\n        ...expenseState.documents[docIndex],\n        status,\n        uploadedAt:\n          status === 'uploaded'\n            ? new Date().toISOString()\n            : expenseState.documents[docIndex].uploadedAt,\n        verifiedBy:\n          status === 'verified' ? verifiedBy : expenseState.documents[docIndex].verifiedBy,\n      }\n    }\n\n    return {\n      ...states,\n      [expenseId]: expenseState,\n    }\n  })\n}\n\n// 필수 문서 완료 여부 체크\nexport function isDocumentChecklistComplete(\n  expenseId: string,\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[],\n): boolean {\n  const category = categoryMaster.find((c) => c.categoryCode === categoryCode)\n  if (!category) return false\n\n  const _requiredDocs = category.requiredDocs.filter((doc) => doc.required)\n\n  // 실제 구현에서는 documents 스토어에서 확인\n  // 여기서는 간단히 true 반환\n  return true\n}\n\n// 워크플로우 단계별 승인자 결정\nexport function getApproversForStep(\n  categoryCode: string,\n  step: string,\n  categoryMaster: BudgetCategoryMaster[],\n): string[] {\n  const category = categoryMaster.find((c) => c.categoryCode === categoryCode)\n  if (!category) return []\n\n  switch (step) {\n    case 'PM_APPROVAL':\n      return ['R2'] // PM\n    case 'LAB_HEAD_APPROVAL':\n      return ['R5'] // 연구소장\n    case 'SUPPORT_REVIEW':\n      return ['R4'] // 경영지원\n    default:\n      return []\n  }\n}\n\n// SLA 기반 마감일 계산\nexport function calculateSlaDeadline(\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[],\n): Date {\n  const category = categoryMaster.find((c) => c.categoryCode === categoryCode)\n  if (!category) return new Date()\n\n  const deadline = new Date()\n  deadline.setDate(deadline.getDate() + category.defaultSlaDays)\n  return deadline\n}\n\n// 지출 항목 상태 업데이트\nexport function updateExpenseStatus(\n  expenseId: string,\n  status: ExpenseItem['status'],\n  comment?: string,\n): void {\n  workflowStates.update((states) => {\n    return {\n      ...states,\n      [expenseId]: {\n        ...states[expenseId],\n        status,\n        statusUpdatedAt: new Date().toISOString(),\n        statusComment: comment,\n      },\n    }\n  })\n}\n\n// 결재 워크플로우 진행\nexport function processApprovalWorkflow(\n  expenseId: string,\n  approverId: string,\n  decision: Approval['decision'],\n  comment?: string,\n): void {\n  workflowStates.update((states) => {\n    const expenseState = states[expenseId] || { approvals: [] }\n\n    // 새로운 승인 추가\n    expenseState.approvals = [\n      ...expenseState.approvals,\n      {\n        approverId,\n        decision,\n        comment,\n        decidedAt: new Date().toISOString(),\n      },\n    ]\n\n    // 상태 업데이트\n    if (decision === 'approved') {\n      expenseState.currentStep = getNextStep(expenseState.currentStep, expenseState.workflow)\n    } else if (decision === 'rejected') {\n      expenseState.status = 'rejected'\n    } else if (decision === 'returned') {\n      expenseState.status = 'draft'\n    }\n\n    return {\n      ...states,\n      [expenseId]: expenseState,\n    }\n  })\n}\n\n// 다음 워크플로우 단계 결정\nfunction getNextStep(currentStep: string, workflow: any): string {\n  const steps = workflow?.steps || []\n  const currentIndex = steps.indexOf(currentStep)\n\n  if (currentIndex === -1 || currentIndex >= steps.length - 1) {\n    return 'completed'\n  }\n\n  return steps[currentIndex + 1]\n}\n\n// 카테고리별 기본 소유자 가져오기\nexport function getDefaultOwners(\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[],\n): {\n  primary: string\n  secondary: string\n} {\n  const category = categoryMaster.find((c) => c.categoryCode === categoryCode)\n  if (!category) return { primary: 'R4', secondary: 'R2' }\n\n  return category.defaultOwners\n}\n\n// 워크플로우 상태 가져오기\nexport function getWorkflowState(expenseId: string): any {\n  let state: any = null\n  workflowStates.subscribe((states) => {\n    state = states[expenseId]\n  })()\n  return state\n}\n\n// 지출 항목별 문서 체크리스트 가져오기\nexport function getExpenseDocumentChecklist(expenseId: string): unknown[] {\n  const state = getWorkflowState(expenseId)\n  return state?.documents || []\n}\n\n// 지출 항목별 승인 이력 가져오기\nexport function getExpenseApprovalHistory(expenseId: string): unknown[] {\n  const state = getWorkflowState(expenseId)\n  return state?.approvals || []\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/core.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 301,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 301,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8214, 8217], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8214, 8217], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 302,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 302,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8230, 8233], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8230, 8233], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\nimport type {\n  Person,\n  Employment,\n  SalaryHistory,\n  Project,\n  ProjectBudgetCategory,\n  Milestone,\n  ParticipationAssignment,\n  ExpenseItem,\n  Document,\n  Approval,\n  ResearchNote,\n  Report,\n  SubmissionBundle,\n  AuditLog,\n  BudgetCategoryMaster,\n  HealthIndicator,\n  Notification,\n  SLAAlert,\n  ReplacementRecommendation,\n} from './types'\n\n// 핵심 엔티티 스토어\nexport const persons = writable<Person[]>([])\nexport const employments = writable<Employment[]>([])\nexport const salaryHistory = writable<SalaryHistory[]>([])\nexport const projects = writable<Project[]>([])\nexport const projectBudgetCategories = writable<ProjectBudgetCategory[]>([])\nexport const milestones = writable<Milestone[]>([])\nexport const participationAssignments = writable<ParticipationAssignment[]>([])\nexport const expenseItems = writable<ExpenseItem[]>([])\nexport const documents = writable<Document[]>([])\nexport const approvals = writable<Approval[]>([])\nexport const researchNotes = writable<ResearchNote[]>([])\nexport const reports = writable<Report[]>([])\nexport const submissionBundles = writable<SubmissionBundle[]>([])\nexport const auditLogs = writable<AuditLog[]>([])\nexport const budgetCategoryMaster = writable<BudgetCategoryMaster[]>([])\nexport const healthIndicators = writable<HealthIndicator[]>([])\nexport const notifications = writable<Notification[]>([])\nexport const slaAlerts = writable<SLAAlert[]>([])\nexport const replacementRecommendations = writable<ReplacementRecommendation[]>([])\n\n// CRUD 함수들\nexport function addPerson(person: Omit<Person, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newPerson: Person = {\n    ...person,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  persons.update((list) => [...list, newPerson])\n  logAudit('create', 'person', id, {}, newPerson)\n  return id\n}\n\nexport function updatePerson(id: string, updates: Partial<Person>): void {\n  persons.update((list) => {\n    const index = list.findIndex((p) => p.id === id)\n    if (index === -1) return list\n\n    const oldPerson = list[index]\n    const updatedPerson = {\n      ...oldPerson,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n    const newList = [...list]\n    newList[index] = updatedPerson\n\n    logAudit('update', 'person', id, oldPerson, updatedPerson)\n    return newList\n  })\n}\n\nexport function deletePerson(id: string): void {\n  persons.update((list) => {\n    const person = list.find((p) => p.id === id)\n    if (person) {\n      logAudit('delete', 'person', id, person, {})\n    }\n    return list.filter((p) => p.id !== id)\n  })\n}\n\nexport function addProject(project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newProject: Project = {\n    ...project,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  projects.update((list) => [...list, newProject])\n  logAudit('create', 'project', id, {}, newProject)\n  return id\n}\n\nexport function updateProject(id: string, updates: Partial<Project>): void {\n  projects.update((list) => {\n    const index = list.findIndex((p) => p.id === id)\n    if (index === -1) return list\n\n    const oldProject = list[index]\n    const updatedProject = {\n      ...oldProject,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n    const newList = [...list]\n    newList[index] = updatedProject\n\n    logAudit('update', 'project', id, oldProject, updatedProject)\n    return newList\n  })\n}\n\nexport function addExpenseItem(\n  expense: Omit<ExpenseItem, 'id' | 'createdAt' | 'updatedAt'>,\n): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newExpense: ExpenseItem = {\n    ...expense,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  expenseItems.update((list) => [...list, newExpense])\n  logAudit('create', 'expense', id, {}, newExpense)\n  return id\n}\n\nexport function updateExpenseItem(id: string, updates: Partial<ExpenseItem>): void {\n  expenseItems.update((list) => {\n    const index = list.findIndex((e) => e.id === id)\n    if (index === -1) return list\n\n    const oldExpense = list[index]\n    const updatedExpense = {\n      ...oldExpense,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n    const newList = [...list]\n    newList[index] = updatedExpense\n\n    logAudit('update', 'expense', id, oldExpense, updatedExpense)\n    return newList\n  })\n}\n\nexport function addDocument(document: Omit<Document, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newDocument: Document = {\n    ...document,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  documents.update((list) => [...list, newDocument])\n  logAudit('create', 'document', id, {}, newDocument)\n  return id\n}\n\nexport function addApproval(approval: Omit<Approval, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newApproval: Approval = {\n    ...approval,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  approvals.update((list) => [...list, newApproval])\n  logAudit('create', 'approval', id, {}, newApproval)\n  return id\n}\n\nexport function updateApproval(id: string, updates: Partial<Approval>): void {\n  approvals.update((list) => {\n    const index = list.findIndex((a) => a.id === id)\n    if (index === -1) return list\n\n    const oldApproval = list[index]\n    const updatedApproval = {\n      ...oldApproval,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n    const newList = [...list]\n    newList[index] = updatedApproval\n\n    logAudit('update', 'approval', id, oldApproval, updatedApproval)\n    return newList\n  })\n}\n\nexport function addMilestone(milestone: Omit<Milestone, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newMilestone: Milestone = {\n    ...milestone,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  milestones.update((list) => [...list, newMilestone])\n  logAudit('create', 'milestone', id, {}, newMilestone)\n  return id\n}\n\nexport function updateMilestone(id: string, updates: Partial<Milestone>): void {\n  milestones.update((list) => {\n    const index = list.findIndex((m) => m.id === id)\n    if (index === -1) return list\n\n    const oldMilestone = list[index]\n    const updatedMilestone = {\n      ...oldMilestone,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n    const newList = [...list]\n    newList[index] = updatedMilestone\n\n    logAudit('update', 'milestone', id, oldMilestone, updatedMilestone)\n    return newList\n  })\n}\n\nexport function addParticipationAssignment(\n  assignment: Omit<ParticipationAssignment, 'id' | 'createdAt' | 'updatedAt'>,\n): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newAssignment: ParticipationAssignment = {\n    ...assignment,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  participationAssignments.update((list) => [...list, newAssignment])\n  logAudit('create', 'participation', id, {}, newAssignment)\n  return id\n}\n\nexport function addResearchNote(\n  note: Omit<ResearchNote, 'id' | 'createdAt' | 'updatedAt'>,\n): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newNote: ResearchNote = {\n    ...note,\n    id,\n    createdAt: now,\n    updatedAt: now,\n  }\n\n  researchNotes.update((list) => [...list, newNote])\n  logAudit('create', 'research_note', id, {}, newNote)\n  return id\n}\n\nexport function updateResearchNote(id: string, updates: Partial<ResearchNote>): void {\n  researchNotes.update((list) => {\n    const index = list.findIndex((n) => n.id === id)\n    if (index === -1) return list\n\n    const oldNote = list[index]\n    const updatedNote = {\n      ...oldNote,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n    const newList = [...list]\n    newList[index] = updatedNote\n\n    logAudit('update', 'research_note', id, oldNote, updatedNote)\n    return newList\n  })\n}\n\n// 감사 로그 함수\nexport function logAudit(\n  action: string,\n  entity: string,\n  entityId: string,\n  oldData: any,\n  newData: any,\n): void {\n  const auditLog: AuditLog = {\n    id: crypto.randomUUID(),\n    actorId: 'current-user', // 실제로는 현재 사용자 ID\n    action,\n    entity,\n    entityId,\n    diff: { old: oldData, new: newData },\n    at: new Date().toISOString(),\n  }\n\n  auditLogs.update((list) => [...list, auditLog])\n}\n\n// 유틸리티 함수들\nexport function getPersonById(id: string, personList: Person[]): Person | undefined {\n  return personList.find((p) => p.id === id)\n}\n\nexport function getProjectById(id: string, projectList: Project[]): Project | undefined {\n  return projectList.find((p) => p.id === id)\n}\n\nexport function getExpenseItemsByProject(\n  projectId: string,\n  expenseList: ExpenseItem[],\n): ExpenseItem[] {\n  return expenseList.filter((e) => e.projectId === projectId)\n}\n\nexport function getMilestonesByProject(projectId: string, milestoneList: Milestone[]): Milestone[] {\n  return milestoneList.filter((m) => m.projectId === projectId)\n}\n\nexport function getParticipationAssignmentsByProject(\n  projectId: string,\n  assignmentList: ParticipationAssignment[],\n): ParticipationAssignment[] {\n  return assignmentList.filter((a) => a.projectId === projectId)\n}\n\nexport function getParticipationAssignmentsByPerson(\n  personId: string,\n  assignmentList: ParticipationAssignment[],\n): ParticipationAssignment[] {\n  return assignmentList.filter((a) => a.personId === personId)\n}\n\nexport function getDocumentsByExpense(expenseId: string, documentList: Document[]): Document[] {\n  return documentList.filter((d) => d.expenseId === expenseId)\n}\n\nexport function getApprovalsBySubject(\n  subjectType: string,\n  subjectId: string,\n  approvalList: Approval[],\n): Approval[] {\n  return approvalList.filter((a) => a.subjectType === subjectType && a.subjectId === subjectId)\n}\n\nexport function getResearchNotesByProject(\n  projectId: string,\n  noteList: ResearchNote[],\n): ResearchNote[] {\n  return noteList.filter((n) => n.projectId === projectId)\n}\n\nexport function getActiveProjects(projectList: Project[]): Project[] {\n  return projectList.filter((p) => p.status === 'active')\n}\n\nexport function getActivePersons(personList: Person[]): Person[] {\n  return personList.filter((p) => p.active)\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/expense-workflow.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 147,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 147,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3519, 3522], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3519, 3522], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 56,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6455, 6458], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6455, 6458], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6477, 6480], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6477, 6480], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 402,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 402,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10617, 10620], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10617, 10620], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\nimport type { ExpenseItem, Approval, SLAAlert, Notification } from './types'\nimport { logAudit } from './core'\n\n// 지출 워크플로우 상태\nexport const expenseWorkflows = writable<Record<string, unknown>>({})\n\n// SLA 알림\nexport const slaAlerts = writable<SLAAlert[]>([])\n\n// 알림\nexport const notifications = writable<Notification[]>([])\n\n// 지출 워크플로우 단계\nexport const EXPENSE_WORKFLOW_STEPS = {\n  DRAFT: 'draft',\n  PENDING_APPROVAL: 'pending-approval',\n  APPROVED: 'approved',\n  EXECUTED: 'executed',\n  COMPLETED: 'completed',\n  REJECTED: 'rejected',\n  RETURNED: 'returned',\n} as const\n\n// 지출 워크플로우 시작\nexport function startExpenseWorkflow(\n  expenseId: string,\n  categoryCode: string,\n  requesterId: string,\n  amount: number,\n  description?: string,\n): void {\n  const workflow = {\n    expenseId,\n    categoryCode,\n    requesterId,\n    amount,\n    description,\n    status: EXPENSE_WORKFLOW_STEPS.DRAFT,\n    currentStep: 'PM_APPROVAL',\n    workflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5,\n    },\n    documents: [],\n    approvals: [],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    slaDeadline: calculateSlaDeadline(categoryCode),\n  }\n\n  expenseWorkflows.update((workflows) => ({\n    ...workflows,\n    [expenseId]: workflow,\n  }))\n\n  logAudit('create', 'expense_workflow', expenseId, {}, workflow)\n}\n\n// 문서 업로드\nexport function uploadDocument(\n  expenseId: string,\n  documentType: string,\n  filename: string,\n  storageUrl: string,\n  sha256: string,\n): void {\n  const document = {\n    id: crypto.randomUUID(),\n    type: documentType,\n    filename,\n    storageUrl,\n    sha256,\n    version: 1,\n    uploadedAt: new Date().toISOString(),\n    uploadedBy: 'current-user',\n  }\n\n  expenseWorkflows.update((workflows) => {\n    const workflow = workflows[expenseId]\n    if (!workflow) return workflows\n\n    const updatedWorkflow = {\n      ...workflow,\n      documents: [...workflow.documents, document],\n      updatedAt: new Date().toISOString(),\n    }\n\n    return {\n      ...workflows,\n      [expenseId]: updatedWorkflow,\n    }\n  })\n\n  logAudit('upload', 'document', document.id, {}, document)\n}\n\n// 결재 진행\nexport function processApproval(\n  expenseId: string,\n  approverId: string,\n  decision: Approval['decision'],\n  comment?: string,\n): void {\n  const approval = {\n    id: crypto.randomUUID(),\n    approverId,\n    decision,\n    comment,\n    decidedAt: new Date().toISOString(),\n  }\n\n  expenseWorkflows.update((workflows) => {\n    const workflow = workflows[expenseId]\n    if (!workflow) return workflows\n\n    const updatedWorkflow = {\n      ...workflow,\n      approvals: [...workflow.approvals, approval],\n      updatedAt: new Date().toISOString(),\n    }\n\n    // 다음 단계 결정\n    if (decision === 'approved') {\n      updatedWorkflow.currentStep = getNextStep(workflow.currentStep, workflow.workflow)\n      updatedWorkflow.status = getStatusFromStep(updatedWorkflow.currentStep)\n    } else if (decision === 'rejected') {\n      updatedWorkflow.status = EXPENSE_WORKFLOW_STEPS.REJECTED\n    } else if (decision === 'returned') {\n      updatedWorkflow.status = EXPENSE_WORKFLOW_STEPS.RETURNED\n      updatedWorkflow.currentStep = 'PM_APPROVAL'\n    }\n\n    return {\n      ...workflows,\n      [expenseId]: updatedWorkflow,\n    }\n  })\n\n  logAudit('approve', 'expense', expenseId, { decision, comment }, approval)\n\n  // 알림 생성\n  createApprovalNotification(expenseId, decision, comment)\n}\n\n// 다음 워크플로우 단계 결정\nfunction getNextStep(currentStep: string, workflow: any): string {\n  const steps = workflow?.steps || []\n  const currentIndex = steps.indexOf(currentStep)\n\n  if (currentIndex === -1 || currentIndex >= steps.length - 1) {\n    return 'completed'\n  }\n\n  return steps[currentIndex + 1]\n}\n\n// 단계에서 상태 결정\nfunction getStatusFromStep(step: string): string {\n  switch (step) {\n    case 'PM_APPROVAL':\n      return EXPENSE_WORKFLOW_STEPS.PENDING_APPROVAL\n    case 'SUPPORT_REVIEW':\n      return EXPENSE_WORKFLOW_STEPS.APPROVED\n    case 'completed':\n      return EXPENSE_WORKFLOW_STEPS.COMPLETED\n    default:\n      return EXPENSE_WORKFLOW_STEPS.DRAFT\n  }\n}\n\n// SLA 마감일 계산\nfunction calculateSlaDeadline(categoryCode: string): string {\n  const slaDays = getSlaDaysForCategory(categoryCode)\n  const deadline = new Date()\n  deadline.setDate(deadline.getDate() + slaDays)\n  return deadline.toISOString()\n}\n\n// 카테고리별 SLA 일수\nfunction getSlaDaysForCategory(categoryCode: string): number {\n  const slaMap: Record<string, number> = {\n    PERSONNEL_CASH: 5,\n    PERSONNEL_IN_KIND: 5,\n    MATERIAL: 10,\n    RESEARCH_ACTIVITY: 5,\n    TRAVEL: 3,\n    MEETING: 3,\n    PATENT: 5,\n    OFFICE_SUPPLIES: 3,\n  }\n\n  return slaMap[categoryCode] || 5\n}\n\n// SLA 알림 생성\nexport function createSlaAlert(\n  expenseId: string,\n  alertType: 'sla-warning' | 'sla-breach' | 'escalation',\n  message: string,\n  severity: 'low' | 'medium' | 'high' | 'critical',\n): void {\n  const alert: SLAAlert = {\n    id: crypto.randomUUID(),\n    entityType: 'expense',\n    entityId: expenseId,\n    alertType,\n    message,\n    severity,\n    assignedTo: getAssignedUsersForAlert(expenseId, alertType),\n    status: 'active',\n    createdAt: new Date().toISOString(),\n  }\n\n  slaAlerts.update((alerts) => [...alerts, alert])\n}\n\n// 알림 생성\nfunction createApprovalNotification(\n  expenseId: string,\n  decision: Approval['decision'],\n  comment?: string,\n): void {\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user', // 실제로는 관련자 ID\n    title: `지출 승인 ${decision === 'approved' ? '완료' : decision === 'rejected' ? '거부' : '반려'}`,\n    message: `지출 항목 ${expenseId}이 ${decision === 'approved' ? '승인' : decision === 'rejected' ? '거부' : '반려'}되었습니다.${comment ? ` 코멘트: ${comment}` : ''}`,\n    type: decision === 'approved' ? 'success' : 'warning',\n    priority: 'medium',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString(),\n  }\n\n  notifications.update((notifications) => [...notifications, notification])\n}\n\n// 알림 대상자 결정\nfunction getAssignedUsersForAlert(expenseId: string, alertType: string): string[] {\n  // 실제 구현에서는 워크플로우 상태를 확인하여 관련자 결정\n  switch (alertType) {\n    case 'sla-warning':\n      return ['PM', 'SUPPORT']\n    case 'sla-breach':\n      return ['PM', 'SUPPORT', 'LAB_HEAD']\n    case 'escalation':\n      return ['LAB_HEAD', 'EXECUTIVE']\n    default:\n      return ['PM']\n  }\n}\n\n// 지출 워크플로우 상태 가져오기\nexport function getExpenseWorkflow(expenseId: string): any {\n  let workflow: any = null\n  expenseWorkflows.subscribe((workflows) => {\n    workflow = workflows[expenseId]\n  })()\n  return workflow\n}\n\n// 지출 항목별 문서 목록 가져오기\nexport function getExpenseDocuments(expenseId: string): unknown[] {\n  const workflow = getExpenseWorkflow(expenseId)\n  return workflow?.documents || []\n}\n\n// 지출 항목별 승인 이력 가져오기\nexport function getExpenseApprovals(expenseId: string): unknown[] {\n  const workflow = getExpenseWorkflow(expenseId)\n  return workflow?.approvals || []\n}\n\n// SLA 상태 체크\nexport function checkSlaStatus(expenseId: string): {\n  status: 'on-time' | 'warning' | 'breach'\n  daysRemaining: number\n  deadline: string\n} {\n  const workflow = getExpenseWorkflow(expenseId)\n  if (!workflow) {\n    return { status: 'on-time', daysRemaining: 0, deadline: '' }\n  }\n\n  const now = new Date()\n  const deadline = new Date(workflow.slaDeadline)\n  const daysRemaining = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n\n  if (daysRemaining < 0) {\n    return { status: 'breach', daysRemaining, deadline: workflow.slaDeadline }\n  } else if (daysRemaining <= 1) {\n    return { status: 'warning', daysRemaining, deadline: workflow.slaDeadline }\n  } else {\n    return { status: 'on-time', daysRemaining, deadline: workflow.slaDeadline }\n  }\n}\n\n// 지출 항목 상태 업데이트\nexport function updateExpenseStatus(\n  expenseId: string,\n  status: ExpenseItem['status'],\n  comment?: string,\n): void {\n  expenseWorkflows.update((workflows) => {\n    const workflow = workflows[expenseId]\n    if (!workflow) return workflows\n\n    const updatedWorkflow = {\n      ...workflow,\n      status,\n      statusUpdatedAt: new Date().toISOString(),\n      statusComment: comment,\n      updatedAt: new Date().toISOString(),\n    }\n\n    return {\n      ...workflows,\n      [expenseId]: updatedWorkflow,\n    }\n  })\n\n  logAudit('update', 'expense_status', expenseId, { status, comment }, {})\n}\n\n// 지출 항목 완료 처리\nexport function completeExpense(expenseId: string, comment?: string): void {\n  updateExpenseStatus(expenseId, EXPENSE_WORKFLOW_STEPS.COMPLETED, comment)\n\n  // 완료 알림 생성\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user',\n    title: '지출 항목 완료',\n    message: `지출 항목 ${expenseId}이 완료되었습니다.`,\n    type: 'success',\n    priority: 'low',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString(),\n  }\n\n  notifications.update((notifications) => [...notifications, notification])\n}\n\n// 지출 항목 거부 처리\nexport function rejectExpense(expenseId: string, reason: string): void {\n  updateExpenseStatus(expenseId, EXPENSE_WORKFLOW_STEPS.REJECTED, reason)\n\n  // 거부 알림 생성\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user',\n    title: '지출 항목 거부',\n    message: `지출 항목 ${expenseId}이 거부되었습니다. 사유: ${reason}`,\n    type: 'error',\n    priority: 'high',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString(),\n  }\n\n  notifications.update((notifications) => [...notifications, notification])\n}\n\n// 지출 항목 반려 처리\nexport function returnExpense(expenseId: string, reason: string): void {\n  updateExpenseStatus(expenseId, EXPENSE_WORKFLOW_STEPS.RETURNED, reason)\n\n  // 반려 알림 생성\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user',\n    title: '지출 항목 반려',\n    message: `지출 항목 ${expenseId}이 반려되었습니다. 사유: ${reason}`,\n    type: 'warning',\n    priority: 'medium',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString(),\n  }\n\n  notifications.update((notifications) => [...notifications, notification])\n}\n\n// 지출 항목별 필수 문서 체크\nexport function checkRequiredDocuments(\n  expenseId: string,\n  categoryCode: string,\n): {\n  complete: boolean\n  missing: string[]\n  uploaded: string[]\n} {\n  const workflow = getExpenseWorkflow(expenseId)\n  if (!workflow) {\n    return { complete: false, missing: [], uploaded: [] }\n  }\n\n  // 카테고리별 필수 문서 목록 (실제로는 budgetCategoryMaster에서 가져옴)\n  const requiredDocs = getRequiredDocumentsForCategory(categoryCode)\n  const uploadedDocs = workflow.documents.map((doc: any) => doc.type)\n\n  const missing = requiredDocs.filter((doc) => !uploadedDocs.includes(doc))\n  const complete = missing.length === 0\n\n  return { complete, missing, uploaded: uploadedDocs }\n}\n\n// 카테고리별 필수 문서 목록\nfunction getRequiredDocumentsForCategory(categoryCode: string): string[] {\n  const docMap: Record<string, string[]> = {\n    PERSONNEL_CASH: [\n      'participation_assignment',\n      'salary_statement',\n      'insurance_tax',\n      'salary_allocation',\n    ],\n    PERSONNEL_IN_KIND: [\n      'participation_assignment',\n      'salary_statement',\n      'insurance_tax',\n      'salary_allocation',\n    ],\n    MATERIAL: [\n      'requisition',\n      'quote',\n      'purchase_order',\n      'tax_invoice',\n      'delivery_note',\n      'inspection_report',\n    ],\n    RESEARCH_ACTIVITY: ['requisition', 'activity_plan', 'activity_report', 'receipt'],\n    TRAVEL: ['travel_plan', 'transport_receipt', 'accommodation_receipt', 'travel_report'],\n    MEETING: ['requisition', 'attendee_list', 'receipt', 'meeting_minutes'],\n    PATENT: ['requisition', 'patent_specification', 'power_of_attorney', 'fee_receipt'],\n    OFFICE_SUPPLIES: ['requisition', 'quote', 'receipt', 'receipt_confirmation'],\n  }\n\n  return docMap[categoryCode] || []\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/global-factors.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/health-indicators.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 416,
        "column": 94,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 416,
        "endColumn": 97,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13413, 13416], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13413, 13416], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 555,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 555,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16072, 16075], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16072, 16075], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from '$lib/utils/logger'\nimport { writable } from 'svelte/store'\nimport { logAudit } from './core'\nimport type { HealthIndicator } from './types'\n\n// 헬스 인디케이터 관리\nexport const healthIndicators = writable<HealthIndicator[]>([])\nexport const healthRules = writable<Record<string, unknown>>({})\n\n// 헬스 인디케이터 계산\nexport function calculateHealthIndicator(projectId: string): HealthIndicator {\n  const scheduleScore = calculateScheduleHealth(projectId)\n  const budgetScore = calculateBudgetHealth(projectId)\n  const peopleScore = calculatePeopleHealth(projectId)\n  const riskScore = calculateRiskHealth(projectId)\n\n  const overallScore = (scheduleScore + budgetScore + peopleScore + riskScore) / 4\n  const overallStatus = determineOverallStatus(overallScore)\n\n  const indicator: HealthIndicator = {\n    projectId,\n    schedule: scheduleScore,\n    budget: budgetScore,\n    people: peopleScore,\n    risk: riskScore,\n    overall: overallStatus,\n    lastUpdated: new Date().toISOString(),\n  }\n\n  // 기존 인디케이터 업데이트 또는 새로 생성\n  healthIndicators.update((list) => {\n    const index = list.findIndex((h) => h.projectId === projectId)\n    if (index !== -1) {\n      const newList = [...list]\n      newList[index] = indicator\n      return newList\n    } else {\n      return [...list, indicator]\n    }\n  })\n\n  logAudit('calculate', 'health_indicator', projectId, {}, indicator)\n\n  return indicator\n}\n\n// 일정 헬스 계산\nfunction calculateScheduleHealth(_projectId: string): number {\n  // 1. 마일스톤 달성률 (40%)\n  const milestoneScore = calculateMilestoneHealth(projectId)\n\n  // 2. 산출물 제출률 (30%)\n  const deliverableScore = calculateDeliverableHealth(projectId)\n\n  // 3. 일정 준수율 (30%)\n  const scheduleComplianceScore = calculateScheduleCompliance(projectId)\n\n  const totalScore = milestoneScore * 0.4 + deliverableScore * 0.3 + scheduleComplianceScore * 0.3\n  return Math.round(totalScore)\n}\n\n// 마일스톤 헬스 계산\nfunction calculateMilestoneHealth(_projectId: string): number {\n  // 실제 구현에서는 milestones 스토어에서 데이터 가져오기\n  const mockMilestones = [\n    { status: 'completed', dueDate: '2024-01-15', completedDate: '2024-01-14' },\n    { status: 'in-progress', dueDate: '2024-01-30', completedDate: null },\n    { status: 'not-started', dueDate: '2024-02-15', completedDate: null },\n    { status: 'delayed', dueDate: '2024-01-20', completedDate: null },\n  ]\n\n  const totalMilestones = mockMilestones.length\n  const completedMilestones = mockMilestones.filter((m) => m.status === 'completed').length\n  const delayedMilestones = mockMilestones.filter((m) => m.status === 'delayed').length\n\n  const completionRate = (completedMilestones / totalMilestones) * 100\n  const delayPenalty = delayedMilestones * 10 // 지연당 10점 감점\n\n  return Math.max(0, completionRate - delayPenalty)\n}\n\n// 산출물 헬스 계산\nfunction calculateDeliverableHealth(_projectId: string): number {\n  // 실제 구현에서는 deliverables 데이터를 분석\n  const mockDeliverables = [\n    { status: 'delivered', dueDate: '2024-01-15', deliveredDate: '2024-01-14' },\n    { status: 'delivered', dueDate: '2024-01-20', deliveredDate: '2024-01-18' },\n    { status: 'pending', dueDate: '2024-01-25', deliveredDate: null },\n    { status: 'overdue', dueDate: '2024-01-10', deliveredDate: null },\n  ]\n\n  const totalDeliverables = mockDeliverables.length\n  const deliveredDeliverables = mockDeliverables.filter((d) => d.status === 'delivered').length\n  const overdueDeliverables = mockDeliverables.filter((d) => d.status === 'overdue').length\n\n  const deliveryRate = (deliveredDeliverables / totalDeliverables) * 100\n  const overduePenalty = overdueDeliverables * 15 // 연체당 15점 감점\n\n  return Math.max(0, deliveryRate - overduePenalty)\n}\n\n// 일정 준수율 계산\nfunction calculateScheduleCompliance(_projectId: string): number {\n  // 실제 구현에서는 프로젝트 일정과 실제 진행률을 비교\n  const projectStart = new Date('2024-01-01')\n  const projectEnd = new Date('2024-12-31')\n  const currentDate = new Date()\n\n  const totalDuration = projectEnd.getTime() - projectStart.getTime()\n  const elapsedDuration = currentDate.getTime() - projectStart.getTime()\n  const expectedProgress = (elapsedDuration / totalDuration) * 100\n\n  // 실제 진행률 (마일스톤 기반)\n  const actualProgress = 65 // 실제 구현에서는 계산\n\n  const complianceRate = Math.min(100, (actualProgress / expectedProgress) * 100)\n\n  if (complianceRate >= 100) return 100\n  if (complianceRate >= 90) return 90\n  if (complianceRate >= 80) return 80\n  if (complianceRate >= 70) return 70\n  return Math.max(0, complianceRate)\n}\n\n// 예산 헬스 계산\nfunction calculateBudgetHealth(_projectId: string): number {\n  // 1. 예산 집행률 (40%)\n  const executionScore = calculateBudgetExecutionScore(projectId)\n\n  // 2. 예산 효율성 (30%)\n  const efficiencyScore = calculateBudgetEfficiencyScore(projectId)\n\n  // 3. 예산 편차 (30%)\n  const varianceScore = calculateBudgetVarianceScore(projectId)\n\n  const totalScore = executionScore * 0.4 + efficiencyScore * 0.3 + varianceScore * 0.3\n  return Math.round(totalScore)\n}\n\n// 예산 집행률 점수 계산\nfunction calculateBudgetExecutionScore(_projectId: string): number {\n  // 실제 구현에서는 예산 데이터를 분석\n  const totalBudget = 100000000\n  const executedAmount = 60000000\n  const executionRate = (executedAmount / totalBudget) * 100\n\n  // 이상적인 집행률은 70-90%\n  if (executionRate >= 70 && executionRate <= 90) return 100\n  if (executionRate >= 60 && executionRate < 70) return 80\n  if (executionRate > 90 && executionRate <= 100) return 70\n  if (executionRate >= 50 && executionRate < 60) return 60\n  return Math.max(0, executionRate)\n}\n\n// 예산 효율성 점수 계산\nfunction calculateBudgetEfficiencyScore(_projectId: string): number {\n  // 실제 구현에서는 ROI, 비용 대비 성과 등을 분석\n  const plannedROI = 150 // 계획된 ROI (%)\n  const actualROI = 120 // 실제 ROI (%)\n\n  const efficiencyRate = (actualROI / plannedROI) * 100\n  return Math.min(100, efficiencyRate)\n}\n\n// 예산 편차 점수 계산\nfunction calculateBudgetVarianceScore(_projectId: string): number {\n  // 실제 구현에서는 카테고리별 예산 편차를 분석\n  const categoryVariances = [\n    { category: 'PERSONNEL_CASH', variance: 5 }, // 5% 편차\n    { category: 'MATERIAL', variance: -10 }, // 10% 절약\n    { category: 'RESEARCH_ACTIVITY', variance: 15 }, // 15% 초과\n  ]\n\n  const averageVariance =\n    categoryVariances.reduce((sum, cat) => sum + Math.abs(cat.variance), 0) /\n    categoryVariances.length\n\n  // 편차가 적을수록 높은 점수\n  if (averageVariance <= 5) return 100\n  if (averageVariance <= 10) return 80\n  if (averageVariance <= 15) return 60\n  if (averageVariance <= 20) return 40\n  return Math.max(0, 100 - averageVariance)\n}\n\n// 인력 헬스 계산\nfunction calculatePeopleHealth(_projectId: string): number {\n  // 1. 참여율 충족도 (40%)\n  const participationScore = calculateParticipationHealth(projectId)\n\n  // 2. 인력 안정성 (30%)\n  const stabilityScore = calculateStabilityHealth(projectId)\n\n  // 3. 성과 수준 (30%)\n  const performanceScore = calculatePerformanceHealth(projectId)\n\n  const totalScore = participationScore * 0.4 + stabilityScore * 0.3 + performanceScore * 0.3\n  return Math.round(totalScore)\n}\n\n// 참여율 헬스 계산\nfunction calculateParticipationHealth(_projectId: string): number {\n  // 실제 구현에서는 participationAssignments 데이터를 분석\n  const mockParticipants = [\n    { personId: 'person-1', assignedRate: 100, actualRate: 95 },\n    { personId: 'person-2', assignedRate: 80, actualRate: 85 },\n    { personId: 'person-3', assignedRate: 60, actualRate: 55 },\n    { personId: 'person-4', assignedRate: 100, actualRate: 100 },\n  ]\n\n  const totalParticipants = mockParticipants.length\n  let totalScore = 0\n\n  mockParticipants.forEach((participant) => {\n    const rate = participant.actualRate / participant.assignedRate\n    if (rate >= 0.9 && rate <= 1.1) {\n      totalScore += 100 // 이상적인 참여율\n    } else if (rate >= 0.8 && rate < 0.9) {\n      totalScore += 80 // 약간 부족\n    } else if (rate > 1.1 && rate <= 1.2) {\n      totalScore += 70 // 약간 초과\n    } else {\n      totalScore += Math.max(0, rate * 100) // 비례 점수\n    }\n  })\n\n  return totalScore / totalParticipants\n}\n\n// 인력 안정성 헬스 계산\nfunction calculateStabilityHealth(_projectId: string): number {\n  // 실제 구현에서는 인력 이탈률, 교체 빈도 등을 분석\n  const mockStabilityData = {\n    totalParticipants: 8,\n    departures: 1,\n    replacements: 1,\n    averageTenure: 18, // months\n    turnoverRate: 12.5, // %\n  }\n\n  const turnoverScore = Math.max(0, 100 - mockStabilityData.turnoverRate * 2)\n  const tenureScore = Math.min(100, mockStabilityData.averageTenure * 5)\n\n  return (turnoverScore + tenureScore) / 2\n}\n\n// 성과 수준 헬스 계산\nfunction calculatePerformanceHealth(_projectId: string): number {\n  // 실제 구현에서는 성과 평가 데이터를 분석\n  const mockPerformanceData = {\n    excellent: 3,\n    good: 4,\n    average: 1,\n    belowAverage: 0,\n    poor: 0,\n  }\n\n  const totalParticipants = Object.values(mockPerformanceData).reduce(\n    (sum, count) => sum + count,\n    0,\n  )\n  const weightedScore =\n    mockPerformanceData.excellent * 100 +\n    mockPerformanceData.good * 80 +\n    mockPerformanceData.average * 60 +\n    mockPerformanceData.belowAverage * 40 +\n    mockPerformanceData.poor * 20\n\n  return weightedScore / totalParticipants\n}\n\n// 리스크 헬스 계산\nfunction calculateRiskHealth(_projectId: string): number {\n  // 1. 기술적 리스크 (30%)\n  const technicalRiskScore = calculateTechnicalRiskScore(projectId)\n\n  // 2. 일정 리스크 (25%)\n  const scheduleRiskScore = calculateScheduleRiskScore(projectId)\n\n  // 3. 예산 리스크 (25%)\n  const budgetRiskScore = calculateBudgetRiskScore(projectId)\n\n  // 4. 인력 리스크 (20%)\n  const peopleRiskScore = calculatePeopleRiskScore(projectId)\n\n  const totalScore =\n    technicalRiskScore * 0.3 +\n    scheduleRiskScore * 0.25 +\n    budgetRiskScore * 0.25 +\n    peopleRiskScore * 0.2\n  return Math.round(totalScore)\n}\n\n// 기술적 리스크 점수 계산\nfunction calculateTechnicalRiskScore(_projectId: string): number {\n  // 실제 구현에서는 기술적 이슈, 복잡도 등을 분석\n  const mockTechnicalRisks = [\n    { type: 'complexity', level: 'medium', impact: 'high' },\n    { type: 'dependency', level: 'high', impact: 'medium' },\n    { type: 'innovation', level: 'high', impact: 'high' },\n  ]\n\n  let totalRiskScore = 0\n  mockTechnicalRisks.forEach((risk) => {\n    const levelScore = risk.level === 'low' ? 20 : risk.level === 'medium' ? 50 : 80\n    const impactScore = risk.impact === 'low' ? 20 : risk.impact === 'medium' ? 50 : 80\n    totalRiskScore += (levelScore + impactScore) / 2\n  })\n\n  const averageRiskScore = totalRiskScore / mockTechnicalRisks.length\n  return Math.max(0, 100 - averageRiskScore)\n}\n\n// 일정 리스크 점수 계산\nfunction calculateScheduleRiskScore(_projectId: string): number {\n  // 실제 구현에서는 일정 지연 위험을 분석\n  const mockScheduleRisks = {\n    delayedMilestones: 2,\n    totalMilestones: 8,\n    criticalPathDelays: 1,\n    bufferConsumption: 60, // %\n  }\n\n  const delayRate = (mockScheduleRisks.delayedMilestones / mockScheduleRisks.totalMilestones) * 100\n  const bufferScore = Math.max(0, 100 - mockScheduleRisks.bufferConsumption)\n  const criticalPathScore = mockScheduleRisks.criticalPathDelays > 0 ? 50 : 100\n\n  return (delayRate + bufferScore + criticalPathScore) / 3\n}\n\n// 예산 리스크 점수 계산\nfunction calculateBudgetRiskScore(_projectId: string): number {\n  // 실제 구현에서는 예산 초과 위험을 분석\n  const mockBudgetRisks = {\n    overrunCategories: 1,\n    totalCategories: 5,\n    remainingBudget: 40000000,\n    estimatedRemainingCost: 50000000,\n    contingencyUsed: 20, // %\n  }\n\n  const overrunRate = (mockBudgetRisks.overrunCategories / mockBudgetRisks.totalCategories) * 100\n  const budgetAdequacy =\n    (mockBudgetRisks.remainingBudget / mockBudgetRisks.estimatedRemainingCost) * 100\n  const contingencyScore = Math.max(0, 100 - mockBudgetRisks.contingencyUsed)\n\n  return (overrunRate + budgetAdequacy + contingencyScore) / 3\n}\n\n// 인력 리스크 점수 계산\nfunction calculatePeopleRiskScore(_projectId: string): number {\n  // 실제 구현에서는 인력 이탈 위험을 분석\n  const mockPeopleRisks = {\n    keyPersonnelAtRisk: 1,\n    totalKeyPersonnel: 3,\n    skillGaps: 2,\n    workloadImbalance: 30, // %\n  }\n\n  const keyPersonnelRisk =\n    (mockPeopleRisks.keyPersonnelAtRisk / mockPeopleRisks.totalKeyPersonnel) * 100\n  const skillGapScore = Math.max(0, 100 - mockPeopleRisks.skillGaps * 20)\n  const workloadScore = Math.max(0, 100 - mockPeopleRisks.workloadImbalance)\n\n  return (keyPersonnelRisk + skillGapScore + workloadScore) / 3\n}\n\n// 전체 상태 결정\nfunction determineOverallStatus(overallScore: number): 'green' | 'amber' | 'red' {\n  if (overallScore >= 80) return 'green'\n  if (overallScore >= 60) return 'amber'\n  return 'red'\n}\n\n// 헬스 인디케이터 규칙 정의\nexport function defineHealthRules(): void {\n  const rules = {\n    schedule: {\n      green: {\n        min: 80,\n        max: 100,\n        description: '일정이 계획대로 진행되고 있음',\n      },\n      amber: { min: 60, max: 79, description: '일정에 약간의 지연이 있음' },\n      red: { min: 0, max: 59, description: '일정에 심각한 지연이 있음' },\n    },\n    budget: {\n      green: {\n        min: 80,\n        max: 100,\n        description: '예산이 효율적으로 집행되고 있음',\n      },\n      amber: { min: 60, max: 79, description: '예산 집행에 주의가 필요함' },\n      red: { min: 0, max: 59, description: '예산 집행에 심각한 문제가 있음' },\n    },\n    people: {\n      green: {\n        min: 80,\n        max: 100,\n        description: '인력이 안정적으로 운영되고 있음',\n      },\n      amber: { min: 60, max: 79, description: '인력 관리에 주의가 필요함' },\n      red: { min: 0, max: 59, description: '인력에 심각한 문제가 있음' },\n    },\n    risk: {\n      green: { min: 80, max: 100, description: '리스크가 잘 관리되고 있음' },\n      amber: { min: 60, max: 79, description: '리스크 관리에 주의가 필요함' },\n      red: { min: 0, max: 59, description: '심각한 리스크가 존재함' },\n    },\n  }\n\n  healthRules.set(rules)\n}\n\n// 헬스 인디케이터 트렌드 분석\nexport function analyzeHealthTrend(projectId: string, period: 'week' | 'month' | 'quarter'): any {\n  // 실제 구현에서는 과거 헬스 인디케이터 데이터를 분석\n  const mockTrendData = {\n    week: [\n      {\n        date: '2024-01-01',\n        overall: 85,\n        schedule: 80,\n        budget: 90,\n        people: 85,\n        risk: 85,\n      },\n      {\n        date: '2024-01-08',\n        overall: 82,\n        schedule: 78,\n        budget: 88,\n        people: 83,\n        risk: 82,\n      },\n      {\n        date: '2024-01-15',\n        overall: 80,\n        schedule: 75,\n        budget: 85,\n        people: 80,\n        risk: 80,\n      },\n      {\n        date: '2024-01-22',\n        overall: 78,\n        schedule: 72,\n        budget: 82,\n        people: 78,\n        risk: 78,\n      },\n    ],\n    month: [\n      {\n        month: '2024-01',\n        overall: 85,\n        schedule: 80,\n        budget: 90,\n        people: 85,\n        risk: 85,\n      },\n      {\n        month: '2024-02',\n        overall: 82,\n        schedule: 78,\n        budget: 88,\n        people: 83,\n        risk: 82,\n      },\n      {\n        month: '2024-03',\n        overall: 80,\n        schedule: 75,\n        budget: 85,\n        people: 80,\n        risk: 80,\n      },\n    ],\n    quarter: [\n      {\n        quarter: 'Q1-2024',\n        overall: 85,\n        schedule: 80,\n        budget: 90,\n        people: 85,\n        risk: 85,\n      },\n      {\n        quarter: 'Q2-2024',\n        overall: 82,\n        schedule: 78,\n        budget: 88,\n        people: 83,\n        risk: 82,\n      },\n    ],\n  }\n\n  return mockTrendData[period]\n}\n\n// 헬스 인디케이터 알림 생성\nexport function createHealthAlert(projectId: string, indicator: HealthIndicator): void {\n  const alerts = []\n\n  // 각 영역별 알림 생성\n  if (indicator.schedule < 60) {\n    alerts.push({\n      type: 'schedule',\n      severity: 'high',\n      message: `일정 헬스 점수가 ${indicator.schedule}점으로 낮습니다.`,\n    })\n  }\n\n  if (indicator.budget < 60) {\n    alerts.push({\n      type: 'budget',\n      severity: 'high',\n      message: `예산 헬스 점수가 ${indicator.budget}점으로 낮습니다.`,\n    })\n  }\n\n  if (indicator.people < 60) {\n    alerts.push({\n      type: 'people',\n      severity: 'high',\n      message: `인력 헬스 점수가 ${indicator.people}점으로 낮습니다.`,\n    })\n  }\n\n  if (indicator.risk < 60) {\n    alerts.push({\n      type: 'risk',\n      severity: 'high',\n      message: `리스크 헬스 점수가 ${indicator.risk}점으로 낮습니다.`,\n    })\n  }\n\n  // 전체 상태가 Red인 경우\n  if (indicator.overall === 'red') {\n    alerts.push({\n      type: 'overall',\n      severity: 'critical',\n      message: `프로젝트 전체 헬스 상태가 Red입니다. 즉시 조치가 필요합니다.`,\n    })\n  }\n\n  // 알림 발송 (실제 구현에서는 알림 시스템에 전송)\n  alerts.forEach((alert) => {\n    logger.log(`Health Alert for ${projectId}:`, alert)\n  })\n}\n\n// 헬스 인디케이터 대시보드 데이터\nexport function getHealthDashboardData(): any {\n  let allIndicators: HealthIndicator[] = []\n\n  healthIndicators.subscribe((list) => {\n    allIndicators = list\n  })()\n\n  const greenCount = allIndicators.filter((h) => h.overall === 'green').length\n  const amberCount = allIndicators.filter((h) => h.overall === 'amber').length\n  const redCount = allIndicators.filter((h) => h.overall === 'red').length\n\n  const averageSchedule =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.schedule, 0) / allIndicators.length\n      : 0\n  const averageBudget =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.budget, 0) / allIndicators.length\n      : 0\n  const averagePeople =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.people, 0) / allIndicators.length\n      : 0\n  const averageRisk =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.risk, 0) / allIndicators.length\n      : 0\n\n  return {\n    totalProjects: allIndicators.length,\n    greenCount,\n    amberCount,\n    redCount,\n    averageScores: {\n      schedule: Math.round(averageSchedule),\n      budget: Math.round(averageBudget),\n      people: Math.round(averagePeople),\n      risk: Math.round(averageRisk),\n    },\n    recentIndicators: allIndicators\n      .sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime())\n      .slice(0, 10),\n  }\n}\n\n// 헬스 인디케이터 자동 업데이트\nexport function scheduleHealthIndicatorUpdates(): void {\n  // 실제 구현에서는 주기적으로 헬스 인디케이터를 업데이트\n  setInterval(\n    () => {\n      // 모든 활성 프로젝트에 대해 헬스 인디케이터 계산\n      logger.log('Updating health indicators...')\n    },\n    24 * 60 * 60 * 1000,\n  ) // 24시간마다\n}\n\n// 헬스 인디케이터 내보내기\nexport function exportHealthIndicators(format: 'json' | 'csv' | 'excel'): string {\n  let allIndicators: HealthIndicator[] = []\n\n  healthIndicators.subscribe((list) => {\n    allIndicators = list\n  })()\n\n  if (format === 'json') {\n    return JSON.stringify(allIndicators, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader = 'Project ID,Schedule,Budget,People,Risk,Overall,Last Updated\\n'\n    const csvRows = allIndicators\n      .map(\n        (h) =>\n          `${h.projectId},${h.schedule},${h.budget},${h.people},${h.risk},${h.overall},${h.lastUpdated}`,\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(allIndicators, null, 2)\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/milestone-management.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 157,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 157,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3988, 3991], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3988, 3991], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 475,
        "column": 12,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 475,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12532, 12535], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12532, 12535], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 478,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 478,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12616, 12619], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12616, 12619], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { writable } from 'svelte/store'\nimport type { Milestone, Approval } from './types'\nimport { logAudit } from './core'\n\n// 마일스톤 관리\nexport const milestones = writable<Milestone[]>([])\nexport const milestoneDeliverables = writable<Record<string, unknown[]>>({})\n\n// 분기 목표/산출물 생성\nexport function createMilestone(\n  projectId: string,\n  quarter: number,\n  title: string,\n  kpis: Record<string, unknown>,\n  dueDate: string,\n  ownerId: string,\n  deliverables: string[] = [],\n): string {\n  const milestone: Milestone = {\n    id: crypto.randomUUID(),\n    projectId,\n    quarter,\n    title,\n    kpis,\n    dueDate,\n    ownerId,\n    status: 'not-started',\n    deliverables,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  milestones.update((list) => [...list, milestone])\n  logAudit('create', 'milestone', milestone.id, {}, milestone)\n\n  return milestone.id\n}\n\n// 마일스톤 수정\nexport function updateMilestone(milestoneId: string, updates: Partial<Milestone>): void {\n  milestones.update((list) => {\n    const index = list.findIndex((m) => m.id === milestoneId)\n    if (index === -1) return list\n\n    const oldMilestone = list[index]\n    const updatedMilestone = {\n      ...oldMilestone,\n      ...updates,\n      updatedAt: new Date().toISOString(),\n    }\n\n    const newList = [...list]\n    newList[index] = updatedMilestone\n\n    logAudit('update', 'milestone', milestoneId, oldMilestone, updatedMilestone)\n    return newList\n  })\n}\n\n// 마일스톤 상태 업데이트\nexport function updateMilestoneStatus(\n  milestoneId: string,\n  status: Milestone['status'],\n  comment?: string,\n): void {\n  updateMilestone(milestoneId, { status })\n\n  if (comment) {\n    logAudit('status_change', 'milestone', milestoneId, { status, comment }, {})\n  }\n}\n\n// 산출물 업로드\nexport function uploadDeliverable(\n  milestoneId: string,\n  deliverableName: string,\n  filename: string,\n  storageUrl: string,\n  sha256: string,\n  description?: string,\n): string {\n  const deliverable = {\n    id: crypto.randomUUID(),\n    milestoneId,\n    name: deliverableName,\n    filename,\n    storageUrl,\n    sha256,\n    description,\n    uploadedAt: new Date().toISOString(),\n    uploadedBy: 'current-user',\n    version: 1,\n    status: 'uploaded',\n  }\n\n  milestoneDeliverables.update((deliverables) => {\n    const milestoneDeliverables = deliverables[milestoneId] || []\n    return {\n      ...deliverables,\n      [milestoneId]: [...milestoneDeliverables, deliverable],\n    }\n  })\n\n  logAudit('upload', 'deliverable', deliverable.id, {}, deliverable)\n\n  // 마일스톤 상태 자동 업데이트\n  checkMilestoneCompletion(milestoneId)\n\n  return deliverable.id\n}\n\n// 마일스톤 완료 여부 체크\nfunction checkMilestoneCompletion(milestoneId: string): void {\n  milestones.update((list) => {\n    const milestone = list.find((m) => m.id === milestoneId)\n    if (!milestone) return list\n\n    milestoneDeliverables.update((deliverables) => {\n      const milestoneDeliverables = deliverables[milestoneId] || []\n      const requiredDeliverables = milestone.deliverables\n      const uploadedDeliverables = milestoneDeliverables.filter((d) => d.status === 'uploaded')\n\n      // 모든 필수 산출물이 업로드되었는지 확인\n      const allDeliverablesUploaded = requiredDeliverables.every((required) =>\n        uploadedDeliverables.some((uploaded) => uploaded.name === required),\n      )\n\n      // 마일스톤 상태 업데이트\n      if (allDeliverablesUploaded && milestone.status !== 'completed') {\n        const updatedMilestone = {\n          ...milestone,\n          status: 'completed' as const,\n          updatedAt: new Date().toISOString(),\n        }\n\n        const index = list.findIndex((m) => m.id === milestoneId)\n        if (index !== -1) {\n          const newList = [...list]\n          newList[index] = updatedMilestone\n\n          logAudit('complete', 'milestone', milestoneId, milestone, updatedMilestone)\n          return newList\n        }\n      }\n\n      return list\n    })\n\n    return list\n  })\n}\n\n// KPI 업데이트\nexport function updateMilestoneKPI(\n  milestoneId: string,\n  kpiName: string,\n  value: any,\n  comment?: string,\n): void {\n  milestones.update((list) => {\n    const index = list.findIndex((m) => m.id === milestoneId)\n    if (index === -1) return list\n\n    const milestone = list[index]\n    const updatedKpis = {\n      ...milestone.kpis,\n      [kpiName]: {\n        value,\n        updatedAt: new Date().toISOString(),\n        comment,\n      },\n    }\n\n    const updatedMilestone = {\n      ...milestone,\n      kpis: updatedKpis,\n      updatedAt: new Date().toISOString(),\n    }\n\n    const newList = [...list]\n    newList[index] = updatedMilestone\n\n    logAudit('update_kpi', 'milestone', milestoneId, { kpiName, value, comment }, updatedKpis)\n    return newList\n  })\n}\n\n// 프로젝트별 마일스톤 목록\nexport function getMilestonesByProject(projectId: string): Milestone[] {\n  let projectMilestones: Milestone[] = []\n\n  milestones.subscribe((list) => {\n    projectMilestones = list\n      .filter((m) => m.projectId === projectId)\n      .sort((a, b) => a.quarter - b.quarter)\n  })()\n\n  return projectMilestones\n}\n\n// 분기별 마일스톤 목록\nexport function getMilestonesByQuarter(projectId: string, quarter: number): Milestone[] {\n  let quarterMilestones: Milestone[] = []\n\n  milestones.subscribe((list) => {\n    quarterMilestones = list\n      .filter((m) => m.projectId === projectId && m.quarter === quarter)\n      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n  })()\n\n  return quarterMilestones\n}\n\n// 마일스톤별 산출물 목록\nexport function getMilestoneDeliverables(milestoneId: string): unknown[] {\n  let deliverables: unknown[] = []\n\n  milestoneDeliverables.subscribe((deliverableMap) => {\n    deliverables = deliverableMap[milestoneId] || []\n  })()\n\n  return deliverables\n}\n\n// 마일스톤 달성률 계산\nexport function calculateMilestoneProgress(milestoneId: string): {\n  progress: number\n  completedDeliverables: number\n  totalDeliverables: number\n  status: 'on-track' | 'at-risk' | 'delayed'\n} {\n  let milestone: Milestone | undefined\n  let deliverables: unknown[] = []\n\n  milestones.subscribe((list) => {\n    milestone = list.find((m) => m.id === milestoneId)\n  })()\n\n  milestoneDeliverables.subscribe((deliverableMap) => {\n    deliverables = deliverableMap[milestoneId] || []\n  })()\n\n  if (!milestone) {\n    return {\n      progress: 0,\n      completedDeliverables: 0,\n      totalDeliverables: 0,\n      status: 'delayed',\n    }\n  }\n\n  const totalDeliverables = milestone.deliverables.length\n  const completedDeliverables = deliverables.filter((d) => d.status === 'uploaded').length\n  const progress = totalDeliverables > 0 ? (completedDeliverables / totalDeliverables) * 100 : 0\n\n  // 상태 결정\n  let status: 'on-track' | 'at-risk' | 'delayed' = 'on-track'\n  const now = new Date()\n  const dueDate = new Date(milestone.dueDate)\n  const daysUntilDue = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n\n  if (daysUntilDue < 0) {\n    status = 'delayed'\n  } else if (daysUntilDue <= 7 && progress < 80) {\n    status = 'at-risk'\n  }\n\n  return { progress, completedDeliverables, totalDeliverables, status }\n}\n\n// 프로젝트 전체 진행률 계산\nexport function calculateProjectProgress(projectId: string): {\n  overallProgress: number\n  quarterProgress: Record<number, number>\n  milestoneStatus: Record<string, unknown>\n} {\n  const projectMilestones = getMilestonesByProject(projectId)\n  const quarterProgress: Record<number, number> = {}\n  const milestoneStatus: Record<string, unknown> = {}\n\n  let totalProgress = 0\n  let totalMilestones = 0\n\n  projectMilestones.forEach((milestone) => {\n    const progress = calculateMilestoneProgress(milestone.id)\n    milestoneStatus[milestone.id] = progress\n\n    totalProgress += progress.progress\n    totalMilestones++\n\n    if (!quarterProgress[milestone.quarter]) {\n      quarterProgress[milestone.quarter] = 0\n    }\n    quarterProgress[milestone.quarter] += progress.progress\n  })\n\n  // 분기별 평균 계산\n  Object.keys(quarterProgress).forEach((quarter) => {\n    const quarterMilestones = projectMilestones.filter((m) => m.quarter === parseInt(quarter))\n    quarterProgress[parseInt(quarter)] =\n      quarterProgress[parseInt(quarter)] / quarterMilestones.length\n  })\n\n  const overallProgress = totalMilestones > 0 ? totalProgress / totalMilestones : 0\n\n  return { overallProgress, quarterProgress, milestoneStatus }\n}\n\n// 지연된 마일스톤 목록\nexport function getDelayedMilestones(): Milestone[] {\n  let delayedMilestones: Milestone[] = []\n\n  milestones.subscribe((list) => {\n    const now = new Date()\n    delayedMilestones = list.filter((milestone) => {\n      const dueDate = new Date(milestone.dueDate)\n      const isOverdue = dueDate < now\n      const isNotCompleted = milestone.status !== 'completed'\n      return isOverdue && isNotCompleted\n    })\n  })()\n\n  return delayedMilestones\n}\n\n// 위험 상태 마일스톤 목록\nexport function getAtRiskMilestones(): Milestone[] {\n  let atRiskMilestones: Milestone[] = []\n\n  milestones.subscribe((list) => {\n    atRiskMilestones = list.filter((milestone) => {\n      const progress = calculateMilestoneProgress(milestone.id)\n      return progress.status === 'at-risk'\n    })\n  })()\n\n  return atRiskMilestones\n}\n\n// 마일스톤 승인 요청\nexport function requestMilestoneApproval(\n  milestoneId: string,\n  approverId: string,\n  comment?: string,\n): string {\n  const approval: Approval = {\n    id: crypto.randomUUID(),\n    subjectType: 'milestone',\n    subjectId: milestoneId,\n    stepNo: 1,\n    approverId,\n    decision: 'pending',\n    comment,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  logAudit('approval_request', 'milestone', milestoneId, { approverId, comment }, approval)\n\n  return approval.id\n}\n\n// 마일스톤 승인 처리\nexport function approveMilestone(\n  milestoneId: string,\n  approverId: string,\n  decision: 'approved' | 'rejected',\n  comment?: string,\n): void {\n  updateMilestoneStatus(milestoneId, decision === 'approved' ? 'completed' : 'not-started', comment)\n\n  logAudit('approval_decision', 'milestone', milestoneId, { approverId, decision, comment }, {})\n}\n\n// 분기별 목표 설정 템플릿\nexport function createQuarterlyMilestoneTemplate(\n  projectId: string,\n  quarter: number,\n  templateType: 'research' | 'development' | 'commercialization',\n): Milestone[] {\n  const templates = {\n    research: [\n      {\n        title: '문헌 조사 및 기술 분석',\n        kpis: { literature_review: 0, technical_analysis: 0 },\n        deliverables: ['문헌조사보고서', '기술분석보고서'],\n      },\n      {\n        title: '실험 설계 및 초기 실험',\n        kpis: { experiment_design: 0, initial_experiments: 0 },\n        deliverables: ['실험설계서', '초기실험결과'],\n      },\n      {\n        title: '중간 결과 분석 및 보고',\n        kpis: { data_analysis: 0, interim_report: 0 },\n        deliverables: ['중간보고서', '데이터분석결과'],\n      },\n    ],\n    development: [\n      {\n        title: '요구사항 분석 및 설계',\n        kpis: { requirements_analysis: 0, system_design: 0 },\n        deliverables: ['요구사항명세서', '시스템설계서'],\n      },\n      {\n        title: '프로토타입 개발',\n        kpis: { prototype_development: 0, testing: 0 },\n        deliverables: ['프로토타입', '테스트결과'],\n      },\n      {\n        title: '성능 최적화 및 검증',\n        kpis: { optimization: 0, validation: 0 },\n        deliverables: ['최적화결과', '검증보고서'],\n      },\n    ],\n    commercialization: [\n      {\n        title: '시장 분석 및 사업화 계획',\n        kpis: { market_analysis: 0, business_plan: 0 },\n        deliverables: ['시장분석보고서', '사업화계획서'],\n      },\n      {\n        title: '파일럿 테스트 및 검증',\n        kpis: { pilot_test: 0, validation: 0 },\n        deliverables: ['파일럿테스트결과', '검증보고서'],\n      },\n      {\n        title: '사업화 준비 및 실행',\n        kpis: { commercialization_prep: 0, execution: 0 },\n        deliverables: ['사업화준비보고서', '실행계획서'],\n      },\n    ],\n  }\n\n  const template = templates[templateType]\n  const createdMilestones: Milestone[] = []\n\n  template.forEach((item, index) => {\n    const dueDate = new Date()\n    dueDate.setMonth(dueDate.getMonth() + (index + 1) * 4) // 분기별로 4개월씩\n\n    const milestoneId = createMilestone(\n      projectId,\n      quarter,\n      item.title,\n      item.kpis,\n      dueDate.toISOString().split('T')[0],\n      'current-user',\n      item.deliverables,\n    )\n\n    createdMilestones.push({\n      id: milestoneId,\n      projectId,\n      quarter,\n      title: item.title,\n      kpis: item.kpis,\n      dueDate: dueDate.toISOString().split('T')[0],\n      ownerId: 'current-user',\n      status: 'not-started',\n      deliverables: item.deliverables,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n    })\n  })\n\n  return createdMilestones\n}\n\n// 마일스톤 리포트 생성\nexport function generateMilestoneReport(\n  projectId: string,\n  quarter?: number,\n): {\n  summary: any\n  milestones: Milestone[]\n  deliverables: Record<string, unknown[]>\n  progress: any\n} {\n  const projectMilestones = quarter\n    ? getMilestonesByQuarter(projectId, quarter)\n    : getMilestonesByProject(projectId)\n\n  const deliverables: Record<string, unknown[]> = {}\n  const progress = calculateProjectProgress(projectId)\n\n  projectMilestones.forEach((milestone) => {\n    deliverables[milestone.id] = getMilestoneDeliverables(milestone.id)\n  })\n\n  const summary = {\n    totalMilestones: projectMilestones.length,\n    completedMilestones: projectMilestones.filter((m) => m.status === 'completed').length,\n    delayedMilestones: getDelayedMilestones().filter((m) => m.projectId === projectId).length,\n    atRiskMilestones: getAtRiskMilestones().filter((m) => m.projectId === projectId).length,\n    overallProgress: progress.overallProgress,\n  }\n\n  return { summary, milestones: projectMilestones, deliverables, progress }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/participation-salary.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/project-store.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2030, 2033], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2030, 2033], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 118,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 118,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3262, 3265], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3262, 3265], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 216,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 216,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5950, 5953], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5950, 5953], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 250,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 250,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6920, 6923], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6920, 6923], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 355,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 355,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9931, 9934], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9931, 9934], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 448,
        "column": 39,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 448,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12723, 12726], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12723, 12726], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Project Management Store\n// 프로젝트 관리 시스템의 메인 스토어\n\nimport { logger } from '$lib/utils/logger'\nimport { derived, writable } from 'svelte/store'\nimport type {\n  BudgetAlert,\n  BudgetSummaryByYear,\n  EmployeeParticipationSummary,\n  ParticipationRate,\n  ParticipationRateAlert,\n  ParticipationRateFilters,\n  ParticipationRateHistory,\n  ParticipationRateStats,\n  Project,\n  ProjectBudget,\n  ProjectFilters,\n  ProjectMember,\n  ProjectStatusStats,\n  ProjectSummary,\n} from './types'\n\n// 기본 상태\nconst initialState = {\n  projects: [] as Project[],\n  projectMembers: [] as ProjectMember[],\n  projectBudgets: [] as ProjectBudget[],\n  participationRates: [] as ParticipationRate[],\n  participationRateHistory: [] as ParticipationRateHistory[],\n  summary: null as ProjectSummary | null,\n  employeeParticipationSummary: [] as EmployeeParticipationSummary[],\n  budgetSummaryByYear: [] as BudgetSummaryByYear[],\n  alerts: [] as (ParticipationRateAlert | BudgetAlert)[],\n  loading: false,\n  error: null as string | null,\n}\n\n// 메인 스토어\nexport const projectStore = writable(initialState)\n\n// 프로젝트 관련 액션들\nexport const projectActions = {\n  // 프로젝트 목록 로드\n  async loadProjects(filters?: ProjectFilters) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const params = new URLSearchParams()\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value) params.append(key, value)\n        })\n      }\n\n      const response = await fetch(`/api/project-management/projects?${params}`)\n      if (!response.ok) throw new Error('프로젝트 목록을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projects: data.data || [],\n        loading: false,\n      }))\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n    }\n  },\n\n  // 프로젝트 생성\n  async createProject(projectData: any) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      logger.log('프로젝트 생성 요청 데이터:', projectData)\n\n      const response = await fetch('/api/project-management/projects', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(projectData),\n      })\n\n      logger.log('프로젝트 생성 응답 상태:', response.status)\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        logger.error('프로젝트 생성 API 에러 응답:', errorData)\n        throw new Error(errorData.message || '프로젝트 생성에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      logger.log('프로젝트 생성 성공 응답:', data)\n\n      projectStore.update((state) => ({\n        ...state,\n        projects: [...state.projects, data.data],\n        loading: false,\n      }))\n\n      return data.data\n    } catch (error) {\n      logger.error('프로젝트 생성 API 호출 실패:', error)\n      logger.error('요청 데이터:', projectData)\n\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 수정\n  async updateProject(id: string, projectData: any) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/projects/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(projectData),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 수정에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projects: state.projects.map((p) => (p.id === id ? data.data : p)),\n        loading: false,\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 삭제\n  async deleteProject(id: string) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/projects/${id}`, {\n        method: 'DELETE',\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 삭제에 실패했습니다.')\n      }\n\n      projectStore.update((state) => ({\n        ...state,\n        projects: state.projects.filter((p) => p.id !== id),\n        loading: false,\n      }))\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 요약 정보 로드\n  async loadProjectSummary() {\n    try {\n      const response = await fetch('/api/project-management/summary')\n      if (!response.ok) throw new Error('프로젝트 요약 정보를 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        summary: data.data,\n      }))\n    } catch (error) {\n      logger.error('프로젝트 요약 정보 로드 실패:', error)\n    }\n  },\n}\n\n// 프로젝트 멤버 관련 액션들\nexport const projectMemberActions = {\n  // 프로젝트 멤버 목록 로드\n  async loadProjectMembers(projectId: string) {\n    try {\n      const response = await fetch(`/api/project-management/projects/${projectId}/members`)\n      if (!response.ok) throw new Error('프로젝트 멤버 목록을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projectMembers: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('프로젝트 멤버 목록 로드 실패:', error)\n    }\n  },\n\n  // 프로젝트 멤버 추가\n  async addProjectMember(memberData: any) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch('/api/project-management/project-members', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(memberData),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 멤버 추가에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projectMembers: [...state.projectMembers, data.data],\n        loading: false,\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 멤버 수정\n  async updateProjectMember(id: string, memberData: any) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/project-members/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(memberData),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 멤버 수정에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projectMembers: state.projectMembers.map((m) => (m.id === id ? data.data : m)),\n        loading: false,\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 멤버 삭제\n  async deleteProjectMember(id: string) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/project-members/${id}`, {\n        method: 'DELETE',\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 멤버 삭제에 실패했습니다.')\n      }\n\n      projectStore.update((state) => ({\n        ...state,\n        projectMembers: state.projectMembers.filter((m) => m.id !== id),\n        loading: false,\n      }))\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n}\n\n// 참여율 관리 관련 액션들\nexport const participationRateActions = {\n  // 참여율 현황 로드\n  async loadParticipationRates(filters?: ParticipationRateFilters) {\n    try {\n      const params = new URLSearchParams()\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value) params.append(key, value)\n        })\n      }\n\n      const response = await fetch(`/api/project-management/participation-rates?${params}`)\n      if (!response.ok) throw new Error('참여율 현황을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        participationRates: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('참여율 현황 로드 실패:', error)\n    }\n  },\n\n  // 개인별 참여율 요약 로드\n  async loadEmployeeParticipationSummary() {\n    try {\n      const response = await fetch('/api/project-management/participation-rates/summary')\n      if (!response.ok) throw new Error('개인별 참여율 요약을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        employeeParticipationSummary: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('개인별 참여율 요약 로드 실패:', error)\n    }\n  },\n\n  // 참여율 업데이트\n  async updateParticipationRate(rateData: any) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch('/api/project-management/participation-rates', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(rateData),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '참여율 업데이트에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        participationRates: state.participationRates.map((r) =>\n          r.employeeId === rateData.employeeId && r.projectId === rateData.projectId\n            ? { ...r, participationRate: rateData.participationRate }\n            : r,\n        ),\n        loading: false,\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n\n  // 참여율 변경 이력 로드\n  async loadParticipationRateHistory(employeeId?: string, projectId?: string) {\n    try {\n      const params = new URLSearchParams()\n      if (employeeId) params.append('employeeId', employeeId)\n      if (projectId) params.append('projectId', projectId)\n\n      const response = await fetch(`/api/project-management/participation-rates/history?${params}`)\n      if (!response.ok) throw new Error('참여율 변경 이력을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        participationRateHistory: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('참여율 변경 이력 로드 실패:', error)\n    }\n  },\n}\n\n// 사업비 관리 관련 액션들\nexport const budgetActions = {\n  // 프로젝트 사업비 로드\n  async loadProjectBudgets(projectId: string) {\n    try {\n      const response = await fetch(`/api/project-management/projects/${projectId}/budgets`)\n      if (!response.ok) throw new Error('프로젝트 사업비를 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projectBudgets: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('프로젝트 사업비 로드 실패:', error)\n    }\n  },\n\n  // 연차별 사업비 요약 로드\n  async loadBudgetSummaryByYear() {\n    try {\n      const response = await fetch('/api/project-management/budgets/summary-by-year')\n      if (!response.ok) throw new Error('연차별 사업비 요약을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        budgetSummaryByYear: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('연차별 사업비 요약 로드 실패:', error)\n    }\n  },\n\n  // 사업비 생성/수정\n  async saveProjectBudget(budgetData: any) {\n    projectStore.update((state) => ({ ...state, loading: true, error: null }))\n\n    try {\n      const isUpdate = budgetData.id\n      const url = isUpdate\n        ? `/api/project-management/project-budgets/${budgetData.id}`\n        : '/api/project-management/project-budgets'\n      const method = isUpdate ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(budgetData),\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '사업비 저장에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        projectBudgets: isUpdate\n          ? state.projectBudgets.map((b) => (b.id === budgetData.id ? data.data : b))\n          : [...state.projectBudgets, data.data],\n        loading: false,\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update((state) => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.',\n      }))\n      throw error\n    }\n  },\n}\n\n// 알림 관련 액션들\nexport const alertActions = {\n  // 알림 로드\n  async loadAlerts() {\n    try {\n      const response = await fetch('/api/project-management/alerts')\n      if (!response.ok) throw new Error('알림을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update((state) => ({\n        ...state,\n        alerts: data.data || [],\n      }))\n    } catch (error) {\n      logger.error('알림 로드 실패:', error)\n    }\n  },\n}\n\n// Derived stores\nexport const activeProjects = derived(projectStore, ($store) =>\n  $store.projects.filter((p) => p.status === 'active'),\n)\n\nexport const projectStatusStats = derived(projectStore, ($store) => {\n  const stats: ProjectStatusStats = {\n    planning: 0,\n    active: 0,\n    completed: 0,\n    cancelled: 0,\n    suspended: 0,\n  }\n\n  $store.projects.forEach((project) => {\n    stats[project.status] = (stats[project.status] || 0) + 1\n  })\n\n  return stats\n})\n\nexport const overParticipationEmployees = derived(projectStore, ($store) =>\n  $store.employeeParticipationSummary.filter((emp) => emp.participationStatus === 'OVER_LIMIT'),\n)\n\nexport const participationRateStats = derived(projectStore, ($store) => {\n  const summary = $store.employeeParticipationSummary\n  const stats: ParticipationRateStats = {\n    overLimit: summary.filter((emp) => emp.participationStatus === 'OVER_LIMIT').length,\n    full: summary.filter((emp) => emp.participationStatus === 'FULL').length,\n    available: summary.filter((emp) => emp.participationStatus === 'AVAILABLE').length,\n    averageRate:\n      summary.length > 0\n        ? summary.reduce((sum, emp) => sum + emp.totalParticipationRate, 0) / summary.length\n        : 0,\n  }\n\n  return stats\n})\n\n// 초기 데이터 로드\nexport const initializeProjectManagement = async () => {\n  await Promise.all([\n    projectActions.loadProjectSummary(),\n    participationRateActions.loadEmployeeParticipationSummary(),\n    budgetActions.loadBudgetSummaryByYear(),\n    alertActions.loadAlerts(),\n  ])\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/rbac.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/replacement-system.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 79,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 79,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2032, 2035], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2032, 2035], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2373, 2376], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2373, 2376], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 108,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 108,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2714, 2717], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2714, 2717], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 109,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 109,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2745, 2748], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2745, 2748], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 175,
        "column": 14,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 175,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4253, 4256], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4253, 4256], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 176,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 176,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4281, 4284], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4281, 4284], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4312, 4315], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4312, 4315], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 405,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 405,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9781, 9784], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9781, 9784], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 451,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 451,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10778, 10781], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10778, 10781], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 502,
        "column": 74,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 502,
        "endColumn": 77,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12434, 12437], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12434, 12437], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 528,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 528,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13040, 13043], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13040, 13043], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from '$lib/utils/logger'\nimport { writable } from 'svelte/store'\nimport { logAudit } from './core'\nimport type { ReplacementRecommendation } from './types'\n\n// 대체 추천 시스템\nexport const replacementRecommendations = writable<ReplacementRecommendation[]>([])\nexport const skillMatrix = writable<Record<string, unknown[]>>({})\nexport const availabilityMatrix = writable<Record<string, unknown>>({})\n\n// 인력 이탈 시 대체 추천 생성\nexport function generateReplacementRecommendation(\n  projectId: string,\n  departingPersonId: string,\n  reason: 'resignation' | 'transfer' | 'medical' | 'other',\n  effectiveDate: string,\n  urgency: 'low' | 'medium' | 'high' | 'critical',\n): string {\n  const recommendationId = crypto.randomUUID()\n\n  // 대체자 추천 로직 실행\n  const recommendedPersons = findReplacementCandidates(projectId, departingPersonId, urgency)\n\n  const recommendation: ReplacementRecommendation = {\n    id: recommendationId,\n    projectId,\n    departingPersonId,\n    recommendedPersons,\n    status: 'pending',\n    createdAt: new Date().toISOString(),\n  }\n\n  replacementRecommendations.update((list) => [...list, recommendation])\n  logAudit(\n    'create',\n    'replacement_recommendation',\n    recommendationId,\n    {\n      projectId,\n      departingPersonId,\n      reason,\n      urgency,\n    },\n    recommendation,\n  )\n\n  return recommendationId\n}\n\n// 대체자 후보 찾기\nfunction findReplacementCandidates(\n  projectId: string,\n  departingPersonId: string,\n  urgency: 'low' | 'medium' | 'high' | 'critical',\n): Array<{\n  personId: string\n  score: number\n  reason: string\n  availability: number\n}> {\n  // 1. 프로젝트 요구사항 분석\n  const projectRequirements = analyzeProjectRequirements(projectId)\n\n  // 2. 이탈자 프로필 분석\n  const departingPersonProfile = analyzePersonProfile(departingPersonId)\n\n  // 3. 후보자 스코어링\n  const candidates = scoreReplacementCandidates(\n    projectRequirements,\n    departingPersonProfile,\n    urgency,\n  )\n\n  // 4. 상위 3명 반환\n  return candidates.slice(0, 3)\n}\n\n// 프로젝트 요구사항 분석\nfunction analyzeProjectRequirements(_projectId: string): any {\n  // 실제 구현에서는 프로젝트 데이터를 분석\n  return {\n    requiredSkills: ['JavaScript', 'React', 'Node.js', 'Database'],\n    experienceLevel: 'senior',\n    department: '개발팀',\n    participationRate: 80,\n    startDate: '2024-02-01',\n    duration: 6, // months\n    budget: 50000000,\n  }\n}\n\n// 개인 프로필 분석\nfunction analyzePersonProfile(_personId: string): any {\n  // 실제 구현에서는 개인 데이터를 분석\n  return {\n    skills: ['JavaScript', 'React', 'Node.js', 'MongoDB'],\n    experienceLevel: 'senior',\n    department: '개발팀',\n    currentParticipation: 100,\n    salary: 6000000,\n    performance: 'excellent',\n    availability: 80,\n  }\n}\n\n// 대체자 후보 스코어링\nfunction scoreReplacementCandidates(\n  projectRequirements: any,\n  departingPersonProfile: any,\n  urgency: string,\n): Array<{\n  personId: string\n  score: number\n  reason: string\n  availability: number\n}> {\n  // 실제 구현에서는 모든 직원을 대상으로 스코어링\n  const candidates = [\n    {\n      personId: 'person-1',\n      name: '김대체',\n      skills: ['JavaScript', 'React', 'Node.js', 'PostgreSQL'],\n      experienceLevel: 'senior',\n      department: '개발팀',\n      currentParticipation: 60,\n      salary: 5500000,\n      performance: 'excellent',\n      availability: 90,\n    },\n    {\n      personId: 'person-2',\n      name: '이대체',\n      skills: ['JavaScript', 'Vue.js', 'Python', 'MySQL'],\n      experienceLevel: 'mid',\n      department: '개발팀',\n      currentParticipation: 40,\n      salary: 4500000,\n      performance: 'good',\n      availability: 85,\n    },\n    {\n      personId: 'person-3',\n      name: '박대체',\n      skills: ['TypeScript', 'React', 'Express', 'MongoDB'],\n      experienceLevel: 'senior',\n      department: '개발팀',\n      currentParticipation: 70,\n      salary: 5800000,\n      performance: 'excellent',\n      availability: 75,\n    },\n  ]\n\n  return candidates\n    .map((candidate) => {\n      const score = calculateCandidateScore(\n        candidate,\n        projectRequirements,\n        departingPersonProfile,\n        urgency,\n      )\n\n      return {\n        personId: candidate.personId,\n        score: score.total,\n        reason: score.reason,\n        availability: candidate.availability,\n      }\n    })\n    .sort((a, b) => b.score - a.score)\n}\n\n// 후보자 점수 계산\nfunction calculateCandidateScore(\n  candidate: any,\n  projectRequirements: any,\n  departingPersonProfile: any,\n  urgency: string,\n): { total: number; reason: string } {\n  let totalScore = 0\n  const reasons: string[] = []\n\n  // 1. 기술 스킬 매칭 (40%)\n  const skillScore = calculateSkillScore(candidate.skills, projectRequirements.requiredSkills)\n  totalScore += skillScore * 0.4\n  reasons.push(`기술 스킬: ${skillScore}점`)\n\n  // 2. 경험 수준 매칭 (20%)\n  const experienceScore = calculateExperienceScore(\n    candidate.experienceLevel,\n    projectRequirements.experienceLevel,\n  )\n  totalScore += experienceScore * 0.2\n  reasons.push(`경험 수준: ${experienceScore}점`)\n\n  // 3. 가용성 (20%)\n  const availabilityScore = calculateAvailabilityScore(\n    candidate.availability,\n    projectRequirements.participationRate,\n  )\n  totalScore += availabilityScore * 0.2\n  reasons.push(`가용성: ${availabilityScore}점`)\n\n  // 4. 성과 이력 (10%)\n  const performanceScore = calculatePerformanceScore(candidate.performance)\n  totalScore += performanceScore * 0.1\n  reasons.push(`성과: ${performanceScore}점`)\n\n  // 5. 급여 적정성 (10%)\n  const salaryScore = calculateSalaryScore(candidate.salary, departingPersonProfile.salary)\n  totalScore += salaryScore * 0.1\n  reasons.push(`급여 적정성: ${salaryScore}점`)\n\n  // 긴급도 보정\n  if (urgency === 'critical') {\n    totalScore *= 1.2\n  } else if (urgency === 'high') {\n    totalScore *= 1.1\n  }\n\n  return {\n    total: Math.round(totalScore),\n    reason: reasons.join(', '),\n  }\n}\n\n// 기술 스킬 점수 계산\nfunction calculateSkillScore(candidateSkills: string[], requiredSkills: string[]): number {\n  const matchedSkills = candidateSkills.filter((skill) => requiredSkills.includes(skill))\n  return (matchedSkills.length / requiredSkills.length) * 100\n}\n\n// 경험 수준 점수 계산\nfunction calculateExperienceScore(candidateLevel: string, requiredLevel: string): number {\n  const levelScores = {\n    intern: 20,\n    junior: 40,\n    mid: 60,\n    senior: 80,\n    lead: 90,\n    manager: 100,\n  }\n\n  const candidateScore = levelScores[candidateLevel as keyof typeof levelScores] || 0\n  const requiredScore = levelScores[requiredLevel as keyof typeof levelScores] || 0\n\n  if (candidateScore >= requiredScore) {\n    return 100\n  } else {\n    return (candidateScore / requiredScore) * 100\n  }\n}\n\n// 가용성 점수 계산\nfunction calculateAvailabilityScore(\n  candidateAvailability: number,\n  requiredParticipation: number,\n): number {\n  if (candidateAvailability >= requiredParticipation) {\n    return 100\n  } else {\n    return (candidateAvailability / requiredParticipation) * 100\n  }\n}\n\n// 성과 점수 계산\nfunction calculatePerformanceScore(performance: string): number {\n  const performanceScores = {\n    excellent: 100,\n    good: 80,\n    average: 60,\n    below_average: 40,\n    poor: 20,\n  }\n\n  return performanceScores[performance as keyof typeof performanceScores] || 0\n}\n\n// 급여 적정성 점수 계산\nfunction calculateSalaryScore(candidateSalary: number, departingPersonSalary: number): number {\n  const ratio = candidateSalary / departingPersonSalary\n\n  if (ratio <= 0.8) {\n    return 100 // 20% 이상 저렴\n  } else if (ratio <= 1.0) {\n    return 90 // 동일하거나 저렴\n  } else if (ratio <= 1.2) {\n    return 70 // 20% 이내 비쌈\n  } else {\n    return 50 // 20% 이상 비쌈\n  }\n}\n\n// 대체 추천 승인\nexport function approveReplacementRecommendation(\n  recommendationId: string,\n  approvedPersonId: string,\n  approverId: string,\n  comment?: string,\n): void {\n  replacementRecommendations.update((list) => {\n    const index = list.findIndex((r) => r.id === recommendationId)\n    if (index === -1) return list\n\n    const recommendation = list[index]\n    const updatedRecommendation = {\n      ...recommendation,\n      status: 'approved' as const,\n      approvedBy: approverId,\n      approvedAt: new Date().toISOString(),\n    }\n\n    const newList = [...list]\n    newList[index] = updatedRecommendation\n\n    logAudit(\n      'approve',\n      'replacement_recommendation',\n      recommendationId,\n      {\n        approvedPersonId,\n        approverId,\n        comment,\n      },\n      updatedRecommendation,\n    )\n\n    // 승인된 대체자 배정 처리\n    processReplacementAssignment(\n      recommendation.projectId,\n      recommendation.departingPersonId,\n      approvedPersonId,\n      recommendation.createdAt,\n    )\n\n    return newList\n  })\n}\n\n// 대체자 배정 처리\nfunction processReplacementAssignment(\n  projectId: string,\n  departingPersonId: string,\n  replacementPersonId: string,\n  effectiveDate: string,\n): void {\n  // 1. 기존 참여 배정 종료\n  // 2. 새로운 참여 배정 생성\n  // 3. 급여 변동 처리\n  // 4. 알림 발송\n\n  logAudit(\n    'process_replacement',\n    'participation_assignment',\n    projectId,\n    {\n      departingPersonId,\n      replacementPersonId,\n      effectiveDate,\n    },\n    {},\n  )\n}\n\n// 대체 추천 거부\nexport function rejectReplacementRecommendation(\n  recommendationId: string,\n  rejectorId: string,\n  reason: string,\n): void {\n  replacementRecommendations.update((list) => {\n    const index = list.findIndex((r) => r.id === recommendationId)\n    if (index === -1) return list\n\n    const recommendation = list[index]\n    const updatedRecommendation = {\n      ...recommendation,\n      status: 'rejected' as const,\n      approvedBy: rejectorId,\n      approvedAt: new Date().toISOString(),\n    }\n\n    const newList = [...list]\n    newList[index] = updatedRecommendation\n\n    logAudit(\n      'reject',\n      'replacement_recommendation',\n      recommendationId,\n      {\n        rejectorId,\n        reason,\n      },\n      updatedRecommendation,\n    )\n\n    return newList\n  })\n}\n\n// 채용 요청 생성 (적합한 대체자가 없는 경우)\nexport function createRecruitmentRequest(\n  projectId: string,\n  departingPersonId: string,\n  requirements: any,\n  urgency: 'low' | 'medium' | 'high' | 'critical',\n): string {\n  const requestId = crypto.randomUUID()\n\n  const recruitmentRequest = {\n    id: requestId,\n    projectId,\n    departingPersonId,\n    requirements,\n    urgency,\n    status: 'pending',\n    createdAt: new Date().toISOString(),\n    createdBy: 'current-user',\n  }\n\n  logAudit(\n    'create',\n    'recruitment_request',\n    requestId,\n    {\n      projectId,\n      departingPersonId,\n      requirements,\n      urgency,\n    },\n    recruitmentRequest,\n  )\n\n  return requestId\n}\n\n// 대체 추천 이력 조회\nexport function getReplacementHistory(projectId: string): ReplacementRecommendation[] {\n  let history: ReplacementRecommendation[] = []\n\n  replacementRecommendations.subscribe((list) => {\n    history = list\n      .filter((r) => r.projectId === projectId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n  })()\n\n  return history\n}\n\n// 대체 추천 통계\nexport function getReplacementStatistics(projectId: string): any {\n  const history = getReplacementHistory(projectId)\n\n  const totalRecommendations = history.length\n  const approvedRecommendations = history.filter((r) => r.status === 'approved').length\n  const rejectedRecommendations = history.filter((r) => r.status === 'rejected').length\n  const pendingRecommendations = history.filter((r) => r.status === 'pending').length\n\n  const averageScore =\n    history.length > 0\n      ? history.reduce((sum, r) => sum + r.recommendedPersons[0]?.score || 0, 0) / history.length\n      : 0\n\n  const averageProcessingTime = calculateAverageProcessingTime(history)\n\n  return {\n    totalRecommendations,\n    approvedRecommendations,\n    rejectedRecommendations,\n    pendingRecommendations,\n    approvalRate:\n      totalRecommendations > 0 ? (approvedRecommendations / totalRecommendations) * 100 : 0,\n    averageScore,\n    averageProcessingTime,\n  }\n}\n\n// 평균 처리 시간 계산\nfunction calculateAverageProcessingTime(history: ReplacementRecommendation[]): number {\n  const processedRecommendations = history.filter((r) => r.approvedAt)\n\n  if (processedRecommendations.length === 0) return 0\n\n  const totalTime = processedRecommendations.reduce((sum, r) => {\n    const created = new Date(r.createdAt).getTime()\n    const approved = new Date(r.approvedAt!).getTime()\n    return sum + (approved - created)\n  }, 0)\n\n  return totalTime / processedRecommendations.length\n}\n\n// 스킬 매트릭스 업데이트\nexport function updateSkillMatrix(personId: string, skills: unknown[]): void {\n  skillMatrix.update((matrix) => ({\n    ...matrix,\n    [personId]: skills,\n  }))\n}\n\n// 가용성 매트릭스 업데이트\nexport function updateAvailabilityMatrix(personId: string, availability: any): void {\n  availabilityMatrix.update((matrix) => ({\n    ...matrix,\n    [personId]: availability,\n  }))\n}\n\n// 대체 추천 알림 생성\nexport function createReplacementNotification(\n  recommendationId: string,\n  notificationType: 'created' | 'approved' | 'rejected',\n  recipients: string[],\n): void {\n  const notification = {\n    id: crypto.randomUUID(),\n    recommendationId,\n    type: notificationType,\n    recipients,\n    createdAt: new Date().toISOString(),\n  }\n\n  // 실제 구현에서는 알림 시스템에 전송\n  logger.log('Replacement notification:', notification)\n}\n\n// 대체 추천 대시보드 데이터\nexport function getReplacementDashboardData(): any {\n  let allRecommendations: ReplacementRecommendation[] = []\n\n  replacementRecommendations.subscribe((list) => {\n    allRecommendations = list\n  })()\n\n  const recentRecommendations = allRecommendations\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 10)\n\n  const pendingCount = allRecommendations.filter((r) => r.status === 'pending').length\n  const approvedCount = allRecommendations.filter((r) => r.status === 'approved').length\n  const rejectedCount = allRecommendations.filter((r) => r.status === 'rejected').length\n\n  return {\n    recentRecommendations,\n    pendingCount,\n    approvedCount,\n    rejectedCount,\n    totalCount: allRecommendations.length,\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/reporting.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 40,
        "column": 86,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 40,
        "endColumn": 89,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1050, 1053], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1050, 1053], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 71,
        "column": 95,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 71,
        "endColumn": 98,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1927, 1930], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1927, 1930], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 103,
        "column": 94,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 103,
        "endColumn": 97,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2684, 2687], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2684, 2687], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 134,
        "column": 96,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 134,
        "endColumn": 99,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3369, 3372], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3369, 3372], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 165,
        "column": 4,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 165,
        "endColumn": 7,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4015, 4018], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4015, 4018], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 183,
        "column": 91,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 183,
        "endColumn": 94,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4418, 4421], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4418, 4421], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 216,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 216,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5100, 5103], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5100, 5103], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 283,
        "column": 92,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 283,
        "endColumn": 95,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6731, 6734], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6731, 6734], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 298,
        "column": 96,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 298,
        "endColumn": 99,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7475, 7478], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7475, 7478], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 310,
        "column": 91,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 310,
        "endColumn": 94,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7829, 7832], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7829, 7832], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 345,
        "column": 89,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 345,
        "endColumn": 92,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8535, 8538], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8535, 8538], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 375,
        "column": 95,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 375,
        "endColumn": 98,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9158, 9161], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9158, 9161], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 409,
        "column": 95,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 409,
        "endColumn": 98,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9893, 9896], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9893, 9896], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 436,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 436,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10417, 10420], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10417, 10420], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 473,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 473,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11175, 11178], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11175, 11178], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 506,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 506,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11850, 11853], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11850, 11853], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 525,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 525,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12227, 12230], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12227, 12230], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 596,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 596,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14247, 14250], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14247, 14250], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 625,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 625,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15169, 15172], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15169, 15172], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 638,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 638,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15540, 15543], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15540, 15543], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 675,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 675,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16447, 16450], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16447, 16450], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 21,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from '$lib/utils/logger'\nimport { writable } from 'svelte/store'\nimport { logAudit } from './core'\nimport type { Report } from './types'\n\n// 리포트 관리\nexport const reports = writable<Report[]>([])\nexport const reportTemplates = writable<Record<string, unknown>>({})\n\n// 주간 리포트 생성\nexport function generateWeeklyReport(\n  projectId: string,\n  weekStart: string,\n  weekEnd: string,\n): string {\n  const reportId = crypto.randomUUID()\n\n  // 데이터 수집\n  const summaryData = collectWeeklyData(projectId, weekStart, weekEnd)\n\n  const report: Report = {\n    id: reportId,\n    projectId,\n    type: 'weekly',\n    periodStart: weekStart,\n    periodEnd: weekEnd,\n    summaryJson: summaryData,\n    generatedAt: new Date().toISOString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  reports.update((list) => [...list, report])\n  logAudit('generate', 'weekly_report', reportId, {}, report)\n\n  return reportId\n}\n\n// 주간 데이터 수집\nfunction collectWeeklyData(_projectId: string, weekStart: string, _weekEnd: string): any {\n  // 마일스톤 달성률\n  const milestoneProgress = calculateMilestoneProgress(projectId, weekStart, weekEnd)\n\n  // 예산 집행률\n  const budgetExecution = calculateBudgetExecution(projectId, weekStart, weekEnd)\n\n  // 인력 참여율\n  const participationRate = calculateParticipationRate(projectId, weekStart, weekEnd)\n\n  // 연구노트 제출률\n  const researchNoteSubmission = calculateResearchNoteSubmission(projectId, weekStart, weekEnd)\n\n  // 이슈 및 리스크\n  const issuesAndRisks = collectIssuesAndRisks(projectId, weekStart, weekEnd)\n\n  // 다음 주 계획\n  const nextWeekPlan = generateNextWeekPlan(projectId)\n\n  return {\n    milestoneProgress,\n    budgetExecution,\n    participationRate,\n    researchNoteSubmission,\n    issuesAndRisks,\n    nextWeekPlan,\n    generatedAt: new Date().toISOString(),\n  }\n}\n\n// 마일스톤 진행률 계산\nfunction calculateMilestoneProgress(_projectId: string, weekStart: string, _weekEnd: string): any {\n  // 실제 구현에서는 milestones 스토어에서 데이터 가져오기\n  const currentWeek = new Date(weekStart)\n  const quarter = Math.ceil((currentWeek.getMonth() + 1) / 3)\n\n  return {\n    quarter,\n    totalMilestones: 5,\n    completedMilestones: 2,\n    inProgressMilestones: 2,\n    delayedMilestones: 1,\n    overallProgress: 60,\n    milestoneDetails: [\n      {\n        id: 'milestone-1',\n        title: '요구사항 분석',\n        status: 'completed',\n        progress: 100,\n        dueDate: '2024-01-15',\n      },\n      {\n        id: 'milestone-2',\n        title: '시스템 설계',\n        status: 'in-progress',\n        progress: 80,\n        dueDate: '2024-01-30',\n      },\n    ],\n  }\n}\n\n// 예산 집행률 계산\nfunction calculateBudgetExecution(_projectId: string, _weekStart: string, _weekEnd: string): any {\n  // 실제 구현에서는 expenseItems 스토어에서 데이터 가져오기\n  return {\n    totalBudget: 100000000,\n    executedAmount: 25000000,\n    executionRate: 25,\n    categoryBreakdown: [\n      {\n        category: 'PERSONNEL_CASH',\n        planned: 50000000,\n        executed: 15000000,\n        rate: 30,\n      },\n      {\n        category: 'MATERIAL',\n        planned: 30000000,\n        executed: 8000000,\n        rate: 27,\n      },\n      {\n        category: 'RESEARCH_ACTIVITY',\n        planned: 20000000,\n        executed: 2000000,\n        rate: 10,\n      },\n    ],\n    trend: 'increasing',\n  }\n}\n\n// 인력 참여율 계산\nfunction calculateParticipationRate(_projectId: string, _weekStart: string, _weekEnd: string): any {\n  // 실제 구현에서는 participationAssignments 스토어에서 데이터 가져오기\n  return {\n    totalParticipants: 8,\n    averageParticipationRate: 85,\n    participationDetails: [\n      {\n        personId: 'person-1',\n        name: '김연구원',\n        assignedRate: 100,\n        actualRate: 95,\n        status: 'normal',\n      },\n      {\n        personId: 'person-2',\n        name: '이연구원',\n        assignedRate: 80,\n        actualRate: 75,\n        status: 'normal',\n      },\n    ],\n    overloadWarnings: 0,\n    underutilizationWarnings: 1,\n  }\n}\n\n// 연구노트 제출률 계산\nfunction calculateResearchNoteSubmission(\n  _projectId: string,\n  _weekStart: string,\n  _weekEnd: string,\n): any {\n  // 실제 구현에서는 researchNotes 스토어에서 데이터 가져오기\n  return {\n    expectedSubmissions: 8,\n    actualSubmissions: 7,\n    submissionRate: 87.5,\n    missingSubmissions: [\n      {\n        authorId: 'person-3',\n        name: '박연구원',\n        weekOf: '2024-W03',\n      },\n    ],\n    trend: 'stable',\n  }\n}\n\n// 이슈 및 리스크 수집\nfunction collectIssuesAndRisks(_projectId: string, _weekStart: string, _weekEnd: string): any {\n  return {\n    issues: [\n      {\n        id: 'issue-1',\n        title: '외부 협력사 일정 지연',\n        severity: 'medium',\n        status: 'open',\n        description: '협력사 A사의 부품 납기가 1주일 지연될 예정',\n        impact: '프로토타입 제작 일정 1주일 지연',\n        mitigation: '대체 공급업체 검토 중',\n      },\n    ],\n    risks: [\n      {\n        id: 'risk-1',\n        title: '핵심 인력 이탈 위험',\n        severity: 'high',\n        probability: 30,\n        impact: '프로젝트 일정 2개월 지연',\n        mitigation: '인력 확보 계획 수립',\n      },\n    ],\n    totalIssues: 1,\n    totalRisks: 1,\n    criticalCount: 0,\n    highCount: 1,\n    mediumCount: 1,\n    lowCount: 0,\n  }\n}\n\n// 다음 주 계획 생성\nfunction generateNextWeekPlan(_projectId: string): any {\n  return {\n    priorities: [\n      {\n        title: '시스템 설계 완료',\n        owner: '김연구원',\n        dueDate: '2024-01-30',\n        priority: 'high',\n      },\n      {\n        title: '프로토타입 개발 시작',\n        owner: '이연구원',\n        dueDate: '2024-02-05',\n        priority: 'medium',\n      },\n    ],\n    deliverables: [\n      {\n        title: '시스템 설계서',\n        type: 'document',\n        dueDate: '2024-01-30',\n      },\n      {\n        title: '프로토타입 v1.0',\n        type: 'prototype',\n        dueDate: '2024-02-05',\n      },\n    ],\n    meetings: [\n      {\n        title: '주간 진행회의',\n        date: '2024-01-29',\n        time: '14:00',\n        participants: ['PM', '팀원 전체'],\n      },\n    ],\n  }\n}\n\n// 분기 리포트 생성\nexport function generateQuarterlyReport(projectId: string, quarter: number, year: number): string {\n  const reportId = crypto.randomUUID()\n\n  const quarterStart = new Date(year, (quarter - 1) * 3, 1)\n  const quarterEnd = new Date(year, quarter * 3, 0)\n\n  const summaryData = collectQuarterlyData(projectId, quarterStart, quarterEnd)\n\n  const report: Report = {\n    id: reportId,\n    projectId,\n    type: 'quarterly',\n    periodStart: quarterStart.toISOString().split('T')[0],\n    periodEnd: quarterEnd.toISOString().split('T')[0],\n    summaryJson: summaryData,\n    generatedAt: new Date().toISOString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  reports.update((list) => [...list, report])\n  logAudit('generate', 'quarterly_report', reportId, {}, report)\n\n  return reportId\n}\n\n// 분기 데이터 수집\nfunction collectQuarterlyData(_projectId: string, _quarterStart: Date, _quarterEnd: Date): any {\n  return {\n    quarter: Math.ceil((quarterStart.getMonth() + 1) / 3),\n    year: quarterStart.getFullYear(),\n    executiveSummary: generateExecutiveSummary(projectId, quarterStart, quarterEnd),\n    achievements: collectAchievements(projectId, quarterStart, quarterEnd),\n    challenges: collectChallenges(projectId, quarterStart, quarterEnd),\n    financialSummary: collectFinancialSummary(projectId, quarterStart, quarterEnd),\n    personnelSummary: collectPersonnelSummary(projectId, quarterStart, quarterEnd),\n    nextQuarterPlan: generateNextQuarterPlan(projectId),\n    recommendations: generateRecommendations(projectId),\n  }\n}\n\n// 경영진 요약 생성\nfunction generateExecutiveSummary(_projectId: string, _quarterStart: Date, _quarterEnd: Date): any {\n  return {\n    overallStatus: 'on-track',\n    keyAchievements: ['시스템 설계 완료', '프로토타입 v1.0 개발 완료', '핵심 알고리즘 구현 완료'],\n    keyChallenges: ['외부 협력사 일정 지연', '예산 집행률 부족'],\n    overallProgress: 75,\n    budgetUtilization: 60,\n    riskLevel: 'medium',\n  }\n}\n\n// 성과 수집\nfunction collectAchievements(_projectId: string, _quarterStart: Date, _quarterEnd: Date): any {\n  return {\n    milestones: [\n      {\n        title: '시스템 설계 완료',\n        status: 'completed',\n        completionDate: '2024-01-30',\n        impact: 'high',\n      },\n      {\n        title: '프로토타입 v1.0 개발',\n        status: 'completed',\n        completionDate: '2024-02-15',\n        impact: 'high',\n      },\n    ],\n    deliverables: [\n      {\n        title: '시스템 설계서',\n        type: 'document',\n        status: 'delivered',\n      },\n      {\n        title: '프로토타입 v1.0',\n        type: 'prototype',\n        status: 'delivered',\n      },\n    ],\n    publications: [],\n    patents: [],\n    awards: [],\n  }\n}\n\n// 도전과제 수집\nfunction collectChallenges(_projectId: string, _quarterStart: Date, _quarterEnd: Date): any {\n  return {\n    technical: [\n      {\n        title: '성능 최적화 이슈',\n        description: '실시간 처리 성능이 요구사항에 미달',\n        status: 'ongoing',\n        impact: 'medium',\n      },\n    ],\n    resource: [\n      {\n        title: '예산 집행 지연',\n        description: '예산 집행률이 계획 대비 낮음',\n        status: 'ongoing',\n        impact: 'low',\n      },\n    ],\n    schedule: [\n      {\n        title: '외부 협력사 일정 지연',\n        description: '부품 납기 지연으로 인한 일정 영향',\n        status: 'resolved',\n        impact: 'medium',\n      },\n    ],\n  }\n}\n\n// 재무 요약 수집\nfunction collectFinancialSummary(_projectId: string, _quarterStart: Date, _quarterEnd: Date): any {\n  return {\n    totalBudget: 100000000,\n    executedAmount: 60000000,\n    executionRate: 60,\n    categoryBreakdown: [\n      {\n        category: 'PERSONNEL_CASH',\n        planned: 50000000,\n        executed: 35000000,\n        rate: 70,\n      },\n      {\n        category: 'MATERIAL',\n        planned: 30000000,\n        executed: 20000000,\n        rate: 67,\n      },\n      {\n        category: 'RESEARCH_ACTIVITY',\n        planned: 20000000,\n        executed: 5000000,\n        rate: 25,\n      },\n    ],\n    trend: 'increasing',\n    forecast: {\n      expectedCompletion: 95,\n      riskAreas: ['RESEARCH_ACTIVITY'],\n    },\n  }\n}\n\n// 인력 요약 수집\nfunction collectPersonnelSummary(_projectId: string, _quarterStart: Date, _quarterEnd: Date): any {\n  return {\n    totalParticipants: 8,\n    averageParticipationRate: 85,\n    participationTrend: 'stable',\n    keyPersonnel: [\n      {\n        personId: 'person-1',\n        name: '김연구원',\n        role: 'Lead Developer',\n        participationRate: 100,\n        performance: 'excellent',\n      },\n    ],\n    recruitment: {\n      planned: 2,\n      completed: 1,\n      pending: 1,\n    },\n    training: {\n      completed: 3,\n      planned: 2,\n    },\n  }\n}\n\n// 다음 분기 계획 생성\nfunction generateNextQuarterPlan(_projectId: string): any {\n  return {\n    objectives: [\n      {\n        title: '프로토타입 v2.0 개발',\n        description: '성능 최적화 및 기능 확장',\n        priority: 'high',\n        targetDate: '2024-06-30',\n      },\n      {\n        title: '사용자 테스트 진행',\n        description: '베타 테스터 모집 및 피드백 수집',\n        priority: 'medium',\n        targetDate: '2024-05-31',\n      },\n    ],\n    milestones: [\n      {\n        title: '프로토타입 v2.0 완성',\n        dueDate: '2024-06-30',\n        owner: '개발팀',\n      },\n      {\n        title: '사용자 테스트 완료',\n        dueDate: '2024-05-31',\n        owner: 'QA팀',\n      },\n    ],\n    resourceRequirements: {\n      personnel: 2,\n      budget: 30000000,\n      equipment: ['테스트 서버', '모니터링 도구'],\n    },\n  }\n}\n\n// 권고사항 생성\nfunction generateRecommendations(_projectId: string): any {\n  return {\n    immediate: [\n      {\n        title: '예산 집행률 개선',\n        description: '연구활동비 집행률이 낮으므로 집행 계획 재검토 필요',\n        priority: 'high',\n        actionOwner: 'PM',\n      },\n    ],\n    shortTerm: [\n      {\n        title: '성능 최적화 전략 수립',\n        description: '성능 이슈 해결을 위한 구체적인 전략 수립',\n        priority: 'medium',\n        actionOwner: '기술팀',\n      },\n    ],\n    longTerm: [\n      {\n        title: '인력 확보 계획',\n        description: '프로젝트 확장을 위한 추가 인력 확보 계획',\n        priority: 'low',\n        actionOwner: 'HR팀',\n      },\n    ],\n  }\n}\n\n// 리포트 템플릿 관리\nexport function createReportTemplate(\n  templateName: string,\n  templateType: 'weekly' | 'quarterly',\n  templateData: any,\n): void {\n  reportTemplates.update((templates) => ({\n    ...templates,\n    [templateName]: {\n      type: templateType,\n      data: templateData,\n      createdAt: new Date().toISOString(),\n    },\n  }))\n}\n\n// 리포트 템플릿 적용\nexport function applyReportTemplate(\n  projectId: string,\n  templateName: string,\n  periodStart: string,\n  periodEnd: string,\n): string {\n  let template: any = null\n\n  reportTemplates.subscribe((templates) => {\n    template = templates[templateName]\n  })()\n\n  if (!template) {\n    throw new Error(`Template ${templateName} not found`)\n  }\n\n  if (template.type === 'weekly') {\n    return generateWeeklyReport(projectId, periodStart, periodEnd)\n  } else if (template.type === 'quarterly') {\n    return generateQuarterlyReport(projectId, 1, 2024) // 실제로는 파라미터에서 계산\n  }\n\n  throw new Error(`Unsupported template type: ${template.type}`)\n}\n\n// 리포트 내보내기\nexport function exportReport(reportId: string, _format: 'pdf' | 'docx' | 'html' | 'excel'): string {\n  let report: Report | undefined = undefined\n\n  reports.subscribe((list) => {\n    report = list.find((r) => r.id === reportId)\n  })()\n\n  if (!report) {\n    throw new Error(`Report ${reportId} not found`)\n  }\n\n  // 실제 구현에서는 서버에서 해당 형식으로 변환\n  // 여기서는 HTML 형식으로 반환\n  return generateReportHTML(report)\n}\n\n// 리포트 HTML 생성\nfunction generateReportHTML(report: Report): string {\n  const data = report.summaryJson\n\n  return `\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<title>${report.type === 'weekly' ? '주간' : '분기'} 리포트</title>\n\t\t\t<meta charset=\"utf-8\">\n\t\t\t<style>\n\t\t\t\tbody { font-family: Arial, sans-serif; margin: 20px; }\n\t\t\t\t.header { background-color: #f0f0f0; padding: 20px; margin-bottom: 20px; }\n\t\t\t\t.section { margin-bottom: 30px; }\n\t\t\t\t.section h2 { color: #333; border-bottom: 2px solid #333; }\n\t\t\t\t.table { width: 100%; border-collapse: collapse; }\n\t\t\t\t.table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n\t\t\t\t.table th { background-color: #f2f2f2; }\n\t\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t\t<div class=\"header\">\n\t\t\t\t<h1>${report.type === 'weekly' ? '주간' : '분기'} 진도보고서</h1>\n\t\t\t\t<p>프로젝트: ${report.projectId}</p>\n\t\t\t\t<p>기간: ${report.periodStart} ~ ${report.periodEnd}</p>\n\t\t\t\t<p>생성일: ${report.generatedAt}</p>\n\t\t\t</div>\n\t\t\t\n\t\t\t${report.type === 'weekly' ? generateWeeklyReportHTML(data) : generateQuarterlyReportHTML(data)}\n\t\t</body>\n\t\t</html>\n\t`\n}\n\n// 주간 리포트 HTML 생성\nfunction generateWeeklyReportHTML(data: any): string {\n  return `\n\t\t<div class=\"section\">\n\t\t\t<h2>마일스톤 진행률</h2>\n\t\t\t<p>전체 진행률: ${data.milestoneProgress.overallProgress}%</p>\n\t\t\t<p>완료된 마일스톤: ${data.milestoneProgress.completedMilestones}/${data.milestoneProgress.totalMilestones}</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>예산 집행률</h2>\n\t\t\t<p>집행률: ${data.budgetExecution.executionRate}%</p>\n\t\t\t<p>집행 금액: ${data.budgetExecution.executedAmount.toLocaleString()}원</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>인력 참여율</h2>\n\t\t\t<p>평균 참여율: ${data.participationRate.averageParticipationRate}%</p>\n\t\t\t<p>참여자 수: ${data.participationRate.totalParticipants}명</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>연구노트 제출률</h2>\n\t\t\t<p>제출률: ${data.researchNoteSubmission.submissionRate}%</p>\n\t\t\t<p>제출 건수: ${data.researchNoteSubmission.actualSubmissions}/${data.researchNoteSubmission.expectedSubmissions}</p>\n\t\t</div>\n\t`\n}\n\n// 분기 리포트 HTML 생성\nfunction generateQuarterlyReportHTML(data: any): string {\n  return `\n\t\t<div class=\"section\">\n\t\t\t<h2>경영진 요약</h2>\n\t\t\t<p>전체 상태: ${data.executiveSummary.overallStatus}</p>\n\t\t\t<p>전체 진행률: ${data.executiveSummary.overallProgress}%</p>\n\t\t\t<p>예산 활용률: ${data.executiveSummary.budgetUtilization}%</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>주요 성과</h2>\n\t\t\t<ul>\n\t\t\t\t${data.achievements.milestones\n          .map((milestone: any) => `<li>${milestone.title} - ${milestone.status}</li>`)\n          .join('')}\n\t\t\t</ul>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>재무 요약</h2>\n\t\t\t<p>총 예산: ${data.financialSummary.totalBudget.toLocaleString()}원</p>\n\t\t\t<p>집행 금액: ${data.financialSummary.executedAmount.toLocaleString()}원</p>\n\t\t\t<p>집행률: ${data.financialSummary.executionRate}%</p>\n\t\t</div>\n\t`\n}\n\n// 자동 리포트 생성 스케줄링\nexport function scheduleAutoReports(\n  projectId: string,\n  scheduleType: 'weekly' | 'quarterly',\n  dayOfWeek?: number, // 0-6 (일요일-토요일)\n  dayOfMonth?: number, // 1-31\n): void {\n  // 실제 구현에서는 백그라운드 작업으로 스케줄링\n  // 여기서는 간단히 설정만 저장\n  const schedule = {\n    projectId,\n    scheduleType,\n    dayOfWeek,\n    dayOfMonth,\n    enabled: true,\n    createdAt: new Date().toISOString(),\n  }\n\n  // 스케줄 저장 (실제로는 별도 스토어에 저장)\n  logger.log('Auto report scheduled:', schedule)\n}\n\n// 리포트 통계\nexport function getReportStatistics(_projectId: string): any {\n  let projectReports: Report[] = []\n\n  reports.subscribe((list) => {\n    projectReports = list.filter((r) => r.projectId === projectId)\n  })()\n\n  const weeklyReports = projectReports.filter((r) => r.type === 'weekly')\n  const quarterlyReports = projectReports.filter((r) => r.type === 'quarterly')\n\n  return {\n    totalReports: projectReports.length,\n    weeklyReports: weeklyReports.length,\n    quarterlyReports: quarterlyReports.length,\n    lastReportDate:\n      projectReports.length > 0\n        ? Math.max(...projectReports.map((r) => new Date(r.generatedAt).getTime()))\n        : null,\n    averageGenerationTime: calculateAverageGenerationTime(projectReports),\n  }\n}\n\n// 평균 생성 시간 계산\nfunction calculateAverageGenerationTime(reports: Report[]): number {\n  if (reports.length === 0) return 0\n\n  const totalTime = reports.reduce((sum, report) => {\n    const created = new Date(report.createdAt).getTime()\n    const generated = new Date(report.generatedAt).getTime()\n    return sum + (generated - created)\n  }, 0)\n\n  return totalTime / reports.length\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/research-notes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/sla-alerts.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 205,
        "column": 33,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 205,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5381, 5384], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5381, 5384], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5558, 5561], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5558, 5561], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 226,
        "column": 32,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 226,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5917, 5920], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5917, 5920], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 242,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 242,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6326, 6329], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6326, 6329], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 293,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 293,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7586, 7589], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7586, 7589], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 382,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 382,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9864, 9867], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9864, 9867], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 463,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 463,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12324, 12327], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12324, 12327], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 7,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { getCurrentUTC } from '$lib/utils/date-handler'\nimport { logger } from '$lib/utils/logger'\nimport { writable } from 'svelte/store'\nimport { logAudit } from './core'\nimport type { Notification, SLAAlert } from './types'\n\n// SLA 알림 관리\nexport const slaAlerts = writable<SLAAlert[]>([])\nexport const notifications = writable<Notification[]>([])\nexport const escalationPolicies = writable<Record<string, unknown>>({})\n\n// SLA 정책 정의\nexport function defineSlaPolicies(): void {\n  const policies = {\n    expense_approval: {\n      name: '지출 승인 SLA',\n      entityType: 'expense',\n      stages: [\n        {\n          stage: 'PM_APPROVAL',\n          slaDays: 2,\n          alerts: [\n            {\n              daysBefore: 1,\n              type: 'warning',\n              message: 'PM 승인 마감 1일 전입니다.',\n            },\n            { daysBefore: 0, type: 'breach', message: 'PM 승인 마감일입니다.' },\n            {\n              daysAfter: 1,\n              type: 'escalation',\n              message: 'PM 승인 지연 1일 경과',\n            },\n          ],\n        },\n        {\n          stage: 'SUPPORT_REVIEW',\n          slaDays: 3,\n          alerts: [\n            {\n              daysBefore: 1,\n              type: 'warning',\n              message: '경영지원 검토 마감 1일 전입니다.',\n            },\n            {\n              daysBefore: 0,\n              type: 'breach',\n              message: '경영지원 검토 마감일입니다.',\n            },\n            {\n              daysAfter: 1,\n              type: 'escalation',\n              message: '경영지원 검토 지연 1일 경과',\n            },\n          ],\n        },\n      ],\n      escalationPath: [\n        { level: 1, role: 'PM', delayDays: 1 },\n        { level: 2, role: 'LAB_HEAD', delayDays: 3 },\n        { level: 3, role: 'EXECUTIVE', delayDays: 5 },\n      ],\n    },\n    milestone_delivery: {\n      name: '마일스톤 산출물 제출 SLA',\n      entityType: 'milestone',\n      stages: [\n        {\n          stage: 'DELIVERY',\n          slaDays: 0,\n          alerts: [\n            {\n              daysBefore: 7,\n              type: 'warning',\n              message: '마일스톤 산출물 제출 7일 전입니다.',\n            },\n            {\n              daysBefore: 3,\n              type: 'warning',\n              message: '마일스톤 산출물 제출 3일 전입니다.',\n            },\n            {\n              daysBefore: 1,\n              type: 'warning',\n              message: '마일스톤 산출물 제출 1일 전입니다.',\n            },\n            {\n              daysAfter: 0,\n              type: 'breach',\n              message: '마일스톤 산출물 제출 마감일입니다.',\n            },\n            {\n              daysAfter: 1,\n              type: 'escalation',\n              message: '마일스톤 산출물 제출 지연 1일 경과',\n            },\n          ],\n        },\n      ],\n      escalationPath: [\n        { level: 1, role: 'PM', delayDays: 1 },\n        { level: 2, role: 'LAB_HEAD', delayDays: 3 },\n        { level: 3, role: 'EXECUTIVE', delayDays: 7 },\n      ],\n    },\n    research_note_submission: {\n      name: '연구노트 제출 SLA',\n      entityType: 'research_note',\n      stages: [\n        {\n          stage: 'SUBMISSION',\n          slaDays: 0,\n          alerts: [\n            {\n              daysBefore: 3,\n              type: 'warning',\n              message: '연구노트 제출 3일 전입니다.',\n            },\n            {\n              daysBefore: 1,\n              type: 'warning',\n              message: '연구노트 제출 1일 전입니다.',\n            },\n            {\n              daysAfter: 0,\n              type: 'breach',\n              message: '연구노트 제출 마감일입니다.',\n            },\n            {\n              daysAfter: 3,\n              type: 'escalation',\n              message: '연구노트 제출 지연 3일 경과',\n            },\n          ],\n        },\n      ],\n      escalationPath: [\n        { level: 1, role: 'PM', delayDays: 3 },\n        { level: 2, role: 'LAB_HEAD', delayDays: 7 },\n      ],\n    },\n  }\n\n  escalationPolicies.set(policies)\n}\n\n// SLA 알림 생성\nexport function createSlaAlert(\n  entityType: string,\n  entityId: string,\n  alertType: 'sla-warning' | 'sla-breach' | 'escalation',\n  message: string,\n  severity: 'low' | 'medium' | 'high' | 'critical',\n  assignedTo: string[],\n): string {\n  const alert: SLAAlert = {\n    id: crypto.randomUUID(),\n    entityType,\n    entityId,\n    alertType,\n    message,\n    severity,\n    assignedTo,\n    status: 'active',\n    createdAt: new Date().toISOString(),\n  }\n\n  slaAlerts.update((alerts) => [...alerts, alert])\n  logAudit('create', 'sla_alert', alert.id, {}, alert)\n\n  // 알림 발송\n  sendNotification(alert)\n\n  return alert.id\n}\n\n// 알림 발송\nfunction sendNotification(alert: SLAAlert): void {\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user', // 실제로는 assignedTo의 각 사용자에게 발송\n    title: `SLA 알림: ${alert.alertType}`,\n    message: alert.message,\n    type: alert.severity === 'critical' ? 'error' : alert.severity === 'high' ? 'warning' : 'info',\n    priority: alert.severity,\n    read: false,\n    actionUrl: `/project-management/${alert.entityType}/${alert.entityId}`,\n    createdAt: new Date().toISOString(),\n  }\n\n  notifications.update((notifications) => [...notifications, notification])\n}\n\n// SLA 체크 및 알림 생성\nexport function checkSlaCompliance(entityType: string, entityId: string): void {\n  const policies = getEscalationPolicies()\n  const policy =\n    policies[`${entityType}_approval`] ||\n    policies[`${entityType}_delivery`] ||\n    policies[`${entityType}_submission`]\n\n  if (!policy) return\n\n  // 각 단계별 SLA 체크\n  policy.stages.forEach((stage: any) => {\n    checkStageSla(entityType, entityId, stage, policy.escalationPath)\n  })\n}\n\n// 단계별 SLA 체크\nfunction checkStageSla(\n  entityType: string,\n  entityId: string,\n  stage: any,\n  escalationPath: unknown[],\n): void {\n  const entityData = getEntityData(entityType, entityId)\n  if (!entityData) return\n\n  const currentStage = getCurrentStage(entityType, entityId)\n  if (currentStage !== stage.stage) return\n\n  const daysElapsed = calculateDaysElapsed(entityData.createdAt, stage.slaDays)\n\n  // 알림 조건 체크\n  stage.alerts.forEach((alert: any) => {\n    if (shouldTriggerAlert(daysElapsed, alert)) {\n      const assignedTo = getAssignedUsers(entityType, entityId, escalationPath)\n      createSlaAlert(\n        entityType,\n        entityId,\n        alert.type,\n        alert.message,\n        getSeverityFromAlertType(alert.type),\n        assignedTo,\n      )\n    }\n  })\n}\n\n// 엔티티 데이터 가져오기\nfunction getEntityData(entityType: string, entityId: string): any {\n  // 실제 구현에서는 해당 엔티티의 데이터를 가져옴\n  switch (entityType) {\n    case 'expense':\n      return {\n        id: entityId,\n        createdAt: '2024-01-20T00:00:00Z',\n        status: 'pending-approval',\n      }\n    case 'milestone':\n      return {\n        id: entityId,\n        createdAt: '2024-01-15T00:00:00Z',\n        dueDate: '2024-01-30T00:00:00Z',\n      }\n    case 'research_note':\n      return {\n        id: entityId,\n        createdAt: '2024-01-22T00:00:00Z',\n        weekOf: '2024-W04',\n      }\n    default:\n      return null\n  }\n}\n\n// 현재 단계 가져오기\nfunction getCurrentStage(entityType: string, _entityId: string): string {\n  // 실제 구현에서는 엔티티의 현재 단계를 가져옴\n  switch (entityType) {\n    case 'expense':\n      return 'PM_APPROVAL'\n    case 'milestone':\n      return 'DELIVERY'\n    case 'research_note':\n      return 'SUBMISSION'\n    default:\n      return ''\n  }\n}\n\n// 경과 일수 계산\nfunction calculateDaysElapsed(createdAt: string, slaDays: number): number {\n  const created = new Date(createdAt)\n  const now = new Date(getCurrentUTC())\n  const deadline = new Date(created.getTime() + slaDays * 24 * 60 * 60 * 1000)\n\n  return Math.ceil((now.getTime() - deadline.getTime()) / (1000 * 60 * 60 * 24))\n}\n\n// 알림 발송 조건 체크\nfunction shouldTriggerAlert(daysElapsed: number, alert: any): boolean {\n  if (alert.daysBefore !== undefined) {\n    return daysElapsed === -alert.daysBefore\n  } else if (alert.daysAfter !== undefined) {\n    return daysElapsed === alert.daysAfter\n  }\n  return false\n}\n\n// 알림 타입에서 심각도 결정\nfunction getSeverityFromAlertType(alertType: string): 'low' | 'medium' | 'high' | 'critical' {\n  switch (alertType) {\n    case 'warning':\n      return 'medium'\n    case 'breach':\n      return 'high'\n    case 'escalation':\n      return 'critical'\n    default:\n      return 'low'\n  }\n}\n\n// 할당된 사용자 가져오기\nfunction getAssignedUsers(\n  _entityType: string,\n  _entityId: string,\n  _escalationPath: unknown[],\n): string[] {\n  // 실제 구현에서는 엔티티의 담당자와 에스컬레이션 경로를 기반으로 사용자 결정\n  const users = ['PM', 'LAB_HEAD', 'EXECUTIVE']\n  return users\n}\n\n// 에스컬레이션 정책 가져오기\nfunction getEscalationPolicies(): Record<string, unknown> {\n  let policies: Record<string, unknown> = {}\n  escalationPolicies.subscribe((p) => {\n    policies = p\n  })()\n  return policies\n}\n\n// SLA 알림 해결\nexport function resolveSlaAlert(alertId: string, resolvedBy: string, resolution: string): void {\n  slaAlerts.update((alerts) => {\n    const index = alerts.findIndex((a) => a.id === alertId)\n    if (index === -1) return alerts\n\n    const alert = alerts[index]\n    const updatedAlert = {\n      ...alert,\n      status: 'resolved' as const,\n      resolvedAt: new Date().toISOString(),\n    }\n\n    const newList = [...alerts]\n    newList[index] = updatedAlert\n\n    logAudit('resolve', 'sla_alert', alertId, { resolvedBy, resolution }, updatedAlert)\n\n    return newList\n  })\n}\n\n// SLA 알림 에스컬레이션\nexport function escalateSlaAlert(alertId: string, escalatedBy: string, reason: string): void {\n  slaAlerts.update((alerts) => {\n    const index = alerts.findIndex((a) => a.id === alertId)\n    if (index === -1) return alerts\n\n    const alert = alerts[index]\n    const updatedAlert = {\n      ...alert,\n      status: 'escalated' as const,\n      severity: 'critical' as const,\n      assignedTo: [...alert.assignedTo, 'EXECUTIVE'], // 상위 레벨로 에스컬레이션\n    }\n\n    const newList = [...alerts]\n    newList[index] = updatedAlert\n\n    logAudit('escalate', 'sla_alert', alertId, { escalatedBy, reason }, updatedAlert)\n\n    return newList\n  })\n}\n\n// SLA 통계\nexport function getSlaStatistics(period: 'day' | 'week' | 'month'): any {\n  let allAlerts: SLAAlert[] = []\n\n  slaAlerts.subscribe((alerts) => {\n    allAlerts = alerts\n  })()\n\n  const now = new Date()\n  const periodStart = getPeriodStart(now, period)\n\n  const periodAlerts = allAlerts.filter((alert) => new Date(alert.createdAt) >= periodStart)\n\n  const totalAlerts = periodAlerts.length\n  const activeAlerts = periodAlerts.filter((a) => a.status === 'active').length\n  const resolvedAlerts = periodAlerts.filter((a) => a.status === 'resolved').length\n  const escalatedAlerts = periodAlerts.filter((a) => a.status === 'escalated').length\n\n  const severityBreakdown = {\n    critical: periodAlerts.filter((a) => a.severity === 'critical').length,\n    high: periodAlerts.filter((a) => a.severity === 'high').length,\n    medium: periodAlerts.filter((a) => a.severity === 'medium').length,\n    low: periodAlerts.filter((a) => a.severity === 'low').length,\n  }\n\n  const typeBreakdown = {\n    warning: periodAlerts.filter((a) => a.alertType === 'sla-warning').length,\n    breach: periodAlerts.filter((a) => a.alertType === 'sla-breach').length,\n    escalation: periodAlerts.filter((a) => a.alertType === 'escalation').length,\n  }\n\n  const averageResolutionTime = calculateAverageResolutionTime(periodAlerts)\n\n  return {\n    period,\n    totalAlerts,\n    activeAlerts,\n    resolvedAlerts,\n    escalatedAlerts,\n    resolutionRate: totalAlerts > 0 ? (resolvedAlerts / totalAlerts) * 100 : 0,\n    escalationRate: totalAlerts > 0 ? (escalatedAlerts / totalAlerts) * 100 : 0,\n    severityBreakdown,\n    typeBreakdown,\n    averageResolutionTime,\n  }\n}\n\n// 기간 시작일 계산\nfunction getPeriodStart(now: Date, period: string): Date {\n  const start = new Date(now)\n\n  switch (period) {\n    case 'day':\n      start.setHours(0, 0, 0, 0)\n      break\n    case 'week':\n      start.setDate(start.getDate() - 7)\n      break\n    case 'month':\n      start.setMonth(start.getMonth() - 1)\n      break\n  }\n\n  return start\n}\n\n// 평균 해결 시간 계산\nfunction calculateAverageResolutionTime(alerts: SLAAlert[]): number {\n  const resolvedAlerts = alerts.filter((a) => a.status === 'resolved' && a.resolvedAt)\n\n  if (resolvedAlerts.length === 0) return 0\n\n  const totalTime = resolvedAlerts.reduce((sum, alert) => {\n    const created = new Date(alert.createdAt).getTime()\n    const resolved = new Date(alert.resolvedAt!).getTime()\n    return sum + (resolved - created)\n  }, 0)\n\n  return totalTime / resolvedAlerts.length\n}\n\n// SLA 대시보드 데이터\nexport function getSlaDashboardData(): any {\n  const dayStats = getSlaStatistics('day')\n  const weekStats = getSlaStatistics('week')\n  const monthStats = getSlaStatistics('month')\n\n  let recentAlerts: SLAAlert[] = []\n  slaAlerts.subscribe((alerts) => {\n    recentAlerts = alerts\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 10)\n  })()\n\n  return {\n    dayStats,\n    weekStats,\n    monthStats,\n    recentAlerts,\n    trends: {\n      alertsTrend: calculateTrend(dayStats.totalAlerts, weekStats.totalAlerts),\n      resolutionTrend: calculateTrend(dayStats.resolutionRate, weekStats.resolutionRate),\n      escalationTrend: calculateTrend(dayStats.escalationRate, weekStats.escalationRate),\n    },\n  }\n}\n\n// 트렌드 계산\nfunction calculateTrend(current: number, previous: number): 'up' | 'down' | 'stable' {\n  const change = ((current - previous) / previous) * 100\n\n  if (change > 5) return 'up'\n  if (change < -5) return 'down'\n  return 'stable'\n}\n\n// SLA 알림 자동 체크 스케줄링\nexport function scheduleSlaChecks(): void {\n  // 매시간 SLA 체크 실행\n  setInterval(\n    () => {\n      logger.log('Running SLA checks...')\n\n      // 모든 활성 엔티티에 대해 SLA 체크\n      checkAllActiveEntities()\n    },\n    60 * 60 * 1000,\n  ) // 1시간마다\n}\n\n// 모든 활성 엔티티 SLA 체크\nfunction checkAllActiveEntities(): void {\n  // 실제 구현에서는 모든 활성 엔티티를 가져와서 체크\n  const activeEntities = [\n    { type: 'expense', id: 'expense-1' },\n    { type: 'expense', id: 'expense-2' },\n    { type: 'milestone', id: 'milestone-1' },\n    { type: 'research_note', id: 'note-1' },\n  ]\n\n  activeEntities.forEach((entity) => {\n    checkSlaCompliance(entity.type, entity.id)\n  })\n}\n\n// SLA 알림 내보내기\nexport function exportSlaAlerts(format: 'json' | 'csv' | 'excel', period?: string): string {\n  let allAlerts: SLAAlert[] = []\n\n  slaAlerts.subscribe((alerts) => {\n    if (period) {\n      const periodStart = getPeriodStart(new Date(), period)\n      allAlerts = alerts.filter((alert) => new Date(alert.createdAt) >= periodStart)\n    } else {\n      allAlerts = alerts\n    }\n  })()\n\n  if (format === 'json') {\n    return JSON.stringify(allAlerts, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader =\n      'ID,Entity Type,Entity ID,Alert Type,Message,Severity,Status,Created At,Resolved At\\n'\n    const csvRows = allAlerts\n      .map(\n        (alert) =>\n          `${alert.id},${alert.entityType},${alert.entityId},${alert.alertType},\"${alert.message}\",${alert.severity},${alert.status},${alert.createdAt},${alert.resolvedAt || ''}`,\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(allAlerts, null, 2)\n}\n\n// SLA 알림 템플릿 관리\nexport function createSlaTemplate(\n  templateName: string,\n  entityType: string,\n  stages: unknown[],\n  escalationPath: unknown[],\n): void {\n  const template = {\n    name: templateName,\n    entityType,\n    stages,\n    escalationPath,\n    createdAt: new Date().toISOString(),\n  }\n\n  escalationPolicies.update((policies) => ({\n    ...policies,\n    [templateName]: template,\n  }))\n}\n\n// SLA 알림 설정 업데이트\nexport function updateSlaSettings(\n  entityType: string,\n  settings: {\n    enabled: boolean\n    alertChannels: string[]\n    escalationEnabled: boolean\n    notificationFrequency: 'immediate' | 'daily' | 'weekly'\n  },\n): void {\n  // 실제 구현에서는 SLA 설정을 저장\n  logger.log(`SLA settings updated for ${entityType}:`, settings)\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/submission-bundles.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 83,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 83,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2320, 2323], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2320, 2323], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 124,
        "column": 80,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 124,
        "endColumn": 83,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3360, 3363], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3360, 3363], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 153,
        "column": 83,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 153,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3968, 3971], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3968, 3971], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 177,
        "column": 85,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 177,
        "endColumn": 88,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4502, 4505], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4502, 4505], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 211,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 211,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5147, 5150], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5147, 5150], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 212,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 212,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5166, 5169], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5166, 5169], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 213,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 213,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5188, 5191], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5188, 5191], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 214,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 214,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5212, 5215], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5212, 5215], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6062, 6065], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6062, 6065], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 255,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 255,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6497, 6500], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6497, 6500], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 273,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 273,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6993, 6996], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6993, 6996], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 287,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 287,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7349, 7352], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7349, 7352], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 310,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 310,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7832, 7835], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7832, 7835], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 310,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 310,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7852, 7855], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7852, 7855], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 310,
        "column": 83,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 310,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7874, 7877], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7874, 7877], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 317,
        "column": 88,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 317,
        "endColumn": 91,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8634, 8637], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8634, 8637], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 317,
        "column": 172,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 317,
        "endColumn": 175,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8718, 8721], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8718, 8721], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 318,
        "column": 91,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 318,
        "endColumn": 94,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8906, 8909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8906, 8909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 318,
        "column": 177,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 318,
        "endColumn": 180,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8992, 8995], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8992, 8995], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 474,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 474,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [12545, 12548], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [12545, 12548], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 498,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 498,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13088, 13091], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13088, 13091], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 526,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 526,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13787, 13790], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13787, 13790], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 564,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 564,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15087, 15090], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15087, 15090], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 23,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from '$lib/utils/logger'\nimport { writable } from 'svelte/store'\nimport { logAudit } from './core'\nimport type { Document, SubmissionBundle } from './types'\n\n// 업로드 번들 관리\nexport const submissionBundles = writable<SubmissionBundle[]>([])\nexport const bundleTemplates = writable<Record<string, unknown>>({})\n\n// 국가R&D 업로드 번들 생성\nexport function createSubmissionBundle(\n  projectId: string,\n  period: string,\n  requestedBy: string,\n): string {\n  const bundleId = crypto.randomUUID()\n\n  // 번들 생성 시작\n  const bundle: SubmissionBundle = {\n    id: bundleId,\n    projectId,\n    period,\n    fileUrl: '', // 생성 완료 후 설정\n    manifestXml: '', // 생성 완료 후 설정\n    checksum: '', // 생성 완료 후 설정\n    createdBy: requestedBy,\n    createdAt: new Date().toISOString(),\n    status: 'generating',\n  }\n\n  submissionBundles.update((list) => [...list, bundle])\n  logAudit('create', 'submission_bundle', bundleId, { projectId, period }, bundle)\n\n  // 비동기로 번들 생성\n  generateBundleContent(bundleId, projectId, period)\n\n  return bundleId\n}\n\n// 번들 콘텐츠 생성\nasync function generateBundleContent(\n  bundleId: string,\n  projectId: string,\n  period: string,\n): Promise<void> {\n  try {\n    // 1. 프로젝트 정보 수집\n    const projectInfo = await collectProjectInfo(projectId)\n\n    // 2. 문서 수집\n    const documents = await collectDocuments(projectId, period)\n\n    // 3. 예산 정보 수집\n    const budgetInfo = await collectBudgetInfo(projectId, period)\n\n    // 4. 인력 정보 수집\n    const personnelInfo = await collectPersonnelInfo(projectId, period)\n\n    // 5. 성과 정보 수집\n    const performanceInfo = await collectPerformanceInfo(projectId, period)\n\n    // 6. 매니페스트 XML 생성\n    const manifestXml = generateManifestXml(projectInfo, budgetInfo, personnelInfo, performanceInfo)\n\n    // 7. 요약 CSV 생성\n    const summaryCsv = generateSummaryCsv(budgetInfo, personnelInfo, performanceInfo)\n\n    // 8. 번들 파일 생성\n    const bundleFile = await createBundleFile(documents, manifestXml, summaryCsv)\n\n    // 9. 체크섬 계산\n    const checksum = await calculateChecksum(bundleFile)\n\n    // 10. 번들 상태 업데이트\n    updateBundleStatus(bundleId, 'ready', bundleFile.url, manifestXml, checksum)\n  } catch (error) {\n    logger.error('Bundle generation failed:', error)\n    updateBundleStatus(bundleId, 'failed', '', '', '')\n  }\n}\n\n// 프로젝트 정보 수집\nasync function collectProjectInfo(projectId: string): Promise<any> {\n  // 실제 구현에서는 프로젝트 데이터를 가져옴\n  return {\n    id: projectId,\n    code: 'R&D-2024-001',\n    title: 'AI 기반 스마트 제조 시스템 개발',\n    sponsor: '과학기술정보통신부',\n    startDate: '2024-01-01',\n    endDate: '2024-12-31',\n    manager: '김연구원',\n    department: '개발팀',\n    description: 'AI 기술을 활용한 스마트 제조 시스템 개발 프로젝트',\n  }\n}\n\n// 문서 수집\nasync function collectDocuments(_projectId: string, _period: string): Promise<Document[]> {\n  // 실제 구현에서는 해당 기간의 모든 문서를 수집\n  const mockDocuments = [\n    {\n      id: 'doc-1',\n      type: 'requisition',\n      filename: '기안서_2024-01-15.pdf',\n      storageUrl: '/documents/requisition_2024-01-15.pdf',\n      sha256: 'abc123...',\n      uploadedAt: '2024-01-15T10:00:00Z',\n    },\n    {\n      id: 'doc-2',\n      type: 'tax_invoice',\n      filename: '세금계산서_2024-01-20.pdf',\n      storageUrl: '/documents/tax_invoice_2024-01-20.pdf',\n      sha256: 'def456...',\n      uploadedAt: '2024-01-20T14:30:00Z',\n    },\n  ]\n\n  return mockDocuments\n}\n\n// 예산 정보 수집\nasync function collectBudgetInfo(_projectId: string, _period: string): Promise<any> {\n  // 실제 구현에서는 예산 데이터를 수집\n  return {\n    totalBudget: 100000000,\n    executedAmount: 60000000,\n    categoryBreakdown: [\n      {\n        category: 'PERSONNEL_CASH',\n        planned: 50000000,\n        executed: 35000000,\n        rate: 70,\n      },\n      {\n        category: 'MATERIAL',\n        planned: 30000000,\n        executed: 20000000,\n        rate: 67,\n      },\n      {\n        category: 'RESEARCH_ACTIVITY',\n        planned: 20000000,\n        executed: 5000000,\n        rate: 25,\n      },\n    ],\n  }\n}\n\n// 인력 정보 수집\nasync function collectPersonnelInfo(_projectId: string, _period: string): Promise<any> {\n  // 실제 구현에서는 인력 데이터를 수집\n  return {\n    totalParticipants: 8,\n    participationDetails: [\n      {\n        personId: 'person-1',\n        name: '김연구원',\n        department: '개발팀',\n        participationRate: 100,\n        monthlyAllocation: 5000000,\n      },\n      {\n        personId: 'person-2',\n        name: '이연구원',\n        department: '개발팀',\n        participationRate: 80,\n        monthlyAllocation: 4000000,\n      },\n    ],\n  }\n}\n\n// 성과 정보 수집\nasync function collectPerformanceInfo(_projectId: string, _period: string): Promise<any> {\n  // 실제 구현에서는 성과 데이터를 수집\n  return {\n    milestones: [\n      {\n        id: 'milestone-1',\n        title: '시스템 설계 완료',\n        status: 'completed',\n        completionDate: '2024-01-30',\n      },\n      {\n        id: 'milestone-2',\n        title: '프로토타입 v1.0 개발',\n        status: 'completed',\n        completionDate: '2024-02-15',\n      },\n    ],\n    deliverables: [\n      {\n        title: '시스템 설계서',\n        type: 'document',\n        status: 'delivered',\n      },\n      {\n        title: '프로토타입 v1.0',\n        type: 'prototype',\n        status: 'delivered',\n      },\n    ],\n  }\n}\n\n// 매니페스트 XML 생성\nfunction generateManifestXml(\n  projectInfo: any,\n  budgetInfo: any,\n  personnelInfo: any,\n  performanceInfo: any,\n): string {\n  const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<submission_bundle>\n\t<project_info>\n\t\t<id>${projectInfo.id}</id>\n\t\t<code>${projectInfo.code}</code>\n\t\t<title>${projectInfo.title}</title>\n\t\t<sponsor>${projectInfo.sponsor}</sponsor>\n\t\t<start_date>${projectInfo.startDate}</start_date>\n\t\t<end_date>${projectInfo.endDate}</end_date>\n\t\t<manager>${projectInfo.manager}</manager>\n\t\t<department>${projectInfo.department}</department>\n\t\t<description>${projectInfo.description}</description>\n\t</project_info>\n\t\n\t<budget_info>\n\t\t<total_budget>${budgetInfo.totalBudget}</total_budget>\n\t\t<executed_amount>${budgetInfo.executedAmount}</executed_amount>\n\t\t<execution_rate>${((budgetInfo.executedAmount / budgetInfo.totalBudget) * 100).toFixed(2)}</execution_rate>\n\t\t<categories>\n\t\t\t${budgetInfo.categoryBreakdown\n        .map(\n          (cat: any) => `\n\t\t\t<category>\n\t\t\t\t<name>${cat.category}</name>\n\t\t\t\t<planned>${cat.planned}</planned>\n\t\t\t\t<executed>${cat.executed}</executed>\n\t\t\t\t<rate>${cat.rate}</rate>\n\t\t\t</category>\n\t\t\t`,\n        )\n        .join('')}\n\t\t</categories>\n\t</budget_info>\n\t\n\t<personnel_info>\n\t\t<total_participants>${personnelInfo.totalParticipants}</total_participants>\n\t\t<participants>\n\t\t\t${personnelInfo.participationDetails\n        .map(\n          (person: any) => `\n\t\t\t<participant>\n\t\t\t\t<person_id>${person.personId}</person_id>\n\t\t\t\t<name>${person.name}</name>\n\t\t\t\t<department>${person.department}</department>\n\t\t\t\t<participation_rate>${person.participationRate}</participation_rate>\n\t\t\t\t<monthly_allocation>${person.monthlyAllocation}</monthly_allocation>\n\t\t\t</participant>\n\t\t\t`,\n        )\n        .join('')}\n\t\t</participants>\n\t</personnel_info>\n\t\n\t<performance_info>\n\t\t<milestones>\n\t\t\t${performanceInfo.milestones\n        .map(\n          (milestone: any) => `\n\t\t\t<milestone>\n\t\t\t\t<id>${milestone.id}</id>\n\t\t\t\t<title>${milestone.title}</title>\n\t\t\t\t<status>${milestone.status}</status>\n\t\t\t\t<completion_date>${milestone.completionDate}</completion_date>\n\t\t\t</milestone>\n\t\t\t`,\n        )\n        .join('')}\n\t\t</milestones>\n\t\t<deliverables>\n\t\t\t${performanceInfo.deliverables\n        .map(\n          (deliverable: any) => `\n\t\t\t<deliverable>\n\t\t\t\t<title>${deliverable.title}</title>\n\t\t\t\t<type>${deliverable.type}</type>\n\t\t\t\t<status>${deliverable.status}</status>\n\t\t\t</deliverable>\n\t\t\t`,\n        )\n        .join('')}\n\t\t</deliverables>\n\t</performance_info>\n\t\n\t<metadata>\n\t\t<generated_at>${new Date().toISOString()}</generated_at>\n\t\t<version>1.0</version>\n\t\t<format>R&D_SUBMISSION_BUNDLE</format>\n\t</metadata>\n</submission_bundle>`\n\n  return xml\n}\n\n// 요약 CSV 생성\nfunction generateSummaryCsv(budgetInfo: any, personnelInfo: any, performanceInfo: any): string {\n  const csv = `구분,항목,계획,실행,비율\n예산,총예산,${budgetInfo.totalBudget},${budgetInfo.executedAmount},${((budgetInfo.executedAmount / budgetInfo.totalBudget) * 100).toFixed(2)}%\n예산,인건비,${budgetInfo.categoryBreakdown[0].planned},${budgetInfo.categoryBreakdown[0].executed},${budgetInfo.categoryBreakdown[0].rate}%\n예산,재료비,${budgetInfo.categoryBreakdown[1].planned},${budgetInfo.categoryBreakdown[1].executed},${budgetInfo.categoryBreakdown[1].rate}%\n예산,연구활동비,${budgetInfo.categoryBreakdown[2].planned},${budgetInfo.categoryBreakdown[2].executed},${budgetInfo.categoryBreakdown[2].rate}%\n인력,총참여자,${personnelInfo.totalParticipants},${personnelInfo.totalParticipants},100%\n성과,완료마일스톤,${performanceInfo.milestones.length},${performanceInfo.milestones.filter((m: any) => m.status === 'completed').length},${((performanceInfo.milestones.filter((m: any) => m.status === 'completed').length / performanceInfo.milestones.length) * 100).toFixed(2)}%\n성과,제출산출물,${performanceInfo.deliverables.length},${performanceInfo.deliverables.filter((d: any) => d.status === 'delivered').length},${((performanceInfo.deliverables.filter((d: any) => d.status === 'delivered').length / performanceInfo.deliverables.length) * 100).toFixed(2)}%`\n\n  return csv\n}\n\n// 번들 파일 생성\nasync function createBundleFile(\n  documents: Document[],\n  manifestXml: string,\n  summaryCsv: string,\n): Promise<{ url: string; size: number }> {\n  // 실제 구현에서는 ZIP 파일을 생성하고 스토리지에 업로드\n  // 여기서는 모의 구현\n  const bundleData = {\n    documents: documents,\n    manifest: manifestXml,\n    summary: summaryCsv,\n    createdAt: new Date().toISOString(),\n  }\n\n  // 모의 파일 URL과 크기\n  return {\n    url: `/bundles/submission_${Date.now()}.zip`,\n    size: JSON.stringify(bundleData).length,\n  }\n}\n\n// 체크섬 계산\nasync function calculateChecksum(_bundleFile: { url: string; size: number }): Promise<string> {\n  // 실제 구현에서는 파일의 SHA-256 해시를 계산\n  // 여기서는 모의 해시\n  return `sha256:${crypto.randomUUID().replace(/-/g, '')}`\n}\n\n// 번들 상태 업데이트\nfunction updateBundleStatus(\n  bundleId: string,\n  status: SubmissionBundle['status'],\n  fileUrl: string,\n  manifestXml: string,\n  checksum: string,\n): void {\n  submissionBundles.update((list) => {\n    const index = list.findIndex((b) => b.id === bundleId)\n    if (index === -1) return list\n\n    const bundle = list[index]\n    const updatedBundle = {\n      ...bundle,\n      status,\n      fileUrl,\n      manifestXml,\n      checksum,\n    }\n\n    const newList = [...list]\n    newList[index] = updatedBundle\n\n    logAudit('update', 'submission_bundle', bundleId, { status }, updatedBundle)\n\n    return newList\n  })\n}\n\n// 번들 다운로드\nexport function downloadBundle(bundleId: string): void {\n  let bundle: SubmissionBundle | undefined = undefined\n\n  submissionBundles.subscribe((list) => {\n    bundle = list.find((b) => b.id === bundleId)\n  })()\n\n  if (!bundle || bundle.status !== 'ready') {\n    throw new Error('Bundle not ready for download')\n  }\n\n  // 실제 구현에서는 파일 다운로드 처리\n  logger.log(`Downloading bundle: ${bundle.fileUrl}`)\n\n  // 다운로드 이력 기록\n  logAudit('download', 'submission_bundle', bundleId, { fileUrl: bundle.fileUrl }, {})\n}\n\n// 번들 검증\nexport function validateBundle(bundleId: string): {\n  valid: boolean\n  errors: string[]\n  warnings: string[]\n} {\n  let bundle: SubmissionBundle | undefined = undefined\n\n  submissionBundles.subscribe((list) => {\n    bundle = list.find((b) => b.id === bundleId)\n  })()\n\n  if (!bundle) {\n    return {\n      valid: false,\n      errors: ['Bundle not found'],\n      warnings: [],\n    }\n  }\n\n  const errors: string[] = []\n  const warnings: string[] = []\n\n  // 1. 필수 파일 존재 여부 확인\n  if (!bundle.fileUrl) {\n    errors.push('Bundle file not found')\n  }\n\n  if (!bundle.manifestXml) {\n    errors.push('Manifest XML not found')\n  }\n\n  if (!bundle.checksum) {\n    errors.push('Checksum not found')\n  }\n\n  // 2. 매니페스트 XML 유효성 검사\n  if (bundle.manifestXml) {\n    try {\n      const parser = new DOMParser()\n      const doc = parser.parseFromString(bundle.manifestXml, 'text/xml')\n      const parseError = doc.querySelector('parsererror')\n\n      if (parseError) {\n        errors.push('Invalid XML format in manifest')\n      }\n    } catch (_error) {\n      errors.push('Failed to parse manifest XML')\n    }\n  }\n\n  // 3. 체크섬 유효성 검사\n  if (bundle.checksum && !bundle.checksum.startsWith('sha256:')) {\n    warnings.push('Invalid checksum format')\n  }\n\n  // 4. 번들 상태 확인\n  if (bundle.status !== 'ready') {\n    errors.push(`Bundle status is ${bundle.status}, expected 'ready'`)\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings,\n  }\n}\n\n// 번들 템플릿 생성\nexport function createBundleTemplate(\n  templateName: string,\n  templateData: {\n    requiredDocuments: string[]\n    manifestStructure: any\n    validationRules: unknown[]\n  },\n): void {\n  const template = {\n    name: templateName,\n    requiredDocuments: templateData.requiredDocuments,\n    manifestStructure: templateData.manifestStructure,\n    validationRules: templateData.validationRules,\n    createdAt: new Date().toISOString(),\n  }\n\n  bundleTemplates.update((templates) => ({\n    ...templates,\n    [templateName]: template,\n  }))\n}\n\n// 번들 템플릿 적용\nexport function applyBundleTemplate(\n  projectId: string,\n  templateName: string,\n  period: string,\n): string {\n  let template: any = undefined\n\n  bundleTemplates.subscribe((templates) => {\n    template = templates[templateName]\n  })()\n\n  if (!template) {\n    throw new Error(`Template ${templateName} not found`)\n  }\n\n  // 템플릿을 적용하여 번들 생성\n  return createSubmissionBundle(projectId, period, 'current-user')\n}\n\n// 번들 이력 조회\nexport function getBundleHistory(projectId: string): SubmissionBundle[] {\n  let history: SubmissionBundle[] = []\n\n  submissionBundles.subscribe((list) => {\n    history = list\n      .filter((b) => b.projectId === projectId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n  })()\n\n  return history\n}\n\n// 번들 통계\nexport function getBundleStatistics(projectId: string): any {\n  const history = getBundleHistory(projectId)\n\n  const totalBundles = history.length\n  const readyBundles = history.filter((b) => b.status === 'ready').length\n  const generatingBundles = history.filter((b) => b.status === 'generating').length\n  const failedBundles = history.filter((b) => b.status === 'failed').length\n  const uploadedBundles = history.filter((b) => b.status === 'uploaded').length\n\n  const averageGenerationTime = calculateAverageGenerationTime(history)\n\n  return {\n    totalBundles,\n    readyBundles,\n    generatingBundles,\n    failedBundles,\n    uploadedBundles,\n    successRate: totalBundles > 0 ? (readyBundles / totalBundles) * 100 : 0,\n    averageGenerationTime,\n  }\n}\n\n// 평균 생성 시간 계산\nfunction calculateAverageGenerationTime(history: SubmissionBundle[]): number {\n  const completedBundles = history.filter((b) => b.status === 'ready' || b.status === 'uploaded')\n\n  if (completedBundles.length === 0) return 0\n\n  const totalTime = completedBundles.reduce((sum, bundle) => {\n    const created = new Date(bundle.createdAt).getTime()\n    const completed = new Date(bundle.createdAt).getTime() + 300000 // 모의 완료 시간 (5분 후)\n    return sum + (completed - created)\n  }, 0)\n\n  return totalTime / completedBundles.length\n}\n\n// 번들 대시보드 데이터\nexport function getBundleDashboardData(): any {\n  let allBundles: SubmissionBundle[] = []\n\n  submissionBundles.subscribe((list) => {\n    allBundles = list\n  })()\n\n  const recentBundles = allBundles\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 10)\n\n  const statusCounts = {\n    generating: allBundles.filter((b) => b.status === 'generating').length,\n    ready: allBundles.filter((b) => b.status === 'ready').length,\n    uploaded: allBundles.filter((b) => b.status === 'uploaded').length,\n    failed: allBundles.filter((b) => b.status === 'failed').length,\n  }\n\n  return {\n    recentBundles,\n    statusCounts,\n    totalBundles: allBundles.length,\n  }\n}\n\n// 번들 자동 생성 스케줄링\nexport function scheduleAutoBundleGeneration(\n  projectId: string,\n  schedule: 'monthly' | 'quarterly' | 'yearly',\n): void {\n  // 실제 구현에서는 스케줄러에 등록\n  const scheduleConfig = {\n    projectId,\n    schedule,\n    enabled: true,\n    createdAt: new Date().toISOString(),\n  }\n\n  logger.log('Auto bundle generation scheduled:', scheduleConfig)\n}\n\n// 번들 내보내기\nexport function exportBundleData(format: 'json' | 'csv' | 'excel'): string {\n  let allBundles: SubmissionBundle[] = []\n\n  submissionBundles.subscribe((list) => {\n    allBundles = list\n  })()\n\n  if (format === 'json') {\n    return JSON.stringify(allBundles, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader = 'ID,Project ID,Period,Status,File URL,Checksum,Created By,Created At\\n'\n    const csvRows = allBundles\n      .map(\n        (bundle) =>\n          `${bundle.id},${bundle.projectId},${bundle.period},${bundle.status},${bundle.fileUrl},${bundle.checksum},${bundle.createdBy},${bundle.createdAt}`,\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(allBundles, null, 2)\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/types.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 330,
        "column": 16,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 330,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7108, 7111], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7108, 7111], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 330,
        "column": 26,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 330,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7118, 7121], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7118, 7121], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Project Management System Types\n// 프로젝트 관리 시스템을 위한 타입 정의\n\nexport interface Project {\n  id: string\n  code: string\n  title: string\n  description?: string\n  sponsor?: string\n  sponsorName?: string\n  sponsorType: 'government' | 'private' | 'internal'\n  startDate?: string\n  endDate?: string\n  managerId?: string\n  managerName?: string\n  status: 'planning' | 'active' | 'completed' | 'cancelled' | 'suspended'\n  budgetTotal?: number\n  budgetCurrency: string\n  researchType?: 'basic' | 'applied' | 'development'\n  technologyArea?: string\n  priority: 'low' | 'medium' | 'high' | 'critical'\n  memberCount?: number\n  totalParticipationRate?: number\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ProjectMember {\n  id: string\n  projectId: string\n  employeeId: string\n  employeeName?: string\n  department?: string\n  role: string\n  startDate: string\n  endDate?: string\n  participationRate: number\n  monthlySalary?: number\n  status: 'active' | 'inactive' | 'completed' | 'withdrawn'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ProjectBudget {\n  id: string\n  projectId: string\n  fiscalYear: number\n  totalBudget: number\n  personnelCost: number\n  materialCost: number\n  researchActivityCost: number\n  indirectCost: number\n  otherCost: number\n  spentAmount: number\n  currency: string\n  status: 'planned' | 'approved' | 'executing' | 'completed'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ParticipationRate {\n  id: string\n  employeeId: string\n  employeeName?: string\n  projectId: string\n  projectName?: string\n  participationRate: number\n  startDate: string\n  endDate?: string\n  status: 'active' | 'inactive' | 'completed'\n  createdBy?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ParticipationRateHistory {\n  id: string\n  employeeId: string\n  employeeName?: string\n  projectId: string\n  projectName?: string\n  oldRate?: number\n  newRate: number\n  changeReason:\n    | 'project_start'\n    | 'project_end'\n    | 'manual_adjustment'\n    | 'employee_leave'\n    | 'employee_join'\n  changeDate: string\n  changedBy?: string\n  changedByName?: string\n  notes?: string\n  createdAt: string\n}\n\nexport interface BudgetCategory {\n  id: string\n  code: string\n  name: string\n  description?: string\n  parentCategoryId?: string\n  isActive: boolean\n  sortOrder: number\n  createdAt: string\n  updatedAt: string\n  // 추가 속성들\n  categoryCode?: string\n  nameKo?: string\n  requiredDocs?: Document[]\n  defaultWorkflow?: {\n    steps: string[]\n    sla: number\n  }\n  defaultSlaDays?: number\n  defaultOwners?: {\n    primary: string\n    secondary: string\n  }\n}\n\nexport interface ProjectMilestone {\n  id: string\n  projectId: string\n  title: string\n  description?: string\n  milestoneDate: string\n  status: 'pending' | 'completed' | 'delayed' | 'cancelled'\n  completionDate?: string\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ProjectRisk {\n  id: string\n  projectId: string\n  riskType: 'technical' | 'schedule' | 'budget' | 'resource' | 'external'\n  title: string\n  description?: string\n  probability: 'low' | 'medium' | 'high'\n  impact: 'low' | 'medium' | 'high'\n  status: 'open' | 'mitigated' | 'closed'\n  mitigationPlan?: string\n  ownerId?: string\n  ownerName?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 대시보드용 요약 정보\nexport interface ProjectSummary {\n  totalProjects: number\n  activeProjects: number\n  completedProjects: number\n  totalBudget: number\n  currentYearBudget: number\n  totalMembers: number\n  overParticipationEmployees: number\n}\n\nexport interface EmployeeParticipationSummary {\n  employeeId: string\n  employeeName: string\n  department: string\n  activeProjects: number\n  totalParticipationRate: number\n  participationStatus: 'OVER_LIMIT' | 'FULL' | 'AVAILABLE'\n  projects: Array<{\n    projectId: string\n    projectName: string\n    participationRate: number\n    role: string\n  }>\n}\n\nexport interface BudgetSummaryByYear {\n  fiscalYear: number\n  projectCount: number\n  totalBudget: number\n  totalPersonnelCost: number\n  totalMaterialCost: number\n  totalResearchActivityCost: number\n  totalIndirectCost: number\n  totalOtherCost: number\n  totalSpentAmount: number\n}\n\n// API 요청/응답 타입\nexport interface CreateProjectRequest {\n  code: string\n  title: string\n  description?: string\n  sponsor?: string\n  sponsorName?: string\n  sponsorType: 'government' | 'private' | 'internal'\n  startDate?: string\n  endDate?: string\n  managerId?: string\n  budgetTotal?: number\n  researchType?: 'basic' | 'applied' | 'development'\n  technologyArea?: string\n  priority: 'low' | 'medium' | 'high' | 'critical'\n}\n\nexport interface UpdateProjectRequest extends Partial<CreateProjectRequest> {\n  id: string\n}\n\nexport interface AddProjectMemberRequest {\n  projectId: string\n  employeeId: string\n  role: string\n  startDate: string\n  endDate?: string\n  participationRate: number\n  monthlySalary?: number\n  notes?: string\n}\n\nexport interface UpdateProjectMemberRequest extends Partial<AddProjectMemberRequest> {\n  id: string\n}\n\nexport interface CreateProjectBudgetRequest {\n  projectId: string\n  fiscalYear: number\n  totalBudget: number\n  personnelCost?: number\n  materialCost?: number\n  researchActivityCost?: number\n  indirectCost?: number\n  otherCost?: number\n  notes?: string\n}\n\nexport interface UpdateProjectBudgetRequest extends Partial<CreateProjectBudgetRequest> {\n  id: string\n}\n\nexport interface UpdateParticipationRateRequest {\n  employeeId: string\n  projectId: string\n  participationRate: number\n  changeReason:\n    | 'project_start'\n    | 'project_end'\n    | 'manual_adjustment'\n    | 'employee_leave'\n    | 'employee_join'\n  notes?: string\n}\n\n// 필터링 및 검색 타입\nexport interface ProjectFilters {\n  status?: string\n  sponsorType?: string\n  researchType?: string\n  priority?: string\n  managerId?: string\n  startDateFrom?: string\n  startDateTo?: string\n  search?: string\n}\n\nexport interface ParticipationRateFilters {\n  employeeId?: string\n  projectId?: string\n  status?: string\n  participationStatus?: 'OVER_LIMIT' | 'FULL' | 'AVAILABLE'\n  department?: string\n}\n\n// 통계 및 차트 데이터 타입\nexport interface ProjectStatusStats {\n  planning: number\n  active: number\n  completed: number\n  cancelled: number\n  suspended: number\n}\n\nexport interface BudgetDistributionStats {\n  personnelCost: number\n  materialCost: number\n  researchActivityCost: number\n  indirectCost: number\n  otherCost: number\n}\n\nexport interface ParticipationRateStats {\n  overLimit: number\n  full: number\n  available: number\n  averageRate: number\n}\n\n// 알림 및 경고 타입\nexport interface ParticipationRateAlert {\n  employeeId: string\n  employeeName: string\n  totalParticipationRate: number\n  excessRate: number\n  projects: Array<{\n    projectId: string\n    projectName: string\n    participationRate: number\n  }>\n}\n\nexport interface BudgetAlert {\n  projectId: string\n  projectName: string\n  fiscalYear: number\n  alertType: 'over_budget' | 'near_budget' | 'under_utilized'\n  message: string\n  amount?: number\n  percentage?: number\n}\n\n// 감사 및 보안 관련 타입\nexport interface AuditLog {\n  id: string\n  actorId: string\n  action: string\n  entity: string\n  entityId: string\n  diff: { old: any; new: any }\n  at: string\n  metadata?: Record<string, unknown>\n}\n\nexport interface Person {\n  id: string\n  name: string\n  email: string\n  department: string\n  roleSet: string[]\n  active: boolean\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Document {\n  id: string\n  title: string\n  type: string\n  content?: string\n  filePath?: string\n  createdBy: string\n  createdAt: string\n  updatedAt: string\n  // 추가 속성들\n  required?: boolean\n  templateId?: string\n}\n\nexport interface Approval {\n  id: string\n  entityType: string\n  entityId: string\n  status: 'pending' | 'approved' | 'rejected'\n  requestedBy: string\n  approvedBy?: string\n  requestedAt: string\n  approvedAt?: string\n  notes?: string\n  // 추가 속성들\n  decision?: 'approve' | 'reject' | 'pending'\n}\n\nexport interface Employment {\n  id: string\n  employeeId: string\n  startDate: string\n  endDate?: string\n  position: string\n  department: string\n  salary: number\n  status: 'active' | 'inactive' | 'terminated'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface SalaryHistory {\n  id: string\n  employeeId: string\n  effectiveDate: string\n  salary: number\n  changeReason: string\n  createdAt: string\n}\n\nexport interface Milestone {\n  id: string\n  projectId: string\n  title: string\n  description?: string\n  dueDate: string\n  status: 'pending' | 'completed' | 'overdue'\n  completedAt?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ParticipationAssignment {\n  id: string\n  employeeId: string\n  projectId: string\n  participationRate: number\n  startDate: string\n  endDate?: string\n  role: string\n  status: 'active' | 'inactive'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ExpenseItem {\n  id: string\n  expenseId: string\n  category: string\n  description: string\n  amount: number\n  currency: string\n  receiptPath?: string\n  createdAt: string\n  updatedAt: string\n  // 추가 속성들\n  status?: 'pending' | 'approved' | 'rejected' | 'completed'\n}\n\nexport interface ResearchNote {\n  id: string\n  projectId: string\n  title: string\n  content: string\n  authorId: string\n  authorName: string\n  tags: string[]\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Report {\n  id: string\n  title: string\n  type: string\n  content: string\n  generatedBy: string\n  generatedAt: string\n  parameters?: Record<string, unknown>\n}\n\n// BudgetCategoryMaster는 BudgetCategory의 별칭\nexport type BudgetCategoryMaster = BudgetCategory\n\n// ===== 제출 번들 타입 =====\nexport interface SubmissionBundle {\n  id: string\n  projectId: string\n  categoryId: string\n  title: string\n  description?: string\n  documents: Document[]\n  status: 'draft' | 'submitted' | 'under_review' | 'approved' | 'rejected'\n  submittedBy: string\n  submittedAt?: string\n  reviewedBy?: string\n  reviewedAt?: string\n  comments?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// ProjectBudgetCategory는 BudgetCategory의 별칭\nexport type ProjectBudgetCategory = BudgetCategory\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rd.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/recruitment.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/budget-categories.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/dummy-data.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/expense-workflow.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/init-dummy-data.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1889, 1892], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1889, 1892], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 96,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 96,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2845, 2848], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2845, 2848], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 132,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 132,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4187, 4190], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4187, 4190], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 158,
        "column": 25,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 158,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5054, 5057], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5054, 5057], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// R&D 통합관리 시스템 더미데이터 초기화\n\nimport { toUTC } from '$lib/utils/date-handler'\nimport { approvalWorkflows, approvals, documents, expenseItems } from './expense-workflow'\nimport type { Approval, ApprovalWorkflow, Document, ExpenseItem } from './types'\nimport { logger } from '$lib/utils/logger'\n\n// ===== 더미 지출 항목 생성 =====\nfunction generateDummyExpenses(): ExpenseItem[] {\n  const categories = [\n    'PERSONNEL_CASH',\n    'MATERIAL',\n    'RESEARCH_ACTIVITY',\n    'TRAVEL',\n    'MEETING',\n    'PATENT',\n    'OFFICE_SUPPLIES',\n  ]\n  const statuses = ['draft', 'pending_approval', 'approved', 'executed', 'completed', 'rejected']\n  const projects = ['proj-001', 'proj-002', 'proj-003', 'proj-004', 'proj-005']\n  const requesters = [\n    'person-002',\n    'person-008',\n    'person-009',\n    'person-011',\n    'person-013',\n    'person-014',\n    'person-015',\n  ]\n  const deptOwners = [\n    '경영지원팀',\n    '구매팀',\n    'AI연구팀',\n    '블록체인팀',\n    'IoT팀',\n    '총무팀',\n    'R&D전략팀',\n  ]\n\n  const expenses: ExpenseItem[] = []\n\n  for (let i = 1; i <= 25; i++) {\n    const category = categories[Math.floor(Math.random() * categories.length)]\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const project = projects[Math.floor(Math.random() * projects.length)]\n    const requester = requesters[Math.floor(Math.random() * requesters.length)]\n    const deptOwner = deptOwners[Math.floor(Math.random() * deptOwners.length)]\n\n    const amount = Math.floor(Math.random() * 10000000) + 100000 // 10만원 ~ 1000만원\n    const createdAt = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString()\n\n    expenses.push({\n      id: `exp-${i.toString().padStart(3, '0')}`,\n      projectId: project,\n      categoryCode: category,\n      requesterId: requester,\n      amount: amount,\n      currency: 'KRW',\n      description: `${category} 관련 지출 - ${i}번째 요청`,\n      status: status as any,\n      deptOwner: deptOwner,\n      createdAt: createdAt,\n      updatedAt: createdAt,\n    })\n  }\n\n  return expenses\n}\n\n// ===== 더미 문서 생성 =====\nfunction generateDummyDocuments(): Document[] {\n  const documentTypes = [\n    'REQUISITION',\n    'QUOTE',\n    'PURCHASE_ORDER',\n    'TAX_INVOICE',\n    'DELIVERY_NOTE',\n    'INSPECTION_REPORT',\n    'RECEIPT',\n    'MEETING_MINUTES',\n    'TRAVEL_REPORT',\n    'PATENT_DOCUMENT',\n  ]\n  const expenses = generateDummyExpenses()\n  const documents: Document[] = []\n\n  for (let i = 1; i <= 30; i++) {\n    const expense = expenses[Math.floor(Math.random() * expenses.length)]\n    const docType = documentTypes[Math.floor(Math.random() * documentTypes.length)]\n    const createdAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString()\n\n    documents.push({\n      id: `doc-${i.toString().padStart(3, '0')}`,\n      expenseId: expense.id,\n      projectId: expense.projectId,\n      type: docType as any,\n      filename: `${docType}_${i}.pdf`,\n      originalFilename: `${docType}_${i}.pdf`,\n      storageUrl: `/storage/documents/${docType}_${i}.pdf`,\n      sha256: `sha256_${i}_${Math.random().toString(36).substr(2, 9)}`,\n      version: 1,\n      meta: {\n        fileSize: Math.floor(Math.random() * 5000000) + 100000, // 100KB ~ 5MB\n        uploadedBy: expense.requesterId,\n      },\n      createdAt: createdAt,\n    })\n  }\n\n  return documents\n}\n\n// ===== 더미 결재 생성 =====\nfunction generateDummyApprovals(): Approval[] {\n  const expenses = generateDummyExpenses()\n  const approvers = ['person-003', 'person-010', 'person-012', 'person-001', 'person-005']\n  const decisions = ['approved', 'rejected', 'pending']\n  const approvals: Approval[] = []\n\n  for (let i = 1; i <= 20; i++) {\n    const expense = expenses[Math.floor(Math.random() * expenses.length)]\n    const approver = approvers[Math.floor(Math.random() * approvers.length)]\n    const decision = decisions[Math.floor(Math.random() * decisions.length)]\n    const createdAt = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\n\n    approvals.push({\n      id: `app-${i.toString().padStart(3, '0')}`,\n      subjectType: 'expense',\n      subjectId: expense.id,\n      stepNo: Math.floor(Math.random() * 3) + 1,\n      approverId: approver,\n      decision: decision as any,\n      comment: decision === 'rejected' ? '추가 서류 필요' : '승인 완료',\n      decidedAt: decision !== 'pending' ? createdAt : undefined,\n      createdAt: createdAt,\n    })\n  }\n\n  return approvals\n}\n\n// ===== 더미 결재 워크플로우 생성 =====\nfunction generateDummyWorkflows(): ApprovalWorkflow[] {\n  const expenses = generateDummyExpenses()\n  const workflows: ApprovalWorkflow[] = []\n\n  expenses.forEach((expense, index) => {\n    const statuses = ['pending', 'approved', 'rejected', 'cancelled']\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const createdAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString()\n\n    workflows.push({\n      id: `workflow-${index + 1}`,\n      subjectType: 'expense',\n      subjectId: expense.id,\n      currentStep: Math.floor(Math.random() * 3) + 1,\n      totalSteps: 3,\n      status: status as any,\n      createdAt: createdAt,\n      updatedAt: createdAt,\n    })\n  })\n\n  return workflows\n}\n\n// ===== 더미데이터 초기화 함수 =====\nexport function initializeDummyData(): void {\n  logger.log('R&D 시스템 더미데이터 초기화 시작...')\n\n  // 지출 항목 초기화\n  const dummyExpenses = generateDummyExpenses()\n  expenseItems.set(dummyExpenses)\n  logger.log(`${dummyExpenses.length}개의 지출 항목 생성 완료`)\n\n  // 문서 초기화\n  const dummyDocuments = generateDummyDocuments()\n  documents.set(dummyDocuments)\n  logger.log(`${dummyDocuments.length}개의 문서 생성 완료`)\n\n  // 결재 초기화\n  const dummyApprovals = generateDummyApprovals()\n  approvals.set(dummyApprovals)\n  logger.log(`${dummyApprovals.length}개의 결재 생성 완료`)\n\n  // 결재 워크플로우 초기화\n  const dummyWorkflows = generateDummyWorkflows()\n  approvalWorkflows.set(dummyWorkflows)\n  logger.log(`${dummyWorkflows.length}개의 결재 워크플로우 생성 완료`)\n\n  logger.log('R&D 시스템 더미데이터 초기화 완료!')\n}\n\n// ===== 통계 데이터 생성 =====\nexport function generateStatistics() {\n  let expenses: ExpenseItem[] = []\n  expenseItems.subscribe((value) => (expenses = value))()\n\n  const stats = {\n    total: expenses.length,\n    pending: expenses.filter((e) => e.status === 'pending_approval' || e.status === 'draft').length,\n    approved: expenses.filter(\n      (e) => e.status === 'approved' || e.status === 'executed' || e.status === 'completed',\n    ).length,\n    rejected: expenses.filter((e) => e.status === 'rejected').length,\n    totalAmount: expenses.reduce((sum, e) => sum + e.amount, 0),\n    byCategory: {} as Record<string, number>,\n    byProject: {} as Record<string, number>,\n    byStatus: {} as Record<string, number>,\n  }\n\n  // 카테고리별 통계\n  expenses.forEach((expense) => {\n    stats.byCategory[expense.categoryCode] = (stats.byCategory[expense.categoryCode] || 0) + 1\n    stats.byProject[expense.projectId] = (stats.byProject[expense.projectId] || 0) + 1\n    stats.byStatus[expense.status] = (stats.byStatus[expense.status] || 0) + 1\n  })\n\n  return stats\n}\n\n// ===== 랜덤 데이터 생성 유틸리티 =====\nexport function generateRandomId(prefix: string): string {\n  return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n}\n\nexport function generateRandomDate(daysAgo: number = 30): string {\n  const date = new Date(Date.now() - Math.random() * daysAgo * 24 * 60 * 60 * 1000)\n  return toUTC(date)\n}\n\nexport function generateRandomAmount(min: number = 100000, max: number = 10000000): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\n// ===== 샘플 텍스트 생성 =====\nexport const sampleTexts = {\n  descriptions: [\n    '연구용 장비 구매',\n    '소프트웨어 라이선스 구매',\n    '출장비 정산',\n    '회의비 지출',\n    '특허출원 수수료',\n    '사무용품 구매',\n    '연구활동비 지출',\n    '교육비 지출',\n    '컨설팅비 지출',\n    '마케팅비 지출',\n  ],\n  comments: [\n    '승인 완료',\n    '추가 서류 필요',\n    '금액 조정 필요',\n    '카테고리 변경 필요',\n    '담당자 확인 필요',\n    '예산 초과',\n    '정상 처리',\n    '재검토 필요',\n    '즉시 처리',\n    '보류',\n  ],\n  departments: [\n    '경영지원팀',\n    '구매팀',\n    'AI연구팀',\n    '블록체인팀',\n    'IoT팀',\n    '총무팀',\n    'R&D전략팀',\n    '기술팀',\n    '마케팅팀',\n    '인사팀',\n  ],\n}\n\n// ===== 내보내기 =====\nexport {\n  generateDummyApprovals,\n  generateDummyDocuments,\n  generateDummyExpenses,\n  generateDummyWorkflows,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/mock-data.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/participation-manager.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 414,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 414,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13405, 13408], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13405, 13408], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 418,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 418,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [13530, 13533], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [13530, 13533], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { derived, get, writable } from 'svelte/store'\nimport type { Employee, Project } from '../rd'\nimport { employees, projects } from '../rd'\nimport type { ParticipationAssignment } from './types'\n\n// 고도화된 참여율 관리 스토어\nexport const participationAssignments = writable<ParticipationAssignment[]>([])\nexport const participationHistory = writable<ParticipationHistory[]>([])\nexport const participationConflicts = writable<ParticipationConflict[]>([])\nexport const participationRecommendations = writable<ParticipationRecommendation[]>([])\n// participationHealth와 participationTrends는 derived store로 정의됨\n\n// 참여율 히스토리 인터페이스\nexport interface ParticipationHistory {\n  id: string\n  personId: string\n  projectId: string\n  oldRate: number\n  newRate: number\n  changeReason: string\n  changedBy: string\n  changedAt: string\n  effectiveFrom: string\n  effectiveTo: string\n}\n\n// 참여율 충돌 인터페이스\nexport interface ParticipationConflict {\n  id: string\n  personId: string\n  conflictType: 'overload' | 'underutilization' | 'schedule_conflict' | 'skill_mismatch'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  description: string\n  affectedProjects: string[]\n  recommendedActions: string[]\n  detectedAt: string\n  resolvedAt?: string\n}\n\n// 참여율 추천 인터페이스\nexport interface ParticipationRecommendation {\n  id: string\n  type: 'rebalance' | 'hire' | 'reduce' | 'optimize'\n  priority: 'low' | 'medium' | 'high' | 'urgent'\n  title: string\n  description: string\n  affectedPersons: string[]\n  affectedProjects: string[]\n  estimatedImpact: {\n    cost: number\n    benefit: number\n    risk: number\n  }\n  recommendedActions: string[]\n  createdAt: string\n  expiresAt: string\n}\n\n// 고급 참여율 분석 함수들\nexport class ParticipationManager {\n  // 1. 참여율 충돌 감지\n  static detectConflicts(): ParticipationConflict[] {\n    const conflicts: ParticipationConflict[] = []\n    const currentAssignments = get(participationAssignments)\n    const currentEmployees = get(employees)\n    const currentProjects = get(projects)\n\n    // 월별 참여율 분석\n    const monthlyAnalysis = this.analyzeMonthlyParticipation()\n\n    // 과부하 감지\n    monthlyAnalysis.forEach((monthData) => {\n      monthData.personAnalysis.forEach((personData) => {\n        if (personData.totalRate > 100) {\n          conflicts.push({\n            id: crypto.randomUUID(),\n            personId: personData.personId,\n            conflictType: 'overload',\n            severity: personData.totalRate > 120 ? 'critical' : 'high',\n            description: `${personData.personName}의 ${monthData.month} 참여율이 ${personData.totalRate}%로 과부하 상태입니다.`,\n            affectedProjects: personData.projects.map((p) => p.projectId),\n            recommendedActions: ['참여율 재조정', '추가 인력 투입', '프로젝트 일정 조정'],\n            detectedAt: new Date().toISOString(),\n          })\n        }\n      })\n    })\n\n    // 미활용 감지\n    monthlyAnalysis.forEach((monthData) => {\n      monthData.personAnalysis.forEach((personData) => {\n        if (personData.totalRate < 50 && personData.totalRate > 0) {\n          conflicts.push({\n            id: crypto.randomUUID(),\n            personId: personData.personId,\n            conflictType: 'underutilization',\n            severity: personData.totalRate < 30 ? 'medium' : 'low',\n            description: `${personData.personName}의 ${monthData.month} 참여율이 ${personData.totalRate}%로 미활용 상태입니다.`,\n            affectedProjects: personData.projects.map((p) => p.projectId),\n            recommendedActions: ['추가 프로젝트 배정', '교육 및 개발 활동', '다른 팀 지원'],\n            detectedAt: new Date().toISOString(),\n          })\n        }\n      })\n    })\n\n    // 스킬 불일치 감지\n    currentAssignments.forEach((assignment) => {\n      const employee = currentEmployees.find((e) => e.id === assignment.personId)\n      const project = currentProjects.find((p) => p.id === assignment.projectId)\n\n      if (employee && project) {\n        const skillMatch = this.calculateSkillMatch(employee, project)\n        if (skillMatch < 0.6) {\n          conflicts.push({\n            id: crypto.randomUUID(),\n            personId: assignment.personId,\n            conflictType: 'skill_mismatch',\n            severity: skillMatch < 0.4 ? 'high' : 'medium',\n            description: `${employee.name}의 스킬이 ${project.name} 프로젝트 요구사항과 ${(skillMatch * 100).toFixed(0)}% 일치합니다.`,\n            affectedProjects: [assignment.projectId],\n            recommendedActions: ['스킬 향상 교육', '멘토링 프로그램', '프로젝트 역할 조정'],\n            detectedAt: new Date().toISOString(),\n          })\n        }\n      }\n    })\n\n    participationConflicts.set(conflicts)\n    return conflicts\n  }\n\n  // 2. 월별 참여율 분석\n  static analyzeMonthlyParticipation(): Array<{\n    month: string\n    personAnalysis: Array<{\n      personId: string\n      personName: string\n      totalRate: number\n      projects: Array<{\n        projectId: string\n        projectName: string\n        rate: number\n      }>\n    }>\n  }> {\n    const assignments = get(participationAssignments)\n    const employees = get(employees)\n    const projects = get(projects)\n\n    // 최근 12개월 분석\n    const months = []\n    for (let i = 0; i < 12; i++) {\n      const date = new Date()\n      date.setMonth(date.getMonth() - i)\n      months.push(date.toISOString().slice(0, 7)) // YYYY-MM 형식\n    }\n\n    return months.map((month) => {\n      const personAnalysis = employees.map((employee) => {\n        const personAssignments = assignments.filter(\n          (a) =>\n            a.personId === employee.id && a.dateFrom <= `${month}-31` && a.dateTo >= `${month}-01`,\n        )\n\n        const projects = personAssignments.map((assignment) => {\n          const project = projects.find((p) => p.id === assignment.projectId)\n          return {\n            projectId: assignment.projectId,\n            projectName: project?.name || 'Unknown',\n            rate: assignment.ratePct,\n          }\n        })\n\n        const totalRate = personAssignments.reduce((sum, a) => sum + a.ratePct, 0)\n\n        return {\n          personId: employee.id,\n          personName: employee.name,\n          totalRate,\n          projects,\n        }\n      })\n\n      return { month, personAnalysis }\n    })\n  }\n\n  // 3. 스킬 매칭 계산\n  static calculateSkillMatch(employee: Employee, project: Project): number {\n    // 실제 구현에서는 더 정교한 스킬 매칭 알고리즘 사용\n    const requiredSkills = project.requiredSkills || []\n    const employeeSkills = employee.skills || []\n\n    if (requiredSkills.length === 0) return 1.0\n\n    const matchedSkills = requiredSkills.filter((skill) =>\n      employeeSkills.some((empSkill) => empSkill.toLowerCase().includes(skill.toLowerCase())),\n    )\n\n    return matchedSkills.length / requiredSkills.length\n  }\n\n  // 4. 참여율 최적화 추천\n  static generateOptimizationRecommendations(): ParticipationRecommendation[] {\n    const recommendations: ParticipationRecommendation[] = []\n    const conflicts = get(participationConflicts)\n    const _monthlyAnalysis = this.analyzeMonthlyParticipation()\n\n    // 과부하 해결 추천\n    const overloadConflicts = conflicts.filter((c) => c.conflictType === 'overload')\n    if (overloadConflicts.length > 0) {\n      recommendations.push({\n        id: crypto.randomUUID(),\n        type: 'rebalance',\n        priority: 'high',\n        title: '참여율 재조정 필요',\n        description: `${overloadConflicts.length}명의 연구원이 과부하 상태입니다. 참여율 재조정이 필요합니다.`,\n        affectedPersons: overloadConflicts.map((c) => c.personId),\n        affectedProjects: [...new Set(overloadConflicts.flatMap((c) => c.affectedProjects))],\n        estimatedImpact: {\n          cost: 0,\n          benefit: 5000000, // 생산성 향상\n          risk: 0.2,\n        },\n        recommendedActions: [\n          '과부하 인력의 참여율 20% 감소',\n          '미활용 인력의 참여율 증가',\n          '프로젝트 우선순위 재검토',\n        ],\n        createdAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString(), // 7일 후\n      })\n    }\n\n    // 신규 채용 추천\n    const underutilizationConflicts = conflicts.filter((c) => c.conflictType === 'underutilization')\n    const totalUnderutilized = underutilizationConflicts.length\n    if (totalUnderutilized === 0) {\n      // 모든 인력이 적절히 활용되고 있지만, 프로젝트가 많다면 신규 채용 고려\n      const activeProjects = get(projects).filter((p) => p.status === 'active')\n      const totalEmployees = get(employees).length\n\n      if (activeProjects.length > totalEmployees * 0.8) {\n        recommendations.push({\n          id: crypto.randomUUID(),\n          type: 'hire',\n          priority: 'medium',\n          title: '신규 연구원 채용 고려',\n          description: '프로젝트 수가 인력 대비 많아 신규 채용을 고려해볼 수 있습니다.',\n          affectedPersons: [],\n          affectedProjects: activeProjects.map((p) => p.id),\n          estimatedImpact: {\n            cost: 60000000, // 연봉 6000만원\n            benefit: 80000000, // 생산성 향상\n            risk: 0.3,\n          },\n          recommendedActions: ['필요 스킬 분석', '채용 계획 수립', '온보딩 계획 준비'],\n          createdAt: new Date().toISOString(),\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30일 후\n        })\n      }\n    }\n\n    participationRecommendations.set(recommendations)\n    return recommendations\n  }\n\n  // 5. 참여율 자동 조정\n  static autoAdjustParticipation(personId: string, targetRate: number, reason: string): boolean {\n    const assignments = get(participationAssignments)\n    const personAssignments = assignments.filter((a) => a.personId === personId)\n\n    if (personAssignments.length === 0) return false\n\n    // 현재 총 참여율 계산\n    const currentTotal = personAssignments.reduce((sum, a) => sum + a.ratePct, 0)\n    const adjustment = targetRate - currentTotal\n\n    if (Math.abs(adjustment) < 5) return true // 5% 미만이면 조정하지 않음\n\n    // 조정 로직: 우선순위가 낮은 프로젝트부터 조정\n    const sortedAssignments = personAssignments.sort((a, b) => {\n      const projectA = get(projects).find((p) => p.id === a.projectId)\n      const projectB = get(projects).find((p) => p.id === b.projectId)\n      return (projectA?.priority || 0) - (projectB?.priority || 0)\n    })\n\n    let remainingAdjustment = adjustment\n    const updates: Array<{ id: string; newRate: number }> = []\n\n    for (const assignment of sortedAssignments) {\n      if (remainingAdjustment === 0) break\n\n      const currentRate = assignment.ratePct\n      let newRate = currentRate\n\n      if (remainingAdjustment > 0) {\n        // 참여율 증가\n        const maxIncrease = Math.min(remainingAdjustment, 100 - currentRate)\n        newRate = currentRate + maxIncrease\n        remainingAdjustment -= maxIncrease\n      } else {\n        // 참여율 감소\n        const maxDecrease = Math.min(Math.abs(remainingAdjustment), currentRate)\n        newRate = currentRate - maxDecrease\n        remainingAdjustment += maxDecrease\n      }\n\n      if (newRate !== currentRate) {\n        updates.push({ id: assignment.id, newRate })\n      }\n    }\n\n    // 업데이트 적용\n    updates.forEach((update) => {\n      this.updateParticipationRate(update.id, update.newRate, reason)\n    })\n\n    return true\n  }\n\n  // 6. 참여율 업데이트 (히스토리 포함)\n  static updateParticipationRate(assignmentId: string, newRate: number, reason: string): void {\n    const assignments = get(participationAssignments)\n    const assignment = assignments.find((a) => a.id === assignmentId)\n\n    if (!assignment) return\n\n    const oldRate = assignment.ratePct\n\n    // 히스토리 기록\n    const _history: ParticipationHistory = {\n      id: crypto.randomUUID(),\n      personId: assignment.personId,\n      projectId: assignment.projectId,\n      oldRate,\n      newRate,\n      changeReason: reason,\n      changedBy: 'system', // 실제로는 현재 사용자 ID\n      changedAt: new Date().toISOString(),\n      effectiveFrom: new Date().toISOString(),\n      effectiveTo: assignment.dateTo,\n    }\n\n    // 할당 업데이트\n    participationAssignments.update((assignments) =>\n      assignments.map((a) =>\n        a.id === assignmentId ? { ...a, ratePct: newRate, updatedAt: new Date().toISOString() } : a,\n      ),\n    )\n\n    // 히스토리 추가\n    participationHistory.update((history) => [history, ...history])\n  }\n\n  // 7. 참여율 예측 및 시뮬레이션\n  static simulateParticipationChanges(\n    _changes: Array<{\n      personId: string\n      projectId: string\n      newRate: number\n    }>,\n  ): {\n    monthlyImpact: Array<{\n      month: string\n      overloadCount: number\n      underutilizedCount: number\n      totalCost: number\n    }>\n    recommendations: string[]\n  } {\n    // 시뮬레이션 로직 구현\n    const monthlyImpact = []\n    const recommendations = []\n\n    // 최근 6개월 시뮬레이션\n    for (let i = 0; i < 6; i++) {\n      const date = new Date()\n      date.setMonth(date.getMonth() + i)\n      const month = date.toISOString().slice(0, 7)\n\n      // 시뮬레이션된 참여율로 분석\n      const simulatedAnalysis = this.analyzeMonthlyParticipation()\n      const monthData = simulatedAnalysis.find((m) => m.month === month)\n\n      if (monthData) {\n        const overloadCount = monthData.personAnalysis.filter((p) => p.totalRate > 100).length\n        const underutilizedCount = monthData.personAnalysis.filter(\n          (p) => p.totalRate < 50 && p.totalRate > 0,\n        ).length\n\n        monthlyImpact.push({\n          month,\n          overloadCount,\n          underutilizedCount,\n          totalCost: this.calculateMonthlyCost(monthData),\n        })\n      }\n    }\n\n    // 추천사항 생성\n    if (monthlyImpact.some((m) => m.overloadCount > 0)) {\n      recommendations.push('일부 인력의 과부하가 예상됩니다. 추가 인력 투입을 고려하세요.')\n    }\n    if (monthlyImpact.some((m) => m.underutilizedCount > 0)) {\n      recommendations.push('일부 인력의 미활용이 예상됩니다. 추가 프로젝트 배정을 고려하세요.')\n    }\n\n    return { monthlyImpact, recommendations }\n  }\n\n  // 8. 월별 비용 계산\n  static calculateMonthlyCost(monthData: any): number {\n    const employees = get(employees)\n    let totalCost = 0\n\n    monthData.personAnalysis.forEach((personData: any) => {\n      const employee = employees.find((e) => e.id === personData.personId)\n      if (employee) {\n        // 월급의 참여율 비율로 계산\n        const monthlySalary = employee.salary\n        const participationCost = monthlySalary * (personData.totalRate / 100)\n        totalCost += participationCost\n      }\n    })\n\n    return totalCost\n  }\n}\n\n// 파생 스토어들\nexport const participationHealth = derived(\n  [participationAssignments, participationConflicts],\n  ([assignments, conflicts]) => {\n    const totalAssignments = assignments.length\n    const criticalConflicts = conflicts.filter((c) => c.severity === 'critical').length\n    const highConflicts = conflicts.filter((c) => c.severity === 'high').length\n\n    const healthScore = Math.max(0, 100 - criticalConflicts * 20 - highConflicts * 10)\n\n    return {\n      score: healthScore,\n      status:\n        healthScore >= 80\n          ? 'excellent'\n          : healthScore >= 60\n            ? 'good'\n            : healthScore >= 40\n              ? 'fair'\n              : 'poor',\n      criticalIssues: criticalConflicts,\n      highIssues: highConflicts,\n      totalAssignments,\n    }\n  },\n)\n\nexport const participationTrends = derived(participationHistory, (history) => {\n  // 최근 6개월 트렌드 분석\n  const sixMonthsAgo = new Date()\n  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)\n\n  const recentHistory = history.filter((h) => new Date(h.changedAt) >= sixMonthsAgo)\n\n  const monthlyChanges = {}\n  recentHistory.forEach((change) => {\n    const month = change.changedAt.slice(0, 7)\n    if (!monthlyChanges[month]) {\n      monthlyChanges[month] = { increases: 0, decreases: 0, total: 0 }\n    }\n\n    if (change.newRate > change.oldRate) {\n      monthlyChanges[month].increases++\n    } else if (change.newRate < change.oldRate) {\n      monthlyChanges[month].decreases++\n    }\n    monthlyChanges[month].total++\n  })\n\n  return {\n    monthlyChanges,\n    totalChanges: recentHistory.length,\n    averageChange:\n      recentHistory.length > 0\n        ? recentHistory.reduce((sum, h) => sum + Math.abs(h.newRate - h.oldRate), 0) /\n          recentHistory.length\n        : 0,\n  }\n})\n\n// 초기 데이터 로드\nexport function initializeParticipationManager() {\n  // 충돌 감지\n  ParticipationManager.detectConflicts()\n\n  // 추천 생성\n  ParticipationManager.generateOptimizationRecommendations()\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/rbac.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 280,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 280,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9223, 9226], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9223, 9226], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 280,
        "column": 66,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 280,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9248, 9251], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9248, 9251], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// R&D 통합관리 시스템 RBAC (Role-Based Access Control) 구현\n\nimport { writable, derived } from 'svelte/store'\nimport { UserRole, Permission, type Person } from './types'\n\n// ===== 권한 매트릭스 정의 =====\nconst PERMISSION_MATRIX: Record<UserRole, Permission[]> = {\n  [UserRole.RESEARCHER]: [\n    Permission.READ_PROJECT,\n    Permission.UPLOAD_DOCUMENT,\n    Permission.CREATE_REPORT,\n  ],\n  [UserRole.PM]: [\n    Permission.READ_PROJECT,\n    Permission.WRITE_PROJECT,\n    Permission.APPROVE_EXPENSE,\n    Permission.MANAGE_PERSONNEL,\n    Permission.CREATE_REPORT,\n    Permission.UPLOAD_DOCUMENT,\n  ],\n  [UserRole.DEPARTMENT_HEAD]: [\n    Permission.READ_PROJECT,\n    Permission.WRITE_PROJECT,\n    Permission.APPROVE_EXPENSE,\n    Permission.UPLOAD_DOCUMENT,\n  ],\n  [UserRole.MANAGEMENT_SUPPORT]: [\n    Permission.READ_ALL,\n    Permission.WRITE_ALL,\n    Permission.APPROVE_ALL,\n    Permission.MANAGE_BUDGET,\n    Permission.MANAGE_PERSONNEL,\n    Permission.CREATE_REPORT,\n    Permission.UPLOAD_DOCUMENT,\n    Permission.VIEW_AUDIT_LOG,\n  ],\n  [UserRole.LAB_HEAD]: [\n    Permission.READ_ALL,\n    Permission.WRITE_PROJECT,\n    Permission.APPROVE_ALL,\n    Permission.MANAGE_PERSONNEL,\n    Permission.CREATE_REPORT,\n    Permission.VIEW_AUDIT_LOG,\n  ],\n  [UserRole.EXECUTIVE]: [\n    Permission.READ_ALL,\n    Permission.APPROVE_ALL,\n    Permission.MANAGE_BUDGET,\n    Permission.MANAGE_PERSONNEL,\n    Permission.VIEW_AUDIT_LOG,\n  ],\n  [UserRole.AUDITOR]: [Permission.READ_ALL, Permission.VIEW_AUDIT_LOG],\n}\n\n// ===== 엔터티별 권한 정의 =====\nconst ENTITY_PERMISSIONS: Record<string, Record<UserRole, string[]>> = {\n  Project: {\n    [UserRole.RESEARCHER]: ['read'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read', 'write'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve', 'lock'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read', 'approve', 'lock'],\n    [UserRole.AUDITOR]: ['read'],\n  },\n  ExpenseItem: {\n    [UserRole.RESEARCHER]: ['read'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve', 'lock'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read', 'approve'],\n    [UserRole.AUDITOR]: ['read'],\n  },\n  Document: {\n    [UserRole.RESEARCHER]: ['read', 'write'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read', 'write'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve', 'lock'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read', 'approve'],\n    [UserRole.AUDITOR]: ['read'],\n  },\n  ResearchNote: {\n    [UserRole.RESEARCHER]: ['read', 'write'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read'],\n    [UserRole.AUDITOR]: ['read'],\n  },\n  SubmissionBundle: {\n    [UserRole.RESEARCHER]: [],\n    [UserRole.PM]: ['read'],\n    [UserRole.DEPARTMENT_HEAD]: ['read'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve'],\n    [UserRole.LAB_HEAD]: ['read'],\n    [UserRole.EXECUTIVE]: ['read', 'approve'],\n    [UserRole.AUDITOR]: ['read', 'lock'],\n  },\n}\n\n// ===== 현재 사용자 스토어 =====\nexport const currentUser = writable<Person | null>(null)\n\n// ===== 사용자 역할 스토어 =====\nexport const userRoles = writable<UserRole[]>([])\n\n// ===== 사용자 권한 스토어 =====\nexport const userPermissions = derived(userRoles, ($userRoles) => {\n  const permissions = new Set<Permission>()\n  $userRoles.forEach((role) => {\n    PERMISSION_MATRIX[role]?.forEach((permission) => {\n      permissions.add(permission)\n    })\n  })\n  return Array.from(permissions)\n})\n\n// ===== RBAC 함수들 =====\n\n/**\n * 사용자에게 특정 권한이 있는지 확인\n */\nexport function hasPermission(permission: Permission, userRoles: UserRole[]): boolean {\n  return userRoles.some((role) => PERMISSION_MATRIX[role]?.includes(permission))\n}\n\n/**\n * 사용자가 특정 엔터티에 대해 특정 액션을 수행할 수 있는지 확인\n */\nexport function canPerformAction(entity: string, action: string, userRoles: UserRole[]): boolean {\n  return userRoles.some((role) => {\n    const entityPermissions = ENTITY_PERMISSIONS[entity]\n    if (!entityPermissions || !entityPermissions[role]) {\n      return false\n    }\n    return entityPermissions[role].includes(action)\n  })\n}\n\n/**\n * 사용자의 모든 권한을 가져옴\n */\nexport function getUserPermissions(userRoles: UserRole[]): Permission[] {\n  const permissions = new Set<Permission>()\n  userRoles.forEach((role) => {\n    PERMISSION_MATRIX[role]?.forEach((permission) => {\n      permissions.add(permission)\n    })\n  })\n  return Array.from(permissions)\n}\n\n/**\n * 특정 역할의 모든 권한을 가져옴\n */\nexport function getRolePermissions(role: UserRole): Permission[] {\n  return PERMISSION_MATRIX[role] || []\n}\n\n/**\n * 사용자 역할 설정\n */\nexport function setUserRoles(roles: UserRole[]): void {\n  userRoles.set(roles)\n}\n\n/**\n * 사용자 역할 추가\n */\nexport function addUserRole(role: UserRole): void {\n  userRoles.update((roles) => {\n    if (!roles.includes(role)) {\n      return [...roles, role]\n    }\n    return roles\n  })\n}\n\n/**\n * 사용자 역할 제거\n */\nexport function removeUserRole(role: UserRole): void {\n  userRoles.update((roles) => roles.filter((r) => r !== role))\n}\n\n/**\n * 현재 사용자 설정\n */\nexport function setCurrentUser(user: Person): void {\n  currentUser.set(user)\n  setUserRoles(user.roleSet)\n}\n\n/**\n * 현재 사용자 정보 가져오기\n */\nexport function getCurrentUser(): Person | null {\n  let user: Person | null = null\n  currentUser.subscribe((value) => (user = value))()\n  return user\n}\n\n/**\n * 권한 체크 헬퍼 함수들\n */\nexport const permissionChecks = {\n  canReadAll: (roles: UserRole[]) => hasPermission(Permission.READ_ALL, roles),\n  canWriteAll: (roles: UserRole[]) => hasPermission(Permission.WRITE_ALL, roles),\n  canApproveAll: (roles: UserRole[]) => hasPermission(Permission.APPROVE_ALL, roles),\n  canAuditAll: (roles: UserRole[]) => hasPermission(Permission.AUDIT_ALL, roles),\n  canManageBudget: (roles: UserRole[]) => hasPermission(Permission.MANAGE_BUDGET, roles),\n  canManagePersonnel: (roles: UserRole[]) => hasPermission(Permission.MANAGE_PERSONNEL, roles),\n  canCreateReport: (roles: UserRole[]) => hasPermission(Permission.CREATE_REPORT, roles),\n  canUploadDocument: (roles: UserRole[]) => hasPermission(Permission.UPLOAD_DOCUMENT, roles),\n  canViewAuditLog: (roles: UserRole[]) => hasPermission(Permission.VIEW_AUDIT_LOG, roles),\n}\n\n/**\n * 엔터티별 권한 체크 헬퍼 함수들\n */\nexport const entityPermissionChecks = {\n  canReadProject: (roles: UserRole[]) => canPerformAction('Project', 'read', roles),\n  canWriteProject: (roles: UserRole[]) => canPerformAction('Project', 'write', roles),\n  canApproveProject: (roles: UserRole[]) => canPerformAction('Project', 'approve', roles),\n  canLockProject: (roles: UserRole[]) => canPerformAction('Project', 'lock', roles),\n\n  canReadExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'read', roles),\n  canWriteExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'write', roles),\n  canApproveExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'approve', roles),\n  canLockExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'lock', roles),\n\n  canReadDocument: (roles: UserRole[]) => canPerformAction('Document', 'read', roles),\n  canWriteDocument: (roles: UserRole[]) => canPerformAction('Document', 'write', roles),\n  canApproveDocument: (roles: UserRole[]) => canPerformAction('Document', 'approve', roles),\n  canLockDocument: (roles: UserRole[]) => canPerformAction('Document', 'lock', roles),\n\n  canReadResearchNote: (roles: UserRole[]) => canPerformAction('ResearchNote', 'read', roles),\n  canWriteResearchNote: (roles: UserRole[]) => canPerformAction('ResearchNote', 'write', roles),\n  canApproveResearchNote: (roles: UserRole[]) => canPerformAction('ResearchNote', 'approve', roles),\n\n  canReadSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'read', roles),\n  canWriteSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'write', roles),\n  canApproveSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'approve', roles),\n  canLockSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'lock', roles),\n}\n\n/**\n * 역할별 메뉴 접근 권한 확인\n */\nexport function canAccessMenu(menuName: string, roles: UserRole[]): boolean {\n  const menuPermissions: Record<string, Permission[]> = {\n    대시보드: [Permission.READ_PROJECT],\n    '프로젝트 관리': [Permission.READ_PROJECT, Permission.WRITE_PROJECT],\n    '예산 관리': [Permission.MANAGE_BUDGET],\n    '지출 관리': [Permission.APPROVE_EXPENSE],\n    '인력 관리': [Permission.MANAGE_PERSONNEL],\n    연구노트: [Permission.READ_PROJECT],\n    리포트: [Permission.CREATE_REPORT],\n    '결재 관리': [Permission.APPROVE_ALL],\n    '국가R&D 업로드': [Permission.WRITE_ALL],\n    '감사 로그': [Permission.VIEW_AUDIT_LOG],\n  }\n\n  const requiredPermissions = menuPermissions[menuName]\n  if (!requiredPermissions) return false\n\n  return requiredPermissions.some((permission) => hasPermission(permission, roles))\n}\n\n/**\n * 데이터 마스킹 (민감 정보 보호)\n */\nexport function maskSensitiveData(data: any, roles: UserRole[]): any {\n  if (!data) return data\n\n  // 경영지원팀과 경영진만 급여 정보 조회 가능\n  const canViewSalary = roles.some((role) =>\n    [UserRole.MANAGEMENT_SUPPORT, UserRole.EXECUTIVE].includes(role),\n  )\n\n  if (!canViewSalary && data.salary) {\n    data.salary = '***'\n  }\n\n  // 개인정보 마스킹 (연구원은 본인 정보만 조회 가능)\n  const canViewPersonalInfo = roles.some((role) =>\n    [UserRole.MANAGEMENT_SUPPORT, UserRole.EXECUTIVE, UserRole.LAB_HEAD].includes(role),\n  )\n\n  if (!canViewPersonalInfo) {\n    if (data.phone) data.phone = '***-****-****'\n    if (data.email) data.email = data.email.replace(/(.{2}).*(@.*)/, '$1***$2')\n  }\n\n  return data\n}\n\n/**\n * 역할별 대시보드 타입 결정\n */\nexport function getDashboardType(roles: UserRole[]): string {\n  if (roles.includes(UserRole.EXECUTIVE)) return 'executive'\n  if (roles.includes(UserRole.LAB_HEAD)) return 'lab_head'\n  if (roles.includes(UserRole.PM)) return 'pm'\n  if (roles.includes(UserRole.MANAGEMENT_SUPPORT)) return 'management_support'\n  if (roles.includes(UserRole.DEPARTMENT_HEAD)) return 'department_head'\n  return 'researcher'\n}\n\n/**\n * 역할별 우선순위 (높을수록 권한이 높음)\n */\nconst ROLE_PRIORITY: Record<UserRole, number> = {\n  [UserRole.RESEARCHER]: 1,\n  [UserRole.DEPARTMENT_HEAD]: 2,\n  [UserRole.PM]: 3,\n  [UserRole.MANAGEMENT_SUPPORT]: 4,\n  [UserRole.LAB_HEAD]: 5,\n  [UserRole.EXECUTIVE]: 6,\n  [UserRole.AUDITOR]: 7,\n}\n\n/**\n * 사용자의 최고 권한 역할 가져오기\n */\nexport function getHighestRole(roles: UserRole[]): UserRole | null {\n  if (roles.length === 0) return null\n\n  return roles.reduce((highest, current) => {\n    return ROLE_PRIORITY[current] > ROLE_PRIORITY[highest] ? current : highest\n  })\n}\n\n/**\n * 역할별 설명\n */\nexport const ROLE_DESCRIPTIONS: Record<UserRole, string> = {\n  [UserRole.RESEARCHER]: '연구원 - 연구노트 작성, 산출물 업로드, 본인 휴가/참여율 확인',\n  [UserRole.PM]:\n    'PM(과제책임자) - 분기 목표/산출물 정의, 참여 배정, 지출요청 승인(1차), 리스크 등록',\n  [UserRole.DEPARTMENT_HEAD]: '담당부서(구매·기술 등) - 카테고리별 지출 집행/검수, 문서 수취',\n  [UserRole.MANAGEMENT_SUPPORT]:\n    '경영지원(회계·총무) - 예산 항목 관리, 증빙 검토, 내부 전자결재 기안/종결, 국가R&D 업로드 번들 생성',\n  [UserRole.LAB_HEAD]: '연구소장 - 주간/분기 리포트 수신, 중요 승인(2차), 인력 교체 승인',\n  [UserRole.EXECUTIVE]: '경영진 - 의사결정/에스컬레이션 승인, 신규 채용 트리거 승인',\n  [UserRole.AUDITOR]: '감사/외부평가 - 읽기 전용(감사 로그/증빙 번들 열람)',\n}\n\n/**\n * 역할별 한글명\n */\nexport const ROLE_NAMES_KO: Record<UserRole, string> = {\n  [UserRole.RESEARCHER]: '연구원',\n  [UserRole.PM]: 'PM(과제책임자)',\n  [UserRole.DEPARTMENT_HEAD]: '담당부서',\n  [UserRole.MANAGEMENT_SUPPORT]: '경영지원',\n  [UserRole.LAB_HEAD]: '연구소장',\n  [UserRole.EXECUTIVE]: '경영진',\n  [UserRole.AUDITOR]: '감사',\n}\n\n// ===== 초기화 함수 =====\nexport function initializeRBAC(): void {\n  // 기본 사용자 설정 (경영지원팀)\n  const defaultUser: Person = {\n    id: 'user-001',\n    name: '김경영',\n    email: 'kim.kyung@company.com',\n    phone: '010-1234-5678',\n    department: '경영지원팀',\n    position: '팀장',\n    roleSet: [UserRole.MANAGEMENT_SUPPORT],\n    active: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  }\n\n  setCurrentUser(defaultUser)\n}\n\n// ===== 내보내기 =====\nexport { PERMISSION_MATRIX, ENTITY_PERMISSIONS, ROLE_PRIORITY }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/types.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/salary/contract-store.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/salary/salary-store.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/theme.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/timezone.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/toasts.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/stores/ui.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/types/common.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1292, 1295], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1292, 1295], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1407, 1410], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1407, 1410], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Centralized common types to avoid conflicts\n\n// ===== User Roles and Permissions =====\nexport enum UserRole {\n  RESEARCHER = 'RESEARCHER', // 연구원\n  PM = 'PM', // PM(과제책임자)\n  DEPARTMENT_HEAD = 'DEPARTMENT_HEAD', // 담당부서(구매·기술 등)\n  MANAGEMENT_SUPPORT = 'MANAGEMENT_SUPPORT', // 경영지원(회계·총무)\n  LAB_HEAD = 'LAB_HEAD', // 연구소장\n  EXECUTIVE = 'EXECUTIVE', // 경영진\n  AUDITOR = 'AUDITOR', // 감사/외부평가\n}\n\nexport enum Permission {\n  READ_ALL = 'READ_ALL',\n  WRITE_ALL = 'WRITE_ALL',\n  APPROVE_ALL = 'APPROVE_ALL',\n  AUDIT_ALL = 'AUDIT_ALL',\n  READ_PROJECT = 'READ_PROJECT',\n  WRITE_PROJECT = 'WRITE_PROJECT',\n  APPROVE_EXPENSE = 'APPROVE_EXPENSE',\n  APPROVE_PROJECT = 'APPROVE_PROJECT',\n  READ_PERSONNEL = 'READ_PERSONNEL',\n  WRITE_PERSONNEL = 'WRITE_PERSONNEL',\n  READ_REPORTS = 'READ_REPORTS',\n  WRITE_REPORTS = 'WRITE_REPORTS',\n}\n\n// ===== Basic Types =====\nexport type UUID = string\nexport type DateString = string\nexport type Currency = 'KRW' | 'USD' | 'EUR'\nexport type HealthStatus = 'green' | 'amber' | 'red'\nexport type ApprovalStatus = 'pending' | 'approved' | 'rejected' | 'cancelled'\nexport type DocumentStatus = 'draft' | 'submitted' | 'approved' | 'locked'\nexport type ProjectStatus = 'planning' | 'active' | 'completed'\n\n// ===== API Response Types =====\nexport interface ApiResponse<T = any> {\n  success: boolean\n  data?: T\n  error?: string\n  message?: string\n}\n\nexport interface PaginatedResponse<T = any> extends ApiResponse<T[]> {\n  pagination: {\n    page: number\n    limit: number\n    total: number\n    totalPages: number\n  }\n}\n\n// ===== Form Data Types =====\nexport interface ProjectFormData {\n  name: string\n  description: string\n  startDate: string\n  endDate: string\n  budget: number\n  organization: string\n  personnelIds: string[]\n}\n\nexport interface ExpenseFormData {\n  projectId: string\n  category: string\n  description: string\n  amount: number\n  date: string\n  receiptUrl?: string\n}\n\nexport interface MilestoneFormData {\n  projectId: string\n  name: string\n  description: string\n  targetDate: string\n  deliverables: string[]\n}\n\n// ===== Dashboard Types =====\nexport interface DashboardData {\n  projects: {\n    total: number\n    active: number\n    completed: number\n    overdue: number\n  }\n  expenses: {\n    total: number\n    budget: number\n    remaining: number\n  }\n  personnel: {\n    total: number\n    allocated: number\n    available: number\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/types/hr.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/types/index.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/types/project-budget.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 66,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 66,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1458, 1461], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1458, 1461], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// 프로젝트 연차별 예산 구조 타입 정의\n\nexport interface ProjectBudgetStructure {\n  projectId: string\n  totalBudget: number // 전체 사업비 (모든 연차 합계)\n  annualBudgets: AnnualBudget[] // 연차별 예산\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface AnnualBudget {\n  id: string\n  projectId: string\n  year: number // 연차 (1차년도, 2차년도 등)\n  startDate?: string // 연차 시작일\n  endDate?: string // 연차 종료일\n\n  // 지원금 (현금만)\n  governmentFunding: number // 정부 지원금 (현금)\n\n  // 기업부담금\n  companyCash: number // 기업부담금 (현금)\n  companyInKind: number // 기업부담금 (현물)\n\n  // 계산된 값들\n  totalCash: number // 현금 총액 (지원금 + 기업부담금 현금)\n  totalInKind: number // 현물 총액 (기업부담금 현물)\n  yearlyTotal: number // 연차 사업비 (현금 + 현물)\n\n  status: 'draft' | 'submitted' | 'approved' | 'active' | 'completed'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 예산 입력/수정을 위한 폼 데이터 타입\nexport interface AnnualBudgetFormData {\n  year: number\n  startDate?: string\n  endDate?: string\n  governmentFunding: number\n  companyCash: number\n  companyInKind: number\n  notes?: string\n}\n\n// 예산 요약 정보\nexport interface BudgetSummary {\n  projectId: string\n  totalYears: number\n  totalBudget: number\n  totalGovernmentFunding: number\n  totalCompanyCash: number\n  totalCompanyInKind: number\n  totalCash: number\n  totalInKind: number\n\n  // 비율 정보\n  governmentFundingRatio: number // 지원금 비율\n  companyBurdenRatio: number // 기업부담 비율\n  cashRatio: number // 현금 비율\n  inKindRatio: number // 현물 비율\n}\n\n// API 응답 타입\nexport interface BudgetApiResponse<T = any> {\n  success: boolean\n  data?: T\n  error?: string\n  message?: string\n}\n\n// 예산 검증 결과\nexport interface BudgetValidationResult {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/types/salary-contracts.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/types/salary.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/ai-coding-guidelines.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/api-data-transformer.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1193, 1196], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1193, 1196], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 92,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 92,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2314, 2317], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2314, 2317], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 127,
        "column": 52,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 127,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3079, 3082], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3079, 3082], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 155,
        "column": 51,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 155,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3639, 3642], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3639, 3642], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 168,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 168,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3906, 3909], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3906, 3909], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 182,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 182,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4169, 4172], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4169, 4172], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 216,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 216,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5076, 5079], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5076, 5079], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 76,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 79,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5692, 5695], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5692, 5695], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 251,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 251,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6001, 6004], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6001, 6004], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 251,
        "column": 48,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 251,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6007, 6010], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6007, 6010], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 256,
        "column": 22,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 256,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6191, 6194], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6191, 6194], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 11,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// API 데이터 변환 유틸리티\n// 데이터베이스 snake_case를 JavaScript camelCase로 변환하는 공통 함수들\n\nimport { formatDateForAPI } from './date-calculator'\nimport { formatEmployeeName } from './format'\n\n/**\n * 한국 이름을 표준 형식으로 포맷팅 (성+이름, 띄어쓰기 없음)\n */\nfunction formatKoreanNameStandard(fullName: string): string {\n  if (!fullName || typeof fullName !== 'string') return ''\n\n  const trimmed = fullName.trim()\n\n  // 이미 표준 형식인 경우 (띄어쓰기 없음)\n  if (!trimmed.includes(' ')) {\n    return trimmed\n  }\n\n  // 한국 이름인지 확인 (한글 정규식)\n  const koreanRegex = /^[가-힣\\s]+$/\n  if (koreanRegex.test(trimmed)) {\n    // 공백으로 분리\n    const parts = trimmed.split(/\\s+/)\n    if (parts.length === 2) {\n      const [first, second] = parts\n\n      // 일반적으로 성은 1글자, 이름은 2글자 이상\n      if (first.length >= 2 && second.length === 1) {\n        // \"지은 차\" -> \"차지은\" (이름 성 -> 성 이름)\n        return formatEmployeeName({ last_name: second, first_name: first })\n      } else if (first.length === 1 && second.length >= 2) {\n        // \"차 지은\" -> \"차지은\" (이미 올바른 순서)\n        return formatEmployeeName({ last_name: first, first_name: second })\n      }\n    }\n  }\n\n  // 한국 이름이 아닌 경우 원본 반환\n  return trimmed\n}\n\n/**\n * 프로젝트 데이터 변환\n */\nexport function transformProjectData(project: any) {\n  // snake_case 필드들을 제거하고 camelCase로만 구성\n  const {\n    start_date,\n    end_date,\n    manager_id,\n    budget_total,\n    sponsor_type,\n    sponsor_name,\n    research_type,\n    technology_area,\n    created_at,\n    updated_at,\n    manager_name,\n    member_count,\n    total_participation_rate,\n    budget_currency,\n    ...otherFields\n  } = project\n\n  return {\n    ...otherFields,\n    // camelCase로 변환된 필드들만 포함\n    startDate: formatDateForAPI(start_date),\n    endDate: formatDateForAPI(end_date),\n    managerId: manager_id,\n    budgetTotal: budget_total,\n    sponsorType: sponsor_type,\n    sponsorName: sponsor_name,\n    researchType: research_type,\n    technologyArea: technology_area,\n    createdAt: created_at,\n    updatedAt: updated_at,\n    budgetCurrency: budget_currency,\n    // 추가 필드들\n    ...(manager_name && { managerName: manager_name }),\n    ...(member_count && { memberCount: parseInt(member_count) || 0 }),\n    ...(total_participation_rate && {\n      totalParticipationRate: parseInt(total_participation_rate) || 0,\n    }),\n  }\n}\n\n/**\n * 프로젝트 멤버 데이터 변환\n */\nexport function transformProjectMemberData(member: any) {\n  // snake_case 필드들을 제거하고 camelCase로만 구성\n  const {\n    employee_id,\n    employee_name,\n    project_id,\n    start_date,\n    end_date,\n    participation_rate,\n    contribution_type,\n    monthly_amount,\n    created_at,\n    updated_at,\n    ...otherFields\n  } = member\n\n  return {\n    ...otherFields,\n    // camelCase로 변환된 필드들만 포함\n    employeeId: employee_id,\n    employeeName: employee_name,\n    projectId: project_id,\n    startDate: formatDateForAPI(start_date),\n    endDate: formatDateForAPI(end_date),\n    participationRate: participation_rate,\n    contributionType: contribution_type,\n    monthlyAmount: monthly_amount,\n    createdAt: created_at,\n    updatedAt: updated_at,\n  }\n}\n\n/**\n * 프로젝트 예산 데이터 변환\n */\nexport function transformProjectBudgetData(budget: any) {\n  // snake_case 필드들을 제거하고 camelCase로만 구성\n  const {\n    project_id,\n    start_date,\n    end_date,\n    period_number,\n    created_at,\n    updated_at,\n    ...otherFields\n  } = budget\n\n  return {\n    ...otherFields,\n    // camelCase로 변환된 필드들만 포함\n    projectId: project_id,\n    startDate: formatDateForAPI(start_date),\n    endDate: formatDateForAPI(end_date),\n    fiscalYear: period_number,\n    periodNumber: period_number,\n    createdAt: created_at,\n    updatedAt: updated_at,\n  }\n}\n\n/**\n * 마일스톤 데이터 변환\n */\nexport function transformMilestoneData(milestone: any) {\n  return {\n    ...milestone,\n    projectId: milestone.project_id,\n    dueDate: formatDateForAPI(milestone.due_date),\n    createdAt: milestone.created_at,\n    updatedAt: milestone.updated_at,\n  }\n}\n\n/**\n * 리스크 데이터 변환\n */\nexport function transformRiskData(risk: any) {\n  return {\n    ...risk,\n    projectId: risk.project_id,\n    ownerId: risk.owner_id,\n    ownerName: risk.owner_name,\n    createdAt: risk.created_at,\n    updatedAt: risk.updated_at,\n  }\n}\n\n/**\n * 직원 데이터 변환\n */\nexport function transformEmployeeData(employee: any) {\n  const lastName = employee.last_name || ''\n  const firstName = employee.first_name || ''\n\n  return {\n    ...employee,\n    employeeId: employee.employee_id,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: employee.phone_number,\n    emailAddress: employee.email_address,\n    departmentId: employee.department_id,\n    positionId: employee.position_id,\n    hireDate: formatDateForAPI(employee.hire_date),\n    salaryAmount: employee.salary_amount,\n    createdAt: employee.created_at,\n    updatedAt: employee.updated_at,\n    // 직원 이름을 표준 형식으로 변환\n    ...(lastName &&\n      firstName && {\n        displayName: formatEmployeeName({\n          last_name: lastName,\n          first_name: firstName,\n        }),\n      }),\n    ...(employee.name && {\n      name: formatKoreanNameStandard(employee.name),\n    }),\n  }\n}\n\n/**\n * 증빙 항목 데이터 변환\n */\nexport function transformEvidenceItemData(evidence: any) {\n  return {\n    ...evidence,\n    projectId: evidence.project_id,\n    projectBudgetId: evidence.project_budget_id,\n    dueDate: formatDateForAPI(evidence.due_date),\n    createdAt: evidence.created_at,\n    updatedAt: evidence.updated_at,\n    // 담당자 이름을 표준 형식으로 변환\n    ...(evidence.assignee_full_name && {\n      assigneeFullName: formatKoreanNameStandard(evidence.assignee_full_name),\n    }),\n    ...(evidence.assignee_name && {\n      assigneeName: formatKoreanNameStandard(evidence.assignee_name),\n    }),\n  }\n}\n\n/**\n * 배열 데이터 일괄 변환\n */\nexport function transformArrayData<T>(data: unknown[], transformer: (item: any) => T): T[] {\n  return data.map(transformer)\n}\n\n/**\n * 일반적인 snake_case to camelCase 변환\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase())\n}\n\n/**\n * 객체의 모든 키를 snake_case에서 camelCase로 변환\n */\nexport function transformObjectKeys(obj: any): any {\n  if (obj === null || obj === undefined) return obj\n  if (Array.isArray(obj)) return obj.map(transformObjectKeys)\n  if (typeof obj !== 'object') return obj\n\n  const transformed: any = {}\n  for (const [key, value] of Object.entries(obj)) {\n    const camelKey = toCamelCase(key)\n    transformed[camelKey] = transformObjectKeys(value)\n  }\n  return transformed\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/api.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/auto-validation-hooks.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 14,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 14,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [587, 590], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [587, 590], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 118,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 118,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2857, 2860], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2857, 2860], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 119,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 119,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2873, 2876], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2873, 2876], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 120,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 120,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2893, 2896], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2893, 2896], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 123,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 123,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2948, 2951], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2948, 2951], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 124,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 124,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2975, 2978], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2975, 2978], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 125,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 125,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3006, 3009], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3006, 3009], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 149,
        "column": 77,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 149,
        "endColumn": 80,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3580, 3583], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3580, 3583], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 174,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 174,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4310, 4313], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4310, 4313], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 191,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 191,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4724, 4727], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4724, 4727], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 191,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 191,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4742, 4745], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4742, 4745], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 200,
        "column": 72,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 200,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4975, 4978], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4975, 4978], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// 자동 검증 훅 시스템\n\nimport { logger } from '$lib/utils/logger'\nimport { readFileSync, watch, writeFileSync } from 'fs'\nimport { extname, join } from 'path'\nimport { AICodingValidator } from './ai-coding-guidelines'\nimport { SafeChangeManager } from './safe-change-manager'\nimport { SchemaValidator } from './schema-validation'\n\n// 파일 변경 감지 및 자동 검증\nexport class AutoValidationHooks {\n  private static readonly WATCH_DIRS = ['src/lib/utils', 'src/routes/api/project-management']\n  private static readonly SUPPORTED_EXTENSIONS = ['.ts', '.js', '.svelte']\n  private static watchers: Map<string, any> = new Map()\n  private static isEnabled = false\n\n  /**\n   * 자동 검증 시스템 활성화\n   */\n  static enable(): void {\n    if (this.isEnabled) {\n      logger.log('⚠️ [자동 검증] 이미 활성화되어 있습니다.')\n      return\n    }\n\n    logger.log('🚀 [자동 검증] 시스템 활성화 시작')\n\n    // 파일 변경 감지 시작\n    this.startFileWatching()\n\n    // Git 훅 설정\n    this.setupGitHooks()\n\n    // IDE 확장 프로그램 연동\n    this.setupIDEIntegration()\n\n    this.isEnabled = true\n    logger.log('✅ [자동 검증] 시스템 활성화 완료')\n  }\n\n  /**\n   * 자동 검증 시스템 비활성화\n   */\n  static disable(): void {\n    if (!this.isEnabled) {\n      logger.log('⚠️ [자동 검증] 이미 비활성화되어 있습니다.')\n      return\n    }\n\n    logger.log('🛑 [자동 검증] 시스템 비활성화 시작')\n\n    // 파일 감지 중지\n    this.stopFileWatching()\n\n    this.isEnabled = false\n    logger.log('✅ [자동 검증] 시스템 비활성화 완료')\n  }\n\n  /**\n   * 파일 변경 감지 시작\n   */\n  private static startFileWatching(): void {\n    for (const dir of this.WATCH_DIRS) {\n      try {\n        const watcher = watch(dir, { recursive: true }, (eventType, filename) => {\n          if (filename && this.SUPPORTED_EXTENSIONS.includes(extname(filename))) {\n            const filePath = join(dir, filename)\n            this.handleFileChange(eventType, filePath)\n          }\n        })\n\n        this.watchers.set(dir, watcher)\n        logger.log(`👀 [파일 감지] ${dir} 감시 시작`)\n      } catch (error) {\n        logger.error(`❌ [파일 감지] ${dir} 감시 실패:`, error)\n      }\n    }\n  }\n\n  /**\n   * 파일 변경 감지 중지\n   */\n  private static stopFileWatching(): void {\n    for (const [dir, watcher] of this.watchers) {\n      watcher.close()\n      logger.log(`👀 [파일 감지] ${dir} 감시 중지`)\n    }\n    this.watchers.clear()\n  }\n\n  /**\n   * 파일 변경 처리\n   */\n  private static async handleFileChange(eventType: string, filePath: string): Promise<void> {\n    logger.log(`📝 [파일 변경] ${eventType}: ${filePath}`)\n\n    try {\n      // 1. 파일 내용 읽기\n      const content = readFileSync(filePath, 'utf-8')\n\n      // 2. 자동 검증 실행\n      const validation = await this.runAutoValidation(filePath, content)\n\n      // 3. 검증 결과 처리\n      await this.handleValidationResult(filePath, validation)\n    } catch (error) {\n      logger.error(`❌ [파일 변경 처리] ${filePath} 오류:`, error)\n    }\n  }\n\n  /**\n   * 자동 검증 실행\n   */\n  private static async runAutoValidation(\n    filePath: string,\n    content: string,\n  ): Promise<{\n    coding: any\n    schema: any\n    dependency: any\n  }> {\n    const results = {\n      coding: null as any,\n      schema: null as any,\n      dependency: null as any,\n    }\n\n    try {\n      // 1. 코딩 가이드라인 검증\n      results.coding = AICodingValidator.validateCode(content, 'typescript')\n\n      // 2. 스키마 검증 (API 파일인 경우)\n      if (filePath.includes('/api/')) {\n        results.schema = await SchemaValidator.validateDatabaseSchema()\n      }\n\n      // 3. 의존성 분석\n      results.dependency = await this.analyzeDependencies(filePath)\n    } catch (error) {\n      logger.error(`❌ [자동 검증] ${filePath} 오류:`, error)\n    }\n\n    return results\n  }\n\n  /**\n   * 검증 결과 처리\n   */\n  private static async handleValidationResult(filePath: string, validation: any): Promise<void> {\n    const hasErrors = validation.coding?.errors?.length > 0\n    const hasWarnings = validation.coding?.warnings?.length > 0\n\n    if (hasErrors) {\n      logger.log(`❌ [검증 실패] ${filePath}`)\n      validation.coding.errors.forEach((error: string) => {\n        logger.log(`  - ${error}`)\n      })\n\n      // 자동 수정 시도\n      await this.attemptAutoFix(filePath, validation)\n    } else if (hasWarnings) {\n      logger.log(`⚠️ [검증 경고] ${filePath}`)\n      validation.coding.warnings.forEach((warning: string) => {\n        logger.log(`  - ${warning}`)\n      })\n    } else {\n      logger.log(`✅ [검증 통과] ${filePath}`)\n    }\n  }\n\n  /**\n   * 자동 수정 시도\n   */\n  private static async attemptAutoFix(filePath: string, validation: any): Promise<void> {\n    logger.log(`🔧 [자동 수정] ${filePath} 시도`)\n\n    try {\n      // 변경 계획 생성\n      const plan = await SafeChangeManager.createChangePlan(filePath, 'modify', '자동 수정')\n\n      // 자동 수정 로직 실행\n      await this.executeAutoFix(plan, validation)\n    } catch (error) {\n      logger.error(`❌ [자동 수정] ${filePath} 실패:`, error)\n    }\n  }\n\n  /**\n   * 자동 수정 실행\n   */\n  private static async executeAutoFix(plan: any, _validation: any): Promise<void> {\n    // 실제 자동 수정 로직은 여기에 구현\n    // 예: 코드 포맷팅, 타입 수정, import 정리 등\n    logger.log(`🔧 [자동 수정] 계획 ID: ${plan.id}`)\n  }\n\n  /**\n   * 의존성 분석\n   */\n  private static async analyzeDependencies(_filePath: string): Promise<any> {\n    // 간단한 의존성 분석\n    return {\n      riskLevel: 'low',\n      dependencies: [],\n      dependents: [],\n    }\n  }\n\n  /**\n   * Git 훅 설정\n   */\n  private static setupGitHooks(): void {\n    logger.log('🔗 [Git 훅] 설정 시작')\n\n    // pre-commit 훅 설정\n    const preCommitHook = `#!/bin/sh\n# 자동 검증 실행\necho \"🔍 [Git 훅] 커밋 전 검증 시작\"\nnode -e \"\nconst { AutoValidationHooks } = require('./src/lib/utils/auto-validation-hooks.ts');\nAutoValidationHooks.runPreCommitValidation();\n\"\n`\n\n    // post-commit 훅 설정\n    const postCommitHook = `#!/bin/sh\n# 커밋 후 검증\necho \"✅ [Git 훅] 커밋 후 검증 완료\"\n`\n\n    try {\n      writeFileSync('.git/hooks/pre-commit', preCommitHook)\n      writeFileSync('.git/hooks/post-commit', postCommitHook)\n      logger.log('✅ [Git 훅] 설정 완료')\n    } catch (error) {\n      logger.error('❌ [Git 훅] 설정 실패:', error)\n    }\n  }\n\n  /**\n   * IDE 확장 프로그램 연동\n   */\n  private static setupIDEIntegration(): void {\n    logger.log('🔌 [IDE 연동] 설정 시작')\n\n    // VS Code 설정\n    const vscodeSettings = {\n      'files.watcherExclude': {\n        '**/node_modules/**': true,\n        '**/.git/**': true,\n      },\n      'typescript.preferences.includePackageJsonAutoImports': 'auto',\n      'editor.codeActionsOnSave': {\n        'source.fixAll': true,\n        'source.organizeImports': true,\n      },\n    }\n\n    try {\n      writeFileSync('.vscode/settings.json', JSON.stringify(vscodeSettings, null, 2))\n      logger.log('✅ [IDE 연동] VS Code 설정 완료')\n    } catch (error) {\n      logger.error('❌ [IDE 연동] 설정 실패:', error)\n    }\n  }\n\n  /**\n   * 커밋 전 검증 실행\n   */\n  static async runPreCommitValidation(): Promise<boolean> {\n    logger.log('🔍 [커밋 전 검증] 시작')\n\n    try {\n      // 변경된 파일들 검증\n      const changedFiles = await this.getChangedFiles()\n      let allValid = true\n\n      for (const file of changedFiles) {\n        const content = readFileSync(file, 'utf-8')\n        const validation = await this.runAutoValidation(file, content)\n\n        if (validation.coding?.errors?.length > 0) {\n          logger.log(`❌ [커밋 전 검증] ${file} 실패`)\n          allValid = false\n        }\n      }\n\n      if (allValid) {\n        logger.log('✅ [커밋 전 검증] 모든 파일 통과')\n      } else {\n        logger.log('❌ [커밋 전 검증] 일부 파일 실패 - 커밋 중단')\n      }\n\n      return allValid\n    } catch (error) {\n      logger.error('❌ [커밋 전 검증] 오류:', error)\n      return false\n    }\n  }\n\n  /**\n   * 변경된 파일 목록 가져오기\n   */\n  private static async getChangedFiles(): Promise<string[]> {\n    // Git 명령어로 변경된 파일 목록 가져오기\n    // 실제 구현에서는 child_process를 사용\n    return []\n  }\n\n  /**\n   * 상태 조회\n   */\n  static getStatus(): {\n    isEnabled: boolean\n    watchedDirs: string[]\n    watchersCount: number\n  } {\n    return {\n      isEnabled: this.isEnabled,\n      watchedDirs: this.WATCH_DIRS,\n      watchersCount: this.watchers.size,\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/backup.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1728, 1731], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1728, 1731], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import type { BankAccount, Transaction, ExpectedTransaction } from '$lib/stores/funds'\nimport type { BudgetCategory, BudgetGoal } from '$lib/stores/budget'\nimport type { Notification, NotificationSettings } from '$lib/stores/notifications'\nimport { logger } from '$lib/utils/logger'\n\nexport interface BackupData {\n  version: string\n  timestamp: string\n  data: {\n    bankAccounts: BankAccount[]\n    transactions: Transaction[]\n    expectedTransactions: ExpectedTransaction[]\n    budgetCategories: BudgetCategory[]\n    budgetGoals: BudgetGoal[]\n    notifications: Notification[]\n    notificationSettings: NotificationSettings\n  }\n}\n\n// 데이터 백업\nexport function createBackup(\n  bankAccounts: BankAccount[],\n  transactions: Transaction[],\n  expectedTransactions: ExpectedTransaction[],\n  budgetCategories: BudgetCategory[],\n  budgetGoals: BudgetGoal[],\n  notifications: Notification[],\n  notificationSettings: NotificationSettings,\n): BackupData {\n  return {\n    version: '1.0.0',\n    timestamp: new Date().toISOString(),\n    data: {\n      bankAccounts,\n      transactions,\n      expectedTransactions,\n      budgetCategories,\n      budgetGoals,\n      notifications,\n      notificationSettings,\n    },\n  }\n}\n\n// 백업 파일 다운로드\nexport function downloadBackup(backupData: BackupData) {\n  const jsonString = JSON.stringify(backupData, null, 2)\n  const blob = new Blob([jsonString], { type: 'application/json' })\n  const url = URL.createObjectURL(blob)\n  const a = document.createElement('a')\n  a.href = url\n  a.download = `workstream-backup-${new Date().toISOString().split('T')[0]}.json`\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n  URL.revokeObjectURL(url)\n}\n\n// 백업 파일 검증\nexport function validateBackup(data: any): data is BackupData {\n  if (!data || typeof data !== 'object') {\n    return false\n  }\n\n  if (!data.version || !data.timestamp || !data.data) {\n    return false\n  }\n\n  const requiredFields = [\n    'bankAccounts',\n    'transactions',\n    'expectedTransactions',\n    'budgetCategories',\n    'budgetGoals',\n    'notifications',\n    'notificationSettings',\n  ]\n\n  return requiredFields.every(\n    (field) => Array.isArray(data.data[field]) || typeof data.data[field] === 'object',\n  )\n}\n\n// 로컬 스토리지에 자동 백업\nexport function autoBackup(\n  bankAccounts: BankAccount[],\n  transactions: Transaction[],\n  expectedTransactions: ExpectedTransaction[],\n  budgetCategories: BudgetCategory[],\n  budgetGoals: BudgetGoal[],\n  notifications: Notification[],\n  notificationSettings: NotificationSettings,\n) {\n  const backupData = createBackup(\n    bankAccounts,\n    transactions,\n    expectedTransactions,\n    budgetCategories,\n    budgetGoals,\n    notifications,\n    notificationSettings,\n  )\n\n  try {\n    localStorage.setItem('workstream-auto-backup', JSON.stringify(backupData))\n    localStorage.setItem('workstream-backup-timestamp', backupData.timestamp)\n  } catch (error) {\n    logger.error('자동 백업 실패:', error)\n  }\n}\n\n// 로컬 스토리지에서 자동 백업 복원\nexport function loadAutoBackup(): BackupData | null {\n  try {\n    const backupString = localStorage.getItem('workstream-auto-backup')\n    if (!backupString) {\n      return null\n    }\n\n    const backupData = JSON.parse(backupString)\n    if (validateBackup(backupData)) {\n      return backupData\n    }\n  } catch (error) {\n    logger.error('자동 백업 로드 실패:', error)\n  }\n\n  return null\n}\n\n// 백업 파일 읽기\nexport function readBackupFile(file: File): Promise<BackupData> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n\n    reader.onload = (e) => {\n      try {\n        const result = e.target?.result\n        if (typeof result !== 'string') {\n          throw new Error('파일 읽기 실패')\n        }\n\n        const backupData = JSON.parse(result)\n        if (validateBackup(backupData)) {\n          resolve(backupData)\n        } else {\n          reject(new Error('잘못된 백업 파일 형식입니다.'))\n        }\n      } catch (error) {\n        reject(new Error('백업 파일 파싱 실패: ' + (error as Error).message))\n      }\n    }\n\n    reader.onerror = () => {\n      reject(new Error('파일 읽기 중 오류가 발생했습니다.'))\n    }\n\n    reader.readAsText(file)\n  })\n}\n\n// 백업 복원 확인 메시지\nexport function getRestoreConfirmMessage(backupData: BackupData): string {\n  const backupDate = new Date(backupData.timestamp).toLocaleString('ko-KR')\n  const dataCount = {\n    accounts: backupData.data.bankAccounts.length,\n    transactions: backupData.data.transactions.length,\n    expectedTransactions: backupData.data.expectedTransactions.length,\n    budgetCategories: backupData.data.budgetCategories.length,\n    budgetGoals: backupData.data.budgetGoals.length,\n  }\n\n  return `\n다음 백업을 복원하시겠습니까?\n\n백업 일시: ${backupDate}\n버전: ${backupData.version}\n\n포함된 데이터:\n- 계좌: ${dataCount.accounts}개\n- 거래내역: ${dataCount.transactions}개  \n- 예상거래: ${dataCount.expectedTransactions}개\n- 예산카테고리: ${dataCount.budgetCategories}개\n- 예산목표: ${dataCount.budgetGoals}개\n\n※ 현재 데이터는 모두 대체됩니다.\n\t`.trim()\n}\n\n// 백업 통계\nexport interface BackupStats {\n  lastBackupTime: string | null\n  backupSize: number\n  totalRecords: number\n}\n\nexport function getBackupStats(\n  bankAccounts: BankAccount[],\n  transactions: Transaction[],\n  expectedTransactions: ExpectedTransaction[],\n  budgetCategories: BudgetCategory[],\n  budgetGoals: BudgetGoal[],\n): BackupStats {\n  const lastBackupTime = localStorage.getItem('workstream-backup-timestamp')\n  const totalRecords =\n    bankAccounts.length +\n    transactions.length +\n    expectedTransactions.length +\n    budgetCategories.length +\n    budgetGoals.length\n\n  const backupData = createBackup(\n    bankAccounts,\n    transactions,\n    expectedTransactions,\n    budgetCategories,\n    budgetGoals,\n    [],\n    {} as NotificationSettings,\n  )\n  const backupSize = JSON.stringify(backupData).length\n\n  return {\n    lastBackupTime,\n    backupSize,\n    totalRecords,\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/date-calculator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/date-handler.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/format.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/hr.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/keyOf.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 28,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [141, 144], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [141, 144], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 3,
        "column": 58,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 3,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [171, 174], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [171, 174], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 30,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [208, 211], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [208, 211], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 62,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 65,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [240, 243], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [240, 243], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [278, 281], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [278, 281], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 5,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 5,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [309, 312], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [309, 312], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "export function keyOf<T extends object>(x: T, idx: number): string | number {\n  if (x && typeof x === 'object') {\n    if ('id' in x && (x as any).id != null) return (x as any).id\n    if ('uuid' in x && (x as any).uuid != null) return (x as any).uuid\n    if ('key' in x && (x as any).key != null) return (x as any).key\n  }\n  return idx\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/korean-name.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/logger.ts",
    "messages": [
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 6,
        "column": 32,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 6,
        "endColumn": 43
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 7,
        "column": 33,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 7,
        "endColumn": 45
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 8,
        "column": 33,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 8,
        "endColumn": 45
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 9,
        "column": 34,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 9,
        "endColumn": 47
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 10,
        "column": 34,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 10,
        "endColumn": 47
      },
      {
        "ruleId": "no-console",
        "severity": 1,
        "message": "Unexpected console statement.",
        "line": 11,
        "column": 34,
        "nodeType": "MemberExpression",
        "messageId": "unexpected",
        "endLine": 11,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 6,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Safe logger wrapper that delegates to console by default\n * This allows for future logging infrastructure changes without code modifications\n */\nexport const logger = {\n  log: (...args: unknown[]) => console.log(...args),\n  info: (...args: unknown[]) => console.info(...args),\n  warn: (...args: unknown[]) => console.warn(...args),\n  error: (...args: unknown[]) => console.error(...args),\n  debug: (...args: unknown[]) => console.debug(...args),\n  trace: (...args: unknown[]) => console.trace(...args),\n} as const\n\nexport default logger\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/name-validation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 67,
        "column": 70,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 67,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1567, 1570], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1567, 1570], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * 이름 처리 검증 및 강제 유틸리티\n *\n * 이 모듈은 이름 처리가 표준 방식으로 이루어지도록 강제하는 도구들을 제공합니다.\n */\n\nimport { formatEmployeeName } from './format'\nimport { formatKoreanNameStandard } from './korean-name'\nimport { logger } from '$lib/utils/logger'\n\n/**\n * 이름 표시를 위한 타입 가드\n * 모든 이름 표시는 이 타입을 사용해야 합니다.\n */\nexport type StandardizedName = string & {\n  readonly __brand: 'StandardizedName'\n}\n\n/**\n * 직원 객체에서 표준화된 이름을 생성\n */\nexport function createStandardEmployeeName(employee: {\n  last_name?: string\n  first_name?: string\n}): StandardizedName {\n  return formatEmployeeName(employee) as StandardizedName\n}\n\n/**\n * 전체 이름에서 표준화된 이름을 생성\n */\nexport function createStandardFullName(fullName: string): StandardizedName {\n  return formatKoreanNameStandard(fullName) as StandardizedName\n}\n\n/**\n * 이름이 표준 형식인지 검증\n */\nexport function isValidStandardName(name: string): name is StandardizedName {\n  // 한국 이름인 경우 (성)(이름) 형식이고 공백이 없어야 함\n  const koreanRegex = /^[가-힣]+$/\n  if (koreanRegex.test(name)) {\n    return name.length >= 2 && !name.includes(' ')\n  }\n\n  // 영문 이름인 경우 그대로 허용\n  return name.length > 0\n}\n\n/**\n * 이름 표시 강제 함수 (개발 모드에서만 동작)\n */\nexport function enforceStandardName(name: string, context: string = '이름'): StandardizedName {\n  if (process.env.NODE_ENV === 'development') {\n    if (!isValidStandardName(name)) {\n      logger.warn(`⚠️ [이름 표시 강제] ${context}에서 비표준 형식 발견: \"${name}\"`)\n      logger.warn('표준 형식으로 변환 중...')\n    }\n  }\n\n  return formatKoreanNameStandard(name) as StandardizedName\n}\n\n/**\n * 런타임 검증을 위한 데코레이터 함수\n */\nexport function withNameValidation<T extends (...args: unknown[]) => any>(\n  fn: T,\n  context: string = '함수',\n): T {\n  return ((...args: unknown[]) => {\n    const result = fn(...args)\n\n    if (process.env.NODE_ENV === 'development') {\n      // 결과가 문자열인 경우 이름 형식 검증\n      if (typeof result === 'string' && result.length > 0) {\n        // 한국 이름 패턴이 있는지 확인\n        const koreanRegex = /[가-힣]/\n        if (koreanRegex.test(result) && result.includes(' ')) {\n          logger.warn(`⚠️ [이름 검증] ${context}에서 비표준 형식 반환: \"${result}\"`)\n          logger.warn('표준 형식: (성)(이름) - 공백 없음')\n        }\n      }\n    }\n\n    return result\n  }) as T\n}\n\n/**\n * 이름 처리 표준 가이드라인\n */\nexport const NAME_STANDARDS = {\n  /**\n   * 한국 이름 표준 형식: (성)(이름) - 공백 없음\n   * 예: \"차지은\", \"이지후\", \"김성호\"\n   */\n  KOREAN_FORMAT: '(성)(이름) - 공백 없음',\n\n  /**\n   * 영문 이름 표준 형식: (First) (Last) - 공백 있음\n   * 예: \"John Doe\", \"Jane Smith\"\n   */\n  ENGLISH_FORMAT: '(First) (Last) - 공백 있음',\n\n  /**\n   * 사용 금지 패턴들\n   */\n  FORBIDDEN_PATTERNS: [\n    'first_name + \" \" + last_name', // 직접 문자열 결합\n    'last_name + \" \" + first_name', // 직접 문자열 결합\n    '`${first} ${last}`', // 템플릿 리터럴 직접 사용\n    'employee.name', // 원시 필드 직접 사용\n  ],\n\n  /**\n   * 권장 패턴들\n   */\n  RECOMMENDED_PATTERNS: [\n    'formatEmployeeName(employee)', // 직원 객체용\n    'formatKoreanNameStandard(fullName)', // 전체 이름용\n    'createStandardEmployeeName(employee)', // 타입 안전한 직원 이름\n    'createStandardFullName(fullName)', // 타입 안전한 전체 이름\n  ],\n} as const\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/report-generator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/safe-change-manager.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/salary-calculator.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/schema-validation.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/timezone.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/lib/utils/validation.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 20,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 20,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [438, 441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [438, 441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 60,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 60,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1222, 1225], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1222, 1225], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 223,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 223,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4736, 4739], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4736, 4739], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 238,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 238,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5006, 5009], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5006, 5009], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 249,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 249,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5281, 5284], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5281, 5284], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 267,
        "column": 55,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 267,
        "endColumn": 58,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5825, 5828], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5825, 5828], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 285,
        "column": 60,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 285,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6368, 6371], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6368, 6371], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 303,
        "column": 57,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 303,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6915, 6918], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6915, 6918], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 324,
        "column": 67,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 324,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7526, 7529], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7526, 7529], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 361,
        "column": 40,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 361,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8783, 8786], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8783, 8786], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 388,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 388,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9654, 9657], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9654, 9657], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 388,
        "column": 63,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 388,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [9668, 9671], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [9668, 9671], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 457,
        "column": 53,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 457,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11753, 11756], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11753, 11756], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 457,
        "column": 68,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 457,
        "endColumn": 71,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11768, 11771], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11768, 11771], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 572,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 572,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [15060, 15063], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [15060, 15063], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 605,
        "column": 36,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 605,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [16136, 16139], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [16136, 16139], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 16,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logger } from '$lib/utils/logger'\nimport { Pool } from 'pg'\n\n// 데이터베이스 연결 풀\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false },\n})\n\n// 검증 결과 타입 정의\nexport interface ValidationResult {\n  isValid: boolean\n  reason: string\n  message: string\n  issues?: string[]\n  details?: any\n}\n\nexport interface ValidationResponse {\n  success: boolean\n  projectId: string\n  projectTitle?: string\n  validationResults: unknown[]\n  overallValidation: {\n    isValid: boolean\n    totalItems: number\n    validItems: number\n    invalidItems: number\n  }\n  generatedAt: string\n}\n\n// 공통 검증 유틸리티 함수들\nexport class ValidationUtils {\n  // 데이터베이스 연결 풀 접근자\n  static get pool() {\n    return pool\n  }\n\n  // 쿼리 메서드\n  static async query(text: string, params?: unknown[]) {\n    return await pool.query(text, params)\n  }\n\n  // 프로젝트 ID로 조회\n  static async getProjectById(projectId: string) {\n    return await this.getProjectInfo(projectId)\n  }\n\n  // 검증 결과 생성 메서드\n  static createValidationResult(\n    isValid: boolean,\n    reason: string,\n    message: string,\n    issues?: string[],\n    details?: any,\n  ): ValidationResult {\n    return {\n      isValid,\n      reason,\n      message,\n      issues,\n      details,\n    }\n  }\n  /**\n   * 프로젝트 기본 정보 조회\n   */\n  static async getProjectInfo(projectId: string) {\n    const result = await pool.query('SELECT * FROM projects WHERE id = $1', [projectId])\n    if (result.rows.length === 0) {\n      throw new Error('프로젝트를 찾을 수 없습니다.')\n    }\n    return result.rows[0]\n  }\n\n  /**\n   * 프로젝트 예산 정보 조회\n   */\n  static async getProjectBudgets(projectId: string) {\n    const result = await pool.query(\n      'SELECT * FROM project_budgets WHERE project_id = $1 ORDER BY period_number',\n      [projectId],\n    )\n    return result.rows\n  }\n\n  /**\n   * 프로젝트 참여연구원 정보 조회 (인사 데이터 포함)\n   */\n  static async getProjectMembers(projectId: string) {\n    const result = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.hire_date,\n\t\t\t\te.termination_date,\n\t\t\t\te.status,\n\t\t\t\te.employment_type,\n\t\t\t\te.department,\n\t\t\t\te.position\n\t\t\tFROM project_members pm\n\t\t\tLEFT JOIN employees e ON pm.employee_id = e.id\n\t\t\tWHERE pm.project_id = $1\n\t\t\tORDER BY pm.start_date\n\t\t`,\n      [projectId],\n    )\n    return result.rows\n  }\n\n  /**\n   * 증빙 항목 정보 조회\n   */\n  static async getEvidenceItems(projectId: string, categoryName?: string) {\n    let query = `\n\t\t\tSELECT \n\t\t\t\tei.*,\n\t\t\t\tpb.period_number,\n\t\t\t\tpb.period_number,\n\t\t\t\tpb.start_date as period_start_date,\n\t\t\t\tpb.end_date as period_end_date,\n\t\t\t\tec.name as category_name\n\t\t\tFROM evidence_items ei\n\t\t\tJOIN project_budgets pb ON ei.project_budget_id = pb.id\n\t\t\tJOIN evidence_categories ec ON ei.category_id = ec.id\n\t\t\tWHERE pb.project_id = $1\n\t\t`\n    const params = [projectId]\n\n    if (categoryName) {\n      query += ' AND ec.name = $2'\n      params.push(categoryName)\n    }\n\n    query += ' ORDER BY pb.period_number, ei.due_date'\n\n    const result = await pool.query(query, params)\n    return result.rows\n  }\n\n  /**\n   * 직원 정보 조회\n   */\n  static async getEmployeeInfo(employeeId: string) {\n    const result = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tid,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\thire_date,\n\t\t\t\ttermination_date,\n\t\t\t\tstatus,\n\t\t\t\temployment_type,\n\t\t\t\tdepartment,\n\t\t\t\tposition\n\t\t\tFROM employees \n\t\t\tWHERE id = $1\n\t\t`,\n      [employeeId],\n    )\n    return result.rows[0] || null\n  }\n\n  /**\n   * 날짜 범위 겹침 확인\n   */\n  static isDateRangeOverlap(start1: Date, end1: Date, start2: Date, end2: Date): boolean {\n    return start1 <= end2 && start2 <= end1\n  }\n\n  /**\n   * 날짜 차이 계산 (월 단위)\n   */\n  static getMonthsDifference(startDate: Date, endDate: Date): number {\n    return (\n      (endDate.getFullYear() - startDate.getFullYear()) * 12 +\n      (endDate.getMonth() - startDate.getMonth()) +\n      1\n    )\n  }\n\n  /**\n   * 금액 차이 계산 (허용 오차 포함)\n   */\n  static isAmountWithinTolerance(\n    expected: number,\n    actual: number,\n    tolerance: number = 1000,\n  ): boolean {\n    return Math.abs(expected - actual) <= tolerance\n  }\n\n  /**\n   * 전체 검증 결과 생성\n   */\n  static createOverallValidation(validationResults: unknown[]) {\n    const validItems = validationResults.filter((result) => result.validation.isValid).length\n    const invalidItems = validationResults.filter((result) => !result.validation.isValid).length\n\n    return {\n      isValid: invalidItems === 0,\n      totalItems: validationResults.length,\n      validItems,\n      invalidItems,\n    }\n  }\n\n  /**\n   * 표준 검증 응답 생성\n   */\n  static createValidationResponse(\n    projectId: string,\n    projectTitle: string,\n    validationResults: unknown[],\n    overallValidation: any,\n  ): ValidationResponse {\n    return {\n      success: true,\n      projectId,\n      projectTitle,\n      validationResults,\n      overallValidation,\n      generatedAt: new Date().toISOString(),\n    }\n  }\n\n  /**\n   * 에러 응답 생성\n   */\n  static createErrorResponse(error: any, message: string = '검증 중 오류가 발생했습니다.') {\n    return {\n      success: false,\n      error: message,\n      details: error instanceof Error ? error.message : 'Unknown error',\n    }\n  }\n\n  /**\n   * 프로젝트 예산 업데이트\n   */\n  static async updateProjectBudget(budgetId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE project_budgets SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [budgetId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 프로젝트 예산 업데이트 실패:', error)\n      return false\n    }\n  }\n\n  /**\n   * 프로젝트 업데이트\n   */\n  static async updateProject(projectId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE projects SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [projectId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 프로젝트 업데이트 실패:', error)\n      return false\n    }\n  }\n\n  /**\n   * 프로젝트 멤버 업데이트\n   */\n  static async updateProjectMember(memberId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE project_members SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [memberId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 프로젝트 멤버 업데이트 실패:', error)\n      return false\n    }\n  }\n\n  /**\n   * 증빙 항목 업데이트\n   */\n  static async updateEvidenceItem(itemId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE evidence_items SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [itemId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 증빙 항목 업데이트 실패:', error)\n      return false\n    }\n  }\n}\n\n// 인건비 검증 로직\nexport class PersonnelCostValidator {\n  /**\n   * 참여연구원의 실제 인건비 계산\n   */\n  static calculateActualPersonnelCost(members: unknown[], budget: any): number {\n    const budgetStartDate = new Date(budget.start_date)\n    const budgetEndDate = new Date(budget.end_date)\n\n    const relevantMembers = members.filter((member) => {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n      return ValidationUtils.isDateRangeOverlap(\n        memberStartDate,\n        memberEndDate,\n        budgetStartDate,\n        budgetEndDate,\n      )\n    })\n\n    let totalCost = 0\n    relevantMembers.forEach((member) => {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n\n      const actualStartDate = memberStartDate > budgetStartDate ? memberStartDate : budgetStartDate\n      const actualEndDate = memberEndDate < budgetEndDate ? memberEndDate : budgetEndDate\n\n      const months = ValidationUtils.getMonthsDifference(actualStartDate, actualEndDate)\n      const monthlyAmount = parseFloat(member.monthly_amount) || 0\n      const participationRate = parseFloat(member.participation_rate) || 0\n\n      const memberCost = monthlyAmount * months * (participationRate / 100)\n      totalCost += memberCost\n    })\n\n    return totalCost\n  }\n\n  /**\n   * 인건비 검증\n   */\n  static validatePersonnelCost(budget: any, actualCost: number): ValidationResult {\n    const budgetedCost = parseFloat(budget.personnel_cost) || 0\n    const isWithinTolerance = ValidationUtils.isAmountWithinTolerance(budgetedCost, actualCost)\n\n    if (isWithinTolerance) {\n      return ValidationUtils.createValidationResult(true, 'VALID', '인건비가 예산과 일치합니다.')\n    }\n\n    return ValidationUtils.createValidationResult(\n      false,\n      'PERSONNEL_COST_MISMATCH',\n      `인건비 불일치: 예산 ${budgetedCost.toLocaleString()}원 vs 실제 ${actualCost.toLocaleString()}원`,\n      [`예산: ${budgetedCost.toLocaleString()}원`, `실제: ${actualCost.toLocaleString()}원`],\n      {\n        budgetedCost,\n        actualCost,\n        difference: Math.abs(budgetedCost - actualCost),\n      },\n    )\n  }\n}\n\n// 재직 기간 검증 로직\nexport class EmploymentPeriodValidator {\n  /**\n   * 참여연구원 재직 기간 검증\n   */\n  static validateMemberEmploymentPeriod(member: any, project: any): ValidationResult {\n    const memberStartDate = new Date(member.start_date)\n    const _memberEndDate = new Date(member.end_date)\n    const hireDate = member.hire_date ? new Date(member.hire_date) : null\n    const terminationDate = member.termination_date ? new Date(member.termination_date) : null\n    const projectStartDate = new Date(project.start_date)\n    const projectEndDate = new Date(project.end_date)\n\n    const issues: string[] = []\n\n    // 1. 직원 정보가 없는 경우\n    if (!member.first_name || !member.last_name) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYEE_NOT_FOUND',\n        '직원 정보를 찾을 수 없습니다.',\n        ['직원 정보 없음'],\n      )\n    }\n\n    // 2. 퇴사한 직원인지 확인\n    if (member.status === 'terminated' && terminationDate) {\n      if (memberStartDate > terminationDate) {\n        issues.push(\n          `퇴사일: ${terminationDate.toLocaleDateString()}, 참여시작일: ${memberStartDate.toLocaleDateString()}`,\n        )\n      }\n    }\n\n    // 3. 입사 전에 프로젝트에 참여했는지 확인\n    if (hireDate && memberStartDate < hireDate) {\n      issues.push(\n        `입사일: ${hireDate.toLocaleDateString()}, 참여시작일: ${memberStartDate.toLocaleDateString()}`,\n      )\n    }\n\n    // 4. 현재 비활성 상태인 직원인지 확인\n    if (member.status === 'inactive') {\n      issues.push(`상태: ${member.status}`)\n    }\n\n    // 5. 프로젝트 기간과 재직 기간이 겹치는지 확인\n    if (hireDate && projectEndDate < hireDate) {\n      issues.push(\n        `프로젝트 종료: ${projectEndDate.toLocaleDateString()}, 입사일: ${hireDate.toLocaleDateString()}`,\n      )\n    }\n\n    if (terminationDate && projectStartDate > terminationDate) {\n      issues.push(\n        `프로젝트 시작: ${projectStartDate.toLocaleDateString()}, 퇴사일: ${terminationDate.toLocaleDateString()}`,\n      )\n    }\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYMENT_PERIOD_INVALID',\n        '재직 기간이 유효하지 않습니다.',\n        issues,\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '재직 기간이 유효합니다.')\n  }\n\n  /**\n   * 증빙 항목 재직 기간 검증\n   */\n  static validateEvidenceEmploymentPeriod(evidence: any, employee: any): ValidationResult {\n    if (!employee) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYEE_NOT_FOUND',\n        '담당 직원을 찾을 수 없습니다.',\n      )\n    }\n\n    const dueDate = new Date(evidence.due_date)\n    const hireDate = employee.hire_date ? new Date(employee.hire_date) : null\n    const terminationDate = employee.termination_date ? new Date(employee.termination_date) : null\n\n    const issues: string[] = []\n\n    // 1. 퇴사한 직원인지 확인\n    if (employee.status === 'terminated' || terminationDate) {\n      if (terminationDate && dueDate > terminationDate) {\n        issues.push(\n          `퇴사일(${terminationDate.toLocaleDateString()}) 이후에 인건비가 집행되었습니다.`,\n        )\n      }\n    }\n\n    // 2. 입사 전에 인건비가 집행되었는지 확인\n    if (hireDate && dueDate < hireDate) {\n      issues.push(`입사일(${hireDate.toLocaleDateString()}) 이전에 인건비가 집행되었습니다.`)\n    }\n\n    // 3. 현재 비활성 상태인 직원인지 확인\n    if (employee.status === 'inactive') {\n      issues.push('비활성 상태인 직원에게 인건비가 집행되었습니다.')\n    }\n\n    // 4. 프로젝트 기간과 재직 기간이 겹치는지 확인\n    const periodStartDate = new Date(evidence.period_start_date)\n    const periodEndDate = new Date(evidence.period_end_date)\n\n    if (hireDate && periodEndDate < hireDate) {\n      issues.push(\n        `프로젝트 기간(${periodStartDate.toLocaleDateString()} ~ ${periodEndDate.toLocaleDateString()}) 이후에 입사했습니다.`,\n      )\n    }\n\n    if (terminationDate && periodStartDate > terminationDate) {\n      issues.push(\n        `프로젝트 기간(${periodStartDate.toLocaleDateString()} ~ ${periodEndDate.toLocaleDateString()}) 이전에 퇴사했습니다.`,\n      )\n    }\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYMENT_PERIOD_INVALID',\n        '재직 기간이 유효하지 않습니다.',\n        issues,\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '재직 기간이 유효합니다.')\n  }\n}\n\n// 참여율 검증 로직\nexport class ParticipationRateValidator {\n  /**\n   * 참여율 검증\n   */\n  static validateParticipationRate(members: unknown[]): ValidationResult {\n    const issues: string[] = []\n\n    // 1. 개별 참여율이 100%를 초과하는지 확인\n    members.forEach((member) => {\n      const participationRate = parseFloat(member.participation_rate) || 0\n      if (participationRate > 100) {\n        issues.push(\n          `${member.first_name} ${member.last_name}: 참여율 ${participationRate}% (100% 초과)`,\n        )\n      }\n    })\n\n    // 2. 동일 기간 내 참여율 합계가 100%를 초과하는지 확인\n    const periodGroups = new Map<string, number>()\n\n    members.forEach((member) => {\n      const key = `${member.start_date}_${member.end_date}`\n      const currentTotal = periodGroups.get(key) || 0\n      const participationRate = parseFloat(member.participation_rate) || 0\n      periodGroups.set(key, currentTotal + participationRate)\n    })\n\n    periodGroups.forEach((total, period) => {\n      if (total > 100) {\n        issues.push(`기간 ${period}: 총 참여율 ${total}% (100% 초과)`)\n      }\n    })\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'PARTICIPATION_RATE_INVALID',\n        '참여율이 유효하지 않습니다.',\n        issues,\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '참여율이 유효합니다.')\n  }\n}\n\n// 예산 일관성 검증 로직\nexport class BudgetConsistencyValidator {\n  /**\n   * 예산 일관성 검증\n   */\n  static validateBudgetConsistency(project: any, budgets: unknown[]): ValidationResult {\n    const totalBudgetFromBudgets = budgets.reduce((sum, budget) => {\n      return sum + (parseFloat(budget.total_budget) || 0)\n    }, 0)\n\n    const projectTotalBudget = parseFloat(project.budget_total) || 0\n\n    if (ValidationUtils.isAmountWithinTolerance(projectTotalBudget, totalBudgetFromBudgets)) {\n      return ValidationUtils.createValidationResult(true, 'VALID', '예산이 일관성 있습니다.')\n    }\n\n    return ValidationUtils.createValidationResult(\n      false,\n      'BUDGET_INCONSISTENCY',\n      `예산 일관성 문제: 프로젝트 총 예산 ${projectTotalBudget.toLocaleString()}원 vs 연차별 예산 합계 ${totalBudgetFromBudgets.toLocaleString()}원`,\n      [\n        `프로젝트 총 예산: ${projectTotalBudget.toLocaleString()}원`,\n        `연차별 예산 합계: ${totalBudgetFromBudgets.toLocaleString()}원`,\n      ],\n      {\n        projectTotalBudget,\n        totalBudgetFromBudgets,\n        difference: Math.abs(projectTotalBudget - totalBudgetFromBudgets),\n      },\n    )\n  }\n}\n\n// 사용률 검증 로직\nexport class UsageRateValidator {\n  /**\n   * 사용률 검증\n   */\n  static validateUsageRate(budget: any, evidenceItems: unknown[]): ValidationResult {\n    const totalBudget = parseFloat(budget.total_budget) || 0\n    const spentAmount = parseFloat(budget.spent_amount) || 0\n    const overallUsageRate = totalBudget > 0 ? (spentAmount / totalBudget) * 100 : 0\n\n    const categories = ['인건비', '재료비', '연구활동비', '간접비']\n    const issues: string[] = []\n\n    categories.forEach((categoryName) => {\n      const categoryEvidence = evidenceItems.filter(\n        (item) =>\n          item.period_number === budget.period_number && item.category_name === categoryName,\n      )\n\n      const categorySpent = categoryEvidence.reduce(\n        (sum, item) => sum + (parseFloat(item.spent_amount) || 0),\n        0,\n      )\n\n      let categoryBudget = 0\n      switch (categoryName) {\n        case '인건비':\n          categoryBudget = parseFloat(budget.personnel_cost) || 0\n          break\n        case '재료비':\n          categoryBudget = parseFloat(budget.research_material_cost) || 0\n          break\n        case '연구활동비':\n          categoryBudget = parseFloat(budget.research_activity_cost) || 0\n          break\n        case '간접비':\n          categoryBudget = parseFloat(budget.indirect_cost) || 0\n          break\n      }\n\n      const categoryUsageRate = categoryBudget > 0 ? (categorySpent / categoryBudget) * 100 : 0\n      const tolerance = 5 // 5% 허용 오차\n\n      if (Math.abs(categoryUsageRate - overallUsageRate) > tolerance) {\n        issues.push(\n          `${categoryName}: 전체 ${overallUsageRate.toFixed(1)}% vs ${categoryName} ${categoryUsageRate.toFixed(1)}%`,\n        )\n      }\n    })\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'USAGE_RATE_INCONSISTENCY',\n        '사용률이 일관성 없습니다.',\n        issues,\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '사용률이 일관성 있습니다.')\n  }\n}\n\nexport { pool }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/+error.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/+layout.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/+page.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/auth/login/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 30,
        "column": 69,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 30,
        "endColumn": 72,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [908, 911], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [908, 911], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { DatabaseService } from '$lib/database/connection'\nimport { config } from '$lib/utils/config'\nimport { logger } from '$lib/utils/logger'\nimport { error, json } from '@sveltejs/kit'\nimport bcrypt from 'bcryptjs'\nimport jwt from 'jsonwebtoken'\nimport type { RequestHandler } from './$types'\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { email, password } = await request.json()\n\n    // Validate input\n    if (!email || !password) {\n      return error(400, 'Email and password are required')\n    }\n\n    // Get user from database\n    const user = await DatabaseService.getUserByEmail(email)\n    if (!user) {\n      return error(401, 'Invalid credentials')\n    }\n\n    // Check if user is active\n    if (!user.is_active) {\n      return error(401, 'Account is deactivated')\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, (user as any).password_hash)\n    if (!isValidPassword) {\n      return error(401, 'Invalid credentials')\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      {\n        userId: user.id,\n        email: user.email,\n        role: user.role,\n      },\n      config.jwt.secret,\n      { expiresIn: config.jwt.expiresIn },\n    )\n\n    // Update last login\n    const { query } = await import('$lib/database/connection')\n    await query('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1', [user.id])\n\n    // Return user data (without password)\n    const { password_hash: _password_hash, ...userWithoutPassword } = user\n\n    return json({\n      success: true,\n      user: userWithoutPassword,\n      token,\n    })\n  } catch (err) {\n    logger.error('Login error:', err)\n    return error(500, 'Internal server error')\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/companies/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/company/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 26,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 26,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [747, 750], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [747, 750], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 131,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 131,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3468, 3471], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3468, 3471], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport { query } from '$lib/database/connection.js'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// GET /api/company - 회사 정보 조회\nexport const GET: RequestHandler = async () => {\n  try {\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\tid, name, establishment_date, ceo_name, business_type,\n\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\tcreated_at, updated_at\n\t\t\tFROM companies \n\t\t\tORDER BY created_at DESC\n\t\t\tLIMIT 1\n\t\t`)\n\n    const company = result.rows.length > 0 ? result.rows[0] : null\n\n    return json({\n      success: true,\n      data: company,\n      message: company ? '회사 정보를 성공적으로 조회했습니다.' : '등록된 회사 정보가 없습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error fetching company:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '회사 정보 조회에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// POST /api/company - 회사 정보 등록/수정\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name) {\n      return json(\n        {\n          success: false,\n          error: '회사명은 필수입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 기존 회사 정보가 있는지 확인\n    const existingResult = await query('SELECT id FROM companies LIMIT 1')\n    const existingCompany = existingResult.rows.length > 0\n\n    let result\n    if (existingCompany) {\n      // 기존 회사 정보 업데이트\n      result = await query(\n        `\n\t\t\t\tUPDATE companies SET\n\t\t\t\t\tname = $1,\n\t\t\t\t\testablishment_date = $2,\n\t\t\t\t\tceo_name = $3,\n\t\t\t\t\tbusiness_type = $4,\n\t\t\t\t\taddress = $5,\n\t\t\t\t\tphone = $6,\n\t\t\t\t\tfax = $7,\n\t\t\t\t\temail = $8,\n\t\t\t\t\twebsite = $9,\n\t\t\t\t\tregistration_number = $10,\n\t\t\t\t\tupdated_at = $11\n\t\t\t\tWHERE id = (SELECT id FROM companies LIMIT 1)\n\t\t\t\tRETURNING id, name, establishment_date, ceo_name, business_type,\n\t\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\t\tcreated_at, updated_at\n\t\t\t`,\n        [\n          data.name,\n          data.establishment_date || null,\n          data.ceo_name || null,\n          data.business_type || null,\n          data.address || null,\n          data.phone || null,\n          data.fax || null,\n          data.email || null,\n          data.website || null,\n          data.registration_number || null,\n          new Date(),\n        ],\n      )\n    } else {\n      // 새 회사 정보 등록\n      result = await query(\n        `\n\t\t\t\tINSERT INTO companies (\n\t\t\t\t\tname, establishment_date, ceo_name, business_type,\n\t\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\t\tcreated_at, updated_at\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n\t\t\t\tRETURNING id, name, establishment_date, ceo_name, business_type,\n\t\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\t\tcreated_at, updated_at\n\t\t\t`,\n        [\n          data.name,\n          data.establishment_date || null,\n          data.ceo_name || null,\n          data.business_type || null,\n          data.address || null,\n          data.phone || null,\n          data.fax || null,\n          data.email || null,\n          data.website || null,\n          data.registration_number || null,\n          new Date(),\n          new Date(),\n        ],\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: existingCompany\n        ? '회사 정보가 성공적으로 수정되었습니다.'\n        : '회사 정보가 성공적으로 등록되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error saving company:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '회사 정보 저장에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/add-job-title-field/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [886, 889], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [886, 889], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 직원 테이블에 직책 필드 추가\nexport const POST: RequestHandler = async () => {\n  try {\n    // 직책 필드가 이미 존재하는지 확인\n    const checkColumn = await query(`\n\t\t\tSELECT column_name \n\t\t\tFROM information_schema.columns \n\t\t\tWHERE table_name = 'employees' AND column_name = 'job_title_id'\n\t\t`)\n\n    if (checkColumn.rows.length === 0) {\n      // 직책 필드 추가\n      await query(`\n\t\t\t\tALTER TABLE employees \n\t\t\t\tADD COLUMN job_title_id UUID REFERENCES job_titles(id)\n\t\t\t`)\n\n      logger.log('job_title_id column added to employees table')\n    } else {\n      logger.log('job_title_id column already exists in employees table')\n    }\n\n    return json({\n      success: true,\n      message: '직책 필드가 성공적으로 추가되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error adding job_title_id field:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 필드 추가에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/company-setup/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 90,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 90,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2228, 2231], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2228, 2231], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport { query } from '$lib/database/connection.js'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nexport const POST: RequestHandler = async () => {\n  try {\n    // 기존 companies 테이블 삭제 후 새로 생성\n    await query('DROP TABLE IF EXISTS companies CASCADE')\n\n    // 새 companies 테이블 생성\n    await query(`\n\t\t\tCREATE TABLE companies (\n\t\t\t\tid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\t\t\t\tname VARCHAR(255) NOT NULL,\n\t\t\t\testablishment_date DATE,\n\t\t\t\tceo_name VARCHAR(100),\n\t\t\t\tbusiness_type VARCHAR(255),\n\t\t\t\taddress TEXT,\n\t\t\t\tphone VARCHAR(50),\n\t\t\t\tfax VARCHAR(50),\n\t\t\t\temail VARCHAR(255),\n\t\t\t\twebsite VARCHAR(255),\n\t\t\t\tregistration_number VARCHAR(50),\n\t\t\t\tcreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\t\t\t\tupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\t\t\t)\n\t\t`)\n\n    // 인덱스 생성\n    await query(`\n\t\t\tCREATE INDEX IF NOT EXISTS idx_companies_name ON companies(name);\n\t\t`)\n\n    // 기존 회사 정보가 있는지 확인\n    const existingResult = await query('SELECT id FROM companies WHERE name = $1', ['(주)비아'])\n\n    if (existingResult.rows.length > 0) {\n      // 기존 회사 정보 업데이트\n      await query(\n        `\n\t\t\t\tUPDATE companies SET\n\t\t\t\t\testablishment_date = $1,\n\t\t\t\t\tceo_name = $2,\n\t\t\t\t\tbusiness_type = $3,\n\t\t\t\t\taddress = $4,\n\t\t\t\t\tphone = $5,\n\t\t\t\t\tfax = $6,\n\t\t\t\t\tupdated_at = $7\n\t\t\t\tWHERE name = $8\n\t\t\t`,\n        [\n          '2019-03-10',\n          '박기선',\n          '소프트웨어 개발 및 공급업',\n          '전라북도 전주시 덕진구 유상로67, 전주혁신창업허브 513호',\n          '063-211-0814',\n          '063-211-0813',\n          new Date(),\n          '(주)비아',\n        ],\n      )\n    } else {\n      // 새 회사 정보 삽입\n      await query(\n        `\n\t\t\t\tINSERT INTO companies (\n\t\t\t\t\tname, establishment_date, ceo_name, business_type, \n\t\t\t\t\taddress, phone, fax, created_at, updated_at\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n\t\t\t`,\n        [\n          '(주)비아',\n          '2019-03-10',\n          '박기선',\n          '소프트웨어 개발 및 공급업',\n          '전라북도 전주시 덕진구 유상로67, 전주혁신창업허브 513호',\n          '063-211-0814',\n          '063-211-0813',\n          new Date(),\n          new Date(),\n        ],\n      )\n    }\n\n    return json({\n      success: true,\n      message: '회사 정보 테이블이 생성되고 기본 데이터가 등록되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error setting up company table:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '회사 정보 테이블 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/employees/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/executives-setup/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 87,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 87,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3279, 3282], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3279, 3282], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 이사 명부 및 직책 체계 테이블 생성\nexport const POST: RequestHandler = async () => {\n  try {\n    // Job Titles 테이블 생성\n    await query(`\n\t\t\tCREATE TABLE IF NOT EXISTS job_titles (\n\t\t\t\tid UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n\t\t\t\tname VARCHAR(100) UNIQUE NOT NULL,\n\t\t\t\tlevel INTEGER NOT NULL,\n\t\t\t\tcategory VARCHAR(50) NOT NULL,\n\t\t\t\tdescription TEXT,\n\t\t\t\tis_active BOOLEAN DEFAULT true,\n\t\t\t\tcreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\t\t\t\tupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\t\t\t)\n\t\t`)\n\n    // Executives 테이블 생성\n    await query(`\n\t\t\tCREATE TABLE IF NOT EXISTS executives (\n\t\t\t\tid UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n\t\t\t\texecutive_id VARCHAR(50) UNIQUE NOT NULL,\n\t\t\t\tfirst_name VARCHAR(100) NOT NULL,\n\t\t\t\tlast_name VARCHAR(100) NOT NULL,\n\t\t\t\temail VARCHAR(255) UNIQUE NOT NULL,\n\t\t\t\tphone VARCHAR(50),\n\t\t\t\tjob_title_id UUID REFERENCES job_titles(id),\n\t\t\t\tdepartment VARCHAR(100),\n\t\t\t\tappointment_date DATE,\n\t\t\t\tterm_end_date DATE,\n\t\t\t\tstatus VARCHAR(50) DEFAULT 'active',\n\t\t\t\tbio TEXT,\n\t\t\t\tprofile_image_url VARCHAR(500),\n\t\t\t\tcreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\t\t\t\tupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\t\t\t)\n\t\t`)\n\n    // 인덱스 생성\n    await query(`CREATE INDEX IF NOT EXISTS idx_job_titles_level ON job_titles(level)`)\n    await query(`CREATE INDEX IF NOT EXISTS idx_job_titles_category ON job_titles(category)`)\n    await query(\n      `CREATE INDEX IF NOT EXISTS idx_executives_executive_id ON executives(executive_id)`,\n    )\n    await query(\n      `CREATE INDEX IF NOT EXISTS idx_executives_job_title_id ON executives(job_title_id)`,\n    )\n\n    // 기본 직책 데이터 삽입\n    await query(`\n\t\t\tINSERT INTO job_titles (name, level, category, description) VALUES\n\t\t\t('CEO', 1, 'executive', 'Chief Executive Officer - 대표이사'),\n\t\t\t('CTO', 1, 'executive', 'Chief Technology Officer - 연구소장, 기술이사'),\n\t\t\t('CFO', 1, 'executive', 'Chief Financial Officer - 상무이사'),\n\t\t\t('Director', 2, 'management', 'Director - 이사'),\n\t\t\t('Managing Director', 2, 'management', 'Managing Director - 상무'),\n\t\t\t('Team Lead', 3, 'specialist', 'Team Lead - 팀장'),\n\t\t\t('Senior Manager', 3, 'specialist', 'Senior Manager - 부장'),\n\t\t\t('Manager', 3, 'specialist', 'Manager - 과장')\n\t\t\tON CONFLICT (name) DO NOTHING\n\t\t`)\n\n    // C-Level 임원진 데이터 삽입\n    await query(`\n\t\t\tINSERT INTO executives (executive_id, first_name, last_name, email, phone, job_title_id, department, appointment_date, status, bio) VALUES\n\t\t\t('EXE001', '박기선', '', 'ceo@viahub.com', '010-0001-0001', \n\t\t\t (SELECT id FROM job_titles WHERE name = 'CEO'), '경영진', '2020-01-01', 'active', \n\t\t\t '회사의 비전과 전략을 수립하고 이끌어가는 대표이사입니다.'),\n\t\t\t('EXE002', '최현민', '', 'cto@viahub.com', '010-0002-0002', \n\t\t\t (SELECT id FROM job_titles WHERE name = 'CTO'), '연구개발', '2020-01-01', 'active', \n\t\t\t '기술 혁신과 연구개발을 총괄하는 연구소장이자 기술이사입니다.'),\n\t\t\t('EXE003', '오현종', '', 'cfo@viahub.com', '010-0003-0003', \n\t\t\t (SELECT id FROM job_titles WHERE name = 'CFO'), '재무', '2020-01-01', 'active', \n\t\t\t '재무 관리와 경영 지원을 담당하는 상무이사입니다.')\n\t\t\tON CONFLICT (executive_id) DO NOTHING\n\t\t`)\n\n    return json({\n      success: true,\n      message: '이사 명부 및 직책 체계 테이블이 성공적으로 생성되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error setting up executives tables:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '테이블 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/projects/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/rd-projects/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/setup/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 54,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 54,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1787, 1790], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1787, 1790], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 68,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 68,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2053, 2056], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2053, 2056], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 데이터베이스 테이블 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n    const { tables } = data\n\n    const results = []\n\n    for (const table of tables) {\n      try {\n        if (table === 'departments') {\n          // 부서 테이블 생성\n          await query(`\n\t\t\t\t\t\tCREATE TABLE IF NOT EXISTS departments (\n\t\t\t\t\t\t\tid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\t\t\t\t\t\t\tname VARCHAR(100) NOT NULL UNIQUE,\n\t\t\t\t\t\t\tdescription TEXT,\n\t\t\t\t\t\t\tstatus VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),\n\t\t\t\t\t\t\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\t\t\t\t\t\t\tupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n\t\t\t\t\t\t)\n\t\t\t\t\t`)\n          results.push({\n            table: 'departments',\n            success: true,\n            message: '부서 테이블이 생성되었습니다.',\n          })\n        } else if (table === 'positions') {\n          // 직급 테이블 생성\n          await query(`\n\t\t\t\t\t\tCREATE TABLE IF NOT EXISTS positions (\n\t\t\t\t\t\t\tid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\t\t\t\t\t\t\tname VARCHAR(100) NOT NULL,\n\t\t\t\t\t\t\tdescription TEXT,\n\t\t\t\t\t\t\tdepartment VARCHAR(100) NOT NULL,\n\t\t\t\t\t\t\tlevel INTEGER DEFAULT 1 CHECK (level >= 1 AND level <= 10),\n\t\t\t\t\t\t\tstatus VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),\n\t\t\t\t\t\t\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\t\t\t\t\t\t\tupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\t\t\t\t\t\t\tUNIQUE(name, department)\n\t\t\t\t\t\t)\n\t\t\t\t\t`)\n          results.push({\n            table: 'positions',\n            success: true,\n            message: '직급 테이블이 생성되었습니다.',\n          })\n        }\n      } catch (error: any) {\n        results.push({\n          table,\n          success: false,\n          message: `테이블 생성 실패: ${error.message}`,\n        })\n      }\n    }\n\n    return json({\n      success: true,\n      results,\n      message: '데이터베이스 설정이 완료되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error setting up database:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '데이터베이스 설정에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/users/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/departments/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 33,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 33,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [834, 837], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [834, 837], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 97,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 97,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2274, 2277], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2274, 2277], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 부서 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n\n    let whereClause = ''\n    if (status === 'active') {\n      whereClause = 'WHERE status = $1'\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, status, max_employees, created_at, updated_at\n\t\t\tFROM departments\n\t\t\t${whereClause}\n\t\t\tORDER BY name ASC\n\t\t`,\n      status === 'all' ? [] : [status],\n    )\n\n    return json({\n      success: true,\n      data: result.rows,\n    })\n  } catch (error: any) {\n    logger.error('Error fetching departments:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 목록을 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 새 부서 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서명은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 부서명 검증\n    const existingDept = await query('SELECT id FROM departments WHERE LOWER(name) = LOWER($1)', [\n      data.name.trim(),\n    ])\n\n    if (existingDept.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 부서명입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO departments (name, description, status, max_employees, created_at, updated_at)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6)\n\t\t\tRETURNING id, name, description, status, max_employees, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.status || 'active',\n        data.to || 0,\n        new Date(),\n        new Date(),\n      ],\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '부서가 성공적으로 생성되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error creating department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/departments/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [712, 715], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [712, 715], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 112,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 112,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2391, 2394], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2391, 2394], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 194,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 194,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4256, 4259], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4256, 4259], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 부서 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, status, max_employees, created_at, updated_at\n\t\t\tFROM departments\n\t\t\tWHERE id = $1\n\t\t`,\n      [params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '부서를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n    })\n  } catch (error: any) {\n    logger.error('Error fetching department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 정보를 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 부서 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서명은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 부서명 검증 (자기 자신 제외)\n    const existingDept = await query(\n      'SELECT id FROM departments WHERE LOWER(name) = LOWER($1) AND id != $2',\n      [data.name.trim(), params.id],\n    )\n\n    if (existingDept.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 부서명입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE departments SET\n\t\t\t\tname = $2,\n\t\t\t\tdescription = $3,\n\t\t\t\tstatus = $4,\n\t\t\t\tmax_employees = $5,\n\t\t\t\tupdated_at = $6\n\t\t\tWHERE id = $1\n\t\t\tRETURNING id, name, description, status, max_employees, created_at, updated_at\n\t\t`,\n      [\n        params.id,\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.status || 'active',\n        data.to || 0,\n        new Date(),\n      ],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '부서를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '부서 정보가 성공적으로 수정되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error updating department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 정보 수정에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 부서 삭제\nexport const DELETE: RequestHandler = async ({ params, url }) => {\n  try {\n    const searchParams = url.searchParams\n    const hardDelete = searchParams.get('hard') === 'true'\n\n    if (hardDelete) {\n      // 하드 삭제: 부서를 사용하는 직원이 있는지 확인\n      const employeesInDept = await query(\n        'SELECT COUNT(*) as count FROM employees WHERE department = (SELECT name FROM departments WHERE id = $1)',\n        [params.id],\n      )\n\n      if (parseInt(employeesInDept.rows[0].count) > 0) {\n        return json(\n          {\n            success: false,\n            error: '해당 부서에 소속된 직원이 있어 삭제할 수 없습니다.',\n          },\n          { status: 400 },\n        )\n      }\n\n      // 하드 삭제 실행\n      const result = await query('DELETE FROM departments WHERE id = $1 RETURNING id, name', [\n        params.id,\n      ])\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '부서를 찾을 수 없습니다.',\n          },\n          { status: 404 },\n        )\n      }\n\n      return json({\n        success: true,\n        message: '부서가 완전히 삭제되었습니다.',\n      })\n    } else {\n      // 소프트 삭제: 상태를 'inactive'로 변경\n      const result = await query(\n        `\n\t\t\t\tUPDATE departments SET\n\t\t\t\t\tstatus = 'inactive',\n\t\t\t\t\tupdated_at = $2\n\t\t\t\tWHERE id = $1\n\t\t\t\tRETURNING id, name, status\n\t\t\t`,\n        [params.id, new Date()],\n      )\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '부서를 찾을 수 없습니다.',\n          },\n          { status: 404 },\n        )\n      }\n\n      return json({\n        success: true,\n        message: '부서가 비활성화되었습니다.',\n      })\n    }\n  } catch (error: any) {\n    logger.error('Error deleting department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 삭제에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/[id]/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/migrate-executives/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 113,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 113,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3055, 3058], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3055, 3058], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// 이사급 직원들을 이사 명부로 이관하고 직원 명부에서 제외\nexport const POST: RequestHandler = async () => {\n  try {\n    // 이사급 직원들을 찾기 (대표, 이사, 상무 등)\n    const executivePositions = [\n      '대표',\n      '이사',\n      '상무',\n      '대표이사',\n      '연구소장',\n      '기술이사',\n      '상무이사',\n    ]\n\n    const executiveEmployees = await query(\n      `\n\t\t\tSELECT * FROM employees \n\t\t\tWHERE position IN (${executivePositions.map((_, i) => `$${i + 1}`).join(', ')})\n\t\t\tAND status = 'active'\n\t\t`,\n      executivePositions,\n    )\n\n    // 임원 직원 마이그레이션 시작\n\n    const migratedExecutives = []\n\n    for (const employee of executiveEmployees.rows) {\n      // 직책 매핑\n      let jobTitleName = 'CEO' // 기본값\n      if (employee.position.includes('대표')) {\n        jobTitleName = 'CEO'\n      } else if (employee.position.includes('연구소장') || employee.position.includes('기술이사')) {\n        jobTitleName = 'CTO'\n      } else if (employee.position.includes('상무')) {\n        jobTitleName = 'CFO'\n      } else if (employee.position.includes('이사')) {\n        jobTitleName = 'Director'\n      }\n\n      // 해당 직책 ID 찾기\n      const jobTitleResult = await query('SELECT id FROM job_titles WHERE name = $1', [\n        jobTitleName,\n      ])\n\n      if (jobTitleResult.rows.length === 0) {\n        // 직책을 찾을 수 없음, 건너뛰기\n        continue\n      }\n\n      const jobTitleId = jobTitleResult.rows[0].id\n\n      // Executive ID 생성\n      const execIdResult = await query('SELECT COUNT(*) as count FROM executives')\n      const execCount = parseInt(execIdResult.rows[0].count) + 1\n      const executiveId = `EXE${execCount.toString().padStart(3, '0')}`\n\n      // 이사 명부에 추가\n      const executiveResult = await query(\n        `\n\t\t\t\tINSERT INTO executives (\n\t\t\t\t\texecutive_id, first_name, last_name, email, phone, job_title_id, \n\t\t\t\t\tdepartment, appointment_date, status, bio, created_at, updated_at\n\t\t\t\t)\n\t\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n\t\t\t\tRETURNING id, executive_id, first_name, last_name, email, job_title_id\n\t\t\t`,\n        [\n          executiveId,\n          employee.first_name,\n          employee.last_name,\n          employee.email,\n          employee.phone,\n          jobTitleId,\n          employee.department,\n          employee.hire_date,\n          'active',\n          `${employee.position}로 임명된 임원진입니다.`,\n          new Date(),\n          new Date(),\n        ],\n      )\n\n      migratedExecutives.push(executiveResult.rows[0])\n\n      // 직원 명부에서 비활성화 (완전 삭제하지 않고 상태만 변경)\n      await query(\n        `\n\t\t\t\tUPDATE employees SET\n\t\t\t\t\tstatus = 'inactive',\n\t\t\t\t\tupdated_at = $1\n\t\t\t\tWHERE id = $2\n\t\t\t`,\n        [new Date(), employee.id],\n      )\n\n      // 임원 테이블로 마이그레이션 완료\n    }\n\n    return json({\n      success: true,\n      message: `${migratedExecutives.length}명의 이사급 직원이 이사 명부로 이관되었습니다.`,\n      data: {\n        migratedCount: migratedExecutives.length,\n        migratedExecutives: migratedExecutives,\n      },\n    })\n  } catch (error: any) {\n    logger.error('Error migrating executives:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사급 직원 이관에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/upload/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1438, 1441], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1438, 1441], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 93,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 93,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2729, 2732], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2729, 2732], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 110,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 110,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3114, 3117], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3114, 3117], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 120,
        "column": 25,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 120,
        "endColumn": 86
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 135,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 135,
        "endColumn": 77
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\+.",
        "line": 141,
        "column": 35,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 141,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [4183, 4184], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [4183, 4183], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\(.",
        "line": 141,
        "column": 37,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 141,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [4185, 4186], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [4185, 4185], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\).",
        "line": 141,
        "column": 39,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 141,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [4187, 4188], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [4187, 4187], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 143,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 143,
        "endColumn": 79
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 152,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 152,
        "endColumn": 75
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 162,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 162,
        "endColumn": 77
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection.js'\nimport { formatDateForDisplay, getCurrentUTC, isValidDate, toUTC } from '$lib/utils/date-handler'\nimport { logger } from '$lib/utils/logger'\nimport { json } from '@sveltejs/kit'\nimport * as ExcelJS from 'exceljs'\n\nexport async function POST({ request }) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n\n    if (!file) {\n      return json({ error: '파일이 선택되지 않았습니다.' }, { status: 400 })\n    }\n\n    // 파일 확장자 확인\n    const fileName = file.name.toLowerCase()\n    const isExcel = fileName.endsWith('.xlsx') || fileName.endsWith('.xls')\n    const isCSV = fileName.endsWith('.csv')\n\n    let data: unknown[] = []\n    let headers: string[] = []\n\n    if (isExcel) {\n      // Excel 파일 파싱\n      const buffer = await file.arrayBuffer()\n      const workbook = new ExcelJS.Workbook()\n      await workbook.xlsx.load(buffer)\n\n      const worksheet = workbook.worksheets[0]\n      if (!worksheet) {\n        return json({ error: 'Excel 파일에 워크시트가 없습니다.' }, { status: 400 })\n      }\n\n      const rows = worksheet.getRows()\n      if (!rows || rows.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // 헤더 추출 (첫 번째 행)\n      headers = rows[0].values.slice(1) as string[] // ExcelJS는 1-based indexing\n      // Excel 헤더 파싱 완료\n\n      // 데이터 추출\n      data = rows.slice(1).map((row, _index) => {\n        const rowData: any = {}\n        const rowValues = row.values.slice(1) as unknown[] // ExcelJS는 1-based indexing\n        headers.forEach((header, headerIndex) => {\n          rowData[header] = rowValues[headerIndex] || ''\n        })\n        // Excel 행 파싱 완료\n        return rowData\n      })\n    } else if (isCSV) {\n      // CSV 파일 파싱\n      const text = await file.text()\n      const lines = text.split('\\n').filter((line) => line.trim())\n\n      if (lines.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // CSV 파싱 함수\n      function parseCSVLine(line: string): string[] {\n        const result: string[] = []\n        let current = ''\n        let inQuotes = false\n\n        for (let i = 0; i < line.length; i++) {\n          const char = line[i]\n\n          if (char === '\"') {\n            inQuotes = !inQuotes\n          } else if (char === ',' && !inQuotes) {\n            result.push(current.trim())\n            current = ''\n          } else {\n            current += char\n          }\n        }\n\n        result.push(current.trim())\n        return result\n      }\n\n      // 헤더 파싱\n      headers = parseCSVLine(lines[0])\n      // CSV 헤더 파싱 완료\n\n      // 데이터 파싱\n      data = lines.slice(1).map((line, _index) => {\n        const values = parseCSVLine(line)\n        const row: any = {}\n        headers.forEach((header, headerIndex) => {\n          row[header] = values[headerIndex] || ''\n        })\n        // CSV 행 파싱 완료\n        return row\n      })\n    } else {\n      return json(\n        {\n          error: '지원하지 않는 파일 형식입니다. CSV 또는 Excel 파일을 업로드해주세요.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 데이터 검증 및 변환\n    const employees = data.map((row: any, index: number) => {\n      const rowNumber = index + 2 // 헤더 행을 고려하여 +2\n\n      // 필수 필드 검증 (새로운 템플릿 형식)\n      const requiredFields = ['성', '이름', '이메일', '부서', '직급', '급여']\n      const missingFields = requiredFields.filter(\n        (field) => !row[field] || String(row[field]).trim() === '',\n      )\n\n      if (missingFields.length > 0) {\n        throw new Error(`행 ${rowNumber}: 필수 필드가 누락되었습니다: ${missingFields.join(', ')}`)\n      }\n\n      // 성과 이름 분리 검증\n      const lastName = String(row['성']).trim()\n      const firstName = String(row['이름']).trim()\n\n      if (!lastName || !firstName) {\n        throw new Error(`행 ${rowNumber}: 성과 이름은 반드시 분리되어 입력되어야 합니다.`)\n      }\n\n      // 이메일 형식 검증 (있는 경우)\n      if (row['이메일'] && row['이메일'].trim() !== '') {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(row['이메일'].trim())) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 이메일 형식입니다: ${row['이메일']}`)\n        }\n      }\n\n      // 전화번호 형식 검증 (있는 경우)\n      if (row['전화번호'] && row['전화번호'].trim() !== '') {\n        const phoneRegex = /^[\\d\\-\\+\\(\\)\\s]+$/\n        if (!phoneRegex.test(row['전화번호'].trim())) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 전화번호 형식입니다: ${row['전화번호']}`)\n        }\n      }\n\n      // 급여 검증\n      let salary = 0\n      if (row['급여'] && String(row['급여']).trim() !== '') {\n        salary = parseFloat(String(row['급여']))\n        if (isNaN(salary) || salary < 0) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 급여 형식입니다: ${row['급여']}`)\n        }\n      }\n\n      // 입사일 검증\n      let hireDate = new Date()\n      if (row['입사일'] && String(row['입사일']).trim() !== '') {\n        const hireDateValue = row['입사일']\n\n        if (!isValidDate(hireDateValue)) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 입사일 형식입니다: ${row['입사일']}`)\n        }\n\n        hireDate = new Date(toUTC(hireDateValue))\n      }\n\n      // 상태 검증\n      const validStatuses = ['active', 'inactive', 'on_leave']\n      const status = row['상태'] || 'active'\n      if (!validStatuses.includes(status)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 상태입니다: ${status}. 허용된 값: ${validStatuses.join(', ')}`,\n        )\n      }\n\n      // 미들네임 처리 (선택사항)\n      const middleName = row['미들네임'] ? String(row['미들네임']).trim() : ''\n\n      // employee_id 생성 (V00001 형식)\n      // 업로드 시에는 임시로 인덱스 기반 생성, 실제 저장 시에는 순차적으로 할당\n      const tempId = rowNumber // 행 번호를 임시 ID로 사용\n      const employeeId = `V${tempId.toString().padStart(5, '0')}`\n\n      return {\n        employee_id: employeeId,\n        first_name: firstName,\n        last_name: lastName,\n        middle_name: middleName,\n        email: email,\n        phone: row['전화번호'] ? String(row['전화번호']).trim() : '',\n        department: String(row['부서']).trim(),\n        position: String(row['직급']).trim(),\n        salary: salary,\n        hire_date: formatDateForDisplay(toUTC(hireDate), 'ISO'),\n        status: status,\n        employment_type: row['고용형태'] || 'full-time',\n        created_at: getCurrentUTC(),\n        updated_at: getCurrentUTC(),\n      }\n    })\n\n    // 데이터베이스에 저장\n    let successCount = 0\n\n    for (const employee of employees) {\n      try {\n        // 직원 데이터 저장 시도\n\n        // 새로운 사번 생성 (기존 4자리 숫자 규칙 유지)\n        const countResult = await query(`\n\t\t\t\t\tSELECT MAX(CAST(employee_id AS INTEGER)) as max_id \n\t\t\t\t\tFROM employees \n\t\t\t\t\tWHERE employee_id ~ '^[0-9]+$' AND LENGTH(employee_id) <= 4\n\t\t\t\t`)\n        const maxId = countResult.rows[0]?.max_id || 1000\n        const nextId = maxId + 1\n        const newEmployeeId = nextId.toString()\n\n        // UPSERT: 이메일이 존재하면 UPDATE, 없으면 INSERT\n        await query(\n          `\n\t\t\t\t\tINSERT INTO employees (\n\t\t\t\t\t\temployee_id, first_name, last_name, middle_name, email, phone, \n\t\t\t\t\t\tdepartment, position, salary, hire_date, status, \n\t\t\t\t\t\temployment_type, created_at, updated_at\n\t\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n\t\t\t\t\tON CONFLICT (email) \n\t\t\t\t\tDO UPDATE SET\n\t\t\t\t\t\tfirst_name = EXCLUDED.first_name,\n\t\t\t\t\t\tlast_name = EXCLUDED.last_name,\n\t\t\t\t\t\tmiddle_name = EXCLUDED.middle_name,\n\t\t\t\t\t\tphone = EXCLUDED.phone,\n\t\t\t\t\t\tdepartment = EXCLUDED.department,\n\t\t\t\t\t\tposition = EXCLUDED.position,\n\t\t\t\t\t\tsalary = EXCLUDED.salary,\n\t\t\t\t\t\thire_date = EXCLUDED.hire_date,\n\t\t\t\t\t\tstatus = EXCLUDED.status,\n\t\t\t\t\t\temployment_type = EXCLUDED.employment_type,\n\t\t\t\t\t\tupdated_at = EXCLUDED.updated_at\n\t\t\t\t`,\n          [\n            newEmployeeId,\n            employee.first_name,\n            employee.last_name,\n            employee.middle_name,\n            employee.email,\n            employee.phone,\n            employee.department,\n            employee.position,\n            employee.salary,\n            employee.hire_date,\n            employee.status,\n            employee.employment_type,\n            employee.created_at,\n            employee.updated_at,\n          ],\n        )\n        // 직원 저장/업데이트 성공\n        successCount++\n      } catch (error) {\n        logger.error('직원 저장 실패:', error)\n        logger.error('직원 데이터:', employee)\n      }\n    }\n\n    return json({\n      success: true,\n      count: successCount,\n      total: employees.length,\n      message: `${successCount}명의 직원이 성공적으로 업로드되었습니다.`,\n    })\n  } catch (error) {\n    logger.error('업로드 에러:', error)\n    return json(\n      {\n        error: error instanceof Error ? error.message : '업로드 중 오류가 발생했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/executives/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 51,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 51,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1453, 1456], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1453, 1456], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 153,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 153,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4047, 4050], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4047, 4050], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 이사 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n    const department = searchParams.get('department')\n\n    let whereClause = ''\n    const params: unknown[] = []\n\n    if (status === 'active') {\n      whereClause = 'WHERE e.status = $1'\n      params.push(status)\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    if (department) {\n      if (whereClause) {\n        whereClause += ' AND e.department = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE e.department = $1'\n      }\n      params.push(department)\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id, e.executive_id, e.first_name, e.last_name, e.email, e.phone,\n\t\t\t\te.department, e.appointment_date, e.term_end_date, e.status, e.bio, e.profile_image_url,\n\t\t\t\te.created_at, e.updated_at,\n\t\t\t\tjt.name as job_title_name, jt.level as job_title_level, jt.category as job_title_category\n\t\t\tFROM executives e\n\t\t\tLEFT JOIN job_titles jt ON e.job_title_id = jt.id\n\t\t\t${whereClause}\n\t\t\tORDER BY jt.level ASC, e.appointment_date DESC\n\t\t`,\n      params,\n    )\n\n    return json({\n      success: true,\n      data: result.rows,\n    })\n  } catch (error: any) {\n    logger.error('Error fetching executives:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 목록을 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 새 이사 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.first_name || data.first_name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이름은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.email || data.email.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이메일은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.job_title_id) {\n      return json(\n        {\n          success: false,\n          error: '직책은 필수 선택 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 이메일 중복 검증\n    const existingExec = await query('SELECT id FROM executives WHERE LOWER(email) = LOWER($1)', [\n      data.email.trim(),\n    ])\n\n    if (existingExec.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 이메일입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // Executive ID 생성\n    const execIdResult = await query('SELECT COUNT(*) as count FROM executives')\n    const execCount = parseInt(execIdResult.rows[0].count) + 1\n    const executiveId = `EXE${execCount.toString().padStart(3, '0')}`\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO executives (\n\t\t\t\texecutive_id, first_name, last_name, email, phone, job_title_id, \n\t\t\t\tdepartment, appointment_date, term_end_date, status, bio, profile_image_url,\n\t\t\t\tcreated_at, updated_at\n\t\t\t)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n\t\t\tRETURNING id, executive_id, first_name, last_name, email, phone, department, \n\t\t\t          appointment_date, term_end_date, status, bio, profile_image_url, created_at, updated_at\n\t\t`,\n      [\n        executiveId,\n        data.first_name.trim(),\n        data.last_name?.trim() || '',\n        data.email.trim(),\n        data.phone?.trim() || '',\n        data.job_title_id,\n        data.department?.trim() || '',\n        data.appointment_date || null,\n        data.term_end_date || null,\n        data.status || 'active',\n        data.bio?.trim() || '',\n        data.profile_image_url?.trim() || '',\n        new Date(),\n        new Date(),\n      ],\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '이사가 성공적으로 생성되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error creating executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/executives/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 37,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 37,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [990, 993], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [990, 993], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 152,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 152,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3559, 3562], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3559, 3562], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 192,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 192,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4349, 4352], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4349, 4352], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 이사 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id, e.executive_id, e.first_name, e.last_name, e.email, e.phone,\n\t\t\t\te.department, e.appointment_date, e.term_end_date, e.status, e.bio, e.profile_image_url,\n\t\t\t\te.created_at, e.updated_at,\n\t\t\t\tjt.name as job_title_name, jt.level as job_title_level, jt.category as job_title_category\n\t\t\tFROM executives e\n\t\t\tLEFT JOIN job_titles jt ON e.job_title_id = jt.id\n\t\t\tWHERE e.id = $1\n\t\t`,\n      [params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '이사를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n    })\n  } catch (error: any) {\n    logger.error('Error fetching executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 정보를 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 이사 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.first_name || data.first_name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이름은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.email || data.email.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이메일은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.job_title_id) {\n      return json(\n        {\n          success: false,\n          error: '직책은 필수 선택 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 이메일 중복 검증 (자신 제외)\n    const existingExec = await query(\n      'SELECT id FROM executives WHERE LOWER(email) = LOWER($1) AND id != $2',\n      [data.email.trim(), params.id],\n    )\n\n    if (existingExec.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 이메일입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE executives SET\n\t\t\t\tfirst_name = $1,\n\t\t\t\tlast_name = $2,\n\t\t\t\temail = $3,\n\t\t\t\tphone = $4,\n\t\t\t\tjob_title_id = $5,\n\t\t\t\tdepartment = $6,\n\t\t\t\tappointment_date = $7,\n\t\t\t\tterm_end_date = $8,\n\t\t\t\tstatus = $9,\n\t\t\t\tbio = $10,\n\t\t\t\tprofile_image_url = $11,\n\t\t\t\tupdated_at = $12\n\t\t\tWHERE id = $13\n\t\t\tRETURNING id, executive_id, first_name, last_name, email, phone, department, \n\t\t\t          appointment_date, term_end_date, status, bio, profile_image_url, created_at, updated_at\n\t\t`,\n      [\n        data.first_name.trim(),\n        data.last_name?.trim() || '',\n        data.email.trim(),\n        data.phone?.trim() || '',\n        data.job_title_id,\n        data.department?.trim() || '',\n        data.appointment_date || null,\n        data.term_end_date || null,\n        data.status || 'active',\n        data.bio?.trim() || '',\n        data.profile_image_url?.trim() || '',\n        new Date(),\n        params.id,\n      ],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '이사를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '이사 정보가 성공적으로 수정되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error updating executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 정보 수정에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 이사 삭제 (비활성화)\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tUPDATE executives SET\n\t\t\t\tstatus = 'inactive',\n\t\t\t\tupdated_at = $1\n\t\t\tWHERE id = $2\n\t\t\tRETURNING id, executive_id, first_name, last_name\n\t\t`,\n      [new Date(), params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '이사를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      message: '이사가 비활성화되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error deleting executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 삭제에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/expenses/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/hr/employees/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/job-titles/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 56,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 56,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1400, 1403], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1400, 1403], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 141,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 141,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3293, 3296], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3293, 3296], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 직책 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n    const category = searchParams.get('category')\n    const level = searchParams.get('level')\n\n    let whereClause = ''\n    const params: unknown[] = []\n\n    if (status === 'active') {\n      whereClause = 'WHERE is_active = $1'\n      params.push(true)\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    if (category) {\n      if (whereClause) {\n        whereClause += ' AND category = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE category = $1'\n      }\n      params.push(category)\n    }\n\n    if (level) {\n      if (whereClause) {\n        whereClause += ' AND level = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE level = $1'\n      }\n      params.push(parseInt(level))\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT id, name, level, category, description, is_active, created_at, updated_at\n\t\t\tFROM job_titles\n\t\t\t${whereClause}\n\t\t\tORDER BY level ASC, name ASC\n\t\t`,\n      params,\n    )\n\n    return json({\n      success: true,\n      data: result.rows,\n    })\n  } catch (error: any) {\n    logger.error('Error fetching job titles:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 목록을 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 새 직책 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직책명은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.level || data.level < 1 || data.level > 10) {\n      return json(\n        {\n          success: false,\n          error: '레벨은 1-10 사이의 값이어야 합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.category || data.category.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '카테고리는 필수 선택 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 직책명 검증\n    const existingTitle = await query('SELECT id FROM job_titles WHERE LOWER(name) = LOWER($1)', [\n      data.name.trim(),\n    ])\n\n    if (existingTitle.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 직책명입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO job_titles (name, level, category, description, is_active, created_at, updated_at)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t\t\tRETURNING id, name, level, category, description, is_active, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.level,\n        data.category.trim(),\n        data.description?.trim() || '',\n        data.is_active !== false,\n        new Date(),\n        new Date(),\n      ],\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직책이 성공적으로 생성되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error creating job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/job-titles/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [716, 719], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [716, 719], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 134,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 134,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2850, 2853], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2850, 2853], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 190,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 190,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4029, 4032], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4029, 4032], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 직책 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT id, name, level, category, description, is_active, created_at, updated_at\n\t\t\tFROM job_titles\n\t\t\tWHERE id = $1\n\t\t`,\n      [params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직책을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n    })\n  } catch (error: any) {\n    logger.error('Error fetching job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 정보를 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 직책 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직책명은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.level || data.level < 1 || data.level > 10) {\n      return json(\n        {\n          success: false,\n          error: '레벨은 1-10 사이의 값이어야 합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.category || data.category.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '카테고리는 필수 선택 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 직책명 검증 (자신 제외)\n    const existingTitle = await query(\n      'SELECT id FROM job_titles WHERE LOWER(name) = LOWER($1) AND id != $2',\n      [data.name.trim(), params.id],\n    )\n\n    if (existingTitle.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 직책명입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE job_titles SET\n\t\t\t\tname = $1,\n\t\t\t\tlevel = $2,\n\t\t\t\tcategory = $3,\n\t\t\t\tdescription = $4,\n\t\t\t\tis_active = $5,\n\t\t\t\tupdated_at = $6\n\t\t\tWHERE id = $7\n\t\t\tRETURNING id, name, level, category, description, is_active, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.level,\n        data.category.trim(),\n        data.description?.trim() || '',\n        data.is_active !== false,\n        new Date(),\n        params.id,\n      ],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직책을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직책 정보가 성공적으로 수정되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error updating job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 정보 수정에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 직책 삭제 (비활성화)\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    // 해당 직책을 사용하는 이사가 있는지 확인\n    const executivesUsingTitle = await query(\n      'SELECT COUNT(*) as count FROM executives WHERE job_title_id = $1 AND status = $2',\n      [params.id, 'active'],\n    )\n\n    if (parseInt(executivesUsingTitle.rows[0].count) > 0) {\n      return json(\n        {\n          success: false,\n          error: '해당 직책을 사용하는 활성 이사가 있어 삭제할 수 없습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE job_titles SET\n\t\t\t\tis_active = false,\n\t\t\t\tupdated_at = $1\n\t\t\tWHERE id = $2\n\t\t\tRETURNING id, name\n\t\t`,\n      [new Date(), params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직책을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      message: '직책이 비활성화되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error deleting job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 삭제에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/migrate/add-department-to/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [757, 760], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [757, 760], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 부서 테이블에 T/O 컬럼 추가\nexport const POST: RequestHandler = async () => {\n  try {\n    // T/O 컬럼 추가\n    await query(`\n\t\t\tALTER TABLE departments \n\t\t\tADD COLUMN IF NOT EXISTS max_employees INTEGER DEFAULT 0\n\t\t`)\n\n    // 기존 부서들의 T/O 설정\n    await query(`\n\t\t\tUPDATE departments \n\t\t\tSET max_employees = CASE \n\t\t\t\tWHEN name = '개발팀' THEN 4\n\t\t\t\tWHEN name = '경영기획팀' THEN 1\n\t\t\t\tWHEN name = '경영지원팀' THEN 2\n\t\t\t\tELSE 0\n\t\t\tEND\n\t\t\tWHERE max_employees = 0 OR max_employees IS NULL\n\t\t`)\n\n    return json({\n      success: true,\n      message: '부서 테이블에 T/O 컬럼이 성공적으로 추가되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error adding TO column to departments:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || 'T/O 컬럼 추가에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/organization/chart/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 35,
        "column": 29,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 35,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [989, 992], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [989, 992], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 58,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 58,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1644, 1647], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1644, 1647], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 123,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 123,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3552, 3555], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3552, 3555], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\nimport { formatEmployeeName } from '$lib/utils/format'\n\n// 조직도 데이터 생성 (동적)\nexport const GET: RequestHandler = async () => {\n  try {\n    // 모든 직원 데이터 조회 (직책 정보 포함)\n    const employeesResult = await query(`\n\t\t\tSELECT \n\t\t\t\te.id,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.salary,\n\t\t\t\te.status,\n\t\t\t\te.job_title_id,\n\t\t\t\tjt.name as job_title_name,\n\t\t\t\tjt.level as job_title_level,\n\t\t\t\tjt.category as job_title_category\n\t\t\tFROM employees e\n\t\t\tLEFT JOIN job_titles jt ON e.job_title_id = jt.id\n\t\t\tWHERE e.status = 'active'\n\t\t\tORDER BY e.department, e.position\n\t\t`)\n\n    const employees = Array.isArray(employeesResult) ? employeesResult : employeesResult.rows || []\n\n    // 부서별로 직원 그룹화\n    const departmentGroups: { [key: string]: unknown[] } = {}\n    employees.forEach((emp: any) => {\n      const dept = emp.department || '기타'\n      if (!departmentGroups[dept]) {\n        departmentGroups[dept] = []\n      }\n      departmentGroups[dept].push({\n        name: formatEmployeeName(emp),\n        position: emp.position,\n        email: emp.email,\n        salary: emp.salary,\n        job_title: emp.job_title_name,\n        isTeamLead: emp.job_title_name === 'Team Lead',\n      })\n    })\n\n    // 부서를 임원별로 그룹화하는 매핑\n    const executiveDepartmentMapping: { [key: string]: string[] } = {\n      대표이사: ['경영기획팀'],\n      재무이사: ['경영지원팀'],\n      연구소장: ['PSR팀', 'GRIT팀', '개발팀'],\n    }\n\n    // 동적으로 조직도 구조 생성\n    const orgStructure: { [key: string]: any } = {}\n\n    // 각 임원별로 구조 생성\n    Object.entries(executiveDepartmentMapping).forEach(([executiveName, departments]) => {\n      const children: unknown[] = []\n\n      departments.forEach((deptName) => {\n        // 해당 부서에 직원이 있는지 확인\n        if (departmentGroups[deptName] && departmentGroups[deptName].length > 0) {\n          children.push({\n            name: deptName,\n            position: '팀',\n            type: 'department',\n            children: departmentGroups[deptName],\n          })\n        }\n      })\n\n      // 직원이 있는 부서가 있는 경우에만 임원 추가\n      if (children.length > 0) {\n        orgStructure[executiveName] = {\n          name: executiveName,\n          position: executiveName,\n          email: `${executiveName.toLowerCase().replace('이사', '')}@company.com`,\n          children: children,\n        }\n      }\n    })\n\n    // 매핑되지 않은 부서들을 '기타' 임원으로 그룹화\n    const mappedDepartments = Object.values(executiveDepartmentMapping).flat()\n    const unmappedDepartments = Object.keys(departmentGroups).filter(\n      (dept) => !mappedDepartments.includes(dept),\n    )\n\n    if (unmappedDepartments.length > 0) {\n      const otherChildren: unknown[] = []\n      unmappedDepartments.forEach((deptName) => {\n        otherChildren.push({\n          name: deptName,\n          position: '팀',\n          type: 'department',\n          children: departmentGroups[deptName],\n        })\n      })\n\n      orgStructure['기타'] = {\n        name: '기타',\n        position: '기타',\n        email: 'other@company.com',\n        children: otherChildren,\n      }\n    }\n\n    return json({\n      success: true,\n      data: orgStructure,\n      metadata: {\n        totalEmployees: employees.length,\n        totalDepartments: Object.keys(departmentGroups).length,\n        totalExecutives: Object.keys(orgStructure).length,\n        departments: Object.keys(departmentGroups),\n      },\n      message: '조직도 데이터가 성공적으로 생성되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error generating organization chart:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '조직도 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/organization/chart/download/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 18,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [734, 737], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [734, 737], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 45,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 45,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1192, 1195], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1192, 1195], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 조직도 다운로드 (CSV 형식)\nexport const GET: RequestHandler = async () => {\n  try {\n    // 모든 직원 데이터 조회\n    const employeesResult = await query(`\n\t\t\tSELECT \n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\temail,\n\t\t\t\tdepartment,\n\t\t\t\tposition,\n\t\t\t\tsalary,\n\t\t\t\tstatus\n\t\t\tFROM employees \n\t\t\tWHERE status = 'active'\n\t\t\tORDER BY department, position\n\t\t`)\n\n    const employees = Array.isArray(employeesResult) ? employeesResult : employeesResult.rows || []\n\n    // CSV 헤더\n    const csvHeader = '이름,부서,직급,이메일,연봉,상태\\n'\n\n    // CSV 데이터 생성\n    const csvData = employees\n      .map((emp: any) => {\n        return `\"${emp.last_name}${emp.first_name}\",\"${emp.department}\",\"${emp.position}\",\"${emp.email}\",\"${emp.salary}\",\"${emp.status}\"`\n      })\n      .join('\\n')\n\n    const csvContent = csvHeader + csvData\n\n    // CSV 파일로 응답\n    return new Response(csvContent, {\n      headers: {\n        'Content-Type': 'text/csv; charset=utf-8',\n        'Content-Disposition': 'attachment; filename=\"organization_chart.csv\"',\n      },\n    })\n  } catch (error: any) {\n    logger.error('Error downloading organization chart:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '조직도 다운로드에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/positions/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 46,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 46,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1155, 1158], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1155, 1158], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2907, 2910], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2907, 2910], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 144,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 144,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3345, 3348], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3345, 3348], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 직급 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n    const department = searchParams.get('department')\n\n    let whereClause = ''\n    const params: unknown[] = []\n\n    if (status === 'active') {\n      whereClause = 'WHERE status = $1'\n      params.push(status)\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    if (department) {\n      if (whereClause) {\n        whereClause += ' AND department = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE department = $1'\n      }\n      params.push(department)\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, department, level, status, created_at, updated_at\n\t\t\tFROM positions\n\t\t\t${whereClause}\n\t\t\tORDER BY level ASC, name ASC\n\t\t`,\n      params,\n    )\n\n    return json({\n      success: true,\n      data: result.rows,\n    })\n  } catch (error: any) {\n    logger.error('Error fetching positions:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 목록을 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 새 직급 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직급명은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.department || data.department.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서는 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 직급명 검증 (같은 부서 내에서)\n    const existingPos = await query(\n      'SELECT id FROM positions WHERE LOWER(name) = LOWER($1) AND department = $2',\n      [data.name.trim(), data.department.trim()],\n    )\n\n    if (existingPos.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '해당 부서에 이미 존재하는 직급명입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO positions (name, description, department, level, status, created_at, updated_at)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t\t\tRETURNING id, name, description, department, level, status, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.department.trim(),\n        data.level || 1,\n        data.status || 'active',\n        new Date(),\n        new Date(),\n      ],\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직급이 성공적으로 생성되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error creating position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 생성에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 모든 직급 삭제 (리셋용)\nexport const DELETE: RequestHandler = async () => {\n  try {\n    // 모든 직급을 삭제\n    await query('DELETE FROM positions')\n\n    return json({\n      success: true,\n      message: '모든 직급이 삭제되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error deleting all positions:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 삭제에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/positions/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 32,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 32,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [714, 717], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [714, 717], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 124,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 124,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2703, 2706], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2703, 2706], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 206,
        "column": 19,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 206,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4555, 4558], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4555, 4558], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 3,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 직급 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, department, level, status, created_at, updated_at\n\t\t\tFROM positions\n\t\t\tWHERE id = $1\n\t\t`,\n      [params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직급을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n    })\n  } catch (error: any) {\n    logger.error('Error fetching position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 정보를 가져오는데 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 직급 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직급명은 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!data.department || data.department.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서는 필수 입력 항목입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 직급명 검증 (자기 자신 제외, 같은 부서 내에서)\n    const existingPos = await query(\n      'SELECT id FROM positions WHERE LOWER(name) = LOWER($1) AND department = $2 AND id != $3',\n      [data.name.trim(), data.department.trim(), params.id],\n    )\n\n    if (existingPos.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '해당 부서에 이미 존재하는 직급명입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE positions SET\n\t\t\t\tname = $2,\n\t\t\t\tdescription = $3,\n\t\t\t\tdepartment = $4,\n\t\t\t\tlevel = $5,\n\t\t\t\tstatus = $6,\n\t\t\t\tupdated_at = $7\n\t\t\tWHERE id = $1\n\t\t\tRETURNING id, name, description, department, level, status, created_at, updated_at\n\t\t`,\n      [\n        params.id,\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.department.trim(),\n        data.level || 1,\n        data.status || 'active',\n        new Date(),\n      ],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직급을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직급 정보가 성공적으로 수정되었습니다.',\n    })\n  } catch (error: any) {\n    logger.error('Error updating position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 정보 수정에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 직급 삭제\nexport const DELETE: RequestHandler = async ({ params, url }) => {\n  try {\n    const searchParams = url.searchParams\n    const hardDelete = searchParams.get('hard') === 'true'\n\n    if (hardDelete) {\n      // 하드 삭제: 직급을 사용하는 직원이 있는지 확인\n      const employeesInPos = await query(\n        'SELECT COUNT(*) as count FROM employees WHERE position = (SELECT name FROM positions WHERE id = $1)',\n        [params.id],\n      )\n\n      if (parseInt(employeesInPos.rows[0].count) > 0) {\n        return json(\n          {\n            success: false,\n            error: '해당 직급을 가진 직원이 있어 삭제할 수 없습니다.',\n          },\n          { status: 400 },\n        )\n      }\n\n      // 하드 삭제 실행\n      const result = await query('DELETE FROM positions WHERE id = $1 RETURNING id, name', [\n        params.id,\n      ])\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '직급을 찾을 수 없습니다.',\n          },\n          { status: 404 },\n        )\n      }\n\n      return json({\n        success: true,\n        message: '직급이 완전히 삭제되었습니다.',\n      })\n    } else {\n      // 소프트 삭제: 상태를 'inactive'로 변경\n      const result = await query(\n        `\n\t\t\t\tUPDATE positions SET\n\t\t\t\t\tstatus = 'inactive',\n\t\t\t\t\tupdated_at = $2\n\t\t\t\tWHERE id = $1\n\t\t\t\tRETURNING id, name, status\n\t\t\t`,\n        [params.id, new Date()],\n      )\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '직급을 찾을 수 없습니다.',\n          },\n          { status: 404 },\n        )\n      }\n\n      return json({\n        success: true,\n        message: '직급이 비활성화되었습니다.',\n      })\n    }\n  } catch (error: any) {\n    logger.error('Error deleting position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 삭제에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/alerts/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-categories/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/[id]/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/[id]/approve/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/[id]/reject/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-validation/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 80,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 80,
        "endColumn": 81
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 115,
        "column": 9,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 115,
        "endColumn": 134
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 147,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 147,
        "endColumn": 117
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { BudgetConsistencyValidator, ValidationUtils } from '$lib/utils/validation'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n\n    if (!projectId) {\n      return json({ error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    logger.log(`🔍 [예산 일관성 검증] 프로젝트 ${projectId} 검증 시작`)\n\n    // 프로젝트 기본 정보 및 예산 조회\n    const [project, budgets] = await Promise.all([\n      ValidationUtils.getProjectInfo(projectId),\n      ValidationUtils.getProjectBudgets(projectId),\n    ])\n\n    logger.log(`📋 프로젝트: ${project.title}`)\n\n    // 예산 일관성 검증\n    const validation = BudgetConsistencyValidator.validateBudgetConsistency(project, budgets)\n\n    const validationResults = [\n      {\n        validationType: 'budget_consistency',\n        validation,\n        details: {\n          projectTotalBudget: parseFloat(project.budget_total) || 0,\n          totalBudgetFromBudgets: budgets.reduce(\n            (sum, budget) => sum + (parseFloat(budget.total_budget) || 0),\n            0,\n          ),\n          budgetBreakdown: budgets.map((budget) => ({\n            periodNumber: budget.period_number,\n            fiscalYear: budget.period_number,\n            totalBudget: parseFloat(budget.total_budget) || 0,\n            personnelCost: parseFloat(budget.personnel_cost) || 0,\n            researchMaterialCost: parseFloat(budget.research_material_cost) || 0,\n            researchActivityCost: parseFloat(budget.research_activity_cost) || 0,\n            indirectCost: parseFloat(budget.indirect_cost) || 0,\n          })),\n        },\n      },\n    ]\n\n    // 전체 검증 결과 생성\n    const overallValidation = ValidationUtils.createOverallValidation(validationResults)\n\n    logger.log(`✅ [예산 일관성 검증] 완료 - ${validation.isValid ? '✅ 통과' : '❌ 실패'}`)\n\n    return json(\n      ValidationUtils.createValidationResponse(\n        projectId,\n        project.title,\n        validationResults,\n        overallValidation,\n      ),\n    )\n  } catch (error) {\n    logger.error('Budget validation error:', error)\n    return json(\n      ValidationUtils.createErrorResponse(error, '예산 일관성 검증 중 오류가 발생했습니다.'),\n      { status: 500 },\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { projectId, autoFix = false } = await request.json()\n\n    if (!projectId) {\n      return json({ error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    logger.log(`🔧 [예산 일관성 검증] 프로젝트 ${projectId} ${autoFix ? '자동 수정' : '검증'} 시작`)\n\n    // 프로젝트 기본 정보 및 예산 조회\n    const [project, budgets] = await Promise.all([\n      ValidationUtils.getProjectInfo(projectId),\n      ValidationUtils.getProjectBudgets(projectId),\n    ])\n\n    logger.log(`📋 프로젝트: ${project.title}`)\n\n    // 예산 일관성 검증\n    const validation = BudgetConsistencyValidator.validateBudgetConsistency(project, budgets)\n\n    const fixes = []\n\n    // 자동 수정이 활성화되고 불일치가 있는 경우\n    if (autoFix && !validation.isValid) {\n      const totalBudgetFromBudgets = budgets.reduce(\n        (sum, budget) => sum + (parseFloat(budget.total_budget) || 0),\n        0,\n      )\n\n      // 프로젝트 총 예산을 연차별 예산 합계로 업데이트\n      await ValidationUtils.pool.query('UPDATE projects SET budget_total = $1 WHERE id = $2', [\n        totalBudgetFromBudgets,\n        projectId,\n      ])\n\n      fixes.push({\n        action: 'project_budget_total_updated',\n        oldValue: parseFloat(project.budget_total) || 0,\n        newValue: totalBudgetFromBudgets,\n      })\n\n      logger.log(\n        `🔧 프로젝트 총 예산 수정: ${(parseFloat(project.budget_total) || 0).toLocaleString()}원 → ${totalBudgetFromBudgets.toLocaleString()}원`,\n      )\n    }\n\n    const validationResults = [\n      {\n        validationType: 'budget_consistency',\n        validation,\n        details: {\n          projectTotalBudget: parseFloat(project.budget_total) || 0,\n          totalBudgetFromBudgets: budgets.reduce(\n            (sum, budget) => sum + (parseFloat(budget.total_budget) || 0),\n            0,\n          ),\n          budgetBreakdown: budgets.map((budget) => ({\n            periodNumber: budget.period_number,\n            fiscalYear: budget.period_number,\n            totalBudget: parseFloat(budget.total_budget) || 0,\n            personnelCost: parseFloat(budget.personnel_cost) || 0,\n            researchMaterialCost: parseFloat(budget.research_material_cost) || 0,\n            researchActivityCost: parseFloat(budget.research_activity_cost) || 0,\n            indirectCost: parseFloat(budget.indirect_cost) || 0,\n          })),\n        },\n        fixed: autoFix && !validation.isValid,\n      },\n    ]\n\n    // 전체 검증 결과 생성\n    const overallValidation = ValidationUtils.createOverallValidation(validationResults)\n\n    logger.log(\n      `✅ [예산 일관성 검증] 완료 - ${validation.isValid ? '✅ 통과' : '❌ 실패'}${fixes.length > 0 ? `, ${fixes.length}개 수정` : ''}`,\n    )\n\n    return json({\n      ...ValidationUtils.createValidationResponse(\n        projectId,\n        project.title,\n        validationResults,\n        overallValidation,\n      ),\n      fixes: fixes.length > 0 ? fixes : undefined,\n    })\n  } catch (error) {\n    logger.error('Budget validation error:', error)\n    return json(\n      ValidationUtils.createErrorResponse(error, '예산 일관성 검증 중 오류가 발생했습니다.'),\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budgets/summary-by-year/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/comprehensive-validation/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 23,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 23,
        "endColumn": 87
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [901, 904], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [901, 904], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 28,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 28,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [928, 931], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [928, 931], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 29,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 29,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [956, 959], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [956, 959], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 233,
        "column": 49,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 233,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7454, 7457], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7454, 7457], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 233,
        "column": 81,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 233,
        "endColumn": 84,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7486, 7489], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7486, 7489], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 234,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 234,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7551, 7554], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7551, 7554], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 234,
        "column": 79,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 234,
        "endColumn": 82,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7583, 7586], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7583, 7586], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 242,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 242,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7780, 7783], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7780, 7783], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 243,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 243,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [7830, 7833], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [7830, 7833], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 250,
        "column": 23,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 250,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8020, 8023], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8020, 8023], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 251,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 251,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8070, 8073], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8070, 8073], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 285,
        "column": 27,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 285,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8935, 8938], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8935, 8938], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 12,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { AICodingValidator } from '$lib/utils/ai-coding-guidelines'\nimport { toUTC } from '$lib/utils/date-handler'\nimport { formatEmployeeName } from '$lib/utils/format'\nimport { logger } from '$lib/utils/logger'\nimport { SchemaValidator } from '$lib/utils/schema-validation'\nimport {\n  BudgetConsistencyValidator,\n  EmploymentPeriodValidator,\n  ParticipationRateValidator,\n  PersonnelCostValidator,\n  UsageRateValidator,\n  ValidationUtils,\n} from '$lib/utils/validation'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n    const validationScope = url.searchParams.get('scope') || 'all'\n\n    logger.log(\n      `🔍 [종합 검증] ${validationScope} 검증 시작${projectId ? ` - 프로젝트: ${projectId}` : ''}`,\n    )\n\n    const results = {\n      schema: null as any,\n      coding: null as any,\n      project: null as any,\n      summary: {\n        total: 0,\n        valid: 0,\n        invalid: 0,\n        issues: [] as string[],\n      },\n    }\n\n    // 1. 스키마 검증\n    if (validationScope === 'all' || validationScope === 'schema') {\n      logger.log('📋 [스키마 검증] 시작')\n      try {\n        const [schemaResults, namingResults] = await Promise.all([\n          SchemaValidator.validateDatabaseSchema(),\n          SchemaValidator.validateColumnNamingConsistency(),\n        ])\n\n        results.schema = {\n          database: schemaResults,\n          naming: namingResults,\n          summary: {\n            total: schemaResults.length + namingResults.length,\n            valid:\n              schemaResults.filter((r) => r.isValid).length +\n              namingResults.filter((r) => r.isValid).length,\n            invalid:\n              schemaResults.filter((r) => !r.isValid).length +\n              namingResults.filter((r) => !r.isValid).length,\n          },\n        }\n      } catch (error) {\n        logger.error('스키마 검증 실패:', error)\n        results.schema = { error: '스키마 검증 실패' }\n      }\n    }\n\n    // 2. 코딩 가이드라인 검증\n    if (validationScope === 'all' || validationScope === 'coding') {\n      logger.log('📝 [코딩 가이드라인 검증] 시작')\n      try {\n        const guidelines = AICodingValidator.getGuidelines()\n        const validationRules = AICodingValidator.getValidationRules()\n\n        // 샘플 검증 실행\n        const sampleValidations = [\n          {\n            type: 'column',\n            name: 'user_id',\n            result: AICodingValidator.validateColumnName('user_id'),\n          },\n          {\n            type: 'column',\n            name: 'userId',\n            result: AICodingValidator.validateColumnName('userId'),\n          },\n          {\n            type: 'variable',\n            name: 'projectId',\n            result: AICodingValidator.validateVariableName('projectId'),\n          },\n          {\n            type: 'variable',\n            name: 'project_id',\n            result: AICodingValidator.validateVariableName('project_id'),\n          },\n          {\n            type: 'function',\n            name: 'validateProject',\n            result: AICodingValidator.validateFunctionName('validateProject'),\n          },\n          {\n            type: 'function',\n            name: 'project_validate',\n            result: AICodingValidator.validateFunctionName('project_validate'),\n          },\n          {\n            type: 'class',\n            name: 'ValidationUtils',\n            result: AICodingValidator.validateClassName('ValidationUtils'),\n          },\n          {\n            type: 'class',\n            name: 'validation_utils',\n            result: AICodingValidator.validateClassName('validation_utils'),\n          },\n        ]\n\n        results.coding = {\n          guidelines,\n          validationRules,\n          sampleValidations,\n          summary: {\n            total: sampleValidations.length,\n            valid: sampleValidations.filter((v) => v.result.isValid).length,\n            invalid: sampleValidations.filter((v) => !v.result.isValid).length,\n          },\n        }\n      } catch (error) {\n        logger.error('코딩 가이드라인 검증 실패:', error)\n        results.coding = { error: '코딩 가이드라인 검증 실패' }\n      }\n    }\n\n    // 3. 프로젝트 검증 (프로젝트 ID가 있는 경우)\n    if (projectId && (validationScope === 'all' || validationScope === 'project')) {\n      logger.log(`📊 [프로젝트 검증] 시작 - 프로젝트: ${projectId}`)\n      try {\n        const project = await ValidationUtils.getProjectInfo(projectId)\n        const [budgets, members, evidenceItems] = await Promise.all([\n          ValidationUtils.getProjectBudgets(projectId),\n          ValidationUtils.getProjectMembers(projectId),\n          ValidationUtils.getEvidenceItems(projectId),\n        ])\n\n        // 각 검증 실행\n        const validations = []\n\n        // 인건비 검증\n        for (const budget of budgets) {\n          const actualPersonnelCost = PersonnelCostValidator.calculateActualPersonnelCost(\n            members,\n            budget,\n          )\n          const validation = PersonnelCostValidator.validatePersonnelCost(\n            budget,\n            actualPersonnelCost,\n          )\n          validations.push({\n            type: 'personnel_cost',\n            period: budget.period_number,\n            validation,\n          })\n        }\n\n        // 예산 일관성 검증\n        const budgetValidation = BudgetConsistencyValidator.validateBudgetConsistency(\n          project,\n          budgets,\n        )\n        validations.push({\n          type: 'budget_consistency',\n          validation: budgetValidation,\n        })\n\n        // 재직 기간 검증\n        for (const member of members) {\n          const validation = EmploymentPeriodValidator.validateMemberEmploymentPeriod(\n            member,\n            project,\n          )\n          validations.push({\n            type: 'employment_period',\n            member: formatEmployeeName(member),\n            validation,\n          })\n        }\n\n        // 참여율 검증\n        const participationValidation =\n          ParticipationRateValidator.validateParticipationRate(members)\n        validations.push({\n          type: 'participation_rate',\n          validation: participationValidation,\n        })\n\n        // 사용률 검증\n        for (const budget of budgets) {\n          const validation = UsageRateValidator.validateUsageRate(budget, evidenceItems)\n          validations.push({\n            type: 'usage_rate',\n            period: budget.period_number,\n            validation,\n          })\n        }\n\n        results.project = {\n          projectId,\n          projectTitle: project.title,\n          validations,\n          summary: {\n            total: validations.length,\n            valid: validations.filter((v) => v.validation.isValid).length,\n            invalid: validations.filter((v) => !v.validation.isValid).length,\n          },\n        }\n      } catch (error) {\n        logger.error('프로젝트 검증 실패:', error)\n        results.project = { error: '프로젝트 검증 실패' }\n      }\n    }\n\n    // 전체 요약 계산\n    const allResults = [results.schema, results.coding, results.project].filter(\n      (r) => r && !r.error,\n    )\n    results.summary.total = allResults.reduce((sum, r) => sum + (r.summary?.total || 0), 0)\n    results.summary.valid = allResults.reduce((sum, r) => sum + (r.summary?.valid || 0), 0)\n    results.summary.invalid = allResults.reduce((sum, r) => sum + (r.summary?.invalid || 0), 0)\n\n    // 이슈 수집\n    if (results.schema && !results.schema.error) {\n      results.summary.issues.push(\n        ...[\n          ...results.schema.database.filter((r: any) => !r.isValid).flatMap((r: any) => r.issues),\n          ...results.schema.naming.filter((r: any) => !r.isValid).flatMap((r: any) => r.issues),\n        ],\n      )\n    }\n\n    if (results.coding && !results.coding.error) {\n      results.summary.issues.push(\n        ...results.coding.sampleValidations\n          .filter((v: any) => !v.result.isValid)\n          .flatMap((v: any) => v.result.issues),\n      )\n    }\n\n    if (results.project && !results.project.error) {\n      results.summary.issues.push(\n        ...results.project.validations\n          .filter((v: any) => !v.validation.isValid)\n          .map((v: any) => v.validation.message),\n      )\n    }\n\n    logger.log(\n      `✅ [종합 검증] 완료 - ${results.summary.valid}/${results.summary.total}개 통과, ${results.summary.invalid}개 문제`,\n    )\n\n    return json({\n      success: true,\n      validationScope,\n      projectId: projectId || null,\n      results,\n      generatedAt: toUTC(new Date()),\n    })\n  } catch (error) {\n    logger.error('Comprehensive validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '종합 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { validationType, name, code, language, tableName, query } = await request.json()\n\n    logger.log(`🔍 [종합 검증] ${validationType} 검증 시작`)\n\n    let validationResult: any = null\n\n    // 검증 타입별 처리\n    switch (validationType) {\n      case 'column':\n        validationResult = AICodingValidator.validateColumnName(name)\n        break\n      case 'variable':\n        validationResult = AICodingValidator.validateVariableName(name)\n        break\n      case 'function':\n        validationResult = AICodingValidator.validateFunctionName(name)\n        break\n      case 'class':\n        validationResult = AICodingValidator.validateClassName(name)\n        break\n      case 'sql':\n        validationResult = AICodingValidator.validateSQLQuery(query)\n        break\n      case 'code':\n        validationResult = AICodingValidator.validateCode(code, language)\n        break\n      case 'query-columns':\n        if (!query || !tableName) {\n          return json({ error: '쿼리와 테이블명이 필요합니다.' }, { status: 400 })\n        }\n        validationResult = SchemaValidator.validateQueryColumns(query, tableName)\n        break\n      default:\n        return json({ error: '지원하지 않는 검증 타입입니다.' }, { status: 400 })\n    }\n\n    logger.log(`✅ [종합 검증] 완료 - ${validationResult.isValid ? '통과' : '실패'}`)\n\n    return json({\n      success: true,\n      validationType,\n      name: name || null,\n      code: code || null,\n      language: language || null,\n      tableName: tableName || null,\n      query: query || null,\n      validationResult,\n      generatedAt: toUTC(new Date()),\n    })\n  } catch (error) {\n    logger.error('Comprehensive validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '종합 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/create-project/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 167,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 167,
        "endColumn": 120
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 201,
        "column": 9,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 201,
        "endColumn": 91
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 210,
        "column": 38,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 210,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6242, 6245], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6242, 6245], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 237,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 237,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6932, 6935], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6932, 6935], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 313,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 313,
        "endColumn": 87
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 320,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 320,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10190, 10193], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10190, 10193], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 360,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 360,
        "endColumn": 85
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 367,
        "column": 44,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 367,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [11514, 11517], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [11514, 11517], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 446,
        "column": 47,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 446,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [14109, 14112], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [14109, 14112], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 483,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 483,
        "endColumn": 125
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { formatDateForAPI } from '$lib/utils/date-calculator'\nimport { logger } from '$lib/utils/logger'\nimport { calculateBudgetAllocation } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport { Pool } from 'pg'\nimport type { RequestHandler } from './$types'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false },\n})\n\ninterface ProjectCreationRequest {\n  name: string\n  description: string\n  startDate: string\n  endDate: string\n  totalBudget: number\n  annualPeriods: {\n    periodNumber: number\n    startDate: string\n    endDate: string\n    budget: number\n  }[]\n  budgetCategories: {\n    name: string\n    percentage: number\n  }[]\n  members: {\n    employeeId: string\n    role: string\n    participationRate: number\n    monthlyAmount: number\n    startDate: string\n    endDate: string\n  }[]\n  evidenceSettings: {\n    autoGenerate: boolean\n    namingConvention: string\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  const client = await pool.connect()\n\n  try {\n    logger.log('🚀 [1단계] 프로젝트 생성 요청 시작')\n\n    const data: ProjectCreationRequest = await request.json()\n    logger.log('📋 [1단계] 요청 데이터:', JSON.stringify(data, null, 2))\n\n    // 입력 데이터 검증\n    logger.log('🔍 [2단계] 입력 데이터 검증 시작')\n    const validationResult = await validateProjectData(data)\n    if (!validationResult.isValid) {\n      logger.log('❌ [2단계] 검증 실패:', validationResult.errors)\n      return json({ success: false, errors: validationResult.errors }, { status: 400 })\n    }\n    logger.log('✅ [2단계] 입력 데이터 검증 완료')\n\n    await client.query('BEGIN')\n    logger.log('🔄 [3단계] 데이터베이스 트랜잭션 시작')\n\n    // 프로젝트 생성\n    logger.log('📝 [4단계] 프로젝트 기본 정보 생성')\n    const projectId = await createProject(client, data)\n    logger.log(`✅ [4단계] 프로젝트 생성 완료 - ID: ${projectId}`)\n\n    // 연차별 예산 생성\n    logger.log('💰 [5단계] 연차별 예산 생성')\n    const budgetIds = await createProjectBudgets(client, projectId, data)\n    logger.log(`✅ [5단계] 연차별 예산 생성 완료 - ${budgetIds.length}개 연차`)\n\n    // 참여연구원 생성\n    logger.log('👥 [6단계] 참여연구원 생성')\n    const memberIds = await createProjectMembers(client, projectId, data)\n    logger.log(`✅ [6단계] 참여연구원 생성 완료 - ${memberIds.length}명`)\n\n    // 증빙 항목 자동 생성 (설정된 경우)\n    if (data.evidenceSettings.autoGenerate) {\n      logger.log('📄 [7단계] 증빙 항목 자동 생성')\n      const evidenceIds = await createEvidenceItems(client, projectId, data)\n      logger.log(`✅ [7단계] 증빙 항목 자동 생성 완료 - ${evidenceIds.length}개 항목`)\n    } else {\n      logger.log('⏭️ [7단계] 증빙 항목 자동 생성 건너뜀 (설정 비활성화)')\n    }\n\n    // 검증 로직 실행\n    logger.log('🔍 [8단계] 생성된 데이터 검증')\n    const finalValidation = await validateCreatedProject(client, projectId)\n    if (!finalValidation.isValid) {\n      logger.log('❌ [8단계] 최종 검증 실패:', finalValidation.errors)\n      await client.query('ROLLBACK')\n      return json({ success: false, errors: finalValidation.errors }, { status: 400 })\n    }\n    logger.log('✅ [8단계] 최종 검증 완료')\n\n    // 자동 검증 및 수정 실행 (일시적으로 비활성화)\n    logger.log('⏭️ [9단계] 자동 검증 단계 건너뜀 (개발 중)')\n    const autoValidationResult = {\n      success: true,\n      results: [],\n      errors: [],\n      fixedIssues: 0,\n    }\n\n    await client.query('COMMIT')\n    logger.log('✅ [10단계] 데이터베이스 트랜잭션 커밋 완료')\n\n    const result = {\n      success: true,\n      projectId,\n      budgetIds,\n      memberIds,\n      evidenceIds: data.evidenceSettings.autoGenerate\n        ? await createEvidenceItems(client, projectId, data)\n        : [],\n      validation: finalValidation,\n      autoValidation: autoValidationResult,\n    }\n\n    logger.log('🎉 [완료] 프로젝트 생성 성공:', result)\n    return json(result)\n  } catch (error) {\n    logger.error('💥 [오류] 프로젝트 생성 중 오류 발생:', error)\n    await client.query('ROLLBACK')\n    return json({ success: false, error: error.message }, { status: 500 })\n  } finally {\n    client.release()\n  }\n}\n\n// 입력 데이터 검증 함수\nasync function validateProjectData(data: ProjectCreationRequest) {\n  const errors: string[] = []\n\n  logger.log('🔍 [검증] 프로젝트 기본 정보 검증')\n  if (!data.name || data.name.trim().length === 0) {\n    errors.push('프로젝트명은 필수입니다.')\n  }\n\n  if (!data.startDate || !data.endDate) {\n    errors.push('프로젝트 시작일과 종료일은 필수입니다.')\n  }\n\n  // UTC 기준으로 날짜 비교\n  const startUtc = new Date(data.startDate + 'T00:00:00.000Z')\n  const endUtc = new Date(data.endDate + 'T23:59:59.999Z')\n  if (startUtc >= endUtc) {\n    errors.push('프로젝트 종료일은 시작일보다 늦어야 합니다.')\n  }\n\n  logger.log('🔍 [검증] 연차별 예산 검증')\n  if (!data.annualPeriods || data.annualPeriods.length === 0) {\n    errors.push('연차별 예산 정보는 필수입니다.')\n  }\n\n  // 연차별 예산 합계 검증\n  const totalBudgetFromPeriods = data.annualPeriods.reduce((sum, period) => sum + period.budget, 0)\n  if (Math.abs(totalBudgetFromPeriods - data.totalBudget) > 1000) {\n    // 1000원 허용 오차\n    errors.push(\n      `연차별 예산 합계(${totalBudgetFromPeriods.toLocaleString()}원)와 총 예산(${data.totalBudget.toLocaleString()}원)이 일치하지 않습니다.`,\n    )\n  }\n\n  logger.log('🔍 [검증] 참여연구원 검증')\n  if (!data.members || data.members.length === 0) {\n    errors.push('참여연구원 정보는 필수입니다.')\n  }\n\n  // 참여연구원 참여율 검증\n  for (const member of data.members) {\n    if (member.participationRate <= 0 || member.participationRate > 100) {\n      errors.push(`${member.employeeId}의 참여율은 0% 초과 100% 이하여야 합니다.`)\n    }\n  }\n\n  // 연차별 참여연구원 참여율 합계 검증\n  for (const period of data.annualPeriods) {\n    // UTC+9 타임존 적용된 날짜 비교\n    const periodStartUtc = new Date(period.startDate + 'T00:00:00.000Z')\n    const periodEndUtc = new Date(period.endDate + 'T23:59:59.999Z')\n\n    const periodMembers = data.members.filter((member) => {\n      const memberStartUtc = new Date(member.startDate + 'T00:00:00.000Z')\n      const memberEndUtc = new Date(member.endDate + 'T23:59:59.999Z')\n      return memberStartUtc <= periodEndUtc && memberEndUtc >= periodStartUtc\n    })\n\n    const totalParticipationRate = periodMembers.reduce(\n      (sum, member) => sum + member.participationRate,\n      0,\n    )\n    if (totalParticipationRate > 100) {\n      errors.push(\n        `${period.periodNumber}차년도 참여연구원 참여율 합계(${totalParticipationRate}%)가 100%를 초과합니다.`,\n      )\n    }\n  }\n\n  return { isValid: errors.length === 0, errors }\n}\n\n// 프로젝트 생성 함수\nasync function createProject(client: any, data: ProjectCreationRequest) {\n  logger.log('📝 [생성] 프로젝트 기본 정보 삽입')\n\n  const projectQuery = `\n    INSERT INTO projects (\n      code, title, description, start_date, end_date, budget_total, \n      status, created_at, updated_at\n    ) VALUES ($1, $2, $3, $4, $5, $6, 'active', NOW(), NOW())\n    RETURNING id\n  `\n\n  const result = await client.query(projectQuery, [\n    `PRJ-${Date.now()}`, // 프로젝트 코드 자동 생성\n    data.name,\n    data.description,\n    data.startDate,\n    data.endDate,\n    data.totalBudget,\n  ])\n\n  const projectId = result.rows[0].id\n  logger.log(`📝 [생성] 프로젝트 생성 완료 - ID: ${projectId}`)\n\n  return projectId\n}\n\n// 연차별 예산 생성 함수\nasync function createProjectBudgets(client: any, projectId: string, data: ProjectCreationRequest) {\n  logger.log('💰 [생성] 연차별 예산 삽입 시작')\n\n  const budgetIds: string[] = []\n\n  for (const period of data.annualPeriods) {\n    logger.log(`💰 [생성] ${period.periodNumber}차년도 예산 생성`)\n\n    // 예산 항목별 배분 계산 - 중앙화된 함수 사용\n    const personnelCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find((c) => c.name === '인건비')?.percentage || 0,\n    )\n    const _materialCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find((c) => c.name === '재료비')?.percentage || 0,\n    )\n    const _activityCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find((c) => c.name === '연구활동비')?.percentage || 0,\n    )\n    const indirectCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find((c) => c.name === '간접비')?.percentage || 0,\n    )\n\n    const budgetQuery = `\n      INSERT INTO project_budgets (\n        project_id, period_number, start_date, end_date,\n        personnel_cost, research_material_cost, research_activity_cost, research_stipend, indirect_cost,\n        personnel_cost_cash, personnel_cost_in_kind,\n        research_material_cost_cash, research_material_cost_in_kind,\n        research_activity_cost_cash, research_activity_cost_in_kind,\n        research_stipend_cash, research_stipend_in_kind,\n        indirect_cost_cash, indirect_cost_in_kind,\n        government_funding_amount, company_cash_amount, company_in_kind_amount,\n        created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, NOW(), NOW())\n      RETURNING id\n    `\n\n    // 각 비목의 총합 계산 (현금 + 현물)\n    const _personnelCostTotal = (period.personnelCostCash || 0) + (period.personnelCostInKind || 0)\n    const researchMaterialCost =\n      (period.researchMaterialCostCash || 0) + (period.researchMaterialCostInKind || 0)\n    const researchActivityCost =\n      (period.researchActivityCostCash || 0) + (period.researchActivityCostInKind || 0)\n    const researchStipend = (period.researchStipendCash || 0) + (period.researchStipendInKind || 0)\n    const _indirectCostTotal = (period.indirectCostCash || 0) + (period.indirectCostInKind || 0)\n\n    const result = await client.query(budgetQuery, [\n      projectId,\n      period.periodNumber,\n      period.startDate,\n      period.endDate,\n      personnelCost,\n      researchMaterialCost,\n      researchActivityCost,\n      researchStipend,\n      indirectCost,\n      period.personnelCostCash || 0,\n      period.personnelCostInKind || 0,\n      period.researchMaterialCostCash || 0,\n      period.researchMaterialCostInKind || 0,\n      period.researchActivityCostCash || 0,\n      period.researchActivityCostInKind || 0,\n      period.researchStipendCash || 0,\n      period.researchStipendInKind || 0,\n      period.indirectCostCash || 0,\n      period.indirectCostInKind || 0,\n      period.governmentFundingAmount || 0,\n      period.companyCashAmount || 0,\n      period.companyInKindAmount || 0,\n    ])\n\n    budgetIds.push(result.rows[0].id)\n    logger.log(`💰 [생성] ${period.periodNumber}차년도 예산 생성 완료 - ID: ${result.rows[0].id}`)\n  }\n\n  return budgetIds\n}\n\n// 참여연구원 생성 함수\nasync function createProjectMembers(client: any, projectId: string, data: ProjectCreationRequest) {\n  logger.log('👥 [생성] 참여연구원 삽입 시작')\n\n  const memberIds: string[] = []\n\n  for (const member of data.members) {\n    logger.log(`👥 [생성] 참여연구원 ${member.employeeId} 등록`)\n\n    // 참여연구원 날짜를 UTC 기준으로 변환하여 데이터베이스에 저장\n    const formatMemberDateToUtc = (dateStr: string) => {\n      if (!dateStr) return null\n\n      try {\n        // 중앙화된 날짜 변환 함수 사용 (UTC+9 타임존 적용)\n        return formatDateForAPI(dateStr)\n      } catch (error) {\n        logger.error('Date conversion error:', error)\n        return null\n      }\n    }\n\n    const memberQuery = `\n      INSERT INTO project_members (\n        project_id, employee_id, role, participation_rate, monthly_amount,\n        start_date, end_date, created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())\n      RETURNING id\n    `\n\n    const result = await client.query(memberQuery, [\n      projectId,\n      member.employeeId,\n      member.role,\n      member.participationRate,\n      member.monthlyAmount,\n      formatMemberDateToUtc(member.startDate),\n      formatMemberDateToUtc(member.endDate),\n    ])\n\n    memberIds.push(result.rows[0].id)\n    logger.log(`👥 [생성] 참여연구원 ${member.employeeId} 등록 완료 - ID: ${result.rows[0].id}`)\n  }\n\n  return memberIds\n}\n\n// 증빙 항목 자동 생성 함수\nasync function createEvidenceItems(client: any, projectId: string, data: ProjectCreationRequest) {\n  logger.log('📄 [생성] 증빙 항목 자동 생성 시작')\n\n  const evidenceIds: string[] = []\n\n  // 각 연차별로 증빙 항목 생성\n  for (const period of data.annualPeriods) {\n    logger.log(`📄 [생성] ${period.periodNumber}차년도 증빙 항목 생성`)\n\n    // 해당 연차의 예산 ID 조회\n    const budgetResult = await client.query(\n      'SELECT id FROM project_budgets WHERE project_id = $1 AND period_number = $2',\n      [projectId, period.periodNumber],\n    )\n\n    if (budgetResult.rows.length === 0) {\n      logger.log(`❌ [생성] ${period.periodNumber}차년도 예산을 찾을 수 없습니다.`)\n      continue\n    }\n\n    const projectBudgetId = budgetResult.rows[0].id\n\n    // 예산 항목별로 증빙 항목 생성\n    for (const category of data.budgetCategories) {\n      if (category.percentage > 0) {\n        // 카테고리 ID 조회 (기본 카테고리 사용)\n        const categoryResult = await client.query(\n          'SELECT id FROM evidence_categories WHERE name = $1 LIMIT 1',\n          [category.name],\n        )\n\n        let categoryId = null\n        if (categoryResult.rows.length > 0) {\n          categoryId = categoryResult.rows[0].id\n        } else {\n          // 카테고리가 없으면 기본 카테고리 생성\n          const createCategoryResult = await client.query(\n            'INSERT INTO evidence_categories (name, description) VALUES ($1, $2) RETURNING id',\n            [category.name, `${category.name} 증빙 항목`],\n          )\n          categoryId = createCategoryResult.rows[0].id\n        }\n\n        const evidenceQuery = `\n          INSERT INTO evidence_items (\n            project_budget_id, category_id, name, budget_amount, spent_amount,\n            status, due_date, created_at, updated_at\n          ) VALUES ($1, $2, $3, $4, 0, 'planned', $5, NOW(), NOW())\n          RETURNING id\n        `\n\n        // UTC+9 타임존 적용된 연차 종료 후 1개월 계산\n        const periodEndUtc = new Date(period.endDate + 'T23:59:59.999Z')\n        const dueDate = new Date(periodEndUtc)\n        dueDate.setUTCMonth(dueDate.getUTCMonth() + 1) // 연차 종료 후 1개월\n\n        // 중앙화된 날짜 변환 함수 사용 (UTC+9 타임존 적용)\n        const formattedDueDate = formatDateForAPI(dueDate)\n\n        const result = await client.query(evidenceQuery, [\n          projectBudgetId,\n          categoryId,\n          `${category.name} 증빙`,\n          calculateBudgetAllocation(period.budget, category.percentage),\n          formattedDueDate,\n        ])\n\n        evidenceIds.push(result.rows[0].id)\n        logger.log(\n          `📄 [생성] ${period.periodNumber}차년도 ${category.name} 증빙 항목 생성 완료 - ID: ${result.rows[0].id}`,\n        )\n      }\n    }\n  }\n\n  return evidenceIds\n}\n\n// 생성된 프로젝트 검증 함수\nasync function validateCreatedProject(client: any, projectId: string) {\n  logger.log('🔍 [검증] 생성된 프로젝트 데이터 검증 시작')\n\n  const errors: string[] = []\n\n  // 프로젝트 기본 정보 확인\n  const projectResult = await client.query('SELECT * FROM projects WHERE id = $1', [projectId])\n  if (projectResult.rows.length === 0) {\n    errors.push('프로젝트가 생성되지 않았습니다.')\n  }\n\n  // 연차별 예산 확인\n  const budgetResult = await client.query(\n    'SELECT * FROM project_budgets WHERE project_id = $1 ORDER BY period_number',\n    [projectId],\n  )\n  if (budgetResult.rows.length === 0) {\n    errors.push('연차별 예산이 생성되지 않았습니다.')\n  }\n\n  // 참여연구원 확인\n  const memberResult = await client.query('SELECT * FROM project_members WHERE project_id = $1', [\n    projectId,\n  ])\n  if (memberResult.rows.length === 0) {\n    errors.push('참여연구원이 등록되지 않았습니다.')\n  }\n\n  // 예산 합계 검증\n  const totalBudgetFromDB = budgetResult.rows.reduce(\n    (sum, budget) => sum + parseFloat(budget.total_budget),\n    0,\n  )\n  const projectBudget = parseFloat(projectResult.rows[0].budget_total)\n\n  if (Math.abs(totalBudgetFromDB - projectBudget) > 1000) {\n    errors.push(\n      `데이터베이스의 연차별 예산 합계(${totalBudgetFromDB.toLocaleString()}원)와 프로젝트 총 예산(${projectBudget.toLocaleString()}원)이 일치하지 않습니다.`,\n    )\n  }\n\n  logger.log('🔍 [검증] 생성된 프로젝트 데이터 검증 완료')\n\n  return { isValid: errors.length === 0, errors }\n}\n\n// 자동 검증 및 수정 실행 함수\nasync function _runAutoValidationAndFix(projectId: string) {\n  try {\n    logger.log('🛡️ [자동검증] 프로젝트 검증 룰 실행 시작')\n\n    // 간단한 검증 API 호출\n    const response = await fetch(`http://localhost:5173/api/project-management/simple-validation`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        projectId: projectId,\n      }),\n    })\n\n    if (!response.ok) {\n      throw new Error(`검증 API 호출 실패: ${response.status}`)\n    }\n\n    const result = await response.json()\n    logger.log('🛡️ [자동검증] 검증 룰 실행 완료:', result)\n\n    return result\n  } catch (error) {\n    logger.error('💥 [자동검증] 오류:', error)\n    return {\n      success: false,\n      errors: [error instanceof Error ? error.message : '알 수 없는 오류'],\n      fixedIssues: 0,\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/employees/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/employees/[id]/contract/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-categories/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-documents/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-items/[id]/update-name/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-items/validate-employment/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 112,
        "column": 17,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 112,
        "endColumn": 158
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 118,
        "column": 17,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 118,
        "endColumn": 158
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { formatDateForDisplay, toUTC } from '$lib/utils/date-handler'\nimport { formatEmployeeName } from '$lib/utils/format'\nimport { logger } from '$lib/utils/logger'\nimport { json } from '@sveltejs/kit'\nimport { Pool } from 'pg'\nimport type { RequestHandler } from './$types'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false },\n})\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { assigneeId, dueDate, projectBudgetId } = await request.json()\n\n    if (!assigneeId || !dueDate || !projectBudgetId) {\n      return json({ error: '담당자 ID, 기한, 프로젝트 예산 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    // 담당자의 재직 정보 조회\n    const employeeResult = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tid,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\thire_date,\n\t\t\t\ttermination_date,\n\t\t\t\tstatus\n\t\t\tFROM employees \n\t\t\tWHERE id = $1\n\t\t`,\n      [assigneeId],\n    )\n\n    if (employeeResult.rows.length === 0) {\n      return json({\n        success: false,\n        error: 'EMPLOYEE_NOT_FOUND',\n        message: '담당 직원을 찾을 수 없습니다.',\n      })\n    }\n\n    const employee = employeeResult.rows[0]\n    const dueDateObj = new Date(dueDate)\n    const hireDate = employee.hire_date ? new Date(employee.hire_date) : null\n    const terminationDate = employee.termination_date ? new Date(employee.termination_date) : null\n\n    // 프로젝트 예산 기간 조회\n    const budgetResult = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tstart_date,\n\t\t\t\tend_date,\n\t\t\t\tperiod_number\n\t\t\tFROM project_budgets \n\t\t\tWHERE id = $1\n\t\t`,\n      [projectBudgetId],\n    )\n\n    if (budgetResult.rows.length === 0) {\n      return json({\n        success: false,\n        error: 'BUDGET_NOT_FOUND',\n        message: '프로젝트 예산 정보를 찾을 수 없습니다.',\n      })\n    }\n\n    const budget = budgetResult.rows[0]\n    const periodStartDate = new Date(budget.start_date)\n    const periodEndDate = new Date(budget.end_date)\n\n    // 재직 기간 검증\n    let isValid = true\n    let reason = 'VALID'\n    let message = '재직 기간이 유효합니다.'\n    const warnings = []\n\n    // 1. 퇴사한 직원인지 확인\n    if (employee.status === 'terminated' || terminationDate) {\n      if (terminationDate && dueDateObj > terminationDate) {\n        isValid = false\n        reason = 'TERMINATED_BEFORE_DUE_DATE'\n        message = `퇴사일(${formatDateForDisplay(toUTC(terminationDate), 'KOREAN')}) 이후에 인건비를 집행할 수 없습니다.`\n      }\n    }\n\n    // 2. 입사 전에 인건비가 집행되었는지 확인\n    if (hireDate && dueDateObj < hireDate) {\n      isValid = false\n      reason = 'HIRED_AFTER_DUE_DATE'\n      message = `입사일(${formatDateForDisplay(toUTC(hireDate), 'KOREAN')}) 이전에 인건비를 집행할 수 없습니다.`\n    }\n\n    // 3. 현재 비활성 상태인 직원인지 확인\n    if (employee.status === 'inactive') {\n      isValid = false\n      reason = 'INACTIVE_EMPLOYEE'\n      message = '비활성 상태인 직원에게 인건비를 집행할 수 없습니다.'\n    }\n\n    // 4. 프로젝트 기간과 재직 기간이 겹치는지 확인\n    if (hireDate && periodEndDate < hireDate) {\n      isValid = false\n      reason = 'HIRED_AFTER_PROJECT_PERIOD'\n      message = `프로젝트 기간(${formatDateForDisplay(toUTC(periodStartDate), 'KOREAN')} ~ ${formatDateForDisplay(toUTC(periodEndDate), 'KOREAN')}) 이후에 입사한 직원입니다.`\n    }\n\n    if (terminationDate && periodStartDate > terminationDate) {\n      isValid = false\n      reason = 'TERMINATED_BEFORE_PROJECT_PERIOD'\n      message = `프로젝트 기간(${formatDateForDisplay(toUTC(periodStartDate), 'KOREAN')} ~ ${formatDateForDisplay(toUTC(periodEndDate), 'KOREAN')}) 이전에 퇴사한 직원입니다.`\n    }\n\n    // 5. 경고사항 체크 (유효하지만 주의가 필요한 경우)\n    if (isValid) {\n      // 퇴사 예정인 직원\n      if (terminationDate && dueDateObj > terminationDate) {\n        warnings.push(\n          `퇴사 예정일(${formatDateForDisplay(toUTC(terminationDate), 'KOREAN')}) 이후의 인건비입니다.`,\n        )\n      }\n\n      // 입사한 지 얼마 안 된 직원\n      if (hireDate) {\n        const daysSinceHire = Math.floor(\n          (dueDateObj.getTime() - hireDate.getTime()) / (1000 * 60 * 60 * 24),\n        )\n        if (daysSinceHire < 30) {\n          warnings.push(`입사한 지 ${daysSinceHire}일밖에 안 된 직원입니다.`)\n        }\n      }\n    }\n\n    return json({\n      success: true,\n      validation: {\n        isValid,\n        reason,\n        message,\n        warnings,\n      },\n      employee: {\n        id: employee.id,\n        name: formatEmployeeName(employee),\n        hireDate: employee.hire_date,\n        terminationDate: employee.termination_date,\n        status: employee.status,\n      },\n      projectPeriod: {\n        startDate: budget.start_date,\n        endDate: budget.end_date,\n        periodNumber: budget.period_number,\n        fiscalYear: budget.period_number,\n      },\n      dueDate: dueDate,\n    })\n  } catch (error) {\n    logger.error('Employment validation error:', error)\n    return json(\n      {\n        success: false,\n        error: 'VALIDATION_ERROR',\n        message: '재직 기간 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-schedules/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-types/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 169,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 169,
        "endColumn": 54
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 188,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 193,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// 개별 증빙 항목 API\n// Individual Evidence Item API\n\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// 증빙 항목 상세 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 증빙 항목 상세 정보 조회\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tei.*,\n\t\t\t\tec.name as category_name,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as assignee_full_name,\n\t\t\t\tpb.period_number,\n\t\t\t\tpb.personnel_cost_cash,\n\t\t\t\tpb.personnel_cost_in_kind,\n\t\t\t\tpb.research_material_cost_cash,\n\t\t\t\tpb.research_material_cost_in_kind,\n\t\t\t\tpb.research_activity_cost_cash,\n\t\t\t\tpb.research_activity_cost_in_kind,\n\t\t\t\tpb.indirect_cost_cash,\n\t\t\t\tpb.indirect_cost_in_kind\n\t\t\tFROM evidence_items ei\n\t\t\tJOIN evidence_categories ec ON ei.category_id = ec.id\n\t\t\tLEFT JOIN employees e ON ei.assignee_id = e.id\n\t\t\tLEFT JOIN project_budgets pb ON ei.project_budget_id = pb.id\n\t\t\tWHERE ei.id = $1\n\t\t`,\n      [id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '증빙 항목을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    const evidenceItem = result.rows[0]\n\n    // 증빙 서류 목록 조회\n    const documentsResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\ted.*,\n\t\t\t\tuploader.first_name || ' ' || uploader.last_name as uploader_name,\n\t\t\t\treviewer.first_name || ' ' || reviewer.last_name as reviewer_name\n\t\t\tFROM evidence_documents ed\n\t\t\tLEFT JOIN employees uploader ON ed.uploader_id = uploader.id\n\t\t\tLEFT JOIN employees reviewer ON ed.reviewer_id = reviewer.id\n\t\t\tWHERE ed.evidence_item_id = $1\n\t\t\tORDER BY ed.upload_date DESC\n\t\t`,\n      [id],\n    )\n\n    // 증빙 일정 목록 조회\n    const schedulesResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tes.*,\n\t\t\t\tCONCAT(assignee.last_name, assignee.first_name) as assignee_name\n\t\t\tFROM evidence_schedules es\n\t\t\tLEFT JOIN employees assignee ON es.assignee_id = assignee.id\n\t\t\tWHERE es.evidence_item_id = $1\n\t\t\tORDER BY es.due_date ASC\n\t\t`,\n      [id],\n    )\n\n    // 증빙 검토 이력 조회\n    const reviewHistoryResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\terh.*,\n\t\t\t\treviewer.first_name || ' ' || reviewer.last_name as reviewer_name\n\t\t\tFROM evidence_review_history erh\n\t\t\tLEFT JOIN employees reviewer ON erh.reviewer_id = reviewer.id\n\t\t\tWHERE erh.evidence_item_id = $1\n\t\t\tORDER BY erh.reviewed_at DESC\n\t\t`,\n      [id],\n    )\n\n    return json({\n      success: true,\n      data: {\n        ...evidenceItem,\n        documents: documentsResult.rows,\n        schedules: schedulesResult.rows,\n        reviewHistory: reviewHistoryResult.rows,\n      },\n    })\n  } catch (error) {\n    logger.error('증빙 항목 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '증빙 항목 조회에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 증빙 항목 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const { id } = params\n    const data = await request.json()\n    const {\n      name,\n      description,\n      budgetAmount,\n      spentAmount,\n      assigneeId,\n      assigneeName,\n      progress,\n      status,\n      dueDate,\n      startDate,\n      endDate,\n    } = data\n\n    // 증빙 항목 존재 확인\n    const existingItem = await query('SELECT id FROM evidence_items WHERE id = $1', [id])\n    if (existingItem.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '증빙 항목을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    // 업데이트할 필드들 동적 생성\n    const updateFields = []\n    const updateValues = []\n    let paramIndex = 1\n\n    const fieldsToUpdate = {\n      name,\n      description,\n      budget_amount: budgetAmount,\n      spent_amount: spentAmount,\n      assignee_id: assigneeId,\n      assignee_name: assigneeName,\n      progress,\n      status,\n      due_date: dueDate,\n      start_date: startDate,\n      end_date: endDate,\n    }\n\n    Object.entries(fieldsToUpdate).forEach(([key, value]) => {\n      if (value !== undefined) {\n        updateFields.push(`${key} = $${paramIndex++}`)\n        updateValues.push(value)\n      }\n    })\n\n    if (updateFields.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '수정할 데이터가 없습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    updateValues.push(id) // Add id as the last parameter for WHERE clause\n\n    const result = await query(\n      `\n\t\t\tUPDATE evidence_items \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      updateValues,\n    )\n\n    const _updatedItem = result.rows[0]\n\n    // 업데이트된 증빙 항목의 상세 정보 조회\n    const detailResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tei.*,\n\t\t\t\tec.name as category_name,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as assignee_full_name,\n\t\t\t\tpb.period_number\n\t\t\tFROM evidence_items ei\n\t\t\tJOIN evidence_categories ec ON ei.category_id = ec.id\n\t\t\tLEFT JOIN employees e ON ei.assignee_id = e.id\n\t\t\tLEFT JOIN project_budgets pb ON ei.project_budget_id = pb.id\n\t\t\tWHERE ei.id = $1\n\t\t`,\n      [id],\n    )\n\n    return json({\n      success: true,\n      data: detailResult.rows[0],\n      message: '증빙 항목이 성공적으로 수정되었습니다.',\n    })\n  } catch (error) {\n    logger.error('증빙 항목 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '증빙 항목 수정에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 증빙 항목 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 증빙 항목 존재 확인\n    const existingItem = await query('SELECT id FROM evidence_items WHERE id = $1', [id])\n    if (existingItem.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '증빙 항목을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    // 증빙 항목 삭제 (CASCADE로 관련 데이터도 함께 삭제됨)\n    await query('DELETE FROM evidence_items WHERE id = $1', [id])\n\n    return json({\n      success: true,\n      message: '증빙 항목이 성공적으로 삭제되었습니다.',\n    })\n  } catch (error) {\n    logger.error('증빙 항목 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '증빙 항목 삭제에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/global-factors/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-add-research-stipend/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-budget-cash-kind/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-budget-simplified/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-participation-rate-decimal/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-remove-salary-multiplier/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/participation-rates/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/participation-rates/summary/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-budgets/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-budgets/[id]/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-members/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 201,
        "column": 23,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 201,
        "endColumn": 110
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport { transformArrayData, transformProjectMemberData } from '$lib/utils/api-data-transformer'\nimport { formatDateForAPI, formatDateForKorean } from '$lib/utils/date-calculator'\nimport { logger } from '$lib/utils/logger'\nimport { calculateMonthlySalary } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// GET /api/project-management/project-members - 프로젝트 멤버 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n    const employeeId = url.searchParams.get('employeeId')\n    const status = url.searchParams.get('status')\n    const role = url.searchParams.get('role')\n\n    let sqlQuery = `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE 1=1\n\t\t`\n\n    const params: unknown[] = []\n    let paramIndex = 1\n\n    if (projectId) {\n      sqlQuery += ` AND pm.project_id = $${paramIndex}`\n      params.push(projectId)\n      paramIndex++\n    }\n\n    if (employeeId) {\n      sqlQuery += ` AND pm.employee_id = $${paramIndex}`\n      params.push(employeeId)\n      paramIndex++\n    }\n\n    if (status) {\n      sqlQuery += ` AND pm.status = $${paramIndex}`\n      params.push(status)\n      paramIndex++\n    }\n\n    if (role) {\n      sqlQuery += ` AND pm.role = $${paramIndex}`\n      params.push(role)\n      paramIndex++\n    }\n\n    sqlQuery += ` ORDER BY pm.created_at DESC`\n\n    const result = await query(sqlQuery, params)\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedData = transformArrayData(result.rows, transformProjectMemberData)\n\n    return json({\n      success: true,\n      data: transformedData,\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버를 불러오는데 실패했습니다.',\n        error: (error as Error).message,\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// POST /api/project-management/project-members - 프로젝트 멤버 추가\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n    const {\n      projectId,\n      employeeId,\n      role = 'researcher',\n      startDate,\n      endDate,\n      participationRate = 100,\n      contributionType = 'cash',\n      contractAmount = 0,\n      status = 'active',\n    } = data\n\n    // 필수 필드 검증\n    if (!projectId || !employeeId) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 ID와 직원 ID는 필수입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 참여율 검증 (0-100 사이)\n    if (participationRate < 0 || participationRate > 100) {\n      return json(\n        {\n          success: false,\n          message: '참여율은 0-100 사이의 값이어야 합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 중복 검사\n    const existingMember = await query(\n      'SELECT id FROM project_members WHERE project_id = $1 AND employee_id = $2',\n      [projectId, employeeId],\n    )\n\n    if (existingMember.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          message: '해당 직원은 이미 이 프로젝트의 멤버입니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 해당 직원의 프로젝트 참여 기간에 유효한 급여 계약서 조회\n    // 프로젝트 참여 기간과 계약서 기간이 겹치는 경우를 찾음\n    const contractResult = await query(\n      `\n\t\t\tSELECT sc.annual_salary, sc.monthly_salary\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\t\tAND sc.status = 'active'\n\t\t\t\tAND (\n\t\t\t\t\t-- 계약서 시작일이 프로젝트 참여 기간 내에 있거나\n\t\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\t\tOR\n\t\t\t\t\t-- 프로젝트 참여 기간이 계약서 기간 내에 있거나\n\t\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t\t)\n\t\t\tORDER BY sc.start_date DESC\n\t\t\tLIMIT 1\n\t\t`,\n      [employeeId, startDate, endDate],\n    )\n\n    // 계약서에서 연봉을 가져오거나, 제공된 계약금액 사용\n    let _finalContractAmount = contractAmount\n    if (contractResult.rows.length > 0) {\n      // 연봉을 월급으로 변환 (연봉 / 12)\n      _finalContractAmount = contractResult.rows[0].annual_salary / 12\n    } else {\n      // 계약서가 없는 경우, 해당 직원의 모든 계약서 정보를 조회하여 안내 메시지 생성\n      const allContractsResult = await query(\n        `\n\t\t\t\tSELECT sc.start_date, sc.end_date, sc.annual_salary, sc.status\n\t\t\t\tFROM salary_contracts sc\n\t\t\t\tWHERE sc.employee_id = $1\n\t\t\t\tORDER BY sc.start_date DESC\n\t\t\t`,\n        [employeeId],\n      )\n\n      if (allContractsResult.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            message:\n              '해당 직원의 급여 계약서가 등록되지 않았습니다. 급여 계약서를 먼저 등록해주세요.',\n            errorCode: 'NO_CONTRACT',\n          },\n          { status: 400 },\n        )\n      } else {\n        // 계약서는 있지만 기간이 맞지 않는 경우\n        const contracts = allContractsResult.rows\n        const projectStartDate = startDate ? new Date(startDate) : new Date()\n        const _projectEndDate = endDate ? new Date(endDate) : new Date()\n\n        // 가장 가까운 계약서 찾기\n        const futureContracts = contracts.filter((c) => new Date(c.start_date) > projectStartDate)\n        const pastContracts = contracts.filter((c) => new Date(c.start_date) <= projectStartDate)\n\n        let message = `프로젝트 참여 기간(${startDate || '시작일 미정'} ~ ${endDate || '종료일 미정'})에 해당 직원이 재직 중이 아닙니다.\\n\\n`\n\n        if (futureContracts.length > 0) {\n          const nextContract = futureContracts[futureContracts.length - 1] // 가장 가까운 미래 계약\n          const contractStartDate = formatDateForKorean(nextContract.start_date)\n          message += `다음 계약 시작일: ${contractStartDate}\\n`\n          message += `해당 날짜부터 프로젝트 참여가 가능합니다.`\n        } else if (pastContracts.length > 0) {\n          const lastContract = pastContracts[0]\n          if (lastContract.end_date) {\n            const contractEndDate = formatDateForKorean(lastContract.end_date)\n            message += `마지막 계약 종료일: ${contractEndDate}\\n`\n            message += `해당 직원은 이미 퇴사한 상태입니다.`\n          } else {\n            message += `계약서 상태를 확인해주세요.`\n          }\n        }\n\n        return json(\n          {\n            success: false,\n            message: message,\n            errorCode: 'CONTRACT_PERIOD_MISMATCH',\n            contracts: contracts.map((c) => ({\n              startDate: c.start_date,\n              endDate: c.end_date,\n              status: c.status,\n            })),\n          },\n          { status: 400 },\n        )\n      }\n    }\n\n    // 실제 근로계약서에서 월급 가져오기\n    let contractMonthlySalary = 0\n    if (contractResult.rows.length > 0) {\n      const contract = contractResult.rows[0]\n      contractMonthlySalary = contract.monthly_salary || contract.annual_salary / 12\n    }\n\n    // 월간 금액 계산: 중앙화된 급여 계산 함수 사용\n    const monthlyAmount = calculateMonthlySalary(\n      contractMonthlySalary * 12, // 연봉으로 변환\n      participationRate,\n    )\n\n    // 프로젝트 멤버 추가 (contract_amount 제거)\n    const result = await query(\n      `\n\t\t\tINSERT INTO project_members (project_id, employee_id, role, start_date, end_date, participation_rate, contribution_type, monthly_amount, status)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n\t\t\tRETURNING *\n\t\t`,\n      [\n        projectId,\n        employeeId,\n        role,\n        startDate,\n        endDate,\n        participationRate,\n        contributionType,\n        monthlyAmount,\n        status,\n      ],\n    )\n\n    // 추가된 멤버 정보와 관련 정보 조회\n    const memberWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE pm.id = $1\n\t\t`,\n      [result.rows[0].id],\n    )\n\n    // TIMESTAMP 데이터를 YYYY-MM-DD 형식으로 변환 (중앙화된 함수 사용)\n    const memberData = memberWithDetails.rows[0]\n    const formattedMemberData = {\n      ...memberData,\n      start_date: formatDateForAPI(memberData.start_date),\n      end_date: formatDateForAPI(memberData.end_date),\n    }\n\n    return json({\n      success: true,\n      data: formattedMemberData,\n      message: '프로젝트 멤버가 성공적으로 추가되었습니다.',\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 추가 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버 추가에 실패했습니다.',\n        error: (error as Error).message,\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-members/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 288,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 293,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport {\n  calculateParticipationPeriod,\n  formatDateForAPI,\n  isValidDate,\n  isValidDateRange,\n} from '$lib/utils/date-calculator'\nimport { logger } from '$lib/utils/logger'\nimport { calculateMonthlySalary } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// GET /api/project-management/project-members/[id] - 특정 프로젝트 멤버 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, ' ', e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE pm.id = $1\n\t\t`,\n      [params.id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 멤버를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    // TIMESTAMP 데이터를 YYYY-MM-DD 형식으로 변환 (중앙화된 함수 사용)\n    const memberData = result.rows[0]\n    const formattedMemberData = {\n      ...memberData,\n      start_date: formatDateForAPI(memberData.start_date),\n      end_date: formatDateForAPI(memberData.end_date),\n    }\n\n    return json({\n      success: true,\n      data: formattedMemberData,\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버를 불러오는데 실패했습니다.',\n        error: (error as Error).message,\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// PUT /api/project-management/project-members/[id] - 프로젝트 멤버 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n    const {\n      role,\n      startDate,\n      endDate,\n      participationRate,\n      contributionType,\n      contractAmount,\n      status,\n    } = data\n\n    // 필수 필드 검증\n    if (\n      role === undefined &&\n      startDate === undefined &&\n      endDate === undefined &&\n      participationRate === undefined &&\n      contributionType === undefined &&\n      contractAmount === undefined &&\n      status === undefined\n    ) {\n      return json(\n        {\n          success: false,\n          message: '수정할 필드가 없습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 참여율 검증 (0-100 사이)\n    if (participationRate !== undefined && (participationRate < 0 || participationRate > 100)) {\n      return json(\n        {\n          success: false,\n          message: '참여율은 0-100 사이의 값이어야 합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 멤버 존재 확인\n    const existingMember = await query('SELECT * FROM project_members WHERE id = $1', [params.id])\n\n    if (existingMember.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 멤버를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    // 멤버 수정\n    const updateFields = []\n    const updateValues = []\n    let paramIndex = 1\n\n    if (role !== undefined) {\n      updateFields.push(`role = $${paramIndex}`)\n      updateValues.push(role)\n      paramIndex++\n    }\n\n    // 참여기간 수정 시 UTC+9 타임존 적용 및 유효성 검증\n    if (startDate !== undefined) {\n      // 날짜 유효성 검증\n      if (!isValidDate(startDate)) {\n        return json(\n          {\n            success: false,\n            message: '유효하지 않은 시작일 형식입니다.',\n          },\n          { status: 400 },\n        )\n      }\n\n      // UTC+9 타임존 적용 (TIMESTAMP 타입으로 저장)\n      const formattedStartDate = new Date(startDate + 'T00:00:00.000+09:00')\n      updateFields.push(`start_date = $${paramIndex}`)\n      updateValues.push(formattedStartDate)\n      paramIndex++\n    }\n\n    if (endDate !== undefined) {\n      // 날짜 유효성 검증\n      if (!isValidDate(endDate)) {\n        return json(\n          {\n            success: false,\n            message: '유효하지 않은 종료일 형식입니다.',\n          },\n          { status: 400 },\n        )\n      }\n\n      // UTC+9 타임존 적용 (TIMESTAMP 타입으로 저장)\n      const formattedEndDate = new Date(endDate + 'T23:59:59.999+09:00')\n      updateFields.push(`end_date = $${paramIndex}`)\n      updateValues.push(formattedEndDate)\n      paramIndex++\n    }\n\n    // 시작일과 종료일이 모두 변경되는 경우 날짜 범위 검증\n    if (startDate !== undefined && endDate !== undefined) {\n      if (!isValidDateRange(startDate, endDate)) {\n        return json(\n          {\n            success: false,\n            message: '시작일이 종료일보다 늦을 수 없습니다.',\n          },\n          { status: 400 },\n        )\n      }\n\n      // 프로젝트 기간과의 겹침 검증\n      const currentMember = existingMember.rows[0]\n      const projectResult = await query('SELECT start_date, end_date FROM projects WHERE id = $1', [\n        currentMember.project_id,\n      ])\n\n      if (projectResult.rows.length > 0) {\n        const project = projectResult.rows[0]\n        const participationValidation = calculateParticipationPeriod(\n          startDate,\n          endDate,\n          project.start_date,\n          project.end_date,\n        )\n\n        if (!participationValidation.isValid) {\n          return json(\n            {\n              success: false,\n              message:\n                participationValidation.errorMessage || '참여기간이 프로젝트 기간과 맞지 않습니다.',\n            },\n            { status: 400 },\n          )\n        }\n      }\n    }\n\n    if (participationRate !== undefined) {\n      updateFields.push(`participation_rate = $${paramIndex}`)\n      updateValues.push(participationRate)\n      paramIndex++\n    }\n\n    if (contributionType !== undefined) {\n      updateFields.push(`contribution_type = $${paramIndex}`)\n      updateValues.push(contributionType)\n      paramIndex++\n    }\n\n    // contract_amount 필드 제거 - 실제 근로계약서에서 조회\n\n    if (status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`)\n      updateValues.push(status)\n      paramIndex++\n    }\n\n    // 참여율이 변경된 경우 월간금액 재계산\n    if (participationRate !== undefined) {\n      const currentMember = existingMember.rows[0]\n      const finalParticipationRate = participationRate\n\n      // 실제 근로계약서에서 최신 금액 조회\n      const contractResult = await query(\n        `\n\t\t\t\tSELECT sc.annual_salary, sc.monthly_salary\n\t\t\t\tFROM salary_contracts sc\n\t\t\t\tWHERE sc.employee_id = $1\n\t\t\t\t\tAND sc.status = 'active'\n\t\t\t\t\tAND (\n\t\t\t\t\t\t-- 계약서 시작일이 프로젝트 참여 기간 내에 있거나\n\t\t\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\t\t\tOR\n\t\t\t\t\t\t-- 프로젝트 참여 기간이 계약서 기간 내에 있거나\n\t\t\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t\t\t)\n\t\t\t\tORDER BY sc.start_date DESC\n\t\t\t\tLIMIT 1\n\t\t\t`,\n        [currentMember.employee_id, currentMember.start_date, currentMember.end_date],\n      )\n\n      let contractMonthlySalary = 0\n      if (contractResult.rows.length > 0) {\n        const contract = contractResult.rows[0]\n        contractMonthlySalary = contract.monthly_salary || contract.annual_salary / 12\n      }\n\n      // 월간 금액 계산: 중앙화된 급여 계산 함수 사용\n      const monthlyAmount = calculateMonthlySalary(\n        contractMonthlySalary * 12, // 연봉으로 변환\n        finalParticipationRate,\n      )\n\n      updateFields.push(`monthly_amount = $${paramIndex}`)\n      updateValues.push(monthlyAmount)\n      paramIndex++\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    updateValues.push(params.id)\n\n    const _result = await query(\n      `\n\t\t\tUPDATE project_members \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      updateValues,\n    )\n\n    // 수정된 멤버 정보와 관련 정보 조회\n    const memberWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, ' ', e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE pm.id = $1\n\t\t`,\n      [params.id],\n    )\n\n    // TIMESTAMP 데이터를 YYYY-MM-DD 형식으로 변환 (중앙화된 함수 사용)\n    const memberData = memberWithDetails.rows[0]\n    const formattedMemberData = {\n      ...memberData,\n      start_date: formatDateForAPI(memberData.start_date),\n      end_date: formatDateForAPI(memberData.end_date),\n    }\n\n    return json({\n      success: true,\n      data: formattedMemberData,\n      message: '프로젝트 멤버가 성공적으로 수정되었습니다.',\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버 수정에 실패했습니다.',\n        error: (error as Error).message,\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// DELETE /api/project-management/project-members/[id] - 프로젝트 멤버 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    // 멤버 존재 확인\n    const existingMember = await query('SELECT * FROM project_members WHERE id = $1', [params.id])\n\n    if (existingMember.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 멤버를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    // 멤버 삭제\n    await query('DELETE FROM project_members WHERE id = $1', [params.id])\n\n    return json({\n      success: true,\n      message: '프로젝트 멤버가 성공적으로 삭제되었습니다.',\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버 삭제에 실패했습니다.',\n        error: (error as Error).message,\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/projects/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/projects/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 207,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 207,
        "endColumn": 54
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 226,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 231,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Project Management API - Individual Project\n// 개별 프로젝트 관련 API\n\nimport { query } from '$lib/database/connection'\nimport {\n  transformArrayData,\n  transformMilestoneData,\n  transformProjectBudgetData,\n  transformProjectData,\n  transformProjectMemberData,\n  transformRiskData,\n} from '$lib/utils/api-data-transformer'\nimport { logger } from '$lib/utils/logger'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// 개별 프로젝트 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 프로젝트 기본 정보 조회\n    const projectResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tp.*,\n\t\t\t\te.first_name || ' ' || e.last_name as manager_name,\n\t\t\t\tCOUNT(pm.id) as member_count,\n\t\t\t\tCOALESCE(SUM(pm.participation_rate), 0) as total_participation_rate\n\t\t\tFROM projects p\n\t\t\tLEFT JOIN employees e ON p.manager_id = e.id\n\t\t\tLEFT JOIN project_members pm ON p.id = pm.project_id AND pm.status = 'active'\n\t\t\tWHERE p.id = $1\n\t\t\tGROUP BY p.id, e.first_name, e.last_name\n\t\t`,\n      [id],\n    )\n\n    if (projectResult.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    const project = projectResult.rows[0]\n\n    // 프로젝트 멤버 목록 조회\n    const membersResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\te.first_name || ' ' || e.last_name as employee_name,\n\t\t\t\te.department\n\t\t\tFROM project_members pm\n\t\t\tLEFT JOIN employees e ON pm.employee_id = e.id\n\t\t\tWHERE pm.project_id = $1\n\t\t\tORDER BY pm.created_at DESC\n\t\t`,\n      [id],\n    )\n\n    // 프로젝트 사업비 조회\n    const budgetsResult = await query(\n      `\n\t\t\tSELECT * FROM project_budgets\n\t\t\tWHERE project_id = $1\n\t\t\tORDER BY period_number DESC\n\t\t`,\n      [id],\n    )\n\n    // 프로젝트 마일스톤 조회\n    const milestonesResult = await query(\n      `\n\t\t\tSELECT * FROM project_milestones\n\t\t\tWHERE project_id = $1\n\t\t\tORDER BY milestone_date ASC\n\t\t`,\n      [id],\n    )\n\n    // 프로젝트 위험 요소 조회\n    const risksResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpr.*,\n\t\t\t\te.first_name || ' ' || e.last_name as owner_name\n\t\t\tFROM project_risks pr\n\t\t\tLEFT JOIN employees e ON pr.owner_id = e.id\n\t\t\tWHERE pr.project_id = $1\n\t\t\tORDER BY pr.created_at DESC\n\t\t`,\n      [id],\n    )\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedProject = transformProjectData(project)\n    const transformedMembers = transformArrayData(membersResult.rows, transformProjectMemberData)\n    const transformedBudgets = transformArrayData(budgetsResult.rows, transformProjectBudgetData)\n    const transformedMilestones = transformArrayData(milestonesResult.rows, transformMilestoneData)\n    const transformedRisks = transformArrayData(risksResult.rows, transformRiskData)\n\n    return json({\n      success: true,\n      data: {\n        ...transformedProject,\n        members: transformedMembers,\n        budgets: transformedBudgets,\n        milestones: transformedMilestones,\n        risks: transformedRisks,\n      },\n    })\n  } catch (error) {\n    logger.error('프로젝트 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트를 불러오는데 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 프로젝트 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const { id } = params\n    const data = await request.json()\n    const {\n      code,\n      title,\n      description,\n      sponsor,\n      sponsorName,\n      sponsorType,\n      startDate,\n      endDate,\n      managerId,\n      budgetTotal,\n      researchType,\n      technologyArea,\n      priority,\n      status,\n    } = data\n\n    // 프로젝트 존재 확인\n    const existingProject = await query('SELECT id FROM projects WHERE id = $1', [id])\n\n    if (existingProject.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    // 프로젝트 코드 중복 확인 (자신 제외)\n    if (code) {\n      const duplicateCheck = await query('SELECT id FROM projects WHERE code = $1 AND id != $2', [\n        code,\n        id,\n      ])\n\n      if (duplicateCheck.rows.length > 0) {\n        return json(\n          {\n            success: false,\n            message: '이미 존재하는 프로젝트 코드입니다.',\n          },\n          { status: 400 },\n        )\n      }\n    }\n\n    // 업데이트할 필드들 동적 생성\n    const updateFields = []\n    const updateValues = []\n    let paramIndex = 1\n\n    const fieldsToUpdate = {\n      code,\n      title,\n      description,\n      sponsor,\n      sponsor_name: sponsorName,\n      sponsor_type: sponsorType,\n      start_date: startDate,\n      end_date: endDate,\n      manager_id: managerId,\n      budget_total: budgetTotal,\n      research_type: researchType,\n      technology_area: technologyArea,\n      priority,\n      status,\n    }\n\n    Object.entries(fieldsToUpdate).forEach(([key, value]) => {\n      if (value !== undefined) {\n        updateFields.push(`${key} = $${paramIndex++}`)\n        updateValues.push(value)\n      }\n    })\n\n    if (updateFields.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '수정할 데이터가 없습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    updateValues.push(id)\n\n    const result = await query(\n      `\n\t\t\tUPDATE projects \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      updateValues,\n    )\n\n    const _updatedProject = result.rows[0]\n\n    // 업데이트된 프로젝트 정보와 함께 반환\n    const projectWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tp.*,\n\t\t\t\te.first_name || ' ' || e.last_name as manager_name,\n\t\t\t\tCOUNT(pm.id) as member_count,\n\t\t\t\tCOALESCE(SUM(pm.participation_rate), 0) as total_participation_rate\n\t\t\tFROM projects p\n\t\t\tLEFT JOIN employees e ON p.manager_id = e.id\n\t\t\tLEFT JOIN project_members pm ON p.id = pm.project_id AND pm.status = 'active'\n\t\t\tWHERE p.id = $1\n\t\t\tGROUP BY p.id, e.first_name, e.last_name\n\t\t`,\n      [id],\n    )\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedProject = transformProjectData(projectWithDetails.rows[0])\n\n    return json({\n      success: true,\n      data: transformedProject,\n      message: '프로젝트가 성공적으로 수정되었습니다.',\n    })\n  } catch (error) {\n    logger.error('프로젝트 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 수정에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 프로젝트 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 프로젝트 존재 확인\n    const existingProject = await query('SELECT id, status FROM projects WHERE id = $1', [id])\n\n    if (existingProject.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    const _project = existingProject.rows[0]\n\n    // 프로젝트 삭제 가능 여부 확인 (모든 상태에서 삭제 가능)\n    // 프로젝트 삭제 요청 처리\n\n    // 트랜잭션으로 관련 데이터 모두 삭제\n    await query('BEGIN')\n\n    try {\n      // 1. evidence_items 먼저 삭제 (project_budgets를 참조)\n      await query(\n        `\n\t\t\t\tDELETE FROM evidence_items \n\t\t\t\tWHERE project_budget_id IN (\n\t\t\t\t\tSELECT id FROM project_budgets WHERE project_id = $1\n\t\t\t\t)\n\t\t\t`,\n        [id],\n      )\n\n      // 2. project_budgets 삭제\n      await query('DELETE FROM project_budgets WHERE project_id = $1', [id])\n\n      // 3. 기타 관련 데이터 삭제\n      await query('DELETE FROM participation_rate_history WHERE project_id = $1', [id])\n      await query('DELETE FROM participation_rates WHERE project_id = $1', [id])\n      await query('DELETE FROM project_members WHERE project_id = $1', [id])\n      await query('DELETE FROM project_milestones WHERE project_id = $1', [id])\n      await query('DELETE FROM project_risks WHERE project_id = $1', [id])\n\n      // 4. rd_projects 테이블에서 삭제 (외래키 제약조건 해결)\n      await query('DELETE FROM rd_projects WHERE project_id = $1', [id])\n\n      // 5. 마지막으로 프로젝트 삭제\n      await query('DELETE FROM projects WHERE id = $1', [id])\n\n      await query('COMMIT')\n\n      return json({\n        success: true,\n        message: '프로젝트가 성공적으로 삭제되었습니다.',\n      })\n    } catch (error) {\n      await query('ROLLBACK')\n      throw error\n    }\n  } catch (error) {\n    logger.error('프로젝트 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 삭제에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/projects/[projectId]/annual-budgets/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/researcher-validation/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 31,
        "column": 10,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 31,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [826, 829], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [826, 829], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 103,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 103,
        "endColumn": 112
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 161,
        "column": 23,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 161,
        "endColumn": 68
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 189,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 189,
        "endColumn": 104
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 217,
        "column": 43,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 217,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5329, 5332], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5329, 5332], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 282,
        "column": 18,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 282,
        "endColumn": 122
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 323,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 323,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8453, 8456], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8453, 8456], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 324,
        "column": 13,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 324,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [8470, 8473], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [8470, 8473], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 367,
        "column": 32,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 367,
        "endColumn": 75
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 380,
        "column": 32,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 380,
        "endColumn": 75
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 395,
        "column": 11,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 395,
        "endColumn": 14,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [10489, 10492], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [10489, 10492], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 438,
        "column": 21,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 438,
        "endColumn": 54
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport { getCurrentDateForAPI } from '$lib/utils/date-calculator'\nimport { logger } from '$lib/utils/logger'\nimport { calculateMonthlySalary } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\ninterface ValidationResult {\n  isValid: boolean\n  issues: ValidationIssue[]\n  summary: {\n    totalMembers: number\n    validMembers: number\n    invalidMembers: number\n    lastValidated: string\n  }\n}\n\ninterface ValidationIssue {\n  type:\n    | 'contract_missing'\n    | 'contract_period_mismatch'\n    | 'participation_rate_excess'\n    | 'amount_excess'\n    | 'duplicate_participation'\n  severity: 'error' | 'warning' | 'info'\n  message: string\n  memberId: string\n  memberName: string\n  suggestedFix?: string\n  data?: any\n}\n\n// GET: 참여연구원 검증 실행\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n\n    if (!projectId) {\n      return json(\n        {\n          success: false,\n          error: '프로젝트 ID가 필요합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    logger.log(`🔍 [참여연구원 검증] 프로젝트 ${projectId} 검증 시작`)\n\n    // 1. 프로젝트 기본 정보 조회\n    const projectResult = await query(\n      `\n\t\t\tSELECT id, title, code, start_date, end_date, budget_total\n\t\t\tFROM projects \n\t\t\tWHERE id = $1\n\t\t`,\n      [projectId],\n    )\n\n    if (projectResult.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '프로젝트를 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    const project = projectResult.rows[0]\n\n    // 2. 참여연구원 목록 조회\n    const membersResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tWHERE pm.project_id = $1 AND pm.status = 'active'\n\t\t\tORDER BY pm.created_at DESC\n\t\t`,\n      [projectId],\n    )\n\n    const members = membersResult.rows\n    logger.log(`📋 참여연구원 ${members.length}명 검증 시작`)\n\n    // 3. 검증 실행\n    const validationResult = await performValidation(project, members)\n\n    logger.log(\n      `✅ [참여연구원 검증] 완료 - ${validationResult.isValid ? '✅ 통과' : '❌ 실패'} (${validationResult.issues.length}개 이슈)`,\n    )\n\n    return json({\n      success: true,\n      data: {\n        project: {\n          id: project.id,\n          title: project.title,\n          code: project.code,\n        },\n        validation: validationResult,\n      },\n    })\n  } catch (error) {\n    logger.error('참여연구원 검증 오류:', error)\n    return json(\n      {\n        success: false,\n        error: '검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// POST: 자동 수정 실행\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { projectId, fixes } = await request.json()\n\n    if (!projectId) {\n      return json(\n        {\n          success: false,\n          error: '프로젝트 ID가 필요합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    logger.log(`🔧 [참여연구원 자동 수정] 프로젝트 ${projectId} 수정 시작`)\n\n    const appliedFixes = []\n\n    // 각 수정사항 적용\n    for (const fix of fixes || []) {\n      try {\n        switch (fix.type) {\n          case 'participation_rate_adjustment':\n            await query('UPDATE project_members SET participation_rate = $1 WHERE id = $2', [\n              fix.newValue,\n              fix.memberId,\n            ])\n            appliedFixes.push({\n              memberId: fix.memberId,\n              type: fix.type,\n              action: `참여율 ${fix.oldValue}% → ${fix.newValue}%로 조정`,\n              success: true,\n            })\n            break\n\n          // contract_amount_adjustment 케이스 제거 - 실제 근로계약서에서 조회하므로 불필요\n\n          default:\n            appliedFixes.push({\n              memberId: fix.memberId,\n              type: fix.type,\n              action: '지원하지 않는 수정 유형',\n              success: false,\n            })\n        }\n      } catch (fixError) {\n        logger.error(`수정 실패 (${fix.type}):`, fixError)\n        appliedFixes.push({\n          memberId: fix.memberId,\n          type: fix.type,\n          action: '수정 실패',\n          success: false,\n          error: fixError instanceof Error ? fixError.message : 'Unknown error',\n        })\n      }\n    }\n\n    logger.log(\n      `✅ [참여연구원 자동 수정] 완료 - ${appliedFixes.filter((f) => f.success).length}/${appliedFixes.length}개 성공`,\n    )\n\n    return json({\n      success: true,\n      data: {\n        appliedFixes,\n        summary: {\n          total: appliedFixes.length,\n          successful: appliedFixes.filter((f) => f.success).length,\n          failed: appliedFixes.filter((f) => !f.success).length,\n        },\n      },\n    })\n  } catch (error) {\n    logger.error('자동 수정 오류:', error)\n    return json(\n      {\n        success: false,\n        error: '자동 수정 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// 검증 로직 실행\nasync function performValidation(project: any, members: unknown[]): Promise<ValidationResult> {\n  const issues: ValidationIssue[] = []\n  let validMembers = 0\n\n  for (const member of members) {\n    let memberHasIssues = false\n\n    // 1. 근로계약서 검증\n    const contractValidation = await validateContract(member, project)\n    if (!contractValidation.isValid) {\n      issues.push(...contractValidation.issues)\n      memberHasIssues = true\n    }\n\n    // 2. 참여율 검증\n    const participationRate = parseFloat(member.participation_rate) || 0\n    if (participationRate > 100) {\n      issues.push({\n        type: 'participation_rate_excess',\n        severity: 'error',\n        message: `참여율이 100%를 초과합니다 (${participationRate}%)`,\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '참여율을 100% 이하로 조정하세요',\n        data: { participationRate },\n      })\n      memberHasIssues = true\n    }\n\n    // 3. 월간 금액 검증 (계약서 대비)\n    const monthlyAmount = parseFloat(member.monthly_amount) || 0\n\n    // 실제 근로계약서에서 연봉 가져오기\n    const contractResult = await query(\n      `\n\t\t\tSELECT sc.annual_salary, sc.monthly_salary, sc.start_date, sc.end_date, sc.status\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\t\tAND sc.status = 'active'\n\t\t\t\tAND (\n\t\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\t\tOR\n\t\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t\t)\n\t\t\tORDER BY sc.start_date DESC\n\t\t\tLIMIT 1\n\t\t`,\n      [member.employee_id, member.start_date, member.end_date],\n    )\n\n    let contractAmount = 0\n    if (contractResult.rows.length > 0) {\n      // 월급이 있으면 월급 기준, 없으면 연봉/12 기준\n      const contract = contractResult.rows[0]\n      contractAmount = contract.monthly_salary || contract.annual_salary / 12\n    }\n\n    // 예상 월간 금액 계산\n    const expectedMonthlyAmount = calculateMonthlySalary(contractAmount, participationRate)\n\n    if (monthlyAmount > expectedMonthlyAmount * 1.1) {\n      // 10% 허용 오차\n      issues.push({\n        type: 'amount_excess',\n        severity: 'warning',\n        message: `월간 금액이 예상 금액을 초과합니다 (${monthlyAmount.toLocaleString()}원 vs ${expectedMonthlyAmount.toLocaleString()}원)`,\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '계약 금액 또는 참여율을 확인하세요',\n        data: {\n          monthlyAmount,\n          expectedMonthlyAmount,\n          contractAmount,\n          participationRate,\n          salaryMultiplier,\n        },\n      })\n      memberHasIssues = true\n    }\n\n    // 4. 중복 참여 검증 (동일 기간에 여러 프로젝트 참여)\n    const duplicateValidation = await validateDuplicateParticipation(member)\n    if (!duplicateValidation.isValid) {\n      issues.push(...duplicateValidation.issues)\n      memberHasIssues = true\n    }\n\n    if (!memberHasIssues) {\n      validMembers++\n    }\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues,\n    summary: {\n      totalMembers: members.length,\n      validMembers,\n      invalidMembers: members.length - validMembers,\n      lastValidated: getCurrentDateForAPI(),\n    },\n  }\n}\n\n// 근로계약서 검증\nasync function validateContract(\n  member: any,\n  _project: any,\n): Promise<{ isValid: boolean; issues: ValidationIssue[] }> {\n  const issues: ValidationIssue[] = []\n\n  // 프로젝트 참여 기간과 겹치는 계약서 조회\n  const contractResult = await query(\n    `\n\t\tSELECT sc.annual_salary, sc.monthly_salary, sc.start_date, sc.end_date, sc.status\n\t\tFROM salary_contracts sc\n\t\tWHERE sc.employee_id = $1\n\t\t\tAND sc.status = 'active'\n\t\t\tAND (\n\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\tOR\n\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t)\n\t\tORDER BY sc.start_date DESC\n\t\tLIMIT 1\n\t`,\n    [member.employee_id, member.start_date, member.end_date],\n  )\n\n  if (contractResult.rows.length === 0) {\n    // 계약서가 없는 경우\n    const allContractsResult = await query(\n      `\n\t\t\tSELECT sc.start_date, sc.end_date, sc.annual_salary, sc.status\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\tORDER BY sc.start_date DESC\n\t\t`,\n      [member.employee_id],\n    )\n\n    if (allContractsResult.rows.length === 0) {\n      issues.push({\n        type: 'contract_missing',\n        severity: 'error',\n        message: '해당 기간의 근로계약서가 없습니다',\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '급여 계약서를 등록하거나 프로젝트 참여 기간을 조정하세요',\n        data: {\n          participationPeriod: `${member.start_date} ~ ${member.end_date}`,\n          contracts: [],\n        },\n      })\n    } else {\n      issues.push({\n        type: 'contract_period_mismatch',\n        severity: 'error',\n        message: '프로젝트 참여 기간에 해당하는 근로계약서가 없습니다',\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '근로계약서 기간을 확인하거나 프로젝트 참여 기간을 조정하세요',\n        data: {\n          participationPeriod: `${member.start_date} ~ ${member.end_date}`,\n          contracts: allContractsResult.rows,\n        },\n      })\n    }\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues,\n  }\n}\n\n// 중복 참여 검증\nasync function validateDuplicateParticipation(\n  member: any,\n): Promise<{ isValid: boolean; issues: ValidationIssue[] }> {\n  const issues: ValidationIssue[] = []\n\n  // 동일 직원의 다른 프로젝트 참여 조회\n  const duplicateResult = await query(\n    `\n\t\tSELECT pm.id, pm.project_id, pm.start_date, pm.end_date, pm.participation_rate,\n\t\t\t   p.title as project_title\n\t\tFROM project_members pm\n\t\tJOIN projects p ON pm.project_id = p.id\n\t\tWHERE pm.employee_id = $1 \n\t\t\tAND pm.id != $2\n\t\t\tAND pm.status = 'active'\n\t\t\tAND (\n\t\t\t\t(pm.start_date <= COALESCE($4, CURRENT_DATE) AND (pm.end_date IS NULL OR pm.end_date >= COALESCE($3, CURRENT_DATE)))\n\t\t\t\tOR\n\t\t\t\t(COALESCE($3, CURRENT_DATE) <= pm.start_date AND COALESCE($4, CURRENT_DATE) >= pm.start_date)\n\t\t\t)\n\t`,\n    [member.employee_id, member.id, member.start_date, member.end_date],\n  )\n\n  if (duplicateResult.rows.length > 0) {\n    // 참여율 합계 계산\n    const totalParticipationRate =\n      duplicateResult.rows.reduce((sum, p) => sum + (parseFloat(p.participation_rate) || 0), 0) +\n      (parseFloat(member.participation_rate) || 0)\n\n    if (totalParticipationRate > 100) {\n      issues.push({\n        type: 'duplicate_participation',\n        severity: 'error',\n        message: `동일 기간에 여러 프로젝트 참여율 합계가 100%를 초과합니다 (${totalParticipationRate.toFixed(1)}%)`,\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '참여율을 조정하거나 참여 기간을 변경하세요',\n        data: {\n          totalParticipationRate,\n          conflictingProjects: duplicateResult.rows.map((p) => ({\n            projectId: p.project_id,\n            projectTitle: p.project_title,\n            participationRate: parseFloat(p.participation_rate) || 0,\n            period: `${p.start_date} ~ ${p.end_date}`,\n          })),\n        },\n      })\n    }\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues,\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/schema-validation/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "UTC 변환 시 toUTC 함수를 사용하세요.",
        "line": 72,
        "column": 20,
        "nodeType": "CallExpression",
        "messageId": "restrictedSyntax",
        "endLine": 72,
        "endColumn": 44
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "UTC 변환 시 toUTC 함수를 사용하세요.",
        "line": 118,
        "column": 20,
        "nodeType": "CallExpression",
        "messageId": "restrictedSyntax",
        "endLine": 118,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { SchemaValidator } from '$lib/utils/schema-validation'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\nimport { toUTC } from '$lib/utils/date-handler'\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const validationType = url.searchParams.get('type') || 'all'\n\n    logger.log(`🔍 [스키마 검증] ${validationType} 검증 시작`)\n\n    const results: unknown[] = []\n    const summary = {\n      total: 0,\n      valid: 0,\n      invalid: 0,\n      issues: [] as string[],\n    }\n\n    // 1. 데이터베이스 스키마 검증\n    if (validationType === 'all' || validationType === 'schema') {\n      logger.log('📋 [데이터베이스 스키마 검증] 시작')\n      const schemaResults = await SchemaValidator.validateDatabaseSchema()\n      results.push(\n        ...schemaResults.map((result) => ({\n          ...result,\n          validationType: 'schema',\n        })),\n      )\n    }\n\n    // 2. 칼럼명 일관성 검증\n    if (validationType === 'all' || validationType === 'naming') {\n      logger.log('📝 [칼럼명 일관성 검증] 시작')\n      const namingResults = await SchemaValidator.validateColumnNamingConsistency()\n      results.push(\n        ...namingResults.map((result) => ({\n          ...result,\n          validationType: 'naming',\n        })),\n      )\n    }\n\n    // 3. 스키마 규칙 조회\n    if (validationType === 'rules') {\n      logger.log('📚 [스키마 규칙 조회] 시작')\n      const rules = SchemaValidator.getSchemaRules()\n      return json({\n        success: true,\n        validationType: 'rules',\n        rules,\n        generatedAt: toUTC(new Date()),\n      })\n    }\n\n    // 결과 요약\n    summary.total = results.length\n    summary.valid = results.filter((r) => r.isValid).length\n    summary.invalid = results.filter((r) => !r.isValid).length\n    summary.issues = results.filter((r) => !r.isValid).flatMap((r) => r.issues)\n\n    logger.log(\n      `✅ [스키마 검증] 완료 - ${summary.valid}/${summary.total}개 통과, ${summary.invalid}개 문제`,\n    )\n\n    return json({\n      success: true,\n      validationType,\n      results,\n      summary,\n      generatedAt: new Date().toISOString(),\n    })\n  } catch (error) {\n    logger.error('Schema validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '스키마 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { query, tableName, validationType = 'query' } = await request.json()\n\n    if (!query || !tableName) {\n      return json({ error: '쿼리와 테이블명이 필요합니다.' }, { status: 400 })\n    }\n\n    logger.log(`🔍 [쿼리 검증] 테이블 ${tableName} 쿼리 검증 시작`)\n\n    // 쿼리 칼럼 검증\n    const results = SchemaValidator.validateQueryColumns(query, tableName)\n\n    const summary = {\n      total: results.length,\n      valid: results.filter((r) => r.isValid).length,\n      invalid: results.filter((r) => !r.isValid).length,\n      issues: results.filter((r) => !r.isValid).flatMap((r) => r.issues),\n    }\n\n    logger.log(\n      `✅ [쿼리 검증] 완료 - ${summary.valid}/${summary.total}개 통과, ${summary.invalid}개 문제`,\n    )\n\n    return json({\n      success: true,\n      validationType,\n      query,\n      tableName,\n      results,\n      summary,\n      generatedAt: new Date().toISOString(),\n    })\n  } catch (error) {\n    logger.error('Query validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '쿼리 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/setup-evidence/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/setup-global-factors/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/setup/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/simple-validation/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 91,
        "column": 46,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 91,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2530, 2533], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2530, 2533], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 170,
        "column": 50,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 170,
        "endColumn": 53,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [4938, 4941], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [4938, 4941], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 202,
        "column": 9,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 202,
        "endColumn": 106
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 208,
        "column": 41,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 208,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [5994, 5997], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [5994, 5997], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 239,
        "column": 45,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 239,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [6645, 6648], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [6645, 6648], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { json } from '@sveltejs/kit'\nimport { Pool } from 'pg'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false },\n})\n\n// 간단한 프로젝트 검증 함수\nasync function validateProject(projectId: string): Promise<{\n  success: boolean\n  results: unknown[]\n  errors: string[]\n  fixedIssues: number\n}> {\n  const client = await pool.connect()\n  const results: unknown[] = []\n  const errors: string[] = []\n  let fixedIssues = 0\n\n  try {\n    logger.log(`🔍 [간단 검증] 프로젝트 검증 시작: ${projectId}`)\n\n    await client.query('BEGIN')\n\n    // 1. 인건비 검증 및 수정\n    logger.log('🔍 [인건비 검증] 시작')\n    const personnelResult = await validatePersonnelCost(client, projectId)\n    results.push(personnelResult)\n\n    if (personnelResult.hasIssues) {\n      logger.log('🔧 [인건비 수정] 자동 수정 시작')\n      const fixResult = await fixPersonnelCost(client, projectId, personnelResult.issues)\n      if (fixResult.success) {\n        fixedIssues += fixResult.fixedCount\n        logger.log(`✅ [인건비 수정] 완료: ${fixResult.fixedCount}개 연차 수정`)\n      } else {\n        errors.push(`인건비 수정 실패: ${fixResult.error}`)\n      }\n    }\n\n    // 2. 예산 일관성 검증 및 수정\n    logger.log('🔍 [예산 일관성 검증] 시작')\n    const budgetResult = await validateBudgetConsistency(client, projectId)\n    results.push(budgetResult)\n\n    if (budgetResult.hasIssues) {\n      logger.log('🔧 [예산 일관성 수정] 자동 수정 시작')\n      const fixResult = await fixBudgetConsistency(client, projectId, budgetResult.issues)\n      if (fixResult.success) {\n        fixedIssues += fixResult.fixedCount\n        logger.log(`✅ [예산 일관성 수정] 완료: ${fixResult.fixedCount}개 이슈 수정`)\n      } else {\n        errors.push(`예산 일관성 수정 실패: ${fixResult.error}`)\n      }\n    }\n\n    await client.query('COMMIT')\n    logger.log(`✅ [간단 검증] 완료 - ${fixedIssues}개 이슈 수정됨`)\n\n    return {\n      success: errors.length === 0,\n      results: results,\n      errors: errors,\n      fixedIssues: fixedIssues,\n    }\n  } catch (error) {\n    await client.query('ROLLBACK')\n    const errorMsg = `프로젝트 검증 실패: ${error instanceof Error ? error.message : '알 수 없는 오류'}`\n    logger.error(`💥 ${errorMsg}`)\n    errors.push(errorMsg)\n\n    return {\n      success: false,\n      results: results,\n      errors: errors,\n      fixedIssues: fixedIssues,\n    }\n  } finally {\n    client.release()\n  }\n}\n\n// 인건비 검증\nasync function validatePersonnelCost(client: any, projectId: string) {\n  const budgetResult = await client.query(\n    `\n\t\tSELECT * FROM project_budgets \n\t\tWHERE project_id = $1 \n\t\tORDER BY period_number\n\t`,\n    [projectId],\n  )\n\n  const memberResult = await client.query(\n    `\n\t\tSELECT pm.*, e.first_name, e.last_name\n\t\tFROM project_members pm\n\t\tLEFT JOIN employees e ON pm.employee_id = e.id\n\t\tWHERE pm.project_id = $1\n\t\tORDER BY pm.start_date\n\t`,\n    [projectId],\n  )\n\n  const issues = []\n\n  for (const budget of budgetResult.rows) {\n    const budgetStartDate = new Date(budget.start_date)\n    const budgetEndDate = new Date(budget.end_date)\n\n    // 해당 연차에 참여하는 연구원들 필터링\n    const periodMembers = memberResult.rows.filter((member) => {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n      return memberStartDate <= budgetEndDate && memberEndDate >= budgetStartDate\n    })\n\n    // 실제 인건비 계산\n    let actualPersonnelCost = 0\n    for (const member of periodMembers) {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n\n      const actualStartDate = memberStartDate > budgetStartDate ? memberStartDate : budgetStartDate\n      const actualEndDate = memberEndDate < budgetEndDate ? memberEndDate : budgetEndDate\n\n      const monthsDiff =\n        (actualEndDate.getFullYear() - actualStartDate.getFullYear()) * 12 +\n        (actualEndDate.getMonth() - actualStartDate.getMonth()) +\n        1\n\n      const monthlyAmount = parseFloat(member.monthly_amount) || 0\n      const participationRate = parseFloat(member.participation_rate) || 0\n\n      actualPersonnelCost += monthlyAmount * monthsDiff * (participationRate / 100)\n    }\n\n    const budgetPersonnelCost = parseFloat(budget.personnel_cost) || 0\n    const difference = Math.abs(actualPersonnelCost - budgetPersonnelCost)\n\n    if (difference > 1000) {\n      // 1000원 허용 오차\n      issues.push({\n        periodNumber: budget.period_number,\n        budgetPersonnelCost: budgetPersonnelCost,\n        actualPersonnelCost: actualPersonnelCost,\n        difference: difference,\n        periodId: budget.id,\n      })\n    }\n  }\n\n  return {\n    validationType: 'personnel_cost',\n    hasIssues: issues.length > 0,\n    issues: issues,\n    message:\n      issues.length > 0 ? `${issues.length}개 연차에서 인건비 불일치 발견` : '인건비 검증 통과',\n  }\n}\n\n// 예산 일관성 검증\nasync function validateBudgetConsistency(client: any, projectId: string) {\n  const projectResult = await client.query('SELECT budget_total FROM projects WHERE id = $1', [\n    projectId,\n  ])\n  const budgetResult = await client.query(\n    `\n\t\tSELECT SUM(total_budget) as total_budget_sum\n\t\tFROM project_budgets \n\t\tWHERE project_id = $1\n\t`,\n    [projectId],\n  )\n\n  const projectTotal = parseFloat(projectResult.rows[0]?.budget_total) || 0\n  const budgetSum = parseFloat(budgetResult.rows[0]?.total_budget_sum) || 0\n  const difference = Math.abs(projectTotal - budgetSum)\n\n  const hasIssues = difference > 1000 // 1000원 허용 오차\n\n  return {\n    validationType: 'budget_consistency',\n    hasIssues: hasIssues,\n    issues: hasIssues\n      ? [\n          {\n            projectTotal: projectTotal,\n            budgetSum: budgetSum,\n            difference: difference,\n          },\n        ]\n      : [],\n    message: hasIssues\n      ? `예산 불일치: 프로젝트 총 예산 ${projectTotal.toLocaleString()}원 vs 연차별 예산 합계 ${budgetSum.toLocaleString()}원`\n      : '예산 일관성 검증 통과',\n  }\n}\n\n// 인건비 자동 수정\nasync function fixPersonnelCost(client: any, projectId: string, issues: unknown[]) {\n  try {\n    let fixedCount = 0\n\n    for (const issue of issues) {\n      await client.query(\n        `\n\t\t\t\tUPDATE project_budgets \n\t\t\t\tSET personnel_cost = $1, updated_at = CURRENT_TIMESTAMP\n\t\t\t\tWHERE id = $2\n\t\t\t`,\n        [issue.actualPersonnelCost, issue.periodId],\n      )\n      fixedCount++\n    }\n\n    return {\n      success: true,\n      fixedCount: fixedCount,\n      error: null,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      fixedCount: 0,\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\n    }\n  }\n}\n\n// 예산 일관성 자동 수정\nasync function fixBudgetConsistency(client: any, projectId: string, issues: unknown[]) {\n  try {\n    let fixedCount = 0\n\n    for (const issue of issues) {\n      await client.query(\n        `\n\t\t\t\tUPDATE projects \n\t\t\t\tSET budget_total = $1, updated_at = CURRENT_TIMESTAMP\n\t\t\t\tWHERE id = $2\n\t\t\t`,\n        [issue.budgetSum, projectId],\n      )\n      fixedCount++\n    }\n\n    return {\n      success: true,\n      fixedCount: fixedCount,\n      error: null,\n    }\n  } catch (error) {\n    return {\n      success: false,\n      fixedCount: 0,\n      error: error instanceof Error ? error.message : '알 수 없는 오류',\n    }\n  }\n}\n\n// API 엔드포인트들\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n\n    if (!projectId) {\n      return json({ success: false, error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    const result = await validateProject(projectId)\n    return json(result)\n  } catch (error) {\n    logger.error('💥 [간단 검증] GET 오류:', error)\n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { projectId } = await request.json()\n\n    if (!projectId) {\n      return json({ success: false, error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    const result = await validateProject(projectId)\n    return json(result)\n  } catch (error) {\n    logger.error('💥 [간단 검증] POST 오류:', error)\n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/summary/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/projects/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/projects/[id]/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/projects/upload/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 52,
        "column": 24,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 52,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1490, 1493], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1490, 1493], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 99,
        "column": 20,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 99,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2843, 2846], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2843, 2846], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 116,
        "column": 37,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 116,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3262, 3265], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3262, 3265], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 126,
        "column": 25,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 126,
        "endColumn": 86
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 130,
        "column": 42,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 130,
        "endColumn": 45,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3742, 3745], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3742, 3745], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 139,
        "column": 25,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 139,
        "endColumn": 75
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 143,
        "column": 25,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 143,
        "endColumn": 75
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 155,
        "column": 27,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 155,
        "endColumn": 75
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection.js'\nimport {\n  formatDateForDisplay,\n  getCurrentUTC,\n  isValidDate,\n  isValidDateRange,\n  toUTC,\n} from '$lib/utils/date-handler'\nimport { json } from '@sveltejs/kit'\nimport * as ExcelJS from 'exceljs'\nimport { logger } from '$lib/utils/logger'\n\nexport async function POST({ request }) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n\n    if (!file) {\n      return json({ error: '파일이 선택되지 않았습니다.' }, { status: 400 })\n    }\n\n    // 파일 확장자 확인\n    const fileName = file.name.toLowerCase()\n    const isExcel = fileName.endsWith('.xlsx') || fileName.endsWith('.xls')\n    const isCSV = fileName.endsWith('.csv')\n\n    let data: unknown[] = []\n    let headers: string[] = []\n\n    if (isExcel) {\n      // Excel 파일 파싱\n      const buffer = await file.arrayBuffer()\n      const workbook = new ExcelJS.Workbook()\n      await workbook.xlsx.load(buffer)\n\n      const worksheet = workbook.worksheets[0]\n      if (!worksheet) {\n        return json({ error: 'Excel 파일에 워크시트가 없습니다.' }, { status: 400 })\n      }\n\n      const rows = worksheet.getRows()\n      if (!rows || rows.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // 헤더 추출 (첫 번째 행)\n      headers = rows[0].values.slice(1) as string[] // ExcelJS는 1-based indexing\n      logger.log('프로젝트 Excel 파싱된 헤더:', headers)\n\n      // 데이터 추출\n      data = rows.slice(1).map((row, index) => {\n        const rowData: any = {}\n        const rowValues = row.values.slice(1) as unknown[] // ExcelJS는 1-based indexing\n        headers.forEach((header, headerIndex) => {\n          rowData[header] = rowValues[headerIndex] || ''\n        })\n        logger.log(`프로젝트 Excel 행 ${index + 2} 파싱 결과:`, rowData)\n        return rowData\n      })\n    } else if (isCSV) {\n      // CSV 파일 파싱\n      const text = await file.text()\n      const lines = text.split('\\n').filter((line) => line.trim())\n\n      if (lines.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // CSV 파싱 함수\n      function parseCSVLine(line: string): string[] {\n        const result: string[] = []\n        let current = ''\n        let inQuotes = false\n\n        for (let i = 0; i < line.length; i++) {\n          const char = line[i]\n\n          if (char === '\"') {\n            inQuotes = !inQuotes\n          } else if (char === ',' && !inQuotes) {\n            result.push(current.trim())\n            current = ''\n          } else {\n            current += char\n          }\n        }\n\n        result.push(current.trim())\n        return result\n      }\n\n      // 헤더 파싱\n      headers = parseCSVLine(lines[0])\n      logger.log('프로젝트 CSV 파싱된 헤더:', headers)\n\n      // 데이터 파싱\n      data = lines.slice(1).map((line, index) => {\n        const values = parseCSVLine(line)\n        const row: any = {}\n        headers.forEach((header, headerIndex) => {\n          row[header] = values[headerIndex] || ''\n        })\n        logger.log(`프로젝트 CSV 행 ${index + 2} 파싱 결과:`, row)\n        return row\n      })\n    } else {\n      return json(\n        {\n          error: '지원하지 않는 파일 형식입니다. CSV 또는 Excel 파일을 업로드해주세요.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 데이터 검증 및 변환\n    const projects = data.map((row: any, index: number) => {\n      const rowNumber = index + 2 // 헤더 행을 고려하여 +2\n\n      // 필수 필드 검증\n      const requiredFields = ['프로젝트명', '시작일', '종료일']\n      const missingFields = requiredFields.filter(\n        (field) => !row[field] || String(row[field]).trim() === '',\n      )\n\n      if (missingFields.length > 0) {\n        throw new Error(`행 ${rowNumber}: 필수 필드가 누락되었습니다: ${missingFields.join(', ')}`)\n      }\n\n      // 날짜 검증 (Excel 날짜 지원)\n      const parseExcelDate = (dateValue: any): Date => {\n        const utcDate = toUTC(dateValue)\n        return new Date(utcDate)\n      }\n\n      const startDate = parseExcelDate(row['시작일'])\n      const endDate = parseExcelDate(row['종료일'])\n\n      if (!isValidDate(startDate)) {\n        throw new Error(`행 ${rowNumber}: 올바르지 않은 시작일 형식입니다: ${row['시작일']}`)\n      }\n\n      if (!isValidDate(endDate)) {\n        throw new Error(`행 ${rowNumber}: 올바르지 않은 종료일 형식입니다: ${row['종료일']}`)\n      }\n\n      if (!isValidDateRange(startDate, endDate)) {\n        throw new Error(`행 ${rowNumber}: 시작일은 종료일보다 이전이어야 합니다.`)\n      }\n\n      // 예산 검증\n      let budget = 0\n      if (row['예산'] && String(row['예산']).trim() !== '') {\n        budget = parseFloat(String(row['예산']))\n        if (isNaN(budget) || budget < 0) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 예산 형식입니다: ${row['예산']}`)\n        }\n      }\n\n      // 상태 검증\n      const validStatuses = ['planning', 'active', 'completed', 'cancelled', 'on_hold']\n      const status = row['상태'] || 'planning'\n      if (!validStatuses.includes(status)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 상태입니다: ${status}. 허용된 값: ${validStatuses.join(', ')}`,\n        )\n      }\n\n      // 카테고리 검증\n      const validCategories = ['development', 'research', 'infrastructure', 'maintenance', 'other']\n      const category = row['카테고리'] || 'development'\n      if (!validCategories.includes(category)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 카테고리입니다: ${category}. 허용된 값: ${validCategories.join(', ')}`,\n        )\n      }\n\n      // 우선순위 검증\n      const validPriorities = ['low', 'medium', 'high', 'urgent']\n      const priority = row['우선순위'] || 'medium'\n      if (!validPriorities.includes(priority)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 우선순위입니다: ${priority}. 허용된 값: ${validPriorities.join(', ')}`,\n        )\n      }\n\n      // 프로젝트 코드 생성 (프로젝트명 기반 + 타임스탬프)\n      const projectName = String(row['프로젝트명']).trim()\n      const timestamp = Date.now().toString().slice(-6)\n      const random = Math.random().toString(36).substr(2, 4)\n      const projectCode =\n        projectName.replace(/[^a-zA-Z0-9가-힣]/g, '').substring(0, 15) +\n        '_' +\n        timestamp +\n        '_' +\n        random\n\n      return {\n        code: projectCode,\n        title: projectName,\n        description: row['설명'] ? String(row['설명']).trim() : '',\n        start_date: formatDateForDisplay(toUTC(startDate), 'ISO'),\n        end_date: formatDateForDisplay(toUTC(endDate), 'ISO'),\n        budget_total: budget,\n        status: status,\n        sponsor: row['담당자'] ? String(row['담당자']).trim() : '',\n        sponsor_type: 'internal',\n        created_at: getCurrentUTC(),\n        updated_at: getCurrentUTC(),\n      }\n    })\n\n    // 데이터베이스에 저장\n    let successCount = 0\n\n    for (const project of projects) {\n      try {\n        // UPSERT: 프로젝트 코드가 존재하면 UPDATE, 없으면 INSERT\n        await query(\n          `\n\t\t\t\t\tINSERT INTO projects (\n\t\t\t\t\t\tcode, title, description, start_date, end_date, \n\t\t\t\t\t\tbudget_total, status, sponsor, sponsor_type, \n\t\t\t\t\t\tcreated_at, updated_at\n\t\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n\t\t\t\t\tON CONFLICT (code) \n\t\t\t\t\tDO UPDATE SET\n\t\t\t\t\t\ttitle = EXCLUDED.title,\n\t\t\t\t\t\tdescription = EXCLUDED.description,\n\t\t\t\t\t\tstart_date = EXCLUDED.start_date,\n\t\t\t\t\t\tend_date = EXCLUDED.end_date,\n\t\t\t\t\t\tbudget_total = EXCLUDED.budget_total,\n\t\t\t\t\t\tstatus = EXCLUDED.status,\n\t\t\t\t\t\tsponsor = EXCLUDED.sponsor,\n\t\t\t\t\t\tsponsor_type = EXCLUDED.sponsor_type,\n\t\t\t\t\t\tupdated_at = EXCLUDED.updated_at\n\t\t\t\t`,\n          [\n            project.code,\n            project.title,\n            project.description,\n            project.start_date,\n            project.end_date,\n            project.budget_total,\n            project.status,\n            project.sponsor,\n            project.sponsor_type,\n            project.created_at,\n            project.updated_at,\n          ],\n        )\n        successCount++\n      } catch (error) {\n        logger.error('프로젝트 저장 실패:', error)\n      }\n    }\n\n    return json({\n      success: true,\n      count: successCount,\n      total: projects.length,\n      message: `${successCount}개의 프로젝트가 성공적으로 업로드되었습니다.`,\n    })\n  } catch (error) {\n    logger.error('업로드 에러:', error)\n    return json(\n      {\n        error: error instanceof Error ? error.message : '업로드 중 오류가 발생했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/[id]/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 164,
        "column": 7,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 169,
        "endColumn": 4
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// 개별 급여 계약 관리 API 엔드포인트\n\nimport { query } from '$lib/database/connection.js'\nimport type { SalaryContract, UpdateSalaryContractRequest } from '$lib/types/salary-contracts'\nimport { toUTC } from '$lib/utils/date-handler'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// GET: 특정 급여 계약 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tsc.*,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as employee_name,\n\t\t\t\te.employee_id as employee_id_number,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.end_date IS NULL THEN '무기한'\n\t\t\t\t\tELSE TO_CHAR(sc.end_date, 'YYYY-MM-DD')\n\t\t\t\tEND as contract_end_display,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date IS NULL THEN '진행중 (무기한)'\n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date >= CURRENT_DATE THEN '진행중'\n\t\t\t\t\tWHEN sc.status = 'expired' OR sc.end_date < CURRENT_DATE THEN '만료됨'\n\t\t\t\t\tELSE sc.status\n\t\t\t\tEND as status_display\n\t\t\tFROM salary_contracts sc\n\t\t\tJOIN employees e ON sc.employee_id = e.id\n\t\t\tWHERE sc.id = $1\n\t\t`,\n      [id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '급여 계약을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    const contract = result.rows[0]\n\n    // 날짜를 KST로 변환\n    const convertToKST = (dateString: string) => {\n      if (!dateString) return null\n      const date = new Date(dateString)\n      // UTC+9 (KST)로 변환\n      const kstDate = new Date(date.getTime() + 9 * 60 * 60 * 1000)\n      return toUTC(kstDate).split('T')[0] // YYYY-MM-DD 형식으로 반환\n    }\n\n    const salaryContract: SalaryContract = {\n      id: contract.id,\n      employeeId: contract.employee_id,\n      startDate: convertToKST(contract.start_date),\n      endDate: convertToKST(contract.end_date),\n      annualSalary: parseFloat(contract.annual_salary),\n      monthlySalary: parseFloat(contract.monthly_salary),\n      contractType: contract.contract_type,\n      status: contract.status,\n      notes: contract.notes,\n      createdAt: contract.created_at,\n      updatedAt: contract.updated_at,\n      createdBy: contract.created_by,\n      employeeName: contract.employee_name,\n      employeeIdNumber: contract.employee_id_number,\n      department: contract.department,\n      position: contract.position,\n      contractEndDisplay: contract.contract_end_display,\n      statusDisplay: contract.status_display,\n    }\n\n    return json({\n      success: true,\n      data: salaryContract,\n    })\n  } catch (_error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 조회에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// PUT: 급여 계약 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const { id } = params\n    const updateData: UpdateSalaryContractRequest = await request.json()\n\n    // 업데이트할 필드 구성\n    const updateFields: string[] = []\n    const queryParams: unknown[] = []\n    let paramIndex = 1\n\n    if (updateData.startDate !== undefined) {\n      updateFields.push(`start_date = $${paramIndex}`)\n      queryParams.push(updateData.startDate)\n      paramIndex++\n    }\n\n    if (updateData.endDate !== undefined) {\n      updateFields.push(`end_date = $${paramIndex}`)\n      queryParams.push(updateData.endDate || null)\n      paramIndex++\n    }\n\n    if (updateData.annualSalary !== undefined) {\n      updateFields.push(`annual_salary = $${paramIndex}`)\n      queryParams.push(updateData.annualSalary)\n      paramIndex++\n    }\n\n    if (updateData.monthlySalary !== undefined) {\n      updateFields.push(`monthly_salary = $${paramIndex}`)\n      queryParams.push(updateData.monthlySalary)\n      paramIndex++\n    }\n\n    if (updateData.contractType !== undefined) {\n      updateFields.push(`contract_type = $${paramIndex}`)\n      queryParams.push(updateData.contractType)\n      paramIndex++\n    }\n\n    if (updateData.status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`)\n      queryParams.push(updateData.status)\n      paramIndex++\n    }\n\n    if (updateData.notes !== undefined) {\n      updateFields.push(`notes = $${paramIndex}`)\n      queryParams.push(updateData.notes || null)\n      paramIndex++\n    }\n\n    if (updateFields.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '업데이트할 필드가 없습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // updated_at 자동 업데이트\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    queryParams.push(id)\n\n    const result = await query(\n      `\n\t\t\tUPDATE salary_contracts \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      queryParams,\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '급여 계약을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    const updatedContract = result.rows[0]\n\n    // 날짜를 KST로 변환\n    const convertToKST = (dateString: string) => {\n      if (!dateString) return null\n      const date = new Date(dateString)\n      // UTC+9 (KST)로 변환\n      const kstDate = new Date(date.getTime() + 9 * 60 * 60 * 1000)\n      return toUTC(kstDate).split('T')[0] // YYYY-MM-DD 형식으로 반환\n    }\n\n    return json({\n      success: true,\n      data: {\n        id: updatedContract.id,\n        employeeId: updatedContract.employee_id,\n        startDate: convertToKST(updatedContract.start_date),\n        endDate: convertToKST(updatedContract.end_date),\n        annualSalary: parseFloat(updatedContract.annual_salary),\n        monthlySalary: parseFloat(updatedContract.monthly_salary),\n        contractType: updatedContract.contract_type,\n        status: updatedContract.status,\n        notes: updatedContract.notes,\n        createdAt: updatedContract.created_at,\n        updatedAt: updatedContract.updated_at,\n        createdBy: updatedContract.created_by,\n      },\n    })\n  } catch (_error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 수정에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n\n// DELETE: 급여 계약 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    const result = await query(\n      `\n\t\t\tDELETE FROM salary_contracts \n\t\t\tWHERE id = $1\n\t\t\tRETURNING id\n\t\t`,\n      [id],\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '급여 계약을 찾을 수 없습니다.',\n        },\n        { status: 404 },\n      )\n    }\n\n    return json({\n      success: true,\n      data: { id },\n    })\n  } catch (_error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 삭제에 실패했습니다.',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/employee/[employeeId]/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/stats/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 112,
        "column": 28,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 112,
        "endColumn": 66
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport { toUTC } from '$lib/utils/date-handler'\nimport { json } from '@sveltejs/kit'\n\n// 새로운 단순화된 payslips API (기존 API 교체)\nexport async function GET({ url }) {\n  try {\n    const employeeId = url.searchParams.get('employeeId')\n    const period = url.searchParams.get('period') // YYYY-MM 형식\n    const status = url.searchParams.get('status')\n\n    const conditions: string[] = []\n    const params: (string | number)[] = []\n    let paramIndex = 1\n\n    if (employeeId) {\n      conditions.push(`p.employee_id = $${paramIndex}`)\n      params.push(employeeId)\n      paramIndex++\n    }\n\n    if (period) {\n      conditions.push(`p.period = $${paramIndex}`)\n      params.push(period)\n      paramIndex++\n    }\n\n    if (status) {\n      conditions.push(`p.status = $${paramIndex}`)\n      params.push(status)\n      paramIndex++\n    }\n\n    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : ''\n\n    // 기존 payslips 테이블 사용 (마이그레이션 전)\n    const { rows } = await query(\n      `\n\t\t\tSELECT\n\t\t\t\tp.id,\n\t\t\t\tp.employee_id AS \"employeeId\",\n\t\t\t\tp.period,\n\t\t\t\tp.pay_date AS \"payDate\",\n\t\t\t\tp.base_salary AS \"baseSalary\",\n\t\t\t\tp.total_payments AS \"totalPayments\",\n\t\t\t\tp.total_deductions AS \"totalDeductions\",\n\t\t\t\tp.net_salary AS \"netSalary\",\n\t\t\t\tp.payments,\n\t\t\t\tp.deductions,\n\t\t\t\tp.status,\n\t\t\t\tp.is_generated AS \"isGenerated\",\n\t\t\t\tp.created_at AS \"createdAt\",\n\t\t\t\tp.updated_at AS \"updatedAt\",\n\t\t\t\t-- 직원 정보 조인\n\t\t\t\te.first_name || e.last_name AS \"employeeName\",\n\t\t\t\te.employee_id AS \"employeeIdNumber\",\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.hire_date AS \"hireDate\"\n\t\t\tFROM payslips p\n\t\t\tJOIN employees e ON p.employee_id = e.id\n\t\t\t${whereClause}\n\t\t\tORDER BY p.period DESC, p.created_at DESC\n\t\t\t`,\n      params,\n    )\n\n    return json({ success: true, data: rows })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여명세서 목록을 가져오는데 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n\nexport async function POST({ request }) {\n  try {\n    const payslipData = await request.json()\n\n    const {\n      employeeId,\n      period,\n      payDate,\n      baseSalary,\n      totalPayments,\n      totalDeductions,\n      netSalary,\n      payments,\n      deductions,\n      status = 'draft',\n      isGenerated = false,\n    } = payslipData\n\n    // 필수 필드 검증\n    if (!employeeId || !period || !payDate) {\n      return json(\n        {\n          success: false,\n          error: '필수 필드가 누락되었습니다. (employeeId, period, payDate)',\n        },\n        { status: 400 },\n      )\n    }\n\n    // period에서 시작일과 종료일 계산 (예: \"2025-09\" -> \"2025-09-01\", \"2025-09-30\")\n    const [year, month] = period.split('-')\n    const payPeriodStart = `${year}-${month.padStart(2, '0')}-01`\n    const payPeriodEnd = toUTC(new Date(parseInt(year), parseInt(month), 0)).split('T')[0] // 해당 월의 마지막 날\n\n    // 기존 급여명세서가 있는지 확인\n    const existingPayslip = await query(\n      'SELECT id FROM payslips WHERE employee_id = $1 AND period = $2',\n      [employeeId, period],\n    )\n\n    let result\n    if (existingPayslip.rows.length > 0) {\n      // 기존 급여명세서 업데이트\n      result = await query(\n        `\n\t\t\t\tUPDATE payslips SET\n\t\t\t\t\tpay_date = $3,\n\t\t\t\t\tpay_period_start = $4,\n\t\t\t\t\tpay_period_end = $5,\n\t\t\t\t\tbase_salary = $6,\n\t\t\t\t\ttotal_payments = $7,\n\t\t\t\t\ttotal_deductions = $8,\n\t\t\t\t\tnet_salary = $9,\n\t\t\t\t\ttotal_amount = $10,\n\t\t\t\t\tpayments = $11,\n\t\t\t\t\tdeductions = $12,\n\t\t\t\t\tstatus = $13,\n\t\t\t\t\tis_generated = $14,\n\t\t\t\t\tupdated_at = CURRENT_TIMESTAMP\n\t\t\t\tWHERE employee_id = $1 AND period = $2\n\t\t\t\tRETURNING *\n\t\t\t\t`,\n        [\n          employeeId,\n          period,\n          payDate,\n          payPeriodStart,\n          payPeriodEnd,\n          baseSalary,\n          totalPayments,\n          totalDeductions,\n          netSalary,\n          totalPayments,\n          JSON.stringify(payments),\n          JSON.stringify(deductions),\n          status,\n          isGenerated,\n        ],\n      )\n    } else {\n      // 새 급여명세서 생성\n      result = await query(\n        `\n\t\t\t\tINSERT INTO payslips (\n\t\t\t\t\temployee_id, period, pay_date, pay_period_start, pay_period_end,\n\t\t\t\t\tbase_salary, total_payments, total_deductions, net_salary, total_amount,\n\t\t\t\t\tpayments, deductions, status, is_generated\n\t\t\t\t) VALUES (\n\t\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14\n\t\t\t\t) RETURNING *\n\t\t\t\t`,\n        [\n          employeeId,\n          period,\n          payDate,\n          payPeriodStart,\n          payPeriodEnd,\n          baseSalary,\n          totalPayments,\n          totalDeductions,\n          netSalary,\n          totalPayments,\n          JSON.stringify(payments),\n          JSON.stringify(deductions),\n          status,\n          isGenerated,\n        ],\n      )\n    }\n\n    return json({ success: true, data: result.rows[0] })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여명세서 저장에 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/employee/[employeeId]/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/template/+server.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 1,
        "message": "Unexpected any. Specify a different type.",
        "line": 82,
        "column": 34,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 82,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1891, 1894], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1891, 1894], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 106,
        "column": 9,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 106,
        "endColumn": 62
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 107,
        "column": 9,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 107,
        "endColumn": 62
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 108,
        "column": 9,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 108,
        "endColumn": 57
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 172,
        "column": 22,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 172,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport { formatEmployeeName } from '$lib/utils/format'\nimport { json } from '@sveltejs/kit'\nimport ExcelJS from 'exceljs'\n\nexport async function GET({ url }) {\n  try {\n    const year = url.searchParams.get('year') || new Date().getFullYear().toString()\n    const month = url.searchParams.get('month') || (new Date().getMonth() + 1).toString()\n\n    // 모든 직원 정보 조회\n    const { rows: employees } = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id,\n\t\t\t\te.employee_id,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.hire_date,\n\t\t\t\tsc.annual_salary\n\t\t\tFROM employees e\n\t\t\tLEFT JOIN salary_contracts sc ON e.id = sc.employee_id AND sc.status = 'active'\n\t\t\tWHERE e.status = 'active'\n\t\t\tORDER BY e.department, e.employee_id\n\t\t\t`,\n    )\n\n    // 엑셀 워크북 생성\n    const workbook = new ExcelJS.Workbook()\n    const worksheet = workbook.addWorksheet('급여명세서')\n\n    // 헤더 설정\n    const headers = [\n      '사번',\n      '성명',\n      '부서',\n      '직위',\n      '입사일',\n      '기본급',\n      '직책수당',\n      '상여금',\n      '식대',\n      '차량유지',\n      '연차수당',\n      '연말정산',\n      '건강보험',\n      '장기요양보험',\n      '국민연금',\n      '고용보험',\n      '갑근세',\n      '주민세',\n      '기타',\n      '지급총액',\n      '공제총액',\n      '실지급액',\n    ]\n\n    // 헤더 행 추가\n    worksheet.addRow(headers)\n\n    // 헤더 스타일링\n    const headerRow = worksheet.getRow(1)\n    headerRow.font = { bold: true, color: { argb: 'FFFFFF' } }\n    headerRow.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: '366092' },\n    }\n    headerRow.alignment = { horizontal: 'center', vertical: 'middle' }\n\n    // 열 너비 설정\n    const columnWidths = [\n      10, 12, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\n    ]\n    columnWidths.forEach((width, index) => {\n      worksheet.getColumn(index + 1).width = width\n    })\n\n    // 데이터 행 추가\n    employees.forEach((employee: any) => {\n      const baseSalary = employee.annual_salary ? Math.round(employee.annual_salary / 12) : 3000000\n      const hireDate = employee.hire_date ? toUTC(new Date(employee.hire_date)).split('T')[0] : ''\n\n      const row = [\n        employee.employee_id,\n        formatEmployeeName(employee),\n        employee.department || '부서없음',\n        employee.position || '연구원',\n        hireDate,\n        baseSalary, // 기본급\n        0, // 직책수당\n        0, // 상여금\n        300000, // 식대\n        200000, // 차량유지\n        0, // 연차수당\n        0, // 연말정산\n        0, // 건강보험\n        0, // 장기요양보험\n        0, // 국민연금\n        0, // 고용보험\n        0, // 갑근세\n        0, // 주민세\n        0, // 기타\n        `=SUM(F${worksheet.rowCount}:L${worksheet.rowCount})`, // 지급총액\n        `=SUM(M${worksheet.rowCount}:S${worksheet.rowCount})`, // 공제총액\n        `=T${worksheet.rowCount}-U${worksheet.rowCount}`, // 실지급액\n      ]\n\n      worksheet.addRow(row)\n    })\n\n    // 숫자 형식 설정\n    const numberColumns = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] // F~V열\n    numberColumns.forEach((colIndex) => {\n      worksheet.getColumn(colIndex).numFmt = '#,##0'\n    })\n\n    // 테두리 설정\n    worksheet.eachRow((row, _rowNumber) => {\n      row.eachCell((cell, _colNumber) => {\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' },\n        }\n      })\n    })\n\n    // 설명 시트 추가\n    const instructionSheet = workbook.addWorksheet('작성 가이드')\n    instructionSheet.addRow(['급여명세서 엑셀 업로드 가이드'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['1. 기본 정보'])\n    instructionSheet.addRow(['- 사번, 성명, 부서, 직위, 입사일은 수정하지 마세요'])\n    instructionSheet.addRow(['- 기본급은 연봉/12로 자동 계산됩니다'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['2. 지급사항 (F~L열)'])\n    instructionSheet.addRow(['- 기본급: 기본 급여 (자동 계산)'])\n    instructionSheet.addRow(['- 직책수당: 직책에 따른 수당'])\n    instructionSheet.addRow(['- 상여금: 성과급, 보너스 등'])\n    instructionSheet.addRow(['- 식대: 식비 지원 (비과세)'])\n    instructionSheet.addRow(['- 차량유지: 차량 관련 비용 (비과세)'])\n    instructionSheet.addRow(['- 연차수당: 연차 사용 시 지급'])\n    instructionSheet.addRow(['- 연말정산: 연말정산 관련 지급'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['3. 공제사항 (M~S열)'])\n    instructionSheet.addRow(['- 건강보험: 건강보험료 (3.4%)'])\n    instructionSheet.addRow(['- 장기요양보험: 장기요양보험료 (0.34%)'])\n    instructionSheet.addRow(['- 국민연금: 국민연금 (4.5%)'])\n    instructionSheet.addRow(['- 고용보험: 고용보험료 (0.8%)'])\n    instructionSheet.addRow(['- 갑근세: 소득세 (13%)'])\n    instructionSheet.addRow(['- 주민세: 지방소득세 (1.3%)'])\n    instructionSheet.addRow(['- 기타: 기타 공제사항'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['4. 자동 계산'])\n    instructionSheet.addRow(['- 지급총액: 지급사항 합계 (자동 계산)'])\n    instructionSheet.addRow(['- 공제총액: 공제사항 합계 (자동 계산)'])\n    instructionSheet.addRow(['- 실지급액: 지급총액 - 공제총액 (자동 계산)'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['5. 주의사항'])\n    instructionSheet.addRow(['- 숫자만 입력하세요 (콤마, 원화 표시 제외)'])\n    instructionSheet.addRow(['- 빈 셀은 0으로 처리됩니다'])\n    instructionSheet.addRow(['- 파일을 저장한 후 업로드하세요'])\n\n    // 엑셀 파일 생성\n    const buffer = await workbook.xlsx.writeBuffer()\n\n    // 한글 파일명을 URL 인코딩\n    const fileName = `급여명세서_${year}년${month}월_템플릿.xlsx`\n    const encodedFileName = encodeURIComponent(fileName)\n\n    return new Response(buffer, {\n      headers: {\n        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'Content-Disposition': `attachment; filename*=UTF-8''${encodedFileName}`,\n      },\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '엑셀 템플릿 생성에 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/upload/+server.ts",
    "messages": [
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 88,
        "column": 13,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 88,
        "endColumn": 68
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 214,
        "column": 15,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 214,
        "endColumn": 53
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 241,
        "column": 15,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 241,
        "endColumn": 53
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 266,
        "column": 11,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 266,
        "endColumn": 84
      },
      {
        "ruleId": "no-restricted-syntax",
        "severity": 2,
        "message": "이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.",
        "line": 280,
        "column": 16,
        "nodeType": "TemplateLiteral",
        "messageId": "restrictedSyntax",
        "endLine": 280,
        "endColumn": 70
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport ExcelJS from 'exceljs'\n\nexport async function POST({ request }) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n    const period = formData.get('period') as string // YYYY-MM 형식\n\n    if (!file) {\n      return json(\n        {\n          success: false,\n          error: '파일이 선택되지 않았습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    if (!period) {\n      return json(\n        {\n          success: false,\n          error: '급여 기간이 지정되지 않았습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 파일 확장자 검증\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n      return json(\n        {\n          success: false,\n          error: '엑셀 파일(.xlsx, .xls)만 업로드 가능합니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    // 엑셀 파일 읽기\n    const buffer = await file.arrayBuffer()\n    const workbook = new ExcelJS.Workbook()\n    await workbook.xlsx.load(buffer)\n\n    const worksheet = workbook.getWorksheet('급여명세서')\n    if (!worksheet) {\n      return json(\n        {\n          success: false,\n          error: '급여명세서 시트를 찾을 수 없습니다.',\n        },\n        { status: 400 },\n      )\n    }\n\n    const results = {\n      success: 0,\n      failed: 0,\n      errors: [] as string[],\n      details: [] as unknown[],\n    }\n\n    // 헤더 행 건너뛰고 데이터 행 처리\n    for (let rowNumber = 2; rowNumber <= worksheet.rowCount; rowNumber++) {\n      const row = worksheet.getRow(rowNumber)\n\n      try {\n        // 필수 데이터 추출\n        const employeeId = row.getCell(1).value?.toString()\n        const name = row.getCell(2).value?.toString()\n\n        if (!employeeId || !name) {\n          results.failed++\n          results.errors.push(`행 ${rowNumber}: 사번 또는 성명이 없습니다.`)\n          continue\n        }\n\n        // 직원 ID로 실제 직원 찾기\n        const employeeResult = await query('SELECT id FROM employees WHERE employee_id = $1', [\n          employeeId,\n        ])\n\n        if (employeeResult.rows.length === 0) {\n          results.failed++\n          results.errors.push(\n            `행 ${rowNumber}: 사번 ${employeeId}에 해당하는 직원을 찾을 수 없습니다.`,\n          )\n          continue\n        }\n\n        const employeeDbId = employeeResult.rows[0].id\n\n        // 지급사항 데이터 추출\n        const allowances = [\n          {\n            id: 'basic_salary',\n            name: '기본급',\n            amount: Number(row.getCell(6).value) || 0,\n          },\n          {\n            id: 'position_allowance',\n            name: '직책수당',\n            amount: Number(row.getCell(7).value) || 0,\n          },\n          {\n            id: 'bonus',\n            name: '상여금',\n            amount: Number(row.getCell(8).value) || 0,\n          },\n          {\n            id: 'meal_allowance',\n            name: '식대',\n            amount: Number(row.getCell(9).value) || 0,\n          },\n          {\n            id: 'vehicle_maintenance',\n            name: '차량유지',\n            amount: Number(row.getCell(10).value) || 0,\n          },\n          {\n            id: 'annual_leave_allowance',\n            name: '연차수당',\n            amount: Number(row.getCell(11).value) || 0,\n          },\n          {\n            id: 'year_end_settlement',\n            name: '연말정산',\n            amount: Number(row.getCell(12).value) || 0,\n          },\n        ]\n\n        // 공제사항 데이터 추출\n        const deductions = [\n          {\n            id: 'health_insurance',\n            name: '건강보험',\n            amount: Number(row.getCell(13).value) || 0,\n          },\n          {\n            id: 'long_term_care',\n            name: '장기요양보험',\n            amount: Number(row.getCell(14).value) || 0,\n          },\n          {\n            id: 'national_pension',\n            name: '국민연금',\n            amount: Number(row.getCell(15).value) || 0,\n          },\n          {\n            id: 'employment_insurance',\n            name: '고용보험',\n            amount: Number(row.getCell(16).value) || 0,\n          },\n          {\n            id: 'income_tax',\n            name: '갑근세',\n            amount: Number(row.getCell(17).value) || 0,\n          },\n          {\n            id: 'local_tax',\n            name: '주민세',\n            amount: Number(row.getCell(18).value) || 0,\n          },\n          {\n            id: 'other',\n            name: '기타',\n            amount: Number(row.getCell(19).value) || 0,\n          },\n        ]\n\n        // 총액 계산\n        const totalPayments = allowances.reduce((sum, item) => sum + item.amount, 0)\n        const totalDeductions = deductions.reduce((sum, item) => sum + item.amount, 0)\n        const netSalary = totalPayments - totalDeductions\n        const baseSalary = allowances.find((a) => a.id === 'basic_salary')?.amount || 0\n\n        // 지급일 설정 (해당 월의 마지막 날)\n        const [year, month] = period.split('-')\n        const lastDay = new Date(parseInt(year), parseInt(month), 0).getDate()\n        const payDate = `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`\n\n        // 기존 급여명세서 확인\n        const existingPayslip = await query(\n          'SELECT id FROM payslips WHERE employee_id = $1 AND period = $2',\n          [employeeDbId, period],\n        )\n\n        if (existingPayslip.rows.length > 0) {\n          // 기존 급여명세서 업데이트\n          await query(\n            `\n\t\t\t\t\t\tUPDATE payslips SET\n\t\t\t\t\t\t\tpay_date = $3,\n\t\t\t\t\t\t\tpay_period_start = $4,\n\t\t\t\t\t\t\tpay_period_end = $5,\n\t\t\t\t\t\t\tbase_salary = $6,\n\t\t\t\t\t\t\ttotal_payments = $7,\n\t\t\t\t\t\t\ttotal_deductions = $8,\n\t\t\t\t\t\t\tnet_salary = $9,\n\t\t\t\t\t\t\ttotal_amount = $10,\n\t\t\t\t\t\t\tpayments = $11,\n\t\t\t\t\t\t\tdeductions = $12,\n\t\t\t\t\t\t\tstatus = 'draft',\n\t\t\t\t\t\t\tis_generated = false,\n\t\t\t\t\t\t\tupdated_at = CURRENT_TIMESTAMP\n\t\t\t\t\t\tWHERE employee_id = $1 AND period = $2\n\t\t\t\t\t\t`,\n            [\n              employeeDbId,\n              period,\n              payDate,\n              `${year}-${month.padStart(2, '0')}-01`,\n              `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`,\n              baseSalary,\n              totalPayments,\n              totalDeductions,\n              netSalary,\n              totalPayments,\n              JSON.stringify(allowances),\n              JSON.stringify(deductions),\n            ],\n          )\n        } else {\n          // 새 급여명세서 생성\n          await query(\n            `\n\t\t\t\t\t\tINSERT INTO payslips (\n\t\t\t\t\t\t\temployee_id, period, pay_date, pay_period_start, pay_period_end,\n\t\t\t\t\t\t\tbase_salary, total_payments, total_deductions, net_salary, total_amount,\n\t\t\t\t\t\t\tpayments, deductions, status, is_generated\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, 'draft', false\n\t\t\t\t\t\t)\n\t\t\t\t\t\t`,\n            [\n              employeeDbId,\n              period,\n              payDate,\n              `${year}-${month.padStart(2, '0')}-01`,\n              `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`,\n              baseSalary,\n              totalPayments,\n              totalDeductions,\n              netSalary,\n              totalPayments,\n              JSON.stringify(allowances),\n              JSON.stringify(deductions),\n            ],\n          )\n        }\n\n        results.success++\n        results.details.push({\n          row: rowNumber,\n          employeeId,\n          name,\n          status: 'success',\n          totalPayments,\n          netSalary,\n        })\n      } catch (error) {\n        results.failed++\n        results.errors.push(\n          `행 ${rowNumber}: ${error instanceof Error ? error.message : '알 수 없는 오류'}`,\n        )\n        results.details.push({\n          row: rowNumber,\n          employeeId: row.getCell(1).value?.toString() || 'N/A',\n          name: row.getCell(2).value?.toString() || 'N/A',\n          status: 'failed',\n          error: error instanceof Error ? error.message : '알 수 없는 오류',\n        })\n      }\n    }\n\n    return json({\n      success: true,\n      message: `처리 완료: 성공 ${results.success}건, 실패 ${results.failed}건`,\n      results,\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '파일 업로드 처리 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 },\n    )\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/templates/employees/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/api/templates/projects/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/crm/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/dashboard/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/expenses/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/finance/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/health/+server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/hr/+page.svelte",
    "messages": [
      {
        "ruleId": "svelte/require-each-key",
        "severity": 1,
        "message": "Each block should have a key",
        "line": 1567,
        "column": 17,
        "nodeType": "SvelteEachBlock",
        "messageId": "expectedKey",
        "endLine": 1887,
        "endColumn": 24
      },
      {
        "ruleId": "svelte/require-optimized-style-attribute",
        "severity": 1,
        "message": "It cannot be optimized because too complex.",
        "line": 1601,
        "column": 33,
        "nodeType": "SvelteAttribute",
        "messageId": "complex",
        "endLine": 1608,
        "endColumn": 115
      },
      {
        "ruleId": "svelte/require-each-key",
        "severity": 1,
        "message": "Each block should have a key",
        "line": 1901,
        "column": 19,
        "nodeType": "SvelteEachBlock",
        "messageId": "expectedKey",
        "endLine": 1909,
        "endColumn": 26
      },
      {
        "ruleId": "svelte/require-each-key",
        "severity": 1,
        "message": "Each block should have a key",
        "line": 2159,
        "column": 13,
        "nodeType": "SvelteEachBlock",
        "messageId": "expectedKey",
        "endLine": 2270,
        "endColumn": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  import { logger } from '$lib/utils/logger'\n\n  import PageLayout from '$lib/components/layout/PageLayout.svelte'\n  import DeleteConfirmModal from '$lib/components/ui/DeleteConfirmModal.svelte'\n  import DepartmentModal from '$lib/components/ui/DepartmentModal.svelte'\n  import EmployeeModal from '$lib/components/ui/EmployeeModal.svelte'\n  import OrganizationChart from '$lib/components/ui/OrganizationChart.svelte'\n  import PositionModal from '$lib/components/ui/PositionModal.svelte'\n  import ThemeActivityItem from '$lib/components/ui/ThemeActivityItem.svelte'\n  import ThemeBadge from '$lib/components/ui/ThemeBadge.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeChartPlaceholder from '$lib/components/ui/ThemeChartPlaceholder.svelte'\n  import ThemeGrid from '$lib/components/ui/ThemeGrid.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import ThemeSpacer from '$lib/components/ui/ThemeSpacer.svelte'\n  import ThemeTabs from '$lib/components/ui/ThemeTabs.svelte'\n  import { formatDateForDisplay, getCurrentUTC, getDateDifference } from '$lib/utils/date-handler'\n  import { formatDate, formatEmployeeName } from '$lib/utils/format'\n  import {\n    AlertCircleIcon,\n    BarChart3Icon,\n    BriefcaseIcon,\n    BuildingIcon,\n    CalendarIcon,\n    CheckCircleIcon,\n    CrownIcon,\n    DollarSignIcon,\n    DownloadIcon,\n    EditIcon,\n    EyeIcon,\n    FileSpreadsheetIcon,\n    FileTextIcon,\n    FlaskConicalIcon,\n    MailIcon,\n    PhoneIcon,\n    PlusIcon,\n    TagIcon,\n    TrashIcon,\n    TrendingUpIcon,\n    UserCheckIcon,\n    UserMinusIcon,\n    UserPlusIcon,\n    UsersIcon,\n  } from '@lucide/svelte'\n  // HR 스토어들\n\n  import { jobPostings } from '$lib/stores/recruitment'\n  // 급여 계약 스토어\n  import { contracts, loadContracts } from '$lib/stores/salary/contract-store'\n\n  // 데이터베이스 직원 데이터\n  let employees = $state<any[]>([])\n  let loading = $state(true)\n  let error = $state<string | null>(null)\n\n  // 직원별 현재 급여 정보 가져오기\n  function getCurrentSalary(employeeId: string): {\n    annualSalary: number\n    monthlySalary: number\n    contractType: string\n  } | null {\n    const activeContract = $contracts.find(\n      (contract) =>\n        contract.employeeId === employeeId &&\n        contract.status === 'active' &&\n        (!contract.endDate || new Date(contract.endDate) > new Date(getCurrentUTC())),\n    )\n\n    if (activeContract) {\n      return {\n        annualSalary: activeContract.annualSalary,\n        monthlySalary: activeContract.monthlySalary,\n        contractType: activeContract.contractType,\n      }\n    }\n    return null\n  }\n\n  // 사번 포맷팅 함수 (새로운 사번 형식 1001, 1002 등 표시)\n  function formatEmployeeIdDisplay(employeeId: string, index: number): string {\n    // 새로운 사번 형식 (1001, 1002 등)을 그대로 표시\n    if (employeeId.match(/^\\d{4}$/)) {\n      return employeeId\n    }\n    // 기존 V 형식 사번도 그대로 표시\n    if (employeeId.startsWith('V')) {\n      return employeeId\n    }\n    // 기타 형식의 경우 순서대로 표시\n    return employeeId || `V${(index + 1).toString().padStart(5, '0')}`\n  }\n\n  // 직원 데이터 가져오기 (모든 직원 - 재직자 + 퇴사자)\n  async function fetchEmployees() {\n    try {\n      loading = true\n      error = null\n      const response = await fetch('/api/employees?status=all')\n      if (response.ok) {\n        const result = await response.json()\n        employees = result.data || result.employees || []\n      } else {\n        error = '직원 데이터를 불러오는데 실패했습니다.'\n      }\n    } catch (err) {\n      error = '직원 데이터를 불러오는데 실패했습니다.'\n      logger.error('Error fetching employees:', err)\n    } finally {\n      loading = false\n    }\n  }\n\n  // 부서 데이터 가져오기\n  async function fetchDepartments() {\n    try {\n      const response = await fetch('/api/departments')\n      if (response.ok) {\n        const result = await response.json()\n        departments = result.data || result.departments || []\n      }\n    } catch (err) {\n      logger.error('Error fetching departments:', err)\n    }\n  }\n\n  // 생성일 순으로 정렬된 부서 목록\n  let sortedDepartments = $derived(() => {\n    return [...departments].sort(\n      (a: any, b: any) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime(),\n    )\n  })\n\n  // 직급 데이터 가져오기\n  async function fetchPositions() {\n    try {\n      const response = await fetch('/api/positions')\n      if (response.ok) {\n        const result = await response.json()\n        positions = result.data || result.positions || []\n      }\n    } catch (err) {\n      logger.error('Error fetching positions:', err)\n    }\n  }\n\n  // 이사 데이터 가져오기\n  async function fetchExecutives() {\n    try {\n      executiveLoading = true\n      const response = await fetch('/api/executives')\n      if (response.ok) {\n        const result = await response.json()\n        executives = result.data || result.executives || []\n      }\n    } catch (err) {\n      logger.error('Error fetching executives:', err)\n    } finally {\n      executiveLoading = false\n    }\n  }\n\n  // 직책 데이터 가져오기\n  async function fetchJobTitles() {\n    try {\n      jobTitleLoading = true\n      const response = await fetch('/api/job-titles')\n      if (response.ok) {\n        const result = await response.json()\n        jobTitles = result.data || result.jobTitles || []\n      }\n    } catch (err) {\n      logger.error('Error fetching job titles:', err)\n    } finally {\n      jobTitleLoading = false\n    }\n  }\n\n  // 직급을 카테고리별로 분류\n  function getPositionsByCategory() {\n    const categories = {\n      연구원: positions.filter((p) => p.department === '연구개발'),\n      디자이너: positions.filter((p) => p.department === '디자인'),\n      행정원: positions.filter((p) => p.department === '행정'),\n    }\n    return categories\n  }\n\n  // 직책을 레벨별로 분류\n  function _getJobTitlesByLevel() {\n    const levels = {\n      'C-Level': jobTitles.filter((jt) => jt.level === 1),\n      Management: jobTitles.filter((jt) => jt.level === 2),\n      Specialist: jobTitles.filter((jt) => jt.level === 3),\n    }\n    return levels\n  }\n\n  // T/O (정원) 정보 - 데이터베이스에서 가져옴\n  let teamTO = $derived(() => {\n    const toMap: any = {}\n    if (departments) {\n      departments.forEach((dept: any) => {\n        toMap[dept.name] = dept.max_employees || 0\n      })\n    }\n    return toMap\n  })\n\n  // 반응형 데이터 (데이터베이스 기반)\n  let totalEmployees = $derived(() => {\n    // 재직중인 직원만 카운트 (이사 제외)\n    const activeEmployeeCount = employees?.filter((emp: any) => emp.status === 'active').length || 0\n    return activeEmployeeCount\n  })\n\n  let _totalAllEmployees = $derived(() => {\n    // 모든 직원 카운트 (재직자 + 퇴사자, 이사 제외)\n    return employees?.length || 0\n  })\n\n  let _totalTO = $derived(() => {\n    // 부서별 T/O 카운트를 단순히 합산\n    return Object.values(teamTO() as Record<string, number>).reduce(\n      (sum: number, to: number) => sum + to,\n      0,\n    )\n  })\n\n  let _totalDepartments = $derived(\n    () => [...new Set(employees?.map((emp: any) => emp.department) || [])].length,\n  )\n  let activeRecruitments = $derived(\n    () => $jobPostings.filter((job) => job.status === 'published').length,\n  )\n\n  // 탭 정의\n  const tabs = [\n    {\n      id: 'overview',\n      label: '개요',\n      icon: BarChart3Icon,\n    },\n    {\n      id: 'employees',\n      label: '직원관리',\n      icon: UsersIcon,\n    },\n    {\n      id: 'recruitment',\n      label: '채용관리',\n      icon: UserPlusIcon,\n    },\n    {\n      id: 'departments',\n      label: '부서관리',\n      icon: BuildingIcon,\n    },\n    {\n      id: 'positions',\n      label: '직급관리',\n      icon: UserCheckIcon,\n    },\n    {\n      id: 'executives',\n      label: '이사관리',\n      icon: CrownIcon,\n    },\n    {\n      id: 'job-titles',\n      label: '직책관리',\n      icon: BriefcaseIcon,\n    },\n    {\n      id: 'org-chart',\n      label: '조직도',\n      icon: BuildingIcon,\n    },\n  ]\n\n  let activeTab = $state('overview')\n\n  // 업로드 관련 상태\n  let showUploadModal = $state(false)\n  let uploadFile = $state<File | null>(null)\n  let uploadStatus = $state<'idle' | 'uploading' | 'success' | 'error'>('idle')\n  let uploadMessage = $state('')\n  let uploadProgress = $state(0)\n  let isDragOver = $state(false)\n\n  // 직원 관리 관련 상태\n  let showEmployeeModal = $state(false)\n  let showDeleteModal = $state(false)\n  let selectedEmployee = $state<any>(null)\n  let employeeLoading = $state(false)\n  let deleteLoading = $state(false)\n\n  // 조직 관리 관련 상태\n  let departments = $state<any[]>([])\n  let positions = $state<any[]>([])\n  let showDepartmentModal = $state(false)\n  let showPositionModal = $state(false)\n  let selectedDepartment = $state<any>(null)\n  let selectedPosition = $state<any>(null)\n  let departmentLoading = $state(false)\n  let positionLoading = $state(false)\n\n  // 이사 관리 관련 상태\n  let executives = $state<any[]>([])\n  let jobTitles = $state<any[]>([])\n  let _showExecutiveModal = $state(false)\n  let _showJobTitleModal = $state(false)\n  let _selectedExecutive = $state<any>(null)\n  let _selectedJobTitle = $state<any>(null)\n  let executiveLoading = $state(false)\n  let _jobTitleLoading = $state(false)\n\n  // 직원 검색 및 필터링 상태\n  let searchQuery = $state('')\n  let departmentFilter = $state('')\n  let statusFilter = $state('active') // 기본값: 재직중\n  let currentPage = $state(1)\n  let itemsPerPage = 20\n\n  // 필터링된 직원 목록\n  let filteredEmployees = $derived(\n    (() => {\n      let filtered = employees || []\n\n      // 검색 필터\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase()\n        filtered = filtered.filter(\n          (emp) =>\n            formatEmployeeName(emp).toLowerCase().includes(query) ||\n            emp.email.toLowerCase().includes(query) ||\n            emp.employee_id.toLowerCase().includes(query) ||\n            emp.department.toLowerCase().includes(query) ||\n            emp.position.toLowerCase().includes(query),\n        )\n      }\n\n      // 부서 필터\n      if (departmentFilter) {\n        filtered = filtered.filter((emp) => emp.department === departmentFilter)\n      }\n\n      // 상태 필터\n      if (statusFilter) {\n        filtered = filtered.filter((emp) => emp.status === statusFilter)\n      }\n\n      return filtered\n    })(),\n  )\n\n  // 팀별로 그룹화된 직원 목록\n  let _groupedEmployees = $derived(\n    (() => {\n      const groups: { [key: string]: any[] } = {}\n\n      filteredEmployees.forEach((employee: any) => {\n        const team = employee.department || '기타'\n        if (!groups[team]) {\n          groups[team] = []\n        }\n        groups[team].push(employee)\n      })\n\n      return groups\n    })(),\n  )\n\n  // 페이지네이션 계산 (직원 수 기준)\n  let totalPages = $derived(Math.ceil(filteredEmployees.length / itemsPerPage))\n  let paginatedEmployees = $derived(\n    (() => {\n      const start = (currentPage - 1) * itemsPerPage\n      const end = start + itemsPerPage\n      return filteredEmployees.slice(start, end)\n    })(),\n  )\n\n  // 팀 리더 및 임원인지 확인하는 함수\n  function isTeamLead(employee: any): boolean {\n    const leadershipPositions = [\n      'Team Lead',\n      'CEO',\n      'CFO',\n      'CTO',\n      '대표이사',\n      '재무이사',\n      '기술이사',\n      '연구소장',\n      '상무',\n    ]\n    return (\n      leadershipPositions.includes(employee.job_title_name) ||\n      leadershipPositions.includes(employee.position)\n    )\n  }\n\n  // 직원을 정렬하는 함수 (임원/팀 리더 우선, 퇴사자는 퇴사일 역순)\n  function sortEmployees(employees: any[]): any[] {\n    return employees.sort((a, b) => {\n      // 퇴사자인 경우 퇴사일 역순으로 정렬\n      if (a.status === 'terminated' && b.status === 'terminated') {\n        const aTerminationDate = a.termination_date ? new Date(a.termination_date).getTime() : 0\n        const bTerminationDate = b.termination_date ? new Date(b.termination_date).getTime() : 0\n        return bTerminationDate - aTerminationDate // 최신 퇴사일이 먼저\n      }\n\n      // 퇴사자와 재직자 구분 (재직자가 먼저)\n      if (a.status === 'terminated' && b.status !== 'terminated') return 1\n      if (a.status !== 'terminated' && b.status === 'terminated') return -1\n\n      // 재직자인 경우 기존 로직 적용\n      const aIsLeader = isTeamLead(a)\n      const bIsLeader = isTeamLead(b)\n\n      // 임원/팀 리더가 아닌 직원보다 임원/팀 리더를 앞에 배치\n      if (aIsLeader && !bIsLeader) return -1\n      if (!aIsLeader && bIsLeader) return 1\n\n      // 둘 다 임원/팀 리더이거나 둘 다 일반 직원인 경우 이름순 정렬\n      const aName = formatEmployeeName(a)\n      const bName = formatEmployeeName(b)\n      return aName.localeCompare(bName)\n    })\n  }\n\n  // 페이지네이션된 직원들을 팀별로 그룹화 (임원/팀 리더 우선 정렬)\n  let paginatedGroupedEmployees = $derived(\n    (() => {\n      const groups: { [key: string]: any[] } = {}\n\n      paginatedEmployees.forEach((employee: any) => {\n        const team = employee.department || '기타'\n        if (!groups[team]) {\n          groups[team] = []\n        }\n        groups[team].push(employee)\n      })\n\n      // 각 팀 내에서 팀 리더를 우선 정렬\n      Object.keys(groups).forEach((team) => {\n        groups[team] = sortEmployees(groups[team])\n      })\n\n      // 부서별 정렬 순서 적용\n      const departmentOrder: { [key: string]: number } = {\n        대표: 1,\n        전략기획실: 2,\n        연구소: 3,\n        부서없음: 999,\n      }\n\n      // 정렬된 그룹 객체 생성\n      const sortedGroups: { [key: string]: any[] } = {}\n      const sortedTeamNames = Object.keys(groups).sort((a, b) => {\n        const aOrder = departmentOrder[a] || 100\n        const bOrder = departmentOrder[b] || 100\n\n        if (aOrder !== bOrder) {\n          return aOrder - bOrder\n        }\n\n        // 같은 우선순위 내에서는 알파벳 순\n        return a.localeCompare(b)\n      })\n\n      sortedTeamNames.forEach((teamName) => {\n        sortedGroups[teamName] = groups[teamName]\n      })\n\n      return sortedGroups\n    })(),\n  )\n\n  // 통계 데이터\n  let stats = $derived(\n    (() => {\n      const statsData = [\n        {\n          title: '직원 수',\n          value: `${totalEmployees()}`,\n          change: '+5%',\n          changeType: 'positive' as const,\n          icon: UsersIcon,\n        },\n        {\n          title: '진행중인 채용',\n          value: activeRecruitments(),\n          change: '+2',\n          changeType: 'positive' as const,\n          icon: UserPlusIcon,\n        },\n      ]\n\n      return statsData\n    })(),\n  )\n\n  // 액션 버튼들\n  const actions = [\n    {\n      label: '직원 추가',\n      icon: PlusIcon,\n      onclick: () => openAddEmployeeModal(),\n      variant: 'primary' as const,\n    },\n    {\n      label: '채용 공고',\n      icon: FileTextIcon,\n      onclick: () => {\n        // 채용 공고 탭으로 이동\n        activeTab = 'recruitment'\n      },\n      variant: 'success' as const,\n    },\n  ]\n\n  // 최근 활동 데이터\n  let recentActivities = $derived(() => {\n    const activities: Array<{\n      type: string\n      title: string\n      description: string\n      time: string\n      icon: any\n      color: string\n      metadata?: any\n    }> = []\n\n    // 최근 입사자 (최근 3개월 이내)\n    const threeMonthsAgo = new Date(getCurrentUTC())\n    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3)\n\n    employees\n      .filter(\n        (emp: any) =>\n          emp.status === 'active' && emp.hire_date && new Date(emp.hire_date) >= threeMonthsAgo,\n      )\n      .sort((a: any, b: any) => new Date(b.hire_date).getTime() - new Date(a.hire_date).getTime())\n      .slice(0, 3)\n      .forEach((emp: any) => {\n        const daysSinceHire = getDateDifference(emp.hire_date, getCurrentUTC())\n        const hireDate = formatDateForDisplay(emp.hire_date, 'KOREAN')\n        activities.push({\n          type: 'hire',\n          title: '신규 입사',\n          description: `${formatEmployeeName(emp)}님이 ${hireDate}에 ${emp.department} ${emp.position}로 입사했습니다. (${daysSinceHire}일 경과)`,\n          time: emp.hire_date,\n          icon: UserPlusIcon,\n          color: 'text-green-600',\n          metadata: {\n            daysSinceHire,\n            department: emp.department,\n            position: emp.position,\n            employeeName: formatEmployeeName(emp),\n          },\n        })\n      })\n\n    // 퇴직 예정자 (1개월 이내)\n    const oneMonthFromNow = new Date(getCurrentUTC())\n    oneMonthFromNow.setMonth(oneMonthFromNow.getMonth() + 1)\n\n    employees\n      .filter(\n        (emp: any) =>\n          emp.status === 'active' &&\n          emp.termination_date &&\n          new Date(emp.termination_date) > new Date() && // 미래 날짜\n          new Date(emp.termination_date) <= oneMonthFromNow, // 1개월 이내\n      )\n      .sort(\n        (a: any, b: any) =>\n          new Date(a.termination_date).getTime() - new Date(b.termination_date).getTime(),\n      )\n      .slice(0, 3)\n      .forEach((emp: any) => {\n        const daysLeft = Math.ceil(getDateDifference(getCurrentUTC(), emp.termination_date))\n        const isContract = emp.employment_type === 'contract'\n        const terminationDate = formatDateForDisplay(emp.termination_date, 'KOREAN')\n        activities.push({\n          type: 'termination_pending',\n          title: isContract ? '계약 만료 예정' : '퇴직 예정',\n          description: `${formatEmployeeName(emp)}님(${emp.department} ${emp.position})이 ${terminationDate}에 ${isContract ? '계약 만료' : '퇴직'} 예정입니다. (${daysLeft}일 남음)`,\n          time: emp.termination_date,\n          icon: CalendarIcon,\n          color: 'text-orange-600',\n          metadata: {\n            daysLeft,\n            employmentType: emp.employment_type,\n            department: emp.department,\n            employeeName: formatEmployeeName(emp),\n            position: emp.position,\n          },\n        })\n      })\n\n    // 최근 퇴사자 (최근 3개월 이내)\n    const threeMonthsAgoForTermination = new Date(getCurrentUTC())\n    threeMonthsAgoForTermination.setMonth(threeMonthsAgoForTermination.getMonth() - 3)\n\n    employees\n      .filter(\n        (emp: any) =>\n          emp.status === 'terminated' &&\n          emp.termination_date &&\n          new Date(emp.termination_date) >= threeMonthsAgoForTermination,\n      )\n      .sort(\n        (a: any, b: any) =>\n          new Date(b.termination_date).getTime() - new Date(a.termination_date).getTime(),\n      )\n      .slice(0, 3)\n      .forEach((emp: any) => {\n        const daysSinceTermination = getDateDifference(emp.termination_date, getCurrentUTC())\n        const terminationDate = formatDateForDisplay(emp.termination_date, 'KOREAN')\n        activities.push({\n          type: 'termination',\n          title: '퇴사 완료',\n          description: `${formatEmployeeName(emp)}님(${emp.department} ${emp.position})이 ${terminationDate}에 퇴사했습니다. (${daysSinceTermination}일 경과)`,\n          time: emp.termination_date,\n          icon: UserMinusIcon,\n          color: 'text-red-600',\n          metadata: {\n            daysSinceTermination,\n            department: emp.department,\n            employeeName: formatEmployeeName(emp),\n            position: emp.position,\n          },\n        })\n      })\n\n    // 부서별 인원 변화 (최근 입사/퇴사로 인한 변화)\n    const departmentChanges = employees.reduce((acc: any, emp: any) => {\n      if (!acc[emp.department]) {\n        acc[emp.department] = { hires: [], terminations: [] }\n      }\n\n      if (emp.status === 'active' && emp.hire_date && new Date(emp.hire_date) >= threeMonthsAgo) {\n        acc[emp.department].hires.push(formatEmployeeName(emp))\n      }\n      if (\n        emp.status === 'terminated' &&\n        emp.termination_date &&\n        new Date(emp.termination_date) >= threeMonthsAgoForTermination\n      ) {\n        acc[emp.department].terminations.push(formatEmployeeName(emp))\n      }\n\n      return acc\n    }, {})\n\n    // 변화가 있는 부서 정보 추가\n    Object.entries(departmentChanges).forEach(([dept, changes]: [string, any]) => {\n      if (changes.hires.length > 0 || changes.terminations.length > 0) {\n        const netChange = changes.hires.length - changes.terminations.length\n        if (netChange !== 0) {\n          let description = `${dept} 부서: `\n          if (changes.hires.length > 0) {\n            description += `입사 ${changes.hires.length}명(${changes.hires.join(', ')})`\n          }\n          if (changes.terminations.length > 0) {\n            if (changes.hires.length > 0) description += ', '\n            description += `퇴사 ${changes.terminations.length}명(${changes.terminations.join(', ')})`\n          }\n          description += ` (순증감: ${netChange > 0 ? '+' : ''}${netChange}명)`\n\n          activities.push({\n            type: 'department_change',\n            title: '부서 인원 변화',\n            description: description,\n            time: new Date().toISOString(),\n            icon: BuildingIcon,\n            color: netChange > 0 ? 'text-blue-600' : 'text-red-600',\n            metadata: {\n              department: dept,\n              netChange,\n              hires: changes.hires,\n              terminations: changes.terminations,\n            },\n          })\n        }\n      }\n    })\n\n    // 시간순 정렬 후 최대 8개 반환\n    return activities\n      .sort((a, b) => new Date(b.time).getTime() - new Date(a.time).getTime())\n      .slice(0, 8)\n  })\n\n  // 부서별 직원 데이터 (T/O 포함)\n  let departmentData = $derived(() => {\n    if (!employees || employees.length === 0 || !departments || departments.length === 0) return []\n\n    // 모든 직원 카운트 (이사 포함)\n    const deptCounts = employees.reduce(\n      (acc: any, emp: any) => {\n        acc[emp.department] = (acc[emp.department] || 0) + 1\n        return acc\n      },\n      {} as Record<string, number>,\n    )\n\n    // departments 데이터를 기반으로 부서별 데이터 생성 (부서없음 포함)\n    const deptData = departments.map((dept: any) => {\n      const currentCount = deptCounts[dept.name] || 0\n      const departmentTO = teamTO()[dept.name] || 0\n      const percentage = Math.round((currentCount / totalEmployees()) * 100)\n\n      return {\n        department: dept.name,\n        count: currentCount,\n        to: departmentTO,\n        percentage,\n        // T/O 대비 현재 인원 비율\n        toPercentage: departmentTO > 0 ? Math.round((currentCount / departmentTO) * 100) : 0,\n        // T/O 상태 (여유/충족/초과)\n        toStatus:\n          departmentTO === 0\n            ? 'unlimited'\n            : currentCount > departmentTO\n              ? 'over'\n              : currentCount === departmentTO\n                ? 'full'\n                : 'available',\n      }\n    })\n\n    // 부서 정렬 순서: 대표 → 전략기획실 → 연구소 → 각 팀들 → 부서없음\n    return deptData.sort((a, b) => {\n      const order: { [key: string]: number } = {\n        대표: 1,\n        전략기획실: 2,\n        연구소: 3,\n        부서없음: 999,\n      }\n\n      const aOrder = order[a.department] || 100\n      const bOrder = order[b.department] || 100\n\n      if (aOrder !== bOrder) {\n        return aOrder - bOrder\n      }\n\n      // 같은 우선순위 내에서는 알파벳 순\n      return a.department.localeCompare(b.department)\n    })\n  })\n\n  // 최근 채용 공고\n  let recentJobPostings = $derived(() => {\n    return $jobPostings\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 5)\n  })\n\n  // 컴포넌트 마운트 시 데이터 로드\n  $effect(() => {\n    fetchEmployees()\n    fetchDepartments()\n    fetchPositions()\n    fetchExecutives()\n    fetchJobTitles()\n    loadContracts() // 급여 계약 데이터 로드\n  })\n\n  // 탭 변경 시 해당 탭의 데이터 로드\n  $effect(() => {\n    // activeTab 변경을 감지하여 데이터 로드\n    const currentTab = activeTab\n    logger.log('HR Tab changed to:', currentTab)\n\n    switch (currentTab) {\n      case 'employees':\n        logger.log('Loading employees data...')\n        fetchEmployees()\n        break\n      case 'departments':\n        logger.log('Loading departments data...')\n        fetchDepartments()\n        break\n      case 'positions':\n        logger.log('Loading positions data...')\n        fetchPositions()\n        break\n      case 'executives':\n        logger.log('Loading executives data...')\n        fetchExecutives()\n        break\n      case 'job-titles':\n        logger.log('Loading job titles data...')\n        fetchJobTitles()\n        break\n    }\n  })\n\n  // 탭 변경 핸들러\n  function handleTabChange(tabId: string) {\n    logger.log('HR Tab change requested:', tabId)\n    activeTab = tabId\n  }\n\n  // 파일 업로드 처리\n  function handleFileSelect(event: Event) {\n    const target = event.target as HTMLInputElement\n    const file = target.files?.[0]\n    if (file) {\n      validateAndSetFile(file)\n    }\n  }\n\n  // 드래그 앤 드롭 핸들러\n  function handleDragOver(event: DragEvent) {\n    event.preventDefault()\n    isDragOver = true\n  }\n\n  function handleDragLeave(event: DragEvent) {\n    event.preventDefault()\n    isDragOver = false\n  }\n\n  function handleDrop(event: DragEvent) {\n    event.preventDefault()\n    isDragOver = false\n\n    const files = event.dataTransfer?.files\n    if (files && files.length > 0) {\n      const file = files[0]\n      validateAndSetFile(file)\n    }\n  }\n\n  // 파일 검증 및 설정\n  function validateAndSetFile(file: File) {\n    // 파일 크기 검증 (10MB 제한)\n    const maxSize = 10 * 1024 * 1024 // 10MB\n    if (file.size > maxSize) {\n      uploadMessage = '파일 크기는 10MB를 초과할 수 없습니다.'\n      uploadStatus = 'error'\n      return\n    }\n\n    // 파일 형식 검증\n    const allowedTypes = [\n      'text/csv',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n    ]\n    const allowedExtensions = ['.csv', '.xlsx', '.xls']\n\n    const isValidType = allowedTypes.includes(file.type)\n    const isValidExtension = allowedExtensions.some((ext) => file.name.toLowerCase().endsWith(ext))\n\n    if (!isValidType && !isValidExtension) {\n      uploadMessage = 'CSV 또는 Excel 파일만 업로드 가능합니다.'\n      uploadStatus = 'error'\n      return\n    }\n\n    uploadFile = file\n    uploadStatus = 'idle'\n    uploadMessage = ''\n  }\n\n  // 엑셀 업로드 실행\n  async function uploadExcel() {\n    if (!uploadFile) return\n\n    uploadStatus = 'uploading'\n    uploadProgress = 0\n    uploadMessage = '파일을 업로드하는 중...'\n\n    try {\n      const formData = new FormData()\n      formData.append('file', uploadFile)\n\n      // 업로드 진행률 시뮬레이션\n      const progressInterval = setInterval(() => {\n        uploadProgress += 10\n        if (uploadProgress >= 90) {\n          clearInterval(progressInterval)\n        }\n      }, 200)\n\n      const response = await fetch('/api/employees/upload', {\n        method: 'POST',\n        body: formData,\n      })\n\n      clearInterval(progressInterval)\n      uploadProgress = 100\n\n      if (response.ok) {\n        const result = await response.json()\n        uploadStatus = 'success'\n        uploadMessage = `성공적으로 ${result.count}명의 직원이 업로드되었습니다.`\n\n        // 직원 목록 새로고침\n        await fetchEmployees()\n\n        setTimeout(() => {\n          showUploadModal = false\n          uploadStatus = 'idle'\n          uploadFile = null\n          uploadProgress = 0\n          uploadMessage = ''\n        }, 2000)\n      } else {\n        throw new Error('업로드 실패')\n      }\n    } catch (error) {\n      uploadStatus = 'error'\n      uploadMessage = '업로드 중 오류가 발생했습니다. 파일 형식을 확인해주세요.'\n      logger.error('Upload error:', error)\n    }\n  }\n\n  // 업로드 모달 열기\n  function openUploadModal() {\n    showUploadModal = true\n    uploadStatus = 'idle'\n    uploadFile = null\n    uploadProgress = 0\n    uploadMessage = ''\n  }\n\n  // 업로드 모달 닫기\n  function closeUploadModal() {\n    showUploadModal = false\n    uploadStatus = 'idle'\n    uploadFile = null\n    uploadProgress = 0\n    uploadMessage = ''\n  }\n\n  // 직원 추가/수정\n  async function handleEmployeeSave(event: any) {\n    try {\n      const employeeData = event.detail\n      employeeLoading = true\n\n      const url = '/api/employees'\n      const method = selectedEmployee?.id ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(employeeData),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchEmployees() // 데이터 새로고침\n        showEmployeeModal = false\n        selectedEmployee = null\n      } else {\n        alert(result.error || '직원 저장에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error saving employee:', error)\n      alert('직원 저장 중 오류가 발생했습니다.')\n    } finally {\n      employeeLoading = false\n    }\n  }\n\n  // 직원 삭제/아카이브\n  async function handleEmployeeDelete(action: 'delete' | 'archive') {\n    if (!selectedEmployee) return\n\n    try {\n      deleteLoading = true\n\n      const url = `/api/employees/${selectedEmployee.id}${action === 'archive' ? '?archive=true' : ''}`\n      const response = await fetch(url, {\n        method: 'DELETE',\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchEmployees() // 데이터 새로고침\n        showDeleteModal = false\n        selectedEmployee = null\n      } else {\n        alert(result.error || '직원 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error deleting employee:', error)\n      alert('직원 삭제 중 오류가 발생했습니다.')\n    } finally {\n      deleteLoading = false\n    }\n  }\n\n  // 페이지네이션 함수들\n  function setCurrentPage(page: number) {\n    currentPage = page\n  }\n\n  // 검색/필터 변경 시 첫 페이지로 이동\n  $effect(() => {\n    searchQuery\n    departmentFilter\n    statusFilter\n    currentPage = 1\n  })\n\n  // 직원 추가 모달 열기\n  function openAddEmployeeModal() {\n    selectedEmployee = null\n    showEmployeeModal = true\n  }\n\n  // 직원 수정 모달 열기\n  function openEditEmployeeModal(employee: any) {\n    selectedEmployee = employee\n    showEmployeeModal = true\n  }\n\n  // 직원 삭제 모달 열기\n  function openDeleteEmployeeModal(employee: any) {\n    selectedEmployee = employee\n    showDeleteModal = true\n  }\n\n  // 직원 템플릿 다운로드\n  async function downloadEmployeeTemplate() {\n    try {\n      const response = await fetch('/api/templates/employees')\n      if (response.ok) {\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = 'employee_template.csv'\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n      } else {\n        alert('템플릿 다운로드에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('템플릿 다운로드 에러:', error)\n      alert('템플릿 다운로드 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 부서 관리 함수들\n  async function handleDepartmentSave(event: any) {\n    try {\n      const departmentData = event.detail\n      departmentLoading = true\n\n      const url = selectedDepartment?.id\n        ? `/api/departments/${selectedDepartment.id}`\n        : '/api/departments'\n      const method = selectedDepartment?.id ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(departmentData),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchDepartments()\n        showDepartmentModal = false\n        selectedDepartment = null\n      } else {\n        alert(result.error || '부서 저장에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error saving department:', error)\n      alert('부서 저장 중 오류가 발생했습니다.')\n    } finally {\n      departmentLoading = false\n    }\n  }\n\n  async function handleDepartmentDelete(department: any, hardDelete = false) {\n    try {\n      const url = `/api/departments/${department.id}${hardDelete ? '?hard=true' : ''}`\n      const response = await fetch(url, {\n        method: 'DELETE',\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchDepartments()\n      } else {\n        alert(result.error || '부서 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error deleting department:', error)\n      alert('부서 삭제 중 오류가 발생했습니다.')\n    }\n  }\n\n  function openAddDepartmentModal() {\n    selectedDepartment = null\n    showDepartmentModal = true\n  }\n\n  function openEditDepartmentModal(department: any) {\n    selectedDepartment = department\n    showDepartmentModal = true\n  }\n\n  // 직급 관리 함수들\n  async function handlePositionSave(event: any) {\n    try {\n      const positionData = event.detail\n      positionLoading = true\n\n      const url = selectedPosition?.id ? `/api/positions/${selectedPosition.id}` : '/api/positions'\n      const method = selectedPosition?.id ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(positionData),\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchPositions()\n        showPositionModal = false\n        selectedPosition = null\n      } else {\n        alert(result.error || '직급 저장에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error saving position:', error)\n      alert('직급 저장 중 오류가 발생했습니다.')\n    } finally {\n      positionLoading = false\n    }\n  }\n\n  async function handlePositionDelete(position: any, hardDelete = false) {\n    try {\n      const url = `/api/positions/${position.id}${hardDelete ? '?hard=true' : ''}`\n      const response = await fetch(url, {\n        method: 'DELETE',\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchPositions()\n      } else {\n        alert(result.error || '직급 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error deleting position:', error)\n      alert('직급 삭제 중 오류가 발생했습니다.')\n    }\n  }\n\n  function openAddPositionModal(category?: string) {\n    selectedPosition = null\n    showPositionModal = true\n    // 카테고리 정보를 모달에 전달할 수 있도록 설정\n    if (category) {\n      // 모달에서 카테고리 정보를 사용할 수 있도록 상태 설정\n      // 이는 PositionModal 컴포넌트에서 활용할 수 있습니다\n    }\n  }\n\n  // 이사 관리 함수들\n  function openAddExecutiveModal() {\n    selectedExecutive = null\n    showExecutiveModal = true\n  }\n\n  function openEditExecutiveModal(executive: any) {\n    selectedExecutive = executive\n    showExecutiveModal = true\n  }\n\n  async function handleExecutiveDelete(executive: any) {\n    if (confirm(`정말로 ${formatEmployeeName(executive)} 이사를 삭제하시겠습니까?`)) {\n      try {\n        const response = await fetch(`/api/executives/${executive.id}`, {\n          method: 'DELETE',\n        })\n\n        if (response.ok) {\n          await fetchExecutives()\n          alert('이사가 성공적으로 삭제되었습니다.')\n        } else {\n          const result = await response.json()\n          alert(result.error || '이사 삭제 중 오류가 발생했습니다.')\n        }\n      } catch (error) {\n        logger.error('Error deleting executive:', error)\n        alert('이사 삭제 중 오류가 발생했습니다.')\n      }\n    }\n  }\n\n  // 직책 관리 함수들\n  function openAddJobTitleModal(level?: string) {\n    selectedJobTitle = null\n    showJobTitleModal = true\n    // 레벨 정보를 모달에 전달할 수 있도록 설정\n    if (level) {\n      // 모달에서 레벨 정보를 사용할 수 있도록 상태 설정\n    }\n  }\n\n  function openEditJobTitleModal(jobTitle: any) {\n    selectedJobTitle = jobTitle\n    showJobTitleModal = true\n  }\n\n  async function handleJobTitleDelete(jobTitle: any) {\n    if (confirm(`정말로 ${jobTitle.name} 직책을 삭제하시겠습니까?`)) {\n      try {\n        const response = await fetch(`/api/job-titles/${jobTitle.id}`, {\n          method: 'DELETE',\n        })\n\n        if (response.ok) {\n          await fetchJobTitles()\n          alert('직책이 성공적으로 삭제되었습니다.')\n        } else {\n          const result = await response.json()\n          alert(result.error || '직책 삭제 중 오류가 발생했습니다.')\n        }\n      } catch (error) {\n        logger.error('Error deleting job title:', error)\n        alert('직책 삭제 중 오류가 발생했습니다.')\n      }\n    }\n  }\n\n  function openEditPositionModal(position: any) {\n    selectedPosition = position\n    showPositionModal = true\n  }\n</script>\n\n<PageLayout\n  title=\"인사관리\"\n  subtitle=\"직원 정보, 채용, 성과 관리\"\n  {stats}\n  {actions}\n  searchPlaceholder=\"직원명, 부서, 직급으로 검색...\"\n>\n  <!-- 탭 시스템 -->\n  <ThemeTabs\n    {tabs}\n    bind:activeTab\n    variant=\"underline\"\n    size=\"md\"\n    class=\"mb-6\"\n    onTabChange={handleTabChange}\n  >\n    {#snippet children(tab: any)}\n      {#if tab.id === 'overview'}\n        <!-- 개요 탭 -->\n        <ThemeSpacer size={6}>\n          <!-- 메인 대시보드 -->\n          <ThemeGrid cols={1} lgCols={2} gap={6}>\n            <!-- 부서별 직원 현황 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                  부서별 직원 현황 (T/O)\n                </h3>\n                <p class=\"text-sm mt-1\" style:color=\"var(--color-text-secondary)\">\n                  현재 인원 / 정원 (T/O) • 색상: 🟢여유 🟡충족 🔴초과 ⚪미설정\n                </p>\n              </div>\n              <ThemeSpacer size={4}>\n                {#each departmentData() as dept, idx (idx)}\n                  <!-- TODO: replace index key with a stable id when model provides one -->\n                  <div\n                    class=\"flex items-center justify-between p-3 rounded-lg\"\n                    style:background=\"var(--color-surface-elevated)\"\n                  >\n                    <div class=\"flex items-center gap-3\">\n                      <BuildingIcon size={20} style=\"color: var(--color-primary);\" />\n                      <div>\n                        <h4 class=\"font-medium\" style:color=\"var(--color-text)\">\n                          {dept.department}\n                        </h4>\n                        <div class=\"flex items-center gap-2\">\n                          <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                            {dept.count}명\n                            {#if dept.to > 0}\n                              / {dept.to}명\n                            {:else}\n                              / ∞\n                            {/if}\n                          </p>\n                          <!-- T/O 상태 표시 -->\n                          {#if dept.toStatus === 'over'}\n                            <div class=\"w-2 h-2 rounded-full bg-red-500\" title=\"정원 초과\"></div>\n                          {:else if dept.toStatus === 'full'}\n                            <div class=\"w-2 h-2 rounded-full bg-yellow-500\" title=\"정원 충족\"></div>\n                          {:else if dept.toStatus === 'available'}\n                            <div class=\"w-2 h-2 rounded-full bg-green-500\" title=\"여유 있음\"></div>\n                          {:else}\n                            <div class=\"w-2 h-2 rounded-full bg-gray-400\" title=\"T/O 미설정\"></div>\n                          {/if}\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"flex items-center gap-2\">\n                      <!-- T/O 대비 비율 -->\n                      {#if dept.to > 0}\n                        <ThemeBadge\n                          variant={dept.toStatus === 'over'\n                            ? 'error'\n                            : dept.toStatus === 'full'\n                              ? 'warning'\n                              : 'success'}\n                          size=\"sm\"\n                        >\n                          {dept.toPercentage}%\n                        </ThemeBadge>\n                      {/if}\n                      <!-- 전체 대비 비율 -->\n                      <ThemeBadge variant=\"info\" size=\"sm\">{dept.percentage}%</ThemeBadge>\n                    </div>\n                  </div>\n                {/each}\n              </ThemeSpacer>\n            </ThemeCard>\n\n            <!-- 최근 활동 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">최근 활동</h3>\n              </div>\n              <ThemeSpacer size={4}>\n                {#each recentActivities() as activity, idx (idx)}\n                  <!-- TODO: replace index key with a stable id when model provides one -->\n                  <ThemeActivityItem\n                    title={activity.title}\n                    time={activity.time}\n                    description={activity.description}\n                    icon={activity.icon}\n                  />\n                {/each}\n              </ThemeSpacer>\n            </ThemeCard>\n          </ThemeGrid>\n\n          <!-- 차트 섹션 -->\n          <ThemeGrid cols={1} lgCols={2} gap={6}>\n            <!-- 부서별 분포 차트 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                  부서별 직원 분포\n                </h3>\n              </div>\n              <ThemeChartPlaceholder title=\"부서별 직원 수\" icon={TrendingUpIcon} />\n            </ThemeCard>\n\n            <!-- 채용 현황 차트 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">채용 현황</h3>\n              </div>\n              <ThemeChartPlaceholder title=\"월별 채용 현황\" icon={UserPlusIcon} />\n            </ThemeCard>\n          </ThemeGrid>\n\n          <!-- 최근 채용 공고 -->\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">최근 채용 공고</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={() => {\n                  // 채용관리 탭으로 이동\n                  activeTab = 'recruitment'\n                }}\n              >\n                <PlusIcon size={16} />\n                새 공고\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-4\">\n              {#each recentJobPostings() as job, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex-1\">\n                    <h4 class=\"font-medium\" style:color=\"var(--color-text)\">\n                      {job.title}\n                    </h4>\n                    <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                      {job.department} • {job.employmentType}\n                    </p>\n                    <div class=\"flex items-center gap-2 mt-2\">\n                      <ThemeBadge variant={job.status === 'published' ? 'success' : 'warning'}>\n                        {job.status === 'published' ? '모집중' : '마감'}\n                      </ThemeBadge>\n                      <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                        {formatDate(job.createdAt)}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 상세 보기\n                        alert('채용 공고 상세 보기 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EyeIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 수정\n                        alert('채용 공고 수정 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EditIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 삭제\n                        alert('채용 공고 삭제 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <TrashIcon size={16} />\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'employees'}\n        <!-- 직원관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">직원 목록</h3>\n              <div class=\"flex items-center gap-2\">\n                <ThemeButton\n                  variant=\"primary\"\n                  size=\"sm\"\n                  class=\"flex items-center gap-2\"\n                  onclick={openAddEmployeeModal}\n                >\n                  <PlusIcon size={16} />\n                  직원 추가\n                </ThemeButton>\n                <button\n                  type=\"button\"\n                  onclick={openUploadModal}\n                  class=\"px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors flex items-center gap-2\"\n                >\n                  <FileSpreadsheetIcon size={16} />\n                  엑셀 업로드\n                </button>\n              </div>\n            </div>\n\n            {#if loading}\n              <div class=\"flex items-center justify-center py-8\">\n                <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                  직원 데이터를 불러오는 중...\n                </div>\n              </div>\n            {:else if error}\n              <div class=\"flex items-center justify-center py-8\">\n                <div class=\"text-sm text-red-500\">{error}</div>\n              </div>\n            {:else if !employees || employees.length === 0}\n              <div class=\"flex items-center justify-center py-8\">\n                <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                  등록된 직원이 없습니다.\n                </div>\n              </div>\n            {:else}\n              <!-- 검색 및 필터 -->\n              <div class=\"mb-6 space-y-4\">\n                <div class=\"flex flex-col sm:flex-row gap-4\">\n                  <div class=\"flex-1\">\n                    <input\n                      type=\"text\"\n                      bind:value={searchQuery}\n                      placeholder=\"이름, 이메일, 부서로 검색...\"\n                      class=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-input-background)\"\n                      style:color=\"var(--color-text)\"\n                    />\n                  </div>\n                  <div class=\"flex gap-2\">\n                    <select\n                      bind:value={departmentFilter}\n                      class=\"px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-input-background)\"\n                      style:color=\"var(--color-text)\"\n                    >\n                      <option value=\"\">전체 부서</option>\n                      <option value=\"대표\">대표</option>\n                      <option value=\"전략기획실\">전략기획실</option>\n                      <option value=\"연구소\">연구소</option>\n                      {#each departments.filter((d) => !['대표', '전략기획실', '연구소', '부서없음'].includes(d.name)) as dept, idx (idx)}\n                        <!-- TODO: replace index key with a stable id when model provides one -->\n                        <option value={dept.name}>{dept.name}</option>\n                      {/each}\n                      <option value=\"부서없음\">부서없음</option>\n                    </select>\n                    <select\n                      bind:value={statusFilter}\n                      class=\"px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-input-background)\"\n                      style:color=\"var(--color-text)\"\n                    >\n                      <option value=\"\">전체 상태</option>\n                      <option value=\"active\">재직중</option>\n                      <option value=\"on-leave\">휴직중</option>\n                      <option value=\"terminated\">퇴사</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <!-- 팀별 직원 카드 그리드 -->\n              <div class=\"space-y-8\">\n                {#each Object.keys(paginatedGroupedEmployees) as teamName}\n                  <div class=\"space-y-4\">\n                    <!-- 팀 헤더 -->\n                    <div\n                      class=\"flex items-center gap-3 pb-2 border-b\"\n                      style:border-color=\"var(--color-border)\"\n                    >\n                      <BuildingIcon size={20} style=\"color: var(--color-primary);\" />\n                      <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                        {teamName}\n                      </h3>\n                      <span\n                        class=\"text-sm px-2 py-1 rounded-full\"\n                        style:background=\"var(--color-primary-light)\"\n                        style:color=\"var(--color-primary)\"\n                      >\n                        {paginatedGroupedEmployees[teamName]?.length || 0}명\n                      </span>\n                    </div>\n\n                    <!-- 팀 내 직원 카드 그리드 -->\n                    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {#each paginatedGroupedEmployees[teamName] || [] as employee, i (i)}\n                        <div\n                          class=\"p-4 rounded-lg border transition-all duration-300 hover:shadow-lg hover:scale-[1.02] overflow-hidden {isTeamLead(\n                            employee,\n                          )\n                            ? 'ring-2 ring-yellow-400/50 shadow-lg'\n                            : employee.employment_type === 'contract'\n                              ? 'ring-2 ring-purple-400/50 shadow-md'\n                              : employee.termination_date &&\n                                  new Date(employee.termination_date) > new Date()\n                                ? 'ring-2 ring-red-400/50 shadow-md'\n                                : ''}\"\n                          style={isTeamLead(employee)\n                            ? 'border-color: var(--color-warning); background: linear-gradient(135deg, var(--color-surface-elevated) 0%, rgba(251, 191, 36, 0.05) 100%);'\n                            : employee.employment_type === 'contract'\n                              ? 'border-color: var(--color-primary); background: linear-gradient(135deg, var(--color-surface-elevated) 0%, rgba(147, 51, 234, 0.05) 100%);'\n                              : employee.termination_date &&\n                                  new Date(employee.termination_date) > new Date()\n                                ? 'border-color: #dc2626; background: linear-gradient(135deg, var(--color-surface-elevated) 0%, rgba(220, 38, 38, 0.08) 100%);'\n                                : 'border-color: var(--color-border); background: var(--color-surface-elevated);'}\n                        >\n                          <!-- 직원 헤더 -->\n                          <div class=\"flex items-start justify-between mb-3 min-w-0\">\n                            <div class=\"flex items-center gap-3 min-w-0 flex-1\">\n                              <div\n                                class=\"w-12 h-12 rounded-full bg-gradient-to-br {employee.employment_type ===\n                                'contract'\n                                  ? 'from-purple-500 to-pink-600'\n                                  : employee.termination_date &&\n                                      new Date(employee.termination_date) > new Date()\n                                    ? 'from-red-500 to-red-700'\n                                    : 'from-blue-500 to-purple-600'} flex items-center justify-center text-white font-semibold flex-shrink-0 shadow-md\"\n                              >\n                                {employee.last_name.charAt(0)}\n                              </div>\n                              <div class=\"min-w-0 flex-1\">\n                                <div class=\"flex items-center gap-2 min-w-0\">\n                                  <h4\n                                    class=\"font-semibold text-lg truncate\"\n                                    style:color=\"var(--color-text)\"\n                                  >\n                                    {formatEmployeeName(employee)}\n                                  </h4>\n                                  {#if isTeamLead(employee)}\n                                    <span\n                                      class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-yellow-400 to-orange-500 text-white shadow-sm flex-shrink-0\"\n                                    >\n                                      👑 팀 리더\n                                    </span>\n                                  {/if}\n                                  {#if employee.employment_type === 'contract'}\n                                    <span\n                                      class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-md flex-shrink-0 animate-pulse\"\n                                    >\n                                      📋 계약직\n                                    </span>\n                                  {/if}\n                                  {#if employee.termination_date && new Date(employee.termination_date) > new Date()}\n                                    <span\n                                      class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-red-500 to-red-600 text-white shadow-md flex-shrink-0 animate-pulse\"\n                                    >\n                                      ⚠️ 퇴사 예정\n                                    </span>\n                                  {/if}\n                                </div>\n                                <p\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\"\n                                >\n                                  {formatEmployeeIdDisplay(\n                                    employee.employee_id,\n                                    employees.indexOf(employee),\n                                  )}\n                                </p>\n                              </div>\n                            </div>\n                            <div class=\"flex flex-col gap-1 items-end flex-shrink-0 ml-2\">\n                              <ThemeBadge\n                                variant={employee.status === 'active'\n                                  ? 'success'\n                                  : employee.status === 'terminated'\n                                    ? 'error'\n                                    : 'warning'}\n                                size=\"sm\"\n                                shape=\"pill\"\n                              >\n                                {employee.status === 'active'\n                                  ? '재직중'\n                                  : employee.status === 'terminated'\n                                    ? '퇴사'\n                                    : employee.status === 'on-leave'\n                                      ? '휴직'\n                                      : '비활성'}\n                              </ThemeBadge>\n                            </div>\n                          </div>\n\n                          <!-- 직원 정보 -->\n                          <div class=\"space-y-2 mb-4\">\n                            <div class=\"flex items-center gap-2 min-w-0\">\n                              <BuildingIcon\n                                size={16}\n                                style=\"color: var(--color-text-secondary);\"\n                                class=\"flex-shrink-0\"\n                              />\n                              <span class=\"text-sm truncate\" style:color=\"var(--color-text)\"\n                                >{employee.department}</span\n                              >\n                            </div>\n                            <div class=\"flex items-center gap-2 min-w-0\">\n                              <UserCheckIcon\n                                size={16}\n                                style=\"color: var(--color-text-secondary);\"\n                                class=\"flex-shrink-0\"\n                              />\n                              <span class=\"text-sm truncate\" style:color=\"var(--color-text)\">\n                                {employee.job_title_name || employee.position}\n                              </span>\n                            </div>\n                            <div class=\"flex items-center gap-2 min-w-0\">\n                              <MailIcon\n                                size={16}\n                                style=\"color: var(--color-text-secondary);\"\n                                class=\"flex-shrink-0\"\n                              />\n                              <span\n                                class=\"text-sm truncate\"\n                                style:color=\"var(--color-text-secondary)\">{employee.email}</span\n                              >\n                            </div>\n                            {#if employee.phone}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <PhoneIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\">{employee.phone}</span\n                                >\n                              </div>\n                            {/if}\n                            {#if getCurrentSalary(employee.id)}\n                              {@const currentSalary = getCurrentSalary(employee.id)}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <DollarSignIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm font-medium truncate\"\n                                  style:color=\"var(--color-primary)\"\n                                >\n                                  {Math.round(currentSalary.annualSalary / 10000)}만원\n                                </span>\n                                <span class=\"text-xs text-gray-500\">\n                                  ({currentSalary.contractType === 'full_time'\n                                    ? '정규직'\n                                    : currentSalary.contractType === 'contractor'\n                                      ? '계약직'\n                                      : currentSalary.contractType === 'part_time'\n                                        ? '파트타임'\n                                        : currentSalary.contractType === 'intern'\n                                          ? '인턴'\n                                          : currentSalary.contractType})\n                                </span>\n                              </div>\n                            {:else}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <DollarSignIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span class=\"text-sm text-gray-400 truncate\"> 계약 정보 없음 </span>\n                              </div>\n                            {/if}\n                            {#if employee.hire_date}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <CalendarIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\"\n                                >\n                                  입사일: {formatDate(employee.hire_date)}\n                                </span>\n                              </div>\n                            {/if}\n                            {#if employee.birth_date}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <CalendarIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\"\n                                >\n                                  생일: {formatDate(employee.birth_date)}\n                                </span>\n                              </div>\n                            {/if}\n                            {#if employee.termination_date}\n                              {@const terminationDate = new Date(employee.termination_date)}\n                              {@const today = new Date()}\n                              {@const isFuture = terminationDate > today}\n                              {@const daysLeft = isFuture\n                                ? Math.ceil(\n                                    (terminationDate.getTime() - today.getTime()) /\n                                      (1000 * 60 * 60 * 24),\n                                  )\n                                : null}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <CalendarIcon\n                                  size={16}\n                                  style=\"color: {isFuture\n                                    ? 'var(--color-warning)'\n                                    : 'var(--color-error)'};\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color={isFuture\n                                    ? 'var(--color-warning)'\n                                    : 'var(--color-error)'}\n                                >\n                                  {isFuture ? '퇴사(예정)일' : '퇴사일'}: {formatDate(\n                                    employee.termination_date,\n                                  )}\n                                  {#if isFuture && daysLeft !== null}\n                                    <span class=\"ml-1 font-medium\">({daysLeft}일 남음)</span>\n                                  {/if}\n                                </span>\n                              </div>\n                            {/if}\n                            <!-- 재직 상태 정보 -->\n                            <div\n                              class=\"flex items-center gap-2 pt-2 border-t min-w-0\"\n                              style:border-color=\"var(--color-border)\"\n                            >\n                              <div\n                                class=\"w-2 h-2 rounded-full flex-shrink-0\"\n                                style:background={employee.status === 'active'\n                                  ? 'var(--color-success)'\n                                  : employee.status === 'terminated'\n                                    ? 'var(--color-error)'\n                                    : 'var(--color-warning)'}\n                              ></div>\n                              <span\n                                class=\"text-xs font-medium truncate\"\n                                style:color=\"var(--color-text-secondary)\"\n                              >\n                                {employee.status === 'active'\n                                  ? '재직중'\n                                  : employee.status === 'terminated'\n                                    ? '퇴사'\n                                    : employee.status === 'on-leave'\n                                      ? '휴직중'\n                                      : '비활성'}\n                              </span>\n                            </div>\n                          </div>\n\n                          <!-- 액션 버튼 -->\n                          <div\n                            class=\"flex items-center gap-2 pt-3 border-t min-w-0\"\n                            style:border-color=\"var(--color-border)\"\n                          >\n                            <ThemeButton\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              class=\"flex-1 min-w-0\"\n                              onclick={() => openEditEmployeeModal(employee)}\n                            >\n                              <EditIcon size={16} />\n                              수정\n                            </ThemeButton>\n                            <ThemeButton\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              class=\"flex-1 min-w-0\"\n                              onclick={() => openDeleteEmployeeModal(employee)}\n                            >\n                              <TrashIcon size={16} />\n                              삭제\n                            </ThemeButton>\n                          </div>\n                        </div>\n                      {/each}\n                    </div>\n                  </div>\n                {/each}\n              </div>\n\n              <!-- 페이지네이션 -->\n              {#if totalPages > 1}\n                <div class=\"flex items-center justify-center gap-2 mt-6\">\n                  <ThemeButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={currentPage === 1}\n                    onclick={() => setCurrentPage(currentPage - 1)}\n                  >\n                    이전\n                  </ThemeButton>\n                  {#each Array.from({ length: totalPages }, (_, i) => i + 1) as page}\n                    <ThemeButton\n                      variant={page === currentPage ? 'primary' : 'ghost'}\n                      size=\"sm\"\n                      onclick={() => setCurrentPage(page)}\n                    >\n                      {page}\n                    </ThemeButton>\n                  {/each}\n                  <ThemeButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={currentPage === totalPages}\n                    onclick={() => setCurrentPage(currentPage + 1)}\n                  >\n                    다음\n                  </ThemeButton>\n                </div>\n              {/if}\n            {/if}\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'recruitment'}\n        <!-- 채용관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">채용 공고</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={() => {\n                  // TODO: 채용 공고 등록 모달 열기\n                  alert('채용 공고 등록 기능은 준비 중입니다.')\n                }}\n              >\n                <PlusIcon size={16} />\n                공고 등록\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-4\">\n              {#each recentJobPostings() as job, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex-1\">\n                    <h4 class=\"font-medium\" style:color=\"var(--color-text)\">\n                      {job.title}\n                    </h4>\n                    <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                      {job.department} • {job.employmentType}\n                    </p>\n                    <div class=\"flex items-center gap-2 mt-2\">\n                      <ThemeBadge variant={job.status === 'published' ? 'success' : 'warning'}>\n                        {job.status === 'published' ? '모집중' : '마감'}\n                      </ThemeBadge>\n                      <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                        {formatDate(job.createdAt)}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 상세 보기\n                        alert('채용 공고 상세 보기 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EyeIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 수정\n                        alert('채용 공고 수정 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EditIcon size={16} />\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'departments'}\n        <!-- 부서관리 탭 -->\n        <ThemeSpacer size={6}>\n          <!-- 부서 관리 -->\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">부서 관리</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={openAddDepartmentModal}\n              >\n                <PlusIcon size={16} />\n                부서 추가\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-3\">\n              {#each sortedDepartments() as department (department.id)}\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex items-center gap-4\">\n                    <BuildingIcon size={24} style=\"color: var(--color-primary);\" />\n                    <div class=\"flex-1\">\n                      <div class=\"flex items-center gap-3 mb-1\">\n                        <h4 class=\"font-semibold text-lg\" style:color=\"var(--color-text)\">\n                          {department.name}\n                        </h4>\n                        <ThemeBadge\n                          variant={department.status === 'active' ? 'success' : 'warning'}\n                        >\n                          {department.status === 'active' ? '활성' : '비활성'}\n                        </ThemeBadge>\n                      </div>\n                      {#if department.description}\n                        <p class=\"text-sm mb-2\" style:color=\"var(--color-text-secondary)\">\n                          {department.description}\n                        </p>\n                      {/if}\n                      <!-- 부서 정보 -->\n                      <div class=\"flex items-center gap-4\">\n                        <div class=\"flex items-center gap-2\">\n                          <CalendarIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            생성일: {formatDate(department.created_at)}\n                          </span>\n                        </div>\n                      </div>\n                      <!-- T/O 정보 -->\n                      <div class=\"flex items-center gap-4 mt-2\">\n                        <div class=\"flex items-center gap-2\">\n                          <UsersIcon size={16} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-sm font-medium\" style:color=\"var(--color-text)\">\n                            {employees?.filter(\n                              (emp: any) =>\n                                emp.status === 'active' && emp.department === department.name,\n                            ).length || 0}\n                            {#if department.max_employees !== undefined && department.max_employees > 0}\n                              / {department.max_employees}\n                            {:else}\n                              / ∞\n                            {/if}\n                          </span>\n                        </div>\n                        {#if department.max_employees !== undefined && department.max_employees > 0}\n                          {@const currentCount =\n                            employees?.filter(\n                              (emp: any) =>\n                                emp.status === 'active' && emp.department === department.name,\n                            ).length || 0}\n                          {@const maxCount = department.max_employees}\n                          <div class=\"flex items-center gap-2\">\n                            <div\n                              class=\"w-2 h-2 rounded-full\"\n                              style:background-color={currentCount > maxCount\n                                ? 'var(--color-error)'\n                                : currentCount === maxCount\n                                  ? 'var(--color-warning)'\n                                  : 'var(--color-success)'}\n                            ></div>\n                            <span\n                              class=\"text-xs font-medium\"\n                              style:color=\"var(--color-text-secondary)\"\n                            >\n                              {currentCount > maxCount\n                                ? '정원초과'\n                                : currentCount === maxCount\n                                  ? '정원충족'\n                                  : '여유'}\n                            </span>\n                          </div>\n                        {/if}\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => openEditDepartmentModal(department)}\n                    >\n                      <EditIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => handleDepartmentDelete(department)}\n                    >\n                      <TrashIcon size={16} />\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n\n              {#if departments.length === 0}\n                <div class=\"text-center py-12\">\n                  <BuildingIcon\n                    size={64}\n                    class=\"mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <h3 class=\"text-lg font-medium mb-2\" style:color=\"var(--color-text)\">\n                    등록된 부서가 없습니다\n                  </h3>\n                  <p class=\"text-sm mb-4\" style:color=\"var(--color-text-secondary)\">\n                    새 부서를 추가하여 조직을 구성해보세요.\n                  </p>\n                  <ThemeButton\n                    variant=\"primary\"\n                    onclick={openAddDepartmentModal}\n                    class=\"flex items-center gap-2\"\n                  >\n                    <PlusIcon size={16} />\n                    첫 부서 추가하기\n                  </ThemeButton>\n                </div>\n              {/if}\n            </div>\n          </ThemeCard>\n\n          <!-- 부서 관리 안내 -->\n          <ThemeCard class=\"p-6\">\n            <div class=\"mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">부서 관리 안내</h3>\n            </div>\n            <div class=\"space-y-3\">\n              <h4 class=\"font-medium\" style:color=\"var(--color-text)\">부서 관리 규칙</h4>\n              <ul class=\"text-sm space-y-2\" style:color=\"var(--color-text-secondary)\">\n                <li>• 부서명은 중복될 수 없습니다</li>\n                <li>• 부서를 삭제하면 해당 부서의 직원들에게 영향을 줄 수 있습니다</li>\n                <li>• 비활성화된 부서는 새 직원 배치 시 선택할 수 없습니다</li>\n                <li>• 부서 설명은 선택사항이며, 부서의 역할과 책임을 명시할 수 있습니다</li>\n              </ul>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'positions'}\n        <!-- 직급관리 탭 -->\n        <ThemeSpacer size={6}>\n          <div class=\"space-y-6\">\n            <!-- 직급 카테고리별 관리 -->\n            {#each Object.entries(getPositionsByCategory()) as [category, categoryPositions]}\n              <ThemeCard class=\"p-6\">\n                <div class=\"flex items-center justify-between mb-6\">\n                  <div class=\"flex items-center gap-3\">\n                    {#if category === '연구원'}\n                      <FlaskConicalIcon size={24} style=\"color: var(--color-primary);\" />\n                    {:else if category === '디자이너'}\n                      <UsersIcon size={24} style=\"color: var(--color-primary);\" />\n                    {:else if category === '행정원'}\n                      <BuildingIcon size={24} style=\"color: var(--color-primary);\" />\n                    {/if}\n                    <div>\n                      <h3 class=\"text-xl font-semibold\" style:color=\"var(--color-text)\">\n                        {category} 직급 관리\n                      </h3>\n                      <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                        {categoryPositions.length}개 직급\n                      </p>\n                    </div>\n                  </div>\n                  <ThemeButton\n                    variant=\"primary\"\n                    size=\"sm\"\n                    class=\"flex items-center gap-2\"\n                    onclick={() => openAddPositionModal(category)}\n                  >\n                    <PlusIcon size={16} />\n                    {category} 직급 추가\n                  </ThemeButton>\n                </div>\n\n                <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {#each categoryPositions as position, i (i)}\n                    <div\n                      class=\"p-4 rounded-lg border\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-surface-elevated)\"\n                    >\n                      <div class=\"flex items-start justify-between mb-3\">\n                        <div class=\"flex-1\">\n                          <h4 class=\"font-medium\" style:color=\"var(--color-text)\">\n                            {position.name}\n                          </h4>\n                          <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                            {position.department}\n                          </p>\n                          <div class=\"flex items-center gap-2 mt-2\">\n                            <ThemeBadge variant=\"default\" size=\"sm\">\n                              레벨 {position.level}\n                            </ThemeBadge>\n                            <ThemeBadge\n                              variant={position.status === 'active' ? 'success' : 'warning'}\n                              size=\"sm\"\n                            >\n                              {position.status === 'active' ? '활성' : '비활성'}\n                            </ThemeBadge>\n                          </div>\n                        </div>\n                        <div class=\"flex items-center gap-1\">\n                          <ThemeButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onclick={() => openEditPositionModal(position)}\n                          >\n                            <EditIcon size={14} />\n                          </ThemeButton>\n                          <ThemeButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onclick={() => handlePositionDelete(position)}\n                          >\n                            <TrashIcon size={14} />\n                          </ThemeButton>\n                        </div>\n                      </div>\n                      {#if position.description}\n                        <p class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                          {position.description}\n                        </p>\n                      {/if}\n                    </div>\n                  {/each}\n\n                  {#if categoryPositions.length === 0}\n                    <div class=\"col-span-full text-center py-8\">\n                      {#if category === '연구원'}\n                        <FlaskConicalIcon\n                          size={48}\n                          class=\"mx-auto mb-4\"\n                          style=\"color: var(--color-text-secondary);\"\n                        />\n                      {:else if category === '디자이너'}\n                        <UsersIcon\n                          size={48}\n                          class=\"mx-auto mb-4\"\n                          style=\"color: var(--color-text-secondary);\"\n                        />\n                      {:else if category === '행정원'}\n                        <BuildingIcon\n                          size={48}\n                          class=\"mx-auto mb-4\"\n                          style=\"color: var(--color-text-secondary);\"\n                        />\n                      {/if}\n                      <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                        {category} 직급이 등록되지 않았습니다.\n                      </p>\n                    </div>\n                  {/if}\n                </div>\n              </ThemeCard>\n            {/each}\n\n            <!-- 직급 관리 안내 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                  직급 관리 안내\n                </h3>\n              </div>\n              <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div class=\"space-y-3\">\n                  <h4 class=\"font-medium flex items-center gap-2\" style:color=\"var(--color-text)\">\n                    <FlaskConicalIcon size={16} style=\"color: var(--color-primary);\" />\n                    연구원 직급\n                  </h4>\n                  <ul class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                    <li>• 연구원 → 주임연구원</li>\n                    <li>• 선임연구원 → 책임연구원</li>\n                    <li>• 수석연구원</li>\n                  </ul>\n                </div>\n                <div class=\"space-y-3\">\n                  <h4 class=\"font-medium flex items-center gap-2\" style:color=\"var(--color-text)\">\n                    <UsersIcon size={16} style=\"color: var(--color-primary);\" />\n                    디자이너 직급\n                  </h4>\n                  <ul class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                    <li>• 디자이너 → 주임디자이너</li>\n                    <li>• 선임디자이너 → 책임디자이너</li>\n                    <li>• 수석디자이너</li>\n                  </ul>\n                </div>\n                <div class=\"space-y-3\">\n                  <h4 class=\"font-medium flex items-center gap-2\" style:color=\"var(--color-text)\">\n                    <BuildingIcon size={16} style=\"color: var(--color-primary);\" />\n                    행정원 직급\n                  </h4>\n                  <ul class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                    <li>• 행정원 → 주임행정원</li>\n                    <li>• 선임행정원 → 책임행정원</li>\n                    <li>• 수석행정원</li>\n                  </ul>\n                </div>\n              </div>\n            </ThemeCard>\n          </div>\n        </ThemeSpacer>\n      {:else if tab.id === 'executives'}\n        <!-- 이사관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">이사 관리</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={() => openAddExecutiveModal()}\n              >\n                <PlusIcon size={16} />\n                이사 추가\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-3\">\n              {#if executiveLoading}\n                <div class=\"flex items-center justify-center py-8\">\n                  <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                    이사 데이터를 불러오는 중...\n                  </div>\n                </div>\n              {:else if executives.length === 0}\n                <div class=\"text-center py-8\">\n                  <BriefcaseIcon\n                    size={48}\n                    class=\"mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                    등록된 이사가 없습니다.\n                  </p>\n                </div>\n              {:else}\n                {#each executives as executive (executive.id)}\n                  <div\n                    class=\"flex items-center justify-between p-4 rounded-lg border\"\n                    style:border-color=\"var(--color-border)\"\n                    style:background=\"var(--color-surface-elevated)\"\n                  >\n                    <div class=\"flex items-center gap-4\">\n                      <BriefcaseIcon size={24} style=\"color: var(--color-primary);\" />\n                      <div class=\"flex-1\">\n                        <div class=\"flex items-center gap-3 mb-1\">\n                          <h4 class=\"font-semibold text-lg\" style:color=\"var(--color-text)\">\n                            {formatEmployeeName(executive)}\n                          </h4>\n                          <ThemeBadge\n                            variant={executive.status === 'active' ? 'success' : 'warning'}\n                          >\n                            {executive.status === 'active' ? '활성' : '비활성'}\n                          </ThemeBadge>\n                        </div>\n                        <div class=\"flex items-center gap-4\">\n                          <div class=\"flex items-center gap-2\">\n                            <BriefcaseIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                            <span class=\"text-sm\" style:color=\"var(--color-text)\">\n                              {executive.job_title_name}\n                            </span>\n                          </div>\n                          <div class=\"flex items-center gap-2\">\n                            <BuildingIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                            <span class=\"text-sm\" style:color=\"var(--color-text)\">\n                              {executive.department}\n                            </span>\n                          </div>\n                          <div class=\"flex items-center gap-2\">\n                            <UserCheckIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                            <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                              레벨: {executive.job_title_level}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"flex items-center gap-2\">\n                      <ThemeButton\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onclick={() => openEditExecutiveModal(executive)}\n                      >\n                        <EditIcon size={16} />\n                        수정\n                      </ThemeButton>\n                      <ThemeButton\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onclick={() => handleExecutiveDelete(executive)}\n                      >\n                        <TrashIcon size={16} />\n                        삭제\n                      </ThemeButton>\n                    </div>\n                  </div>\n                {/each}\n              {/if}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'job-titles'}\n        <!-- 직책관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">직책 관리</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={openAddJobTitleModal}\n              >\n                <PlusIcon size={16} />\n                직책 추가\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-3\">\n              {#each jobTitles as jobTitle (jobTitle.id)}\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex items-center gap-4\">\n                    <BriefcaseIcon size={24} style=\"color: var(--color-primary);\" />\n                    <div class=\"flex-1\">\n                      <div class=\"flex items-center gap-3 mb-1\">\n                        <h4 class=\"font-semibold text-lg\" style:color=\"var(--color-text)\">\n                          {jobTitle.name}\n                        </h4>\n                        <ThemeBadge variant={jobTitle.is_active ? 'success' : 'warning'}>\n                          {jobTitle.is_active ? '활성' : '비활성'}\n                        </ThemeBadge>\n                      </div>\n                      {#if jobTitle.description}\n                        <p class=\"text-sm mb-2\" style:color=\"var(--color-text-secondary)\">\n                          {jobTitle.description}\n                        </p>\n                      {/if}\n                      <div class=\"flex items-center gap-4\">\n                        <div class=\"flex items-center gap-2\">\n                          <CalendarIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            생성일: {formatDate(jobTitle.created_at)}\n                          </span>\n                        </div>\n                        <div class=\"flex items-center gap-2\">\n                          <UserCheckIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            레벨: {jobTitle.level}\n                          </span>\n                        </div>\n                        <div class=\"flex items-center gap-2\">\n                          <TagIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            카테고리: {jobTitle.category}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => openEditJobTitleModal(jobTitle)}\n                    >\n                      <EditIcon size={16} />\n                      수정\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => handleJobTitleDelete(jobTitle)}\n                    >\n                      <TrashIcon size={16} />\n                      삭제\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n\n              {#if jobTitles.length === 0}\n                <div class=\"text-center py-8\">\n                  <BriefcaseIcon\n                    size={48}\n                    class=\"mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                    등록된 직책이 없습니다.\n                  </p>\n                </div>\n              {/if}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'org-chart'}\n        <!-- 조직도 탭 -->\n        <OrganizationChart />\n      {/if}\n    {/snippet}\n  </ThemeTabs>\n\n  <!-- 엑셀 업로드 모달 -->\n  <ThemeModal open={showUploadModal} onclose={closeUploadModal} size=\"md\">\n    <div class=\"space-y-6\">\n      <h2 class=\"text-xl font-semibold mb-4\" style:color=\"var(--color-text)\">\n        직원 정보 엑셀 업로드\n      </h2>\n      <!-- 파일 선택 -->\n      <div>\n        <label\n          for=\"employee-file-input\"\n          class=\"block text-sm font-medium mb-2\"\n          style:color=\"var(--color-text)\"\n        >\n          엑셀 파일 선택\n        </label>\n\n        <!-- 드래그 앤 드롭 영역 -->\n        <div\n          class=\"border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer\"\n          class:drag-over={isDragOver}\n          ondragover={handleDragOver}\n          ondragleave={handleDragLeave}\n          ondrop={handleDrop}\n          onclick={() => document.getElementById('employee-file-input')?.click()}\n          onkeydown={(e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault()\n              document.getElementById('employee-file-input')?.click()\n            }\n          }}\n          role=\"button\"\n          tabindex=\"0\"\n          aria-label=\"파일 업로드 영역 - 클릭하거나 파일을 드래그하여 업로드하세요\"\n          style:border-color=\"var(--color-border)\"\n          style:background=\"var(--color-surface)\"\n        >\n          {#if uploadFile}\n            <div class=\"flex items-center justify-center space-x-2\">\n              <FileSpreadsheetIcon size={24} style=\"color: var(--color-primary);\" />\n              <span style:color=\"var(--color-text)\">{uploadFile.name}</span>\n            </div>\n          {:else}\n            <div class=\"space-y-2\">\n              <FileSpreadsheetIcon\n                size={48}\n                class=\"mx-auto\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <p style:color=\"var(--color-text)\">파일을 여기에 드래그하거나 클릭하여 선택하세요</p>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                CSV, XLSX, XLS 파일 지원\n              </p>\n            </div>\n          {/if}\n        </div>\n\n        <!-- 숨겨진 파일 입력 -->\n        <input\n          id=\"employee-file-input\"\n          type=\"file\"\n          accept=\".xlsx,.xls,.csv\"\n          onchange={handleFileSelect}\n          class=\"hidden\"\n        />\n      </div>\n\n      <!-- 선택된 파일 정보 -->\n      {#if uploadFile}\n        <div\n          class=\"p-3 rounded-lg\"\n          style:background=\"var(--color-surface-elevated)\"\n          style:border=\"1px solid var(--color-border)\"\n        >\n          <div class=\"flex items-center gap-2\">\n            <FileSpreadsheetIcon size={16} style=\"color: var(--color-primary);\" />\n            <span class=\"text-sm font-medium\" style:color=\"var(--color-text)\"\n              >{uploadFile.name}</span\n            >\n            <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n              ({(uploadFile.size / 1024).toFixed(1)} KB)\n            </span>\n          </div>\n        </div>\n      {/if}\n\n      <!-- 업로드 진행률 -->\n      {#if uploadStatus === 'uploading'}\n        <div class=\"space-y-2\">\n          <div class=\"flex justify-between text-sm\">\n            <span style:color=\"var(--color-text-secondary)\">업로드 진행률</span>\n            <span style:color=\"var(--color-text)\">{uploadProgress}%</span>\n          </div>\n          <div class=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div\n              class=\"h-2 rounded-full transition-all duration-300\"\n              style:width=\"{uploadProgress}%\"\n              style:background=\"var(--color-primary)\"\n            ></div>\n          </div>\n        </div>\n      {/if}\n\n      <!-- 상태 메시지 -->\n      {#if uploadMessage}\n        <div\n          class=\"flex items-center gap-2 p-3 rounded-lg\"\n          style:background={uploadStatus === 'success'\n            ? 'var(--color-success-light)'\n            : uploadStatus === 'error'\n              ? 'var(--color-error-light)'\n              : 'var(--color-info-light)'}\n          style:border=\"1px solid {uploadStatus === 'success'\n            ? 'var(--color-success)'\n            : uploadStatus === 'error'\n              ? 'var(--color-error)'\n              : 'var(--color-info)'}\"\n        >\n          {#if uploadStatus === 'success'}\n            <CheckCircleIcon size={16} style=\"color: var(--color-success);\" />\n          {:else if uploadStatus === 'error'}\n            <AlertCircleIcon size={16} style=\"color: var(--color-error);\" />\n          {/if}\n          <span\n            class=\"text-sm\"\n            style:color={uploadStatus === 'success'\n              ? 'var(--color-success)'\n              : uploadStatus === 'error'\n                ? 'var(--color-error)'\n                : 'var(--color-info)'}\n          >\n            {uploadMessage}\n          </span>\n        </div>\n      {/if}\n\n      <!-- 엑셀 템플릿 다운로드 -->\n      <div\n        class=\"p-4 rounded-lg\"\n        style:background=\"var(--color-surface-elevated)\"\n        style:border=\"1px solid var(--color-border)\"\n      >\n        <h4 class=\"text-sm font-medium mb-2\" style:color=\"var(--color-text)\">엑셀 템플릿</h4>\n        <p class=\"text-xs mb-3\" style:color=\"var(--color-text-secondary)\">\n          직원 데이터를 업로드하기 전에 템플릿을 다운로드하여 올바른 형식으로 데이터를 입력하세요.\n        </p>\n        <ThemeButton variant=\"ghost\" size=\"sm\" onclick={downloadEmployeeTemplate}>\n          <DownloadIcon size={16} class=\"mr-2\" />\n          템플릿 다운로드\n        </ThemeButton>\n      </div>\n    </div>\n\n    <!-- 모달 액션 버튼 -->\n    <div class=\"flex justify-end gap-2 pt-4 border-t\" style:border-color=\"var(--color-border)\">\n      <ThemeButton variant=\"ghost\" onclick={closeUploadModal}>취소</ThemeButton>\n      <ThemeButton\n        variant=\"primary\"\n        onclick={uploadExcel}\n        disabled={!uploadFile || uploadStatus === 'uploading'}\n      >\n        {uploadStatus === 'uploading' ? '업로드 중...' : '업로드'}\n      </ThemeButton>\n    </div>\n  </ThemeModal>\n</PageLayout>\n\n<!-- 직원 추가/수정 모달 -->\n<EmployeeModal\n  open={showEmployeeModal}\n  employee={selectedEmployee}\n  loading={employeeLoading}\n  {departments}\n  {positions}\n  {jobTitles}\n  on:close={() => {\n    showEmployeeModal = false\n    selectedEmployee = null\n  }}\n  on:save={handleEmployeeSave}\n/>\n\n<!-- 직원 삭제 확인 모달 -->\n<DeleteConfirmModal\n  open={showDeleteModal}\n  title=\"직원 삭제\"\n  message=\"이 직원을 삭제하시겠습니까?\"\n  itemName={selectedEmployee\n    ? `${formatEmployeeName(selectedEmployee)} (${selectedEmployee.department})`\n    : ''}\n  loading={deleteLoading}\n  showArchive={true}\n  on:close={() => {\n    showDeleteModal = false\n    selectedEmployee = null\n  }}\n  on:confirm={(event) => handleEmployeeDelete(event.detail.action)}\n/>\n\n<!-- 부서 관리 모달 -->\n<DepartmentModal\n  open={showDepartmentModal}\n  department={selectedDepartment}\n  loading={departmentLoading}\n  on:close={() => {\n    showDepartmentModal = false\n    selectedDepartment = null\n  }}\n  on:save={handleDepartmentSave}\n/>\n\n<!-- 직급 관리 모달 -->\n<PositionModal\n  open={showPositionModal}\n  position={selectedPosition}\n  {departments}\n  loading={positionLoading}\n  on:close={() => {\n    showPositionModal = false\n    selectedPosition = null\n  }}\n  on:save={handlePositionSave}\n/>\n\n<style>\n  .drag-over {\n    border-color: var(--color-primary) !important;\n    background: var(--color-primary-light) !important;\n  }\n</style>\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/hr/attendance/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/hr/employees/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/hr/performance/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/hr/recruitment/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/personnel/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/+page.svelte",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'_fetch' is defined but never used.",
        "line": 4,
        "column": 13,
        "nodeType": "Program",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  import { logger } from '$lib/utils/logger'\n\n  /* global _fetch */\n  import { goto } from '$app/navigation'\n  import { page } from '$app/stores'\n  import PageLayout from '$lib/components/layout/PageLayout.svelte'\n  import ParticipationCard from '$lib/components/project-management/ParticipationCard.svelte'\n  import ProjectCreationForm from '$lib/components/project-management/ProjectCreationForm.svelte'\n  import ProjectListCard from '$lib/components/project-management/ProjectListCard.svelte'\n  import ProjectOverviewCard from '$lib/components/project-management/ProjectOverviewCard.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import ThemeTabs from '$lib/components/ui/ThemeTabs.svelte'\n  import { BarChart3Icon, FlaskConicalIcon, PercentIcon } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  /**\n   * @typedef {Object} Project\n   * @property {string} id\n   * @property {string} title\n   * @property {string} code\n   * @property {string} [description]\n   * @property {string} [startDate]\n   * @property {string} [endDate]\n   * @property {'planning' | 'active' | 'completed'} status\n   * @property {'internal' | 'government' | 'private' | 'international'} [sponsorType]\n   * @property {'low' | 'medium' | 'high' | 'critical'} [priority]\n   * @property {'basic' | 'applied' | 'development'} [researchType]\n   * @property {string} [updatedAt]\n   */\n\n  /**\n   * @typedef {Object} ProjectSummary\n   * @property {number} totalProjects\n   * @property {number} activeProjects\n   * @property {number} totalBudget\n   * @property {number} currentYearBudget\n   * @property {number} totalMembers\n   * @property {number} activeMembers\n   * @property {number} overParticipationEmployees\n   * @property {Array<{title: string, code: string, status: string, updatedAt: string}>} [recentActivities]\n   */\n\n  /**\n   * @typedef {Object} EmployeeParticipation\n   * @property {string} name\n   * @property {string} email\n   * @property {string} department\n   * @property {number} activeProjects\n   * @property {number} totalParticipationRate\n   */\n\n  // 탭 정의\n  const tabs = [\n    {\n      id: 'overview',\n      label: '개요',\n      icon: BarChart3Icon,\n    },\n    {\n      id: 'projects',\n      label: '프로젝트',\n      icon: FlaskConicalIcon,\n    },\n    {\n      id: 'participation',\n      label: '참여율 관리',\n      icon: PercentIcon,\n    },\n  ]\n\n  // URL 파라미터에서 활성 탭 관리\n  let activeTab = $state($page.url.searchParams.get('tab') || 'overview')\n\n  // 상태 변수들\n  let mounted = $state(false)\n  let projects = $state([])\n  let projectSummary = $state(null)\n  let employeeParticipationSummary = $state([])\n  let alerts = $state([])\n\n  // 탭별 로딩 상태 및 오류 체크\n  let tabLoadingStates = $state({\n    overview: false,\n    projects: false,\n    participation: false,\n  })\n  let tabErrors = $state({\n    overview: null,\n    projects: null,\n    participation: null,\n  })\n  let tabLastLoaded = $state({\n    overview: null,\n    projects: null,\n    participation: null,\n  })\n\n  // 탭별 데이터 로딩 함수들\n  async function loadTabData(tabName) {\n    if (tabLoadingStates[tabName]) return\n\n    tabLoadingStates[tabName] = true\n    tabErrors[tabName] = null\n\n    try {\n      switch (tabName) {\n        case 'overview':\n          await Promise.all([\n            loadProjectSummary(),\n            loadEmployeeParticipationSummary(),\n            loadBudgetSummaryByYear(),\n            loadAlerts(),\n          ])\n          break\n        case 'projects':\n          await loadProjectData()\n          break\n        case 'participation':\n          await loadEmployeeParticipationSummary()\n          break\n      }\n      tabLastLoaded[tabName] = new Date()\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.'\n      tabErrors[tabName] = errorMessage\n      logger.error(`${tabName} 탭 데이터 로딩 실패:`, err)\n    } finally {\n      tabLoadingStates[tabName] = false\n    }\n  }\n\n  // Svelte 5: 탭 변경 시 데이터 로드 (무한 루프 방지)\n  let lastLoadedTab = $state('')\n  $effect(() => {\n    if (mounted && activeTab && activeTab !== lastLoadedTab) {\n      lastLoadedTab = activeTab\n      loadTabData(activeTab)\n    }\n  })\n\n  // Svelte 5: 컴포넌트 마운트 시 mounted 상태 설정\n  onMount(() => {\n    mounted = true\n  })\n\n  // 프로젝트 관련 상태\n  let selectedProject = $state(null)\n  let selectedProjectId = $state('')\n  let showCreateProjectModal = $state(false)\n\n  // 탭 변경 핸들러\n  function handleTabChange(tabId) {\n    activeTab = tabId\n    const url = new URL($page.url)\n    url.searchParams.set('tab', tabId)\n    goto(url.toString(), { replaceState: true })\n  }\n\n  // API 호출 함수들\n  async function loadProjectData() {\n    try {\n      logger.log('🔍 프로젝트 데이터 로딩 시작...')\n\n      // API 응답 시간 측정\n      const startTime = Date.now()\n      const response = await fetch('/api/project-management/projects')\n      const responseTime = Date.now() - startTime\n\n      logger.log(`⏱️ API 응답 시간: ${responseTime}ms`)\n\n      if (response.ok) {\n        const data = await response.json()\n        logger.log('📊 API 응답 데이터:', data)\n\n        if (data.success) {\n          const projectData = data.data || []\n\n          // 프로젝트 데이터 검증\n          const validationResult = validateProjectData(projectData)\n          if (!validationResult.isValid) {\n            logger.error('❌ 프로젝트 데이터 검증 실패:', validationResult.issues)\n            // 검증 실패 시 빈 배열로 설정하여 무한 루프 방지\n            projects = []\n            return // throw 대신 return으로 함수 종료\n          }\n\n          projects = projectData\n          logger.log(`✅ ${projectData.length}개 프로젝트 로드 완료`)\n        } else {\n          throw new Error(data.message || '프로젝트 데이터를 불러오는데 실패했습니다.')\n        }\n      } else if (response.status === 404) {\n        throw new Error('프로젝트 관리 API가 아직 구현되지 않았습니다.')\n      } else if (response.status === 500) {\n        throw new Error('서버 내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.')\n      } else if (response.status === 403) {\n        throw new Error('프로젝트 데이터에 접근할 권한이 없습니다.')\n      } else {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n      }\n    } catch (err) {\n      // Failed to fetch 오류 특별 처리\n      if (err instanceof Error && err.message && err.message.includes('Failed to fetch')) {\n        logger.error('❌ 네트워크 연결 실패:', err.message)\n      } else {\n        logger.error('❌ 프로젝트 데이터 로드 실패:', err)\n      }\n\n      projects = []\n      throw err // 상위 함수에서 처리할 수 있도록 재throw\n    }\n  }\n\n  // 개선된 프로젝트 데이터 검증 함수 (기획 단계 완화)\n  function validateProjectData(projectData) {\n    const issues = []\n    const warnings = []\n\n    if (!Array.isArray(projectData)) {\n      issues.push('프로젝트 데이터가 배열이 아닙니다.')\n      return { isValid: false, issues }\n    }\n\n    projectData.forEach((project, index) => {\n      const projectName = project.title || project.code || `프로젝트 ${index + 1}`\n      const isPlanning = project.status === 'planning'\n\n      // 모든 프로젝트에 공통으로 필요한 필수 필드\n      if (!project.id) {\n        issues.push(`${projectName}: ID가 누락되었습니다.`)\n      }\n      if (!project.title) {\n        issues.push(`${projectName}: 제목이 누락되었습니다.`)\n      }\n      if (!project.code) {\n        issues.push(`${projectName}: 코드가 누락되었습니다.`)\n      }\n\n      // 기획 단계가 아닌 경우에만 필수인 필드들\n      if (!isPlanning) {\n        if (!project.startDate) {\n          issues.push(`${projectName}: 진행/완료 상태 프로젝트는 시작일이 필요합니다.`)\n        }\n        if (!project.endDate) {\n          issues.push(`${projectName}: 진행/완료 상태 프로젝트는 종료일이 필요합니다.`)\n        }\n      } else {\n        // 기획 단계에서는 경고만 표시\n        if (!project.startDate) {\n          warnings.push(`${projectName}: 시작일이 설정되지 않았습니다. (기획 단계이므로 선택사항)`)\n        }\n        if (!project.endDate) {\n          warnings.push(`${projectName}: 종료일이 설정되지 않았습니다. (기획 단계이므로 선택사항)`)\n        }\n      }\n\n      // 날짜 유효성 검증 (날짜가 있는 경우에만)\n      if (project.startDate && project.endDate) {\n        const startDate = new Date(project.startDate)\n        const endDate = new Date(project.endDate)\n\n        if (isNaN(startDate.getTime())) {\n          issues.push(`${projectName}: 시작일 형식이 올바르지 않습니다.`)\n        }\n        if (isNaN(endDate.getTime())) {\n          issues.push(`${projectName}: 종료일 형식이 올바르지 않습니다.`)\n        }\n        if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime()) && startDate > endDate) {\n          issues.push(`${projectName}: 시작일이 종료일보다 늦습니다.`)\n        }\n      }\n\n      // 상태 값 검증\n      const validStatuses = ['planning', 'active', 'completed']\n      if (project.status && !validStatuses.includes(project.status)) {\n        issues.push(`${projectName}: 유효하지 않은 상태값입니다. (${project.status})`)\n      }\n\n      // 우선순위 값 검증 (있는 경우에만)\n      if (project.priority) {\n        const validPriorities = ['low', 'medium', 'high', 'critical']\n        if (!validPriorities.includes(project.priority)) {\n          issues.push(`${projectName}: 유효하지 않은 우선순위값입니다. (${project.priority})`)\n        }\n      }\n    })\n\n    // 경고가 있으면 콘솔에 출력\n    if (warnings.length > 0) {\n      logger.warn('⚠️ 프로젝트 데이터 경고:', warnings)\n    }\n\n    return {\n      isValid: issues.length === 0,\n      issues,\n    }\n  }\n\n  async function loadProjectSummary() {\n    try {\n      const response = await fetch('/api/project-management/summary')\n      if (response.ok) {\n        const data = await response.json()\n        projectSummary = data.data\n      }\n    } catch (err) {\n      logger.error('프로젝트 요약 로드 실패:', err)\n    }\n  }\n\n  async function loadEmployeeParticipationSummary() {\n    try {\n      const response = await fetch('/api/project-management/participation-rates/summary')\n      if (response.ok) {\n        const data = await response.json()\n        employeeParticipationSummary = data.data || []\n      }\n    } catch {\n      // 직원 참여율 데이터 로드 실패 - 조용히 처리\n    }\n  }\n\n  async function loadBudgetSummaryByYear() {\n    try {\n      const response = await fetch('/api/project-management/budgets/summary-by-year')\n      if (response.ok) {\n        // const data = await response.json()\n        // budgetSummaryByYear = data.data || []\n      }\n    } catch {\n      // 연도별 예산 데이터 로드 실패 - 조용히 처리\n    }\n  }\n\n  async function loadAlerts() {\n    try {\n      const response = await fetch('/api/project-management/alerts')\n      if (response.ok) {\n        const data = await response.json()\n        alerts = data.data || []\n      }\n    } catch {\n      // 알림 데이터 로드 실패 - 조용히 처리\n    }\n  }\n\n  // 프로젝트 생성 완료 핸들러\n  function handleProjectCreated() {\n    showCreateProjectModal = false\n    loadProjectData()\n    loadProjectSummary()\n  }\n\n  // 프로젝트 삭제 이벤트 처리\n  function handleProjectDeleted(event) {\n    const { projectId } = event.detail\n\n    // 삭제된 프로젝트가 현재 선택된 프로젝트라면 선택 해제\n    if (selectedProject && selectedProject.id === projectId) {\n      selectedProject = null\n      selectedProjectId = ''\n    }\n\n    // 프로젝트 목록에서 삭제된 프로젝트 제거\n    projects = projects.filter((p) => p.id !== projectId)\n\n    // 프로젝트 데이터 새로고침\n    loadProjectData()\n  }\n\n  // 초기화 - 첫 번째 탭만 로드\n  $effect(() => {\n    if (!mounted) {\n      mounted = true\n      // 초기 탭 데이터 로드\n      loadTabData(activeTab)\n    }\n  })\n</script>\n\n<PageLayout title=\"프로젝트 관리\" subtitle=\"연구개발 프로젝트 및 참여율 관리 시스템\">\n  <div>\n    <!-- 탭 네비게이션 -->\n    <ThemeTabs {tabs} {activeTab} onTabChange={handleTabChange} />\n\n    <!-- 개요 탭 -->\n    {#if activeTab === 'overview'}\n      <div>\n        <!-- 프로젝트 개요 카드 -->\n        <ProjectOverviewCard {projectSummary} {alerts} />\n      </div>\n    {/if}\n\n    <!-- 프로젝트 탭 -->\n    {#if activeTab === 'projects'}\n      <div>\n        <!-- 프로젝트 목록 카드 -->\n        <ProjectListCard\n          {projects}\n          {selectedProject}\n          {selectedProjectId}\n          loading={tabLoadingStates.projects}\n          error={tabErrors.projects}\n          on:create-project={() => (showCreateProjectModal = true)}\n          on:project-deleted={handleProjectDeleted}\n          on:refresh={loadProjectData}\n        />\n      </div>\n    {/if}\n\n    <!-- 참여율 관리 탭 -->\n    {#if activeTab === 'participation'}\n      <div>\n        <!-- 참여율 관리 카드 -->\n        <ParticipationCard\n          {employeeParticipationSummary}\n          loading={tabLoadingStates.participation}\n          error={tabErrors.participation}\n        />\n      </div>\n    {/if}\n  </div>\n</PageLayout>\n\n<!-- 프로젝트 생성 모달 -->\n<ThemeModal open={showCreateProjectModal} onclose={() => (showCreateProjectModal = false)}>\n  <ProjectCreationForm on:projectCreated={handleProjectCreated} />\n</ThemeModal>\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/budget-overview/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/compliance/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/dashboard/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/participation/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/budget/+page.svelte",
    "messages": [
      {
        "ruleId": "svelte/require-each-key",
        "severity": 1,
        "message": "Each block should have a key",
        "line": 72,
        "column": 11,
        "nodeType": "SvelteEachBlock",
        "messageId": "expectedKey",
        "endLine": 76,
        "endColumn": 18
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Progress from '$lib/components/ui/Progress.svelte'\n  import { projectsStore, expenseDocsStore } from '$lib/stores/rnd'\n  import { page } from '$app/state'\n  import { formatKRW } from '$lib/utils/format'\n\n  const projectId = page.params.projectId\n  const project = $derived($projectsStore.find((p) => p.id === projectId))\n  const docs = $derived($expenseDocsStore.filter((d) => d.projectId === projectId))\n  const utilization = $derived(\n    project ? Math.round((project.spentKRW / project.budgetKRW) * 100) : 0,\n  )\n  const categoryHints = $derived(\n    (function () {\n      const m: Record<string, number> = {}\n      for (const d of docs) m[d.category] = (m[d.category] ?? 0) + (d.amountKRW ?? 0)\n      return m\n    })(),\n  )\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Budget Management · {projectId}</h3>\n\n{#if !project}\n  <div class=\"text-sm text-red-700\">프로젝트를 찾을 수 없습니다.</div>\n{:else}\n  <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">총 예산</div>\n          <div class=\"text-2xl font-bold\">{formatKRW(project.budgetKRW)}</div>\n        </div>\n      </div>\n    </Card>\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">집행</div>\n          <div class=\"text-2xl font-bold\">{formatKRW(project.spentKRW)}</div>\n        </div>\n      </div>\n    </Card>\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">집행률</div>\n          <div class=\"text-2xl font-bold\">{utilization}%</div>\n          <div class=\"mt-3\"><Progress value={utilization} /></div>\n        </div>\n      </div>\n    </Card>\n  </div>\n\n  <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mt-6\">\n    <Card header=\"카테고리 힌트(문서 기준)\">\n      {#if loading}\n        <div class=\"space-y-2\">\n          {#each Array(4) as _, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n          {/each}\n        </div>\n      {:else}\n        <div class=\"grid grid-cols-2 gap-2 text-sm\">\n          {#each Object.entries(categoryHints) as [k, v]}\n            <div class=\"flex items-center justify-between\">\n              <span>{k}</span><span class=\"tabular-nums\">{formatKRW(v)}</span>\n            </div>\n          {/each}\n          {#if Object.keys(categoryHints).length === 0}\n            <div class=\"text-gray-500\">문서가 없습니다</div>\n          {/if}\n        </div>\n      {/if}\n    </Card>\n\n    <Card header=\"문서 내역\">\n      {#if loading}\n        <div class=\"space-y-2\">\n          {#each Array(6) as _, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n          {/each}\n        </div>\n      {:else}\n        <div class=\"overflow-auto\">\n          <table class=\"min-w-full text-sm\">\n            <thead class=\"bg-gray-50 text-left text-gray-600\">\n              <tr>\n                <th class=\"px-3 py-2\">문서</th>\n                <th class=\"px-3 py-2\">분류</th>\n                <th class=\"px-3 py-2\">분기</th>\n                <th class=\"px-3 py-2\">금액</th>\n              </tr>\n            </thead>\n            <tbody class=\"divide-y\">\n              {#each docs as d, i (i)}\n                <tr>\n                  <td class=\"px-3 py-2\">{d.id} · {d.title}</td>\n                  <td class=\"px-3 py-2\">{d.category}</td>\n                  <td class=\"px-3 py-2\">{d.quarter}Q</td>\n                  <td class=\"px-3 py-2\">{d.amountKRW ? formatKRW(d.amountKRW) : '-'}</td>\n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        </div>\n      {/if}\n    </Card>\n  </div>\n{/if}\n",
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/compliance/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/deliverables/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/expenses/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/personnel/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/reports/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/reports/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/reports/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/salary/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/salary/history/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/salary/payslips/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/sales/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/routes/settings/+page.svelte",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": [
      {
        "ruleId": "svelte/no-dynamic-slot-name",
        "replacedBy": { "note": "Now Svelte compiler itself throws an compile error." }
      }
    ]
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/src/types/lucide-svelte-icons.d.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/utils/ai-coding-guidelines.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/utils/code-dependency-analyzer.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/utils/safe-change-manager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/utils/schema-validation.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/vite.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/adminvia/devwork/_viahub/vws/vitest.config.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
