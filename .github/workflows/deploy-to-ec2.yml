name: EC2 배포 (ws.viahub.dev)

on:
  workflow_dispatch:
  workflow_run:
    workflows: ['Docker 이미지 빌드 및 ECR 푸시']
    types: [completed]
    branches: [main]

jobs:
  deploy-ec2:
    runs-on: ubuntu-latest
    # Docker 이미지 빌드 및 ECR 푸시가 성공했을 때만 실행
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: EC2에 배포
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # 기존 컨테이너 중지 및 제거
            docker stop vws-app || true
            docker rm vws-app || true

            # 최신 이미지 다운로드
            docker pull ${{ steps.login-ecr.outputs.registry }}/vws-app:latest

            # 새 컨테이너 실행
            docker run -d \
              --name vws-app \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              ${{ steps.login-ecr.outputs.registry }}/vws-app:latest

            # 배포 완료 확인
            sleep 10
            docker ps | grep vws-app

            # Nginx 버퍼 설정 적용 (502 에러 방지)
            echo "🔧 Nginx 버퍼 설정 적용 중..."

            # 백업 파일 생성
            sudo cp /etc/nginx/conf.d/00-proxy-buffers.conf /etc/nginx/conf.d/00-proxy-buffers.conf.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true

            # Nginx 버퍼 설정 파일 생성/업데이트
            # SvelteKit SSR의 대형 응답 헤더(Set-Cookie 등)로 인한 "upstream sent too big header" 502 에러 방지
            # vws.conf가 교체되어도 이 설정은 conf.d 전역 파일로 안전하게 유지됨
            sudo tee /etc/nginx/conf.d/00-proxy-buffers.conf > /dev/null << 'EOF'
            # Nginx Proxy Buffer 설정 - SvelteKit SSR 대형 헤더 대응
            # 목적: "upstream sent too big header while reading response header from upstream" 502 에러 방지
            # 안전성: vws.conf 교체 시에도 conf.d 전역 설정으로 유지됨
            # 설정 근거: 보수적 메모리 사용(총 512KB), 일반 트래픽에서 안정적 성능

            proxy_buffer_size 64k;
            proxy_buffers 8 64k;
            proxy_busy_buffers_size 128k;
            large_client_header_buffers 8 64k;
            EOF

            # Nginx 설정 문법 검사
            echo "🧪 Nginx 설정 문법 검사 중..."
            if ! sudo nginx -t; then
                echo "❌ Nginx 설정 문법 오류 발생!"
                # 백업에서 복구 시도
                if [ -f /etc/nginx/conf.d/00-proxy-buffers.conf.backup.* ]; then
                    echo "🔄 백업에서 복구 시도 중..."
                    sudo cp /etc/nginx/conf.d/00-proxy-buffers.conf.backup.* /etc/nginx/conf.d/00-proxy-buffers.conf
                    sudo nginx -t
                fi
                echo "❌ Nginx 설정 실패로 배포 중단"
                exit 1
            fi

            # Nginx 설정 적용
            echo "🔄 Nginx 설정 적용 중..."
            sudo systemctl reload nginx

            # 헬스체크 수행
            echo "🏥 헬스체크 수행 중..."
            sleep 5
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://ws.viahub.dev/project-management?tab=projects || echo "000")

            if [[ "$HTTP_CODE" =~ ^[23][0-9][0-9]$ ]]; then
                echo "✅ 헬스체크 성공 (HTTP $HTTP_CODE)"
            else
                echo "⚠️ 헬스체크 경고 (HTTP $HTTP_CODE) - 서비스 확인 필요"
            fi

            # 최근 "too big header" 에러 확인 (참고용)
            echo "📊 최근 Nginx 에러 로그 확인:"
            sudo tail -n 20 /var/log/nginx/error.log | grep -i "too big header" || echo "  - 'too big header' 에러 없음"

      - name: 배포 완료 알림
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#vws_action'
          text: '🚀 VWS 앱이 EC2에 성공적으로 배포되었습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 배포 실패 알림
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#vws_action'
          text: '❌ EC2 배포가 실패했습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
