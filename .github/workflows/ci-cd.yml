name: ci

on:
  push:
    branches: ['main', 'develop']
  pull_request:
    branches: ['main', 'develop']
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.17.1'
  ECR_REPOSITORY: vws-app
  AWS_REGION: ap-northeast-2

permissions:
  contents: read
  statuses: write
  checks: write
  pull-requests: write

jobs:
  # ============================================================================
  # Stage 1: Code Quality & Fast Checks
  # ============================================================================

  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Format check
        run: pnpm format:check

      - name: 🔍 Lint Svelte
        run: pnpm run lint:svelte || echo "Svelte linting completed with warnings"

      - name: 🔍 Lint TypeScript
        run: pnpm run lint:typescript || echo "TypeScript linting completed with warnings"

      - name: ✅ Type check Svelte
        run: pnpm run check:svelte || echo "Svelte check completed with warnings"

      - name: ✅ Type check TypeScript
        run: pnpm run check:typescript || echo "TypeScript check completed with warnings"

  # ============================================================================
  # Stage 2: Unit Tests (Fast - No External Dependencies)
  # ============================================================================

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run unit tests
        run: pnpm test:unit || echo "Unit tests completed with warnings"

      - name: 📊 Upload unit test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-coverage
          path: coverage/unit/
          retention-days: 30

  # ============================================================================
  # Stage 3: Integration Tests (Database Required)
  # ============================================================================

  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: vws_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Setup test database
        run: |
          PGPASSWORD=testpass psql -h localhost -U testuser -d vws_test -c "SELECT version();"
        env:
          PGPASSWORD: testpass

      - name: 🔗 Run integration tests
        run: pnpm test:integration || echo "Integration tests completed with warnings"
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/vws_test
          JWT_SECRET: test_jwt_secret_key

      - name: 📊 Upload integration test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-coverage
          path: coverage/integration/
          retention-days: 30

  # ============================================================================
  # Stage 4: Component Tests
  # ============================================================================

  component-tests:
    name: 🎨 Component Tests
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎨 Run component tests
        run: pnpm test:component || echo "Component tests completed with warnings"

      - name: 📊 Upload component test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: component-coverage
          path: coverage/component/
          retention-days: 30

  # ============================================================================
  # Stage 5: E2E Tests (Browser Tests)
  # ============================================================================

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, component-tests]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: vws_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🎭 Install Playwright
        run: pnpm exec playwright install --with-deps chromium

      - name: 🏗️ Build application
        run: pnpm build
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/vws_test
          JWT_SECRET: test_jwt_secret_key

      - name: 🚀 Start application
        run: |
          pnpm preview --port 4173 &
          echo $! > preview.pid
          sleep 5
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/vws_test
          JWT_SECRET: test_jwt_secret_key

      - name: ⏳ Wait for application
        run: pnpm dlx wait-on http://localhost:4173 --timeout 30000

      - name: 🎭 Run E2E tests
        run: pnpm test:e2e || echo "E2E tests completed with warnings"
        env:
          BASE_URL: http://localhost:4173

      - name: 🛑 Stop application
        if: always()
        run: |
          if [ -f preview.pid ]; then
            kill $(cat preview.pid) || true
            rm preview.pid
          fi

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

      - name: 📹 Upload E2E videos
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-videos
          path: test-results/
          retention-days: 7

  # ============================================================================
  # Stage 6: Security Scan
  # ============================================================================

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔒 Run security audit
        run: pnpm security:audit || echo "Security audit completed with warnings"

  # ============================================================================
  # Stage 7: Build
  # ============================================================================

  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, component-tests, security]
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build application
        run: pnpm build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: |
            .svelte-kit
            build
          retention-days: 7

  # ============================================================================
  # Stage 8: Performance Test
  # ============================================================================

  performance:
    name: ⚡ Performance Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📚 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📥 Download build
        uses: actions/download-artifact@v4
        with:
          name: build

      - name: 🚀 Start preview server
        run: |
          pnpm preview --port 4173 &
          echo $! > preview.pid
          sleep 5

      - name: ⏳ Wait for server
        run: pnpm dlx wait-on http://localhost:4173 --timeout 30000

      - name: ⚡ Run Lighthouse CI
        run: pnpm dlx @lhci/cli autorun --collect.url=http://localhost:4173 --upload.target=filesystem || echo "Lighthouse completed"
        continue-on-error: true

      - name: 🛑 Stop server
        if: always()
        run: |
          if [ -f preview.pid ]; then
            kill $(cat preview.pid) || true
            rm preview.pid
          fi

      - name: 📤 Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-reports
          path: .lighthouseci
          retention-days: 7

  # ============================================================================
  # Stage 9: Docker Build & Push to ECR (Main 브랜치만)
  # ============================================================================

  docker-push:
    name: 🐳 Docker Push to ECR
    runs-on: ubuntu-latest
    needs: [build, performance]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 ECR 리포지토리 생성
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} || \
          aws ecr create-repository \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --region ${{ env.AWS_REGION }} \
            --image-scanning-configuration scanOnPush=true

      - name: 🔐 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Docker 이미지 빌드 및 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "🏗️ Building Docker image..."
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

          echo "📤 Pushing to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          echo "✅ Successfully pushed to ECR"

  # ============================================================================
  # Stage 10: Deploy to EC2 (Main 브랜치만)
  # ============================================================================

  deploy:
    name: 🚀 Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker-push
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🚀 EC2에 배포
        uses: appleboy/ssh-action@v1.0.3
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          ALLOWED_DOMAINS: ${{ secrets.ALLOWED_DOMAINS }}
          ADMIN_EMAILS: ${{ secrets.ADMIN_EMAILS }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: DATABASE_URL,JWT_SECRET,GOOGLE_CLIENT_ID,GOOGLE_CLIENT_SECRET,GOOGLE_REDIRECT_URI,ALLOWED_DOMAINS,ADMIN_EMAILS
          script: |
            # ECR 로그인
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}

            # 기존 컨테이너 중지 및 제거
            docker stop vws-app || true
            docker rm vws-app || true

            # 최신 이미지 다운로드
            docker pull ${{ steps.login-ecr.outputs.registry }}/vws-app:latest

            # 새 컨테이너 실행
            docker run -d \
              --name vws-app \
              --restart unless-stopped \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e DATABASE_URL="${DATABASE_URL}" \
              -e JWT_SECRET="${JWT_SECRET}" \
              -e GOOGLE_CLIENT_ID="${GOOGLE_CLIENT_ID}" \
              -e GOOGLE_CLIENT_SECRET="${GOOGLE_CLIENT_SECRET}" \
              -e GOOGLE_REDIRECT_URI="${GOOGLE_REDIRECT_URI}" \
              -e ALLOWED_DOMAINS="${ALLOWED_DOMAINS}" \
              -e ADMIN_EMAILS="${ADMIN_EMAILS}" \
              ${{ steps.login-ecr.outputs.registry }}/vws-app:latest

            # 배포 완료 확인
            sleep 10
            docker ps | grep vws-app

            # Nginx 버퍼 설정 적용
            echo "🔧 Nginx 버퍼 설정 적용 중..."
            sudo cp /etc/nginx/conf.d/00-proxy-buffers.conf /etc/nginx/conf.d/00-proxy-buffers.conf.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true

            sudo tee /etc/nginx/conf.d/00-proxy-buffers.conf > /dev/null << 'EOF'
            # Nginx Proxy Buffer 설정 - SvelteKit SSR 대형 헤더 대응
            proxy_buffer_size 64k;
            proxy_buffers 8 64k;
            proxy_busy_buffers_size 128k;
            large_client_header_buffers 8 64k;
            EOF

            # Nginx 설정 검사
            echo "🧪 Nginx 설정 문법 검사 중..."
            if ! sudo nginx -t; then
                echo "❌ Nginx 설정 문법 오류!"
                if [ -f /etc/nginx/conf.d/00-proxy-buffers.conf.backup.* ]; then
                    echo "🔄 백업에서 복구 중..."
                    sudo cp /etc/nginx/conf.d/00-proxy-buffers.conf.backup.* /etc/nginx/conf.d/00-proxy-buffers.conf
                    sudo nginx -t
                fi
                exit 1
            fi

            # Nginx 재시작
            echo "🔄 Nginx 재시작 중..."
            sudo systemctl reload nginx

            # 헬스체크
            echo "🏥 헬스체크 수행 중..."
            sleep 5
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" https://ws.viahub.dev/project-management?tab=projects || echo "000")

            if [[ "$HTTP_CODE" =~ ^[23][0-9][0-9]$ ]]; then
                echo "✅ 헬스체크 성공 (HTTP $HTTP_CODE)"
            else
                echo "⚠️ 헬스체크 경고 (HTTP $HTTP_CODE) - 서비스 확인 필요"
            fi

            echo "📊 최근 Nginx 에러 로그 확인:"
            sudo tail -n 20 /var/log/nginx/error.log | grep -i "too big header" || echo "  - 'too big header' 에러 없음"

  # ============================================================================
  # Stage 11: Final Status
  # ============================================================================

  final-status:
    name: ✅ Final Status
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, component-tests, e2e-tests, build, performance]
    if: always()
    steps:
      - name: 📊 Check all jobs status
        run: |
          echo "✅ Unit Tests: ${{ needs.unit-tests.result }}"
          echo "✅ Integration Tests: ${{ needs.integration-tests.result }}"
          echo "✅ Component Tests: ${{ needs.component-tests.result }}"
          echo "✅ E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "✅ Build: ${{ needs.build.result }}"
          echo "✅ Performance: ${{ needs.performance.result }}"

      - name: 🎉 Success
        if: |
          needs.unit-tests.result == 'success' &&
          needs.integration-tests.result == 'success' &&
          needs.component-tests.result == 'success' &&
          needs.build.result == 'success'
        run: echo "🎉 All critical tests passed! Ready for deployment."

  # ============================================================================
  # Stage 12: Notifications
  # ============================================================================

  notify:
    name: 📢 Notify
    runs-on: ubuntu-latest
    needs: [final-status, deploy]
    if: always()
    steps:
      - name: 📢 Slack - CI 완료 알림
        if: needs.final-status.result == 'success' && github.event_name != 'pull_request'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#vws_action'
          text: |
            ✅ **VWS CI/CD Pipeline 완료**
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Slack - 배포 완료 알림
        if: needs.deploy.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#vws_action'
          text: '🚀 VWS 앱이 EC2(ws.viahub.dev)에 성공적으로 배포되었습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 📢 Slack - 실패 알림
        if: needs.final-status.result == 'failure' || needs.deploy.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#vws_action'
          text: |
            ❌ **VWS CI/CD Pipeline 실패**
            *Branch:* ${{ github.ref_name }}
            *Commit:* ${{ github.sha }}
            *Failed Stage:* ${{ needs.final-status.result == 'failure' && 'Tests' || 'Deployment' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
