name: Docker 배포

on:
  push:
    branches: [main]
  workflow_dispatch:
  workflow_run:
    workflows: ['ci']
    types: [completed]
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 리포지토리 생성 (존재하지 않는 경우)
        run: |
          aws ecr describe-repositories --repository-names vws-app --region ap-northeast-2 || \
          aws ecr create-repository \
            --repository-name vws-app \
            --region ap-northeast-2 \
            --image-scanning-configuration scanOnPush=true

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 빌드 및 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vws-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # ECR에 푸시
          echo "Pushing to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "Successfully pushed to ECR"

      - name: ECS 클러스터 생성 (존재하지 않는 경우)
        run: |
          aws ecs describe-clusters --clusters vws-cluster --region ap-northeast-2 || \
          aws ecs create-cluster \
            --cluster-name vws-cluster \
            --region ap-northeast-2

      - name: ECS 서비스 업데이트 (선택사항)
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vws-app
          IMAGE_TAG: ${{ github.sha }}
        continue-on-error: true
        run: |
          # ECS 서비스가 존재하는지 확인하고 업데이트
          if aws ecs describe-services --cluster vws-cluster --services vws-service --region ap-northeast-2 --query 'services[0].status' --output text | grep -q "ACTIVE"; then
            echo "Updating existing ECS service..."
            aws ecs update-service \
              --cluster vws-cluster \
              --service vws-service \
              --force-new-deployment \
              --region ap-northeast-2
            echo "ECS service updated successfully"
          else
            echo "ECS service does not exist. Skipping ECS update."
            echo "Docker image has been built and pushed to ECR successfully."
            echo "You can manually create the ECS service and task definition when ready."
          fi

      - name: 배포 완료 알림
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#vws_action'
          text: '🚀 VWS 앱이 성공적으로 배포되었습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 배포 실패 알림
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#vws_action'
          text: '❌ VWS 앱 배포가 실패했습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
