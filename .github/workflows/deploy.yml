name: Docker 배포

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v4

      - name: AWS 자격 증명 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: ECR 로그인
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 빌드 및 푸시
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vws-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .

          # ECR에 푸시
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: ECS 서비스 업데이트
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: vws-app
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # ECS 클러스터 업데이트
          aws ecs update-service \
            --cluster vws-cluster \
            --service vws-service \
            --force-new-deployment

      - name: 배포 완료 알림
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#vws_action'
          text: '🚀 VWS 앱이 성공적으로 배포되었습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 배포 실패 알림
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#vws_action'
          text: '❌ VWS 앱 배포가 실패했습니다!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
