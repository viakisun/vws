[{"filePath":"/Users/adminvia/devwork/_viahub/vws/.eslintrc.cjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'__dirname' is not defined.","line":18,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":31},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key '@typescript-eslint/prefer-readonly-parameter-types'.","line":62,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":62,"endColumn":57},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'no-useless-return'.","line":98,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":98,"endColumn":24},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/no-at-html-tags'.","line":152,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":152,"endColumn":29},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/require-optimized-style-attribute'.","line":166,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":166,"endColumn":47},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/require-store-callbacks-use-set-param'.","line":167,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":167,"endColumn":51},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/require-store-reactive-return'.","line":168,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":168,"endColumn":43},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/require-store-rest-parameters'.","line":169,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":169,"endColumn":43},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/require-stores-leading-store'.","line":170,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":170,"endColumn":42},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'svelte/require-stores-init'.","line":171,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":171,"endColumn":33}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/** @type {import('eslint').Linter.Config} */\nconst config = {\n  root: true,\n  extends: [\n    'eslint:recommended',\n    '@typescript-eslint/recommended',\n    '@typescript-eslint/recommended-requiring-type-checking',\n    'plugin:svelte/recommended',\n    'plugin:svelte/stylistic'\n  ],\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint', 'svelte'],\n  parserOptions: {\n    sourceType: 'module',\n    ecmaVersion: 2020,\n    extraFileExtensions: ['.svelte'],\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname\n  },\n  env: {\n    browser: true,\n    es2017: true,\n    node: true\n  },\n  overrides: [\n    {\n      files: ['*.svelte'],\n      parser: 'svelte-eslint-parser',\n      parserOptions: {\n        parser: '@typescript-eslint/parser'\n      }\n    }\n  ],\n  rules: {\n    // === TypeScript Strict Rules ===\n    '@typescript-eslint/no-explicit-any': 'error',\n    '@typescript-eslint/no-unsafe-assignment': 'error',\n    '@typescript-eslint/no-unsafe-call': 'error',\n    '@typescript-eslint/no-unsafe-member-access': 'error',\n    '@typescript-eslint/no-unsafe-return': 'error',\n    '@typescript-eslint/no-unsafe-argument': 'error',\n    '@typescript-eslint/no-implicit-any-catch': 'error',\n    '@typescript-eslint/prefer-nullish-coalescing': 'error',\n    '@typescript-eslint/prefer-optional-chain': 'error',\n    '@typescript-eslint/no-unnecessary-condition': 'error',\n    '@typescript-eslint/no-unnecessary-type-assertion': 'error',\n    '@typescript-eslint/no-floating-promises': 'error',\n    '@typescript-eslint/no-misused-promises': 'error',\n    '@typescript-eslint/require-await': 'error',\n    '@typescript-eslint/await-thenable': 'error',\n    '@typescript-eslint/no-for-in-array': 'error',\n    '@typescript-eslint/no-implied-eval': 'error',\n    '@typescript-eslint/no-throw-literal': 'error',\n    '@typescript-eslint/prefer-readonly': 'error',\n    '@typescript-eslint/prefer-readonly-parameter-types': 'off', // Too strict for now\n    '@typescript-eslint/strict-boolean-expressions': 'error',\n    '@typescript-eslint/prefer-function-type': 'error',\n    '@typescript-eslint/prefer-includes': 'error',\n    '@typescript-eslint/prefer-string-starts-ends-with': 'error',\n    '@typescript-eslint/prefer-reduce-type-parameter': 'error',\n    '@typescript-eslint/prefer-regexp-exec': 'error',\n    '@typescript-eslint/prefer-readonly-parameter-types': 'off',\n    '@typescript-eslint/consistent-type-definitions': ['error', 'interface'],\n    '@typescript-eslint/consistent-type-imports': ['error', { prefer: 'type-imports' }],\n    '@typescript-eslint/consistent-type-exports': [\n      'error',\n      { fixMixedExportsWithInlineTypeSpecifier: false }\n    ],\n    '@typescript-eslint/explicit-function-return-type': 'error',\n    '@typescript-eslint/explicit-module-boundary-types': 'error',\n    '@typescript-eslint/no-confusing-void-expression': 'error',\n    '@typescript-eslint/no-meaningless-void-operator': 'error',\n    '@typescript-eslint/no-mixed-enums': 'error',\n    '@typescript-eslint/no-redundant-type-constituents': 'error',\n    '@typescript-eslint/no-unsafe-enum-comparison': 'error',\n    '@typescript-eslint/prefer-enum-initializers': 'error',\n    '@typescript-eslint/prefer-literal-enum-member': 'error',\n    '@typescript-eslint/switch-exhaustiveness-check': 'error',\n    '@typescript-eslint/unified-signatures': 'error',\n\n    // === General Code Quality Rules ===\n    'no-console': 'warn',\n    'no-debugger': 'error',\n    'no-alert': 'error',\n    'no-var': 'error',\n    'prefer-const': 'error',\n    'prefer-arrow-callback': 'error',\n    'prefer-template': 'error',\n    'object-shorthand': 'error',\n    'prefer-destructuring': ['error', { object: true, array: false }],\n    'no-duplicate-imports': 'error',\n    'no-useless-rename': 'error',\n    'no-useless-return': 'error',\n    'no-useless-concat': 'error',\n    'no-useless-escape': 'error',\n    'no-useless-computed-key': 'error',\n    'no-useless-constructor': 'error',\n    'no-useless-return': 'error',\n    'no-else-return': 'error',\n    'no-return-assign': 'error',\n    'no-return-await': 'error',\n    'no-throw-literal': 'error',\n    'no-unused-expressions': 'error',\n    'no-unused-vars': 'off', // Handled by TypeScript\n    '@typescript-eslint/no-unused-vars': ['error', { argsIgnorePattern: '^_' }],\n    'no-undef': 'off', // Handled by TypeScript\n    'no-redeclare': 'off', // Handled by TypeScript\n    'no-dupe-class-members': 'off', // Handled by TypeScript\n\n    // === Svelte Specific Rules ===\n    'svelte/valid-compile': 'error',\n    'svelte/no-at-debug-tags': 'error',\n    'svelte/no-at-html-tags': 'error',\n    'svelte/no-dupe-else-if-blocks': 'error',\n    'svelte/no-dupe-style-properties': 'error',\n    'svelte/no-dupe-use-elements': 'error',\n    'svelte/no-dynamic-slot-name': 'error',\n    'svelte/no-not-function-handler': 'error',\n    'svelte/no-object-in-text-mustaches': 'error',\n    'svelte/no-reactive-functions': 'error',\n    'svelte/no-reactive-literals': 'error',\n    'svelte/no-shorthand-style-property-overrides': 'error',\n    'svelte/no-unknown-style-directive-property': 'error',\n    'svelte/no-useless-mustaches': 'error',\n    'svelte/require-each-key': 'error',\n    'svelte/require-optimized-style-attribute': 'error',\n    'svelte/require-stores-init': 'error',\n    'svelte/require-store-callbacks-use-set-param': 'error',\n    'svelte/require-store-reactive-return': 'error',\n    'svelte/require-store-rest-parameters': 'error',\n    'svelte/require-stores-leading-store': 'error',\n    'svelte/block-lang': 'error',\n    'svelte/button-has-type': 'error',\n    'svelte/html-closing-bracket-spacing': 'error',\n    'svelte/html-quotes': 'error',\n    'svelte/html-self-closing': 'error',\n    'svelte/indent': 'error',\n    'svelte/max-attributes-per-line': 'error',\n    'svelte/mustache-spacing': 'error',\n    'svelte/no-extra-reactive-curlies-in-string': 'error',\n    'svelte/no-spaces-around-equal-signs-in-attribute': 'error',\n    'svelte/no-trailing-spaces': 'error',\n    'svelte/prefer-class-directive': 'error',\n    'svelte/prefer-style-directive': 'error',\n    'svelte/shorthand-attribute': 'error',\n    'svelte/shorthand-directive': 'error',\n    'svelte/spaced-html-comment': 'error',\n    'svelte/derived-has-same-inputs-outputs': 'error',\n    'svelte/first-attribute-linebreak': 'error',\n    'svelte/html-content-first-newline': 'error',\n    'svelte/label-has-associated-control': 'error',\n    'svelte/no-at-html-tags': 'error',\n    'svelte/no-conflict-variable-names': 'error',\n    'svelte/no-export-load-in-svelte-module-in-kit-pages': 'error',\n    'svelte/no-proxy-in-rest-props': 'error',\n    'svelte/no-reactive-class': 'error',\n    'svelte/no-reactive-label': 'error',\n    'svelte/no-reactive-textarea': 'error',\n    'svelte/no-runes-mode': 'error', // Force runes mode\n    'svelte/no-target-blank': 'error',\n    'svelte/no-unused-class-name': 'error',\n    'svelte/no-unused-svelte-ignore': 'error',\n    'svelte/no-useless-fragment': 'error',\n    'svelte/prefer-destructured-store-props': 'error',\n    'svelte/require-event-dispatcher-types': 'error',\n    'svelte/require-optimized-style-attribute': 'error',\n    'svelte/require-store-callbacks-use-set-param': 'error',\n    'svelte/require-store-reactive-return': 'error',\n    'svelte/require-store-rest-parameters': 'error',\n    'svelte/require-stores-leading-store': 'error',\n    'svelte/require-stores-init': 'error',\n    'svelte/valid-each-key': 'error',\n\n    // === Import/Export Rules ===\n    'import/no-duplicates': 'error',\n    'import/no-unresolved': 'error',\n    'import/no-absolute-path': 'error',\n    'import/no-self-import': 'error',\n    'import/no-cycle': 'error',\n    'import/no-useless-path-segments': 'error',\n    'import/order': [\n      'error',\n      {\n        groups: ['builtin', 'external', 'internal', 'parent', 'sibling', 'index'],\n        'newlines-between': 'always',\n        alphabetize: {\n          order: 'asc',\n          caseInsensitive: true\n        }\n      }\n    ],\n\n    // === Performance Rules ===\n    'no-await-in-loop': 'error',\n    'no-promise-executor-return': 'error',\n    'prefer-promise-reject-errors': 'error',\n    'require-atomic-updates': 'error',\n\n    // === Security Rules ===\n    'no-eval': 'error',\n    'no-implied-eval': 'error',\n    'no-new-func': 'error',\n    'no-script-url': 'error',\n\n    // === Accessibility Rules ===\n    'jsx-a11y/alt-text': 'error',\n    'jsx-a11y/anchor-has-content': 'error',\n    'jsx-a11y/anchor-is-valid': 'error',\n    'jsx-a11y/aria-props': 'error',\n    'jsx-a11y/aria-proptypes': 'error',\n    'jsx-a11y/aria-role': 'error',\n    'jsx-a11y/aria-unsupported-elements': 'error',\n    'jsx-a11y/click-events-have-key-events': 'error',\n    'jsx-a11y/heading-has-content': 'error',\n    'jsx-a11y/html-has-lang': 'error',\n    'jsx-a11y/iframe-has-title': 'error',\n    'jsx-a11y/img-redundant-alt': 'error',\n    'jsx-a11y/no-access-key': 'error',\n    'jsx-a11y/no-autofocus': 'error',\n    'jsx-a11y/no-distracting-elements': 'error',\n    'jsx-a11y/no-interactive-element-to-noninteractive-role': 'error',\n    'jsx-a11y/no-noninteractive-element-interactions': 'error',\n    'jsx-a11y/no-noninteractive-element-to-interactive-role': 'error',\n    'jsx-a11y/no-noninteractive-tabindex': 'error',\n    'jsx-a11y/no-redundant-roles': 'error',\n    'jsx-a11y/no-static-element-interactions': 'error',\n    'jsx-a11y/role-has-required-aria-props': 'error',\n    'jsx-a11y/role-supports-aria-props': 'error',\n    'jsx-a11y/scope': 'error',\n    'jsx-a11y/tabindex-no-positive': 'error'\n  },\n  ignorePatterns: [\n    'build/',\n    '.svelte-kit/',\n    'dist/',\n    'node_modules/',\n    '*.config.js',\n    '*.config.cjs'\n  ]\n}\n\nmodule.exports = config\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/fix-buttons.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":1,"column":12,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'require' is not defined.","line":2,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":21},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":21,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":21,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":25,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":25,"endColumn":8}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const fs = require('fs')\nconst glob = require('glob')\n\n// Find all .svelte files\nconst files = glob.sync('**/*.svelte', {\n  ignore: ['**/node_modules/**', '**/build/**']\n})\n\nlet modifiedCount = 0\n\nfor (const file of files) {\n  let content = fs.readFileSync(file, 'utf8')\n  const originalContent = content\n\n  // Add type=\"button\" to buttons that don't have a type attribute\n  content = content.replace(/<button(?![^>]*\\btype=)([^>]*)>/g, '<button type=\"button\"$1>')\n\n  if (content !== originalContent) {\n    fs.writeFileSync(file, content)\n    modifiedCount++\n    console.log(`Modified: ${file}`)\n  }\n}\n\nconsole.log(`\\nTotal files modified: ${modifiedCount}`)\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/add-each-keys.cjs","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'path' is assigned a value but never used.","line":15,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":18,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":18,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'ROOT' is assigned a value but never used.","line":19,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":19,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":19,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":19,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'original' is assigned a value but never used.","line":60,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":15},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":152,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":152,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":167,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":167,"endColumn":8},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":169,"column":3,"nodeType":"Identifier","messageId":"undef","endLine":169,"endColumn":10}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n/* Safe {#each} key inserter for Svelte files\n * Scope: simple single-line openings only\n * Rules:\n *  - Skip if opening already has a key \"(...)\"\n *  - Match only: {#each <expr> as <item>} or {#each <expr> as <item>, <idx>}\n *  - If block uses item.id/uuid/key → use (item.id ?? item.uuid ?? item.key)\n *  - Else index fallback:\n *      - if idx exists → (idx)\n *      - else inject \", idx\" and use (idx), plus TODO comment after the opening line\n *  - Skip if nested each exists in the same block (to avoid mispairing)\n */\n\nconst fs = require('fs')\nconst path = require('path')\nconst glob = require('glob')\n\nconst WRITE = process.argv.includes('--write')\nconst ROOT = process.cwd()\n\nconst files = glob.sync('src/**/*.svelte', {\n  ignore: ['**/node_modules/**', '**/.svelte-kit/**', '**/build/**', '**/dist/**']\n})\n\nlet changedFiles = 0\nlet changedOpenings = 0\nlet skippedNested = 0\nlet skippedHasKey = 0\nlet skippedComplex = 0\n\nfunction hasExistingKey(opening) {\n  // detect \"(...)\" after \"as ...\" before \"}\"\n  const asPos = opening.indexOf(' as ')\n  if (asPos === -1) return true // unexpected: treat as has key to skip\n  const closePos = opening.indexOf('}')\n  if (closePos === -1) return true\n  const segment = opening.slice(asPos, closePos)\n  return /\\([^)]*\\)\\s*$/.test(segment) // \"(...)\" right before \"}\"\n}\n\nfunction isSingleLineOpening(opening) {\n  return !opening.includes('\\n')\n}\n\nfunction getBlock(text, openIndex) {\n  // naive: find nearest closing \"{/each}\" after opening, ensure no nested \"{#each}\" between\n  const closeIndex = text.indexOf('{/each}', openIndex)\n  if (closeIndex === -1) return null\n  const inner = text.slice(openIndex, closeIndex)\n  if (inner.includes('{#each')) return null // nested each → skip\n  return { body: inner, end: closeIndex + '{/each}'.length }\n}\n\n// Regex for single-line openings WITHOUT key (two patterns: w/ and w/o index var)\nconst RX_EACH_NOIDX = /\\{#each\\s+([^\\n}]+?)\\s+as\\s+([A-Za-z_$][\\w$]*)\\s*\\}/g\nconst RX_EACH_IDX = /\\{#each\\s+([^\\n}]+?)\\s+as\\s+([A-Za-z_$][\\w$]*)\\s*,\\s*([A-Za-z_$][\\w$]*)\\s*\\}/g\n\nfor (const f of files) {\n  let src = fs.readFileSync(f, 'utf8')\n  let original = src\n  let localChanged = 0\n\n  function processMatches(rx, withIndex) {\n    rx.lastIndex = 0\n    let m\n    const edits = [] // { start, end, replacement, extraInsertAt, extraText }\n    while ((m = rx.exec(src)) !== null) {\n      const full = m[0]\n      const expr = m[1].trim()\n      const item = m[2].trim()\n      const idxVar = withIndex ? m[3].trim() : null\n\n      // Skip if opening already has key \"(...)\"\n      if (hasExistingKey(full)) {\n        skippedHasKey++\n        continue\n      }\n      if (!isSingleLineOpening(full)) {\n        skippedComplex++\n        continue\n      }\n\n      // Find block body to inspect usage\n      const openingStart = m.index\n      const openingEnd = m.index + full.length\n      const block = getBlock(src, openingEnd)\n      if (!block) {\n        skippedNested++\n        continue\n      }\n\n      const body = block.body\n      const stableKeyUsed = new RegExp(`\\\\b${item}\\\\.(id|uuid|key)\\\\b`).test(body)\n\n      let replacement\n      let extraInsertAt = null\n      let extraText = ''\n\n      if (stableKeyUsed) {\n        // use (item.id ?? item.uuid ?? item.key)\n        const keyExpr = `(${item}.id ?? ${item}.uuid ?? ${item}.key)`\n        if (withIndex) {\n          // {#each expr as item, idx}\n          replacement = `{#each ${expr} as ${item}, ${idxVar} ${keyExpr}}`\n        } else {\n          // {#each expr as item}\n          replacement = `{#each ${expr} as ${item} ${keyExpr}}`\n        }\n      } else {\n        // index fallback\n        const idxSafe = idxVar || 'idx'\n        if (withIndex) {\n          replacement = `{#each ${expr} as ${item}, ${idxSafe} (${idxSafe})}`\n          // add TODO comment after opening line\n          extraInsertAt = openingEnd\n          extraText = `\\n<!-- TODO: replace index key with a stable id when model provides one -->`\n        } else {\n          // inject index var\n          replacement = `{#each ${expr} as ${item}, ${idxSafe} (${idxSafe})}`\n          extraInsertAt = openingEnd\n          extraText = `\\n<!-- TODO: replace index key with a stable id when model provides one -->`\n        }\n      }\n\n      edits.push({ start: openingStart, end: openingEnd, replacement, extraInsertAt, extraText })\n    }\n\n    // Apply edits from last to first (index-safe)\n    if (edits.length) {\n      localChanged += edits.length\n      edits\n        .sort((a, b) => b.start - a.start)\n        .forEach(e => {\n          src = src.slice(0, e.start) + e.replacement + src.slice(e.end)\n          if (e.extraInsertAt != null && e.extraText) {\n            const offset = e.extraInsertAt + (e.replacement.length - (e.end - e.start))\n            src = src.slice(0, offset) + e.extraText + src.slice(offset)\n          }\n        })\n    }\n  }\n\n  processMatches(RX_EACH_IDX, true)\n  processMatches(RX_EACH_NOIDX, false)\n\n  if (localChanged > 0) {\n    changedFiles++\n    changedOpenings += localChanged\n    if (WRITE) {\n      fs.writeFileSync(f, src, 'utf8')\n    } else {\n      console.log(`[DRY-RUN] ${f}: would modify ${localChanged} opening(s)`)\n    }\n  }\n}\n\nconst summary = {\n  filesScanned: files.length,\n  changedFiles,\n  changedOpenings,\n  skippedHasKey,\n  skippedNested,\n  skippedComplex,\n  mode: WRITE ? 'WRITE' : 'DRY-RUN'\n}\n\nconsole.log(JSON.stringify(summary, null, 2))\nif (!WRITE && changedOpenings === 0) {\n  console.log('No candidates found in dry-run. Nothing to do.')\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/add-executive-positions.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\n// 추가할 직급 데이터\nconst executivePositions = [\n  {\n    name: '연구소장',\n    description: '연구소 전체를 총괄하고 연구 방향을 설정하는 최고 책임자',\n    department: 'PSR팀',\n    level: 6 // 최고급 직급\n  },\n  {\n    name: '상무',\n    description: '회사 경영진으로 주요 의사결정에 참여하는 임원급 직급',\n    department: '경영기획팀',\n    level: 6 // 최고급 직급\n  }\n]\n\nasync function addExecutivePositions() {\n  try {\n    console.log('🔄 Adding executive positions...')\n\n    for (const position of executivePositions) {\n      // 중복 체크\n      const existingPos = await query(\n        'SELECT id FROM positions WHERE LOWER(name) = LOWER($1) AND department = $2',\n        [position.name, position.department]\n      )\n\n      if (existingPos.rows.length > 0) {\n        console.log(`⚠️  Position \"${position.name}\" already exists in ${position.department}`)\n        continue\n      }\n\n      // 직급 추가\n      const result = await query(\n        `\n\t\t\t\tINSERT INTO positions (name, description, department, level, status, created_at, updated_at)\n\t\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t\t\t\tRETURNING id, name, description, department, level, status\n\t\t\t`,\n        [\n          position.name,\n          position.description,\n          position.department,\n          position.level,\n          'active',\n          new Date(),\n          new Date()\n        ]\n      )\n\n      console.log(\n        `✅ Added position: ${position.name} (${position.department}) - Level ${position.level}`\n      )\n    }\n\n    // 결과 확인\n    console.log('\\n🔍 Verifying added positions...')\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\tname, description, department, level, status\n\t\t\tFROM positions \n\t\t\tWHERE name IN ('연구소장', '상무')\n\t\t\tORDER BY department, level DESC\n\t\t`)\n\n    console.log('📋 Executive positions:')\n    result.rows.forEach(row => {\n      console.log(`  ${row.name} (${row.department}) - Level ${row.level}: ${row.description}`)\n    })\n\n    // 전체 직급 구조 확인\n    console.log('\\n📊 Complete position hierarchy:')\n    const allPositions = await query(`\n\t\t\tSELECT \n\t\t\t\tdepartment,\n\t\t\t\tname,\n\t\t\t\tlevel\n\t\t\tFROM positions \n\t\t\tWHERE status = 'active'\n\t\t\tORDER BY department, level DESC, name ASC\n\t\t`)\n\n    let currentDept = ''\n    allPositions.rows.forEach(row => {\n      if (row.department !== currentDept) {\n        console.log(`\\n📁 ${row.department}:`)\n        currentDept = row.department\n      }\n      const levelIndicator = '  '.repeat(6 - row.level) + '└─ '\n      console.log(`${levelIndicator}${row.name} (Level ${row.level})`)\n    })\n\n    console.log('\\n✅ Executive positions added successfully!')\n  } catch (error) {\n    console.error('❌ Failed to add executive positions:', error)\n    throw error\n  }\n}\n\n// Run the script\naddExecutivePositions()\n  .then(() => {\n    console.log('🎉 Executive positions setup completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Executive positions setup failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/add-new-organizations.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\n// 추가할 새로운 조직들\nconst newOrganizations = [\n  {\n    name: '대표',\n    description: '회사의 최고 경영진으로 전체 경영을 총괄하는 조직',\n    level: 7 // 최고급\n  },\n  {\n    name: '전략기획실',\n    description: '회사의 전략 수립 및 기획을 담당하는 조직',\n    level: 6 // 고급\n  },\n  {\n    name: '연구소',\n    description: '연구개발 및 기술 혁신을 담당하는 조직',\n    level: 6 // 고급\n  }\n]\n\nasync function addNewOrganizations() {\n  try {\n    console.log('🔄 Adding new organizations...')\n\n    for (const org of newOrganizations) {\n      // 중복 체크\n      const existingOrg = await query('SELECT id FROM positions WHERE LOWER(name) = LOWER($1)', [\n        org.name\n      ])\n\n      if (existingOrg.rows.length > 0) {\n        console.log(`⚠️  Organization \"${org.name}\" already exists`)\n        continue\n      }\n\n      // 조직 추가\n      const result = await query(\n        `\n\t\t\t\tINSERT INTO positions (name, description, department, level, status, created_at, updated_at)\n\t\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t\t\t\tRETURNING id, name, description, department, level, status\n\t\t\t`,\n        [\n          org.name,\n          org.description,\n          org.name, // department도 같은 이름으로 설정\n          org.level,\n          'active',\n          new Date(),\n          new Date()\n        ]\n      )\n\n      console.log(`✅ Added organization: ${org.name} - Level ${org.level}`)\n    }\n\n    // 결과 확인\n    console.log('\\n🔍 Verifying added organizations...')\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\tname, description, department, level, status\n\t\t\tFROM positions \n\t\t\tWHERE name IN ('대표', '전략기획실', '연구소')\n\t\t\tORDER BY level DESC, name ASC\n\t\t`)\n\n    console.log('📋 New organizations:')\n    result.rows.forEach(row => {\n      console.log(`  ${row.name} (${row.department}) - Level ${row.level}: ${row.description}`)\n    })\n\n    // 전체 조직 구조 확인\n    console.log('\\n📊 Complete organization hierarchy:')\n    const allPositions = await query(`\n\t\t\tSELECT \n\t\t\t\tdepartment,\n\t\t\t\tname,\n\t\t\t\tlevel\n\t\t\tFROM positions \n\t\t\tWHERE status = 'active'\n\t\t\tORDER BY \n\t\t\t\tCASE department\n\t\t\t\t\tWHEN '대표' THEN 1\n\t\t\t\t\tWHEN '전략기획실' THEN 2\n\t\t\t\t\tWHEN '연구소' THEN 3\n\t\t\t\t\tWHEN '부서없음' THEN 999\n\t\t\t\t\tELSE 100\n\t\t\t\tEND,\n\t\t\t\tlevel DESC,\n\t\t\t\tname ASC\n\t\t`)\n\n    let currentDept = ''\n    allPositions.rows.forEach(row => {\n      if (row.department !== currentDept) {\n        console.log(`\\n📁 ${row.department}:`)\n        currentDept = row.department\n      }\n      const levelIndicator = '  '.repeat(7 - row.level) + '└─ '\n      console.log(`${levelIndicator}${row.name} (Level ${row.level})`)\n    })\n\n    console.log('\\n✅ New organizations added successfully!')\n  } catch (error) {\n    console.error('❌ Failed to add new organizations:', error)\n    throw error\n  }\n}\n\n// Run the script\naddNewOrganizations()\n  .then(() => {\n    console.log('🎉 New organizations setup completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 New organizations setup failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/add-no-department.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/auto-validation-cli.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":5,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n// 자동 검증 서비스 CLI 도구\n\nimport { exec, spawn } from 'child_process'\nimport { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs'\nimport { join } from 'path'\nimport { promisify } from 'util'\n\nclass AutoValidationCLI {\n  constructor() {\n    this.serviceFile = 'src/lib/services/auto-validation-service.js'\n    this.pidFile = join(process.cwd(), 'logs', 'auto-validation.pid')\n    this.logFile = join(process.cwd(), 'logs', 'auto-validation.log')\n    this.ensureLogDirectory()\n  }\n\n  /**\n   * CLI 실행\n   */\n  async run() {\n    const command = process.argv[2]\n    const args = process.argv.slice(3)\n\n    switch (command) {\n      case 'start':\n        await this.start()\n        break\n      case 'stop':\n        await this.stop()\n        break\n      case 'restart':\n        await this.restart()\n        break\n      case 'status':\n        await this.status()\n        break\n      case 'logs':\n        await this.logs(args[0] || '50')\n        break\n      case 'test':\n        await this.test()\n        break\n      case 'help':\n        this.help()\n        break\n      default:\n        console.log('❌ 알 수 없는 명령어입니다.')\n        this.help()\n    }\n  }\n\n  /**\n   * 서비스 시작\n   */\n  async start() {\n    if (this.isRunning()) {\n      console.log('⚠️ 자동 검증 서비스가 이미 실행 중입니다.')\n      return\n    }\n\n    console.log('🚀 자동 검증 서비스 시작...')\n\n    try {\n      // TypeScript 파일을 JavaScript로 컴파일\n      await this.compileService()\n\n      // 백그라운드에서 서비스 실행\n      const serviceProcess = spawn('node', [this.serviceFile], {\n        detached: true,\n        stdio: 'ignore'\n      })\n\n      serviceProcess.unref()\n\n      // PID 저장\n      writeFileSync(this.pidFile, serviceProcess.pid.toString())\n\n      console.log('✅ 자동 검증 서비스가 시작되었습니다.')\n      console.log(`📋 PID: ${serviceProcess.pid}`)\n      console.log(`📝 로그: ${this.logFile}`)\n      console.log('')\n      console.log('사용 가능한 명령어:')\n      console.log('  npm run auto-validation status  - 상태 확인')\n      console.log('  npm run auto-validation logs    - 로그 확인')\n      console.log('  npm run auto-validation stop    - 서비스 중지')\n    } catch (error) {\n      console.error('❌ 서비스 시작 실패:', error.message)\n    }\n  }\n\n  /**\n   * 서비스 중지\n   */\n  async stop() {\n    if (!this.isRunning()) {\n      console.log('⚠️ 자동 검증 서비스가 실행 중이 아닙니다.')\n      return\n    }\n\n    console.log('🛑 자동 검증 서비스 중지...')\n\n    try {\n      const pid = parseInt(readFileSync(this.pidFile, 'utf-8'))\n      process.kill(pid, 'SIGTERM')\n\n      // PID 파일 삭제\n      writeFileSync(this.pidFile, '')\n\n      console.log('✅ 자동 검증 서비스가 중지되었습니다.')\n    } catch (error) {\n      console.error('❌ 서비스 중지 실패:', error.message)\n    }\n  }\n\n  /**\n   * 서비스 재시작\n   */\n  async restart() {\n    console.log('🔄 자동 검증 서비스 재시작...')\n    await this.stop()\n    await new Promise(resolve => setTimeout(resolve, 2000)) // 2초 대기\n    await this.start()\n  }\n\n  /**\n   * 서비스 상태 확인\n   */\n  async status() {\n    console.log('📊 자동 검증 서비스 상태')\n    console.log('=' * 40)\n\n    if (this.isRunning()) {\n      const pid = parseInt(readFileSync(this.pidFile, 'utf-8'))\n      console.log('✅ 상태: 실행 중')\n      console.log(`📋 PID: ${pid}`)\n      console.log(`📝 로그 파일: ${this.logFile}`)\n\n      // 최근 로그 확인\n      if (existsSync(this.logFile)) {\n        const logs = readFileSync(this.logFile, 'utf-8').split('\\n')\n        const recentLogs = logs.slice(-5).filter(log => log.trim())\n        console.log('')\n        console.log('📝 최근 로그:')\n        recentLogs.forEach(log => console.log(`  ${log}`))\n      }\n    } else {\n      console.log('❌ 상태: 중지됨')\n    }\n  }\n\n  /**\n   * 로그 확인\n   */\n  async logs(lines = '50') {\n    if (!existsSync(this.logFile)) {\n      console.log('📝 로그 파일이 존재하지 않습니다.')\n      return\n    }\n\n    console.log(`📝 자동 검증 서비스 로그 (최근 ${lines}줄)`)\n    console.log('=' * 50)\n\n    try {\n      const { stdout } = await this.execAsync(`tail -n ${lines} \"${this.logFile}\"`)\n      console.log(stdout)\n    } catch (error) {\n      console.error('❌ 로그 확인 실패:', error.message)\n    }\n  }\n\n  /**\n   * 테스트 실행\n   */\n  async test() {\n    console.log('🧪 자동 검증 서비스 테스트')\n    console.log('=' * 40)\n\n    try {\n      // 1. 서비스 파일 존재 확인\n      console.log('1. 서비스 파일 확인...')\n      if (existsSync(this.serviceFile)) {\n        console.log('  ✅ 서비스 파일 존재')\n      } else {\n        console.log('  ❌ 서비스 파일 없음')\n        return\n      }\n\n      // 2. 의존성 확인\n      console.log('2. 의존성 확인...')\n      const packageJson = JSON.parse(readFileSync('package.json', 'utf-8'))\n      const requiredDeps = ['prettier', 'typescript']\n      const missingDeps = requiredDeps.filter(dep => !packageJson.devDependencies?.[dep])\n\n      if (missingDeps.length === 0) {\n        console.log('  ✅ 모든 의존성 설치됨')\n      } else {\n        console.log(`  ❌ 누락된 의존성: ${missingDeps.join(', ')}`)\n        console.log(`  💡 설치 명령어: npm install --save-dev ${missingDeps.join(' ')}`)\n      }\n\n      // 3. 디렉토리 구조 확인\n      console.log('3. 디렉토리 구조 확인...')\n      const requiredDirs = [\n        'src/lib/utils',\n        'src/routes/api/project-management',\n        'src/lib/components/project-management'\n      ]\n\n      requiredDirs.forEach(dir => {\n        if (existsSync(dir)) {\n          console.log(`  ✅ ${dir}`)\n        } else {\n          console.log(`  ❌ ${dir} (없음)`)\n        }\n      })\n\n      // 4. 권한 확인\n      console.log('4. 권한 확인...')\n      try {\n        writeFileSync(this.logFile, 'test')\n        console.log('  ✅ 로그 파일 쓰기 권한')\n      } catch (error) {\n        console.log('  ❌ 로그 파일 쓰기 권한 없음')\n      }\n\n      console.log('')\n      console.log('✅ 테스트 완료')\n    } catch (error) {\n      console.error('❌ 테스트 실패:', error.message)\n    }\n  }\n\n  /**\n   * 도움말 표시\n   */\n  help() {\n    console.log('🤖 자동 검증 서비스 CLI')\n    console.log('')\n    console.log('사용법: npm run auto-validation <명령어>')\n    console.log('')\n    console.log('명령어:')\n    console.log('  start     - 서비스 시작')\n    console.log('  stop      - 서비스 중지')\n    console.log('  restart   - 서비스 재시작')\n    console.log('  status    - 서비스 상태 확인')\n    console.log('  logs [n]  - 로그 확인 (기본: 50줄)')\n    console.log('  test      - 서비스 테스트')\n    console.log('  help      - 도움말 표시')\n    console.log('')\n    console.log('예시:')\n    console.log('  npm run auto-validation start')\n    console.log('  npm run auto-validation status')\n    console.log('  npm run auto-validation logs 100')\n  }\n\n  /**\n   * 서비스가 실행 중인지 확인\n   */\n  isRunning() {\n    if (!existsSync(this.pidFile)) {\n      return false\n    }\n\n    try {\n      const pid = parseInt(readFileSync(this.pidFile, 'utf-8'))\n      process.kill(pid, 0) // 프로세스 존재 확인\n      return true\n    } catch (error) {\n      return false\n    }\n  }\n\n  /**\n   * 서비스 파일 컴파일\n   */\n  async compileService() {\n    console.log('🔨 서비스 파일 컴파일...')\n\n    try {\n      // TypeScript를 JavaScript로 컴파일\n      const { stdout, stderr } = await this.execAsync(\n        'npx tsc src/lib/services/auto-validation-service.ts --outDir . --target es2020 --module commonjs'\n      )\n\n      if (stderr) {\n        console.log('⚠️ 컴파일 경고:', stderr)\n      }\n\n      console.log('✅ 컴파일 완료')\n    } catch (error) {\n      console.error('❌ 컴파일 실패:', error.message)\n      throw error\n    }\n  }\n\n  /**\n   * execAsync 헬퍼\n   */\n  execAsync(command) {\n    const execAsync = promisify(exec)\n    return execAsync(command)\n  }\n\n  /**\n   * 로그 디렉토리 생성\n   */\n  ensureLogDirectory() {\n    const logDir = join(process.cwd(), 'logs')\n    if (!existsSync(logDir)) {\n      mkdirSync(logDir, { recursive: true })\n    }\n  }\n}\n\n// CLI 실행\nconst cli = new AutoValidationCLI()\ncli.run().catch(error => {\n  console.error('❌ CLI 실행 실패:', error)\n  process.exit(1)\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/check-errors.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":8,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 자동 오류 체크 스크립트\n * 코드 작성 후 TypeScript 오류와 린터 오류를 자동으로 체크합니다.\n */\n\nimport { execSync } from 'child_process'\n\n// 색상 코드\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m'\n}\n\nfunction log(message, color = 'reset') {\n  console.log(`${colors[color]}${message}${colors.reset}`)\n}\n\nfunction logSection(title) {\n  log(`\\n${'='.repeat(60)}`, 'cyan')\n  log(`${title}`, 'bright')\n  log(`${'='.repeat(60)}`, 'cyan')\n}\n\nfunction logSuccess(message) {\n  log(`✅ ${message}`, 'green')\n}\n\nfunction logError(message) {\n  log(`❌ ${message}`, 'red')\n}\n\nfunction logWarning(message) {\n  log(`⚠️  ${message}`, 'yellow')\n}\n\nfunction logInfo(message) {\n  log(`ℹ️  ${message}`, 'blue')\n}\n\nasync function checkTypeScriptErrors() {\n  logSection('TypeScript 오류 체크')\n\n  try {\n    logInfo('Svelte 타입 체크 실행 중...')\n    const result = execSync('npm run check', {\n      encoding: 'utf8',\n      stdio: 'pipe'\n    })\n\n    logSuccess('TypeScript 오류 없음!')\n    return { success: true, errors: [] }\n  } catch (error) {\n    const output = error.stdout || error.stderr || ''\n    const lines = output\n      .split('\\n')\n      .filter(\n        line => line.includes('error') || line.includes('Error') || line.includes('Type error')\n      )\n\n    if (lines.length > 0) {\n      logError(`TypeScript 오류 발견 (${lines.length}개):`)\n      lines.forEach(line => logError(`  ${line}`))\n    } else {\n      logWarning('TypeScript 체크 완료 (경고 있음)')\n    }\n\n    return { success: false, errors: lines }\n  }\n}\n\nasync function checkLinterErrors() {\n  logSection('린터 오류 체크')\n\n  try {\n    logInfo('린터 체크 실행 중...')\n\n    // 현재 작업 디렉토리에서 린터 실행\n    const result = execSync('npx svelte-check --tsconfig ./tsconfig.json', {\n      encoding: 'utf8',\n      stdio: 'pipe'\n    })\n\n    logSuccess('린터 오류 없음!')\n    return { success: true, errors: [] }\n  } catch (error) {\n    const output = error.stdout || error.stderr || ''\n    const lines = output\n      .split('\\n')\n      .filter(\n        line =>\n          line.includes('warning') ||\n          line.includes('Warning') ||\n          line.includes('error') ||\n          line.includes('Error')\n      )\n\n    if (lines.length > 0) {\n      logWarning(`린터 경고/오류 발견 (${lines.length}개):`)\n      lines.forEach(line => logWarning(`  ${line}`))\n    } else {\n      logInfo('린터 체크 완료')\n    }\n\n    return { success: false, errors: lines }\n  }\n}\n\nasync function checkBuildErrors() {\n  logSection('빌드 오류 체크')\n\n  try {\n    logInfo('빌드 테스트 실행 중...')\n\n    const result = execSync('npm run build', {\n      encoding: 'utf8',\n      stdio: 'pipe'\n    })\n\n    logSuccess('빌드 성공!')\n    return { success: true, errors: [] }\n  } catch (error) {\n    const output = error.stdout || error.stderr || ''\n    const lines = output\n      .split('\\n')\n      .filter(\n        line =>\n          line.includes('error') ||\n          line.includes('Error') ||\n          line.includes('failed') ||\n          line.includes('Failed')\n      )\n\n    if (lines.length > 0) {\n      logError(`빌드 오류 발견 (${lines.length}개):`)\n      lines.forEach(line => logError(`  ${line}`))\n    }\n\n    return { success: false, errors: lines }\n  }\n}\n\nasync function generateErrorReport(tsResult, linterResult, buildResult) {\n  logSection('오류 리포트')\n\n  const totalErrors =\n    tsResult.errors.length + linterResult.errors.length + buildResult.errors.length\n\n  if (totalErrors === 0) {\n    logSuccess('🎉 모든 체크 통과! 코드가 깔끔합니다.')\n    return true\n  }\n\n  logError(`총 ${totalErrors}개의 문제가 발견되었습니다:`)\n\n  if (tsResult.errors.length > 0) {\n    logError(`  - TypeScript 오류: ${tsResult.errors.length}개`)\n  }\n\n  if (linterResult.errors.length > 0) {\n    logWarning(`  - 린터 경고/오류: ${linterResult.errors.length}개`)\n  }\n\n  if (buildResult.errors.length > 0) {\n    logError(`  - 빌드 오류: ${buildResult.errors.length}개`)\n  }\n\n  logInfo('\\n💡 권장사항:')\n  logInfo('  1. TypeScript 오류부터 수정하세요')\n  logInfo('  2. 빌드 오류를 수정하세요')\n  logInfo('  3. 린터 경고는 코드 품질 개선을 위해 수정하세요')\n\n  return false\n}\n\nasync function main() {\n  log('🔍 자동 오류 체크 시작', 'bright')\n  log('='.repeat(60), 'cyan')\n\n  try {\n    // 1. TypeScript 오류 체크\n    const tsResult = await checkTypeScriptErrors()\n\n    // 2. 린터 오류 체크\n    const linterResult = await checkLinterErrors()\n\n    // 3. 빌드 오류 체크\n    const buildResult = await checkBuildErrors()\n\n    // 4. 리포트 생성\n    const allPassed = await generateErrorReport(tsResult, linterResult, buildResult)\n\n    if (allPassed) {\n      log('\\n🎯 결과: 모든 체크 통과!', 'green')\n      process.exit(0)\n    } else {\n      log('\\n⚠️  결과: 문제가 발견되었습니다. 위의 권장사항을 따라 수정하세요.', 'yellow')\n      process.exit(1)\n    }\n  } catch (error) {\n    logError(`스크립트 실행 중 오류 발생: ${error.message}`)\n    process.exit(1)\n  }\n}\n\n// 스크립트 실행\nmain()\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/clean-unused-imports.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":7,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 사용하지 않는 import들을 자동으로 제거하는 스크립트\n */\n\nimport { readFileSync, writeFileSync, readdirSync, statSync } from 'fs'\nimport { join, extname } from 'path'\n\nfunction findUnusedImports(content, filePath) {\n  const lines = content.split('\\n')\n  const changes = []\n\n  // Svelte 파일에서 사용하지 않는 import 찾기\n  if (filePath.endsWith('.svelte')) {\n    // import 문들 찾기\n    const importLines = []\n    let inImportBlock = false\n    let importStart = -1\n\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim()\n\n      // import 시작\n      if (line.startsWith('import') && line.includes('{')) {\n        inImportBlock = true\n        importStart = i\n        importLines.push({ line, index: i })\n      }\n      // import 블록의 끝\n      else if (inImportBlock && line.includes('}') && line.includes('from')) {\n        inImportBlock = false\n        importLines.push({ line, index: i })\n\n        // 이 import 블록 분석\n        const importBlock = lines.slice(importStart, i + 1).join('\\n')\n        const imports = extractImports(importBlock)\n\n        // 각 import가 실제로 사용되는지 확인\n        const usedImports = []\n        for (const imp of imports) {\n          if (isImportUsed(content, imp, filePath)) {\n            usedImports.push(imp)\n          }\n        }\n\n        // 사용되지 않는 import가 있으면 수정\n        if (usedImports.length !== imports.length) {\n          const newImportBlock = rebuildImportBlock(importBlock, usedImports)\n          changes.push({\n            start: importStart,\n            end: i + 1,\n            old: importBlock,\n            new: newImportBlock\n          })\n        }\n      }\n      // import 블록 내부\n      else if (inImportBlock) {\n        importLines.push({ line, index: i })\n      }\n    }\n  }\n\n  return changes\n}\n\nfunction extractImports(importBlock) {\n  const imports = []\n  const lines = importBlock.split('\\n')\n\n  for (const line of lines) {\n    if (line.includes('{') && line.includes('}')) {\n      const match = line.match(/\\{([^}]+)\\}/)\n      if (match) {\n        const importList = match[1].split(',').map(imp => imp.trim())\n        imports.push(...importList)\n      }\n    }\n  }\n\n  return imports.filter(imp => imp && !imp.includes('type'))\n}\n\nfunction isImportUsed(content, importName, filePath) {\n  // Svelte 파일에서 사용되는 패턴들\n  const patterns = [\n    new RegExp(`<${importName}\\\\b`, 'g'), // 컴포넌트 사용\n    new RegExp(`\\\\b${importName}\\\\b`, 'g'), // 일반 사용\n    new RegExp(`\\\\$${importName}\\\\b`, 'g'), // 스토어 사용\n    new RegExp(`{${importName}\\\\b`, 'g'), // 표현식 사용\n    new RegExp(`:${importName}\\\\b`, 'g') // 이벤트 핸들러\n  ]\n\n  // import 문 자체는 제외\n  const contentWithoutImports = content.replace(/import\\s+.*?from\\s+['\"][^'\"]+['\"];?\\s*/g, '')\n\n  for (const pattern of patterns) {\n    if (pattern.test(contentWithoutImports)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nfunction rebuildImportBlock(originalBlock, usedImports) {\n  if (usedImports.length === 0) {\n    return '' // 전체 import 블록 제거\n  }\n\n  const lines = originalBlock.split('\\n')\n  const newLines = []\n\n  let inImportBlock = false\n  let importStart = -1\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i].trim()\n\n    if (line.startsWith('import') && line.includes('{')) {\n      inImportBlock = true\n      importStart = i\n\n      // import 문 시작 부분\n      const importPrefix = line.substring(0, line.indexOf('{'))\n      const importSuffix = lines[i + 1] || ''\n      const fromPart = importSuffix.includes('from') ? importSuffix : lines[i + 2] || ''\n\n      // 사용되는 import들만 포함\n      const importList = usedImports.join(',\\n\\t\\t')\n      newLines.push(`${importPrefix}{`)\n      newLines.push(`\\t\\t${importList}`)\n      newLines.push(`\\t}${fromPart}`)\n\n      // 다음 줄로 건너뛰기\n      i += importSuffix.includes('from') ? 1 : 2\n    } else if (!inImportBlock) {\n      newLines.push(lines[i])\n    }\n  }\n\n  return newLines.join('\\n')\n}\n\nfunction processFile(filePath) {\n  try {\n    const content = readFileSync(filePath, 'utf8')\n    const changes = findUnusedImports(content, filePath)\n\n    if (changes.length > 0) {\n      let newContent = content\n\n      // 뒤에서부터 수정 (인덱스 변경 방지)\n      for (let i = changes.length - 1; i >= 0; i--) {\n        const change = changes[i]\n        const before = newContent.substring(0, change.start)\n        const after = newContent.substring(change.end)\n        newContent = before + change.new + after\n      }\n\n      writeFileSync(filePath, newContent, 'utf8')\n      console.log(`✅ 수정됨: ${filePath} (${changes.length}개 변경)`)\n      return changes.length\n    }\n\n    return 0\n  } catch (error) {\n    console.error(`❌ 오류: ${filePath}`, error.message)\n    return 0\n  }\n}\n\nfunction processDirectory(dirPath) {\n  let totalChanges = 0\n\n  try {\n    const items = readdirSync(dirPath)\n\n    for (const item of items) {\n      const fullPath = join(dirPath, item)\n      const stat = statSync(fullPath)\n\n      if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {\n        totalChanges += processDirectory(fullPath)\n      } else if (stat.isFile() && (extname(item) === '.svelte' || extname(item) === '.ts')) {\n        totalChanges += processFile(fullPath)\n      }\n    }\n  } catch (error) {\n    console.error(`❌ 디렉토리 처리 오류: ${dirPath}`, error.message)\n  }\n\n  return totalChanges\n}\n\n// 메인 실행\nconsole.log('🧹 사용하지 않는 import 정리 시작...')\nconst totalChanges = processDirectory('./src')\nconsole.log(`\\n🎉 완료! 총 ${totalChanges}개 파일이 수정되었습니다.`)\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/create-test-evidence-data.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import path from 'path'\nimport { Pool } from 'pg'\nimport { fileURLToPath } from 'url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\n// Database configuration\nconst dbConfig = {\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: {\n    rejectUnauthorized: false\n  }\n}\n\nasync function createTestEvidenceData() {\n  const pool = new Pool(dbConfig)\n\n  try {\n    console.log('테스트 증빙 데이터 생성 중...')\n\n    // 1. 프로젝트 예산 조회\n    const budgetResult = await pool.query(`\n            SELECT pb.id, pb.period_number, pb.fiscal_year, p.title as project_title\n            FROM project_budgets pb\n            JOIN projects p ON pb.project_id = p.id\n            ORDER BY pb.created_at DESC\n            LIMIT 1\n        `)\n\n    if (budgetResult.rows.length === 0) {\n      console.log('❌ 프로젝트 예산이 없습니다. 먼저 프로젝트와 예산을 생성해주세요.')\n      return\n    }\n\n    const budget = budgetResult.rows[0]\n    console.log(`프로젝트 예산 발견: ${budget.project_title} - ${budget.period_number}연차`)\n\n    // 2. 증빙 카테고리 조회\n    const categoriesResult = await pool.query('SELECT * FROM evidence_categories ORDER BY name')\n    const categories = categoriesResult.rows\n    console.log(`증빙 카테고리: ${categories.map(c => c.name).join(', ')}`)\n\n    // 3. 직원 조회\n    const employeesResult = await pool.query(\n      'SELECT id, first_name, last_name FROM employees LIMIT 5'\n    )\n    const employees = employeesResult.rows\n    console.log(`직원: ${employees.map(e => `${e.first_name} ${e.last_name}`).join(', ')}`)\n\n    // 4. 테스트 증빙 항목 생성\n    const testEvidenceItems = [\n      // 인건비\n      {\n        category_id: categories.find(c => c.name === '인건비')?.id,\n        name: '박기선 (2025-01)',\n        description: '2025년 1월 급여',\n        budget_amount: 5000000,\n        assignee_id: employees[0]?.id,\n        assignee_name: employees[0]\n          ? `${employees[0].first_name} ${employees[0].last_name}`\n          : '박기선',\n        progress: 100,\n        status: 'completed',\n        due_date: '2025-01-31'\n      },\n      {\n        category_id: categories.find(c => c.name === '인건비')?.id,\n        name: '박기선 (2025-02)',\n        description: '2025년 2월 급여',\n        budget_amount: 5000000,\n        assignee_id: employees[0]?.id,\n        assignee_name: employees[0]\n          ? `${employees[0].first_name} ${employees[0].last_name}`\n          : '박기선',\n        progress: 100,\n        status: 'completed',\n        due_date: '2025-02-28'\n      },\n      {\n        category_id: categories.find(c => c.name === '인건비')?.id,\n        name: '박기선 (2025-03)',\n        description: '2025년 3월 급여',\n        budget_amount: 5000000,\n        assignee_id: employees[0]?.id,\n        assignee_name: employees[0]\n          ? `${employees[0].first_name} ${employees[0].last_name}`\n          : '박기선',\n        progress: 75,\n        status: 'in_progress',\n        due_date: '2025-03-31'\n      },\n      // 연구재료비\n      {\n        category_id: categories.find(c => c.name === '연구재료비')?.id,\n        name: '모터 10개',\n        description: '드론용 모터 구매',\n        budget_amount: 1000000,\n        assignee_id: employees[1]?.id,\n        assignee_name: employees[1]\n          ? `${employees[1].first_name} ${employees[1].last_name}`\n          : '최시용',\n        progress: 100,\n        status: 'completed',\n        due_date: '2025-02-15'\n      },\n      {\n        category_id: categories.find(c => c.name === '연구재료비')?.id,\n        name: '프로펠러 20개',\n        description: '드론용 프로펠러 구매',\n        budget_amount: 2000000,\n        assignee_id: employees[1]?.id,\n        assignee_name: employees[1]\n          ? `${employees[1].first_name} ${employees[1].last_name}`\n          : '최시용',\n        progress: 50,\n        status: 'in_progress',\n        due_date: '2025-03-15'\n      },\n      // 연구활동비\n      {\n        category_id: categories.find(c => c.name === '연구활동비')?.id,\n        name: '출장비 (국내)',\n        description: '국내 연구회의 참석',\n        budget_amount: 800000,\n        assignee_id: employees[0]?.id,\n        assignee_name: employees[0]\n          ? `${employees[0].first_name} ${employees[0].last_name}`\n          : '박기선',\n        progress: 25,\n        status: 'in_progress',\n        due_date: '2025-03-30'\n      },\n      {\n        category_id: categories.find(c => c.name === '연구활동비')?.id,\n        name: '외주용역비 (분석)',\n        description: '데이터 분석 외주',\n        budget_amount: 2000000,\n        assignee_id: employees[0]?.id,\n        assignee_name: employees[0]\n          ? `${employees[0].first_name} ${employees[0].last_name}`\n          : '박기선',\n        progress: 60,\n        status: 'in_progress',\n        due_date: '2025-04-15'\n      },\n      // 간접비\n      {\n        category_id: categories.find(c => c.name === '간접비')?.id,\n        name: '특허출원 (발명1)',\n        description: '드론 제어 알고리즘 특허',\n        budget_amount: 500000,\n        assignee_id: employees[0]?.id,\n        assignee_name: employees[0]\n          ? `${employees[0].first_name} ${employees[0].last_name}`\n          : '박기선',\n        progress: 80,\n        status: 'in_progress',\n        due_date: '2025-03-20'\n      }\n    ]\n\n    // 증빙 항목 생성\n    for (const item of testEvidenceItems) {\n      if (!item.category_id) continue\n\n      const result = await pool.query(\n        `\n                INSERT INTO evidence_items (\n                    project_budget_id, category_id, name, description, budget_amount,\n                    assignee_id, assignee_name, progress, status, due_date\n                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n                RETURNING id, name\n            `,\n        [\n          budget.id,\n          item.category_id,\n          item.name,\n          item.description,\n          item.budget_amount,\n          item.assignee_id,\n          item.assignee_name,\n          item.progress,\n          item.status,\n          item.due_date\n        ]\n      )\n\n      console.log(`✅ 증빙 항목 생성: ${result.rows[0].name}`)\n    }\n\n    // 5. 테스트 증빙 서류 생성\n    const evidenceItemsResult = await pool.query(\n      `\n            SELECT ei.id, ei.name, ei.category_id, ec.name as category_name\n            FROM evidence_items ei\n            JOIN evidence_categories ec ON ei.category_id = ec.id\n            WHERE ei.project_budget_id = $1\n        `,\n      [budget.id]\n    )\n\n    const testDocuments = [\n      { type: '급여명세서', name: '2025년 1월 급여명세서.pdf' },\n      { type: '이체확인증', name: '급여이체확인증_202501.pdf' },\n      { type: '구매계약서', name: '모터구매계약서.pdf' },\n      { type: '세금계산서', name: '세금계산서_모터.pdf' },\n      { type: '출장신청서', name: '출장신청서_연구회의.pdf' },\n      { type: '용역계약서', name: '데이터분석용역계약서.pdf' },\n      { type: '특허출원서', name: '특허출원서_드론제어.pdf' }\n    ]\n\n    for (const item of evidenceItemsResult.rows) {\n      const relevantDocs = testDocuments.filter(doc => {\n        if (item.category_name === '인건비') {\n          return doc.type === '급여명세서' || doc.type === '이체확인증'\n        } else if (item.category_name === '연구재료비') {\n          return doc.type === '구매계약서' || doc.type === '세금계산서'\n        } else if (item.category_name === '연구활동비') {\n          return doc.type === '출장신청서' || doc.type === '용역계약서'\n        } else if (item.category_name === '간접비') {\n          return doc.type === '특허출원서'\n        }\n        return false\n      })\n\n      for (const doc of relevantDocs) {\n        await pool.query(\n          `\n                    INSERT INTO evidence_documents (\n                        evidence_item_id, document_type, document_name, file_path, \n                        file_size, mime_type, status\n                    ) VALUES ($1, $2, $3, $4, $5, $6, $7)\n                `,\n          [\n            item.id,\n            doc.type,\n            doc.name,\n            `/uploads/evidence/${doc.name}`,\n            1024000, // 1MB\n            'application/pdf',\n            Math.random() > 0.5 ? 'approved' : 'uploaded'\n          ]\n        )\n      }\n    }\n\n    console.log('✅ 테스트 증빙 서류 생성 완료')\n\n    // 6. 테스트 일정 생성\n    for (const item of evidenceItemsResult.rows) {\n      const schedules = [\n        {\n          task_name: '서류 준비',\n          description: '필수 서류 수집 및 정리',\n          due_date: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7일 후\n          priority: 'high'\n        },\n        {\n          task_name: '검토 및 승인',\n          description: '서류 검토 및 최종 승인',\n          due_date: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000), // 14일 후\n          priority: 'medium'\n        }\n      ]\n\n      for (const schedule of schedules) {\n        await pool.query(\n          `\n                    INSERT INTO evidence_schedules (\n                        evidence_item_id, task_name, description, due_date, priority, status\n                    ) VALUES ($1, $2, $3, $4, $5, $6)\n                `,\n          [\n            item.id,\n            schedule.task_name,\n            schedule.description,\n            schedule.due_date,\n            schedule.priority,\n            Math.random() > 0.7 ? 'completed' : 'pending'\n          ]\n        )\n      }\n    }\n\n    console.log('✅ 테스트 일정 생성 완료')\n\n    // 7. 결과 확인\n    const finalResult = await pool.query(\n      `\n            SELECT \n                ec.name as category_name,\n                COUNT(ei.id) as item_count,\n                COUNT(ed.id) as document_count,\n                COUNT(es.id) as schedule_count\n            FROM evidence_categories ec\n            LEFT JOIN evidence_items ei ON ec.id = ei.category_id AND ei.project_budget_id = $1\n            LEFT JOIN evidence_documents ed ON ei.id = ed.evidence_item_id\n            LEFT JOIN evidence_schedules es ON ei.id = es.evidence_item_id\n            GROUP BY ec.id, ec.name\n            ORDER BY ec.name\n        `,\n      [budget.id]\n    )\n\n    console.log('\\n📊 생성된 테스트 데이터 요약:')\n    finalResult.rows.forEach(row => {\n      console.log(\n        `${row.category_name}: ${row.item_count}개 항목, ${row.document_count}개 서류, ${row.schedule_count}개 일정`\n      )\n    })\n  } catch (error) {\n    console.error('❌ 테스트 데이터 생성 중 오류 발생:', error)\n    throw error\n  } finally {\n    await pool.end()\n  }\n}\n\n// 실행\ncreateTestEvidenceData()\n  .then(() => {\n    console.log('\\n🎉 테스트 증빙 데이터 생성이 완료되었습니다!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('생성 실패:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/extract-aws-schema.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":10,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * AWS Database Schema Extractor\n *\n * This script extracts the complete schema from AWS database\n * Usage: node scripts/extract-aws-schema.js\n */\n\nimport fs from 'fs'\nimport { Pool } from 'pg'\n\n// AWS Database Configuration\nconst awsConfig = {\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: {\n    rejectUnauthorized: false\n  }\n}\n\nclass SchemaExtractor {\n  constructor() {\n    this.awsPool = null\n  }\n\n  async connect() {\n    console.log('🔗 Connecting to AWS database...')\n    try {\n      this.awsPool = new Pool(awsConfig)\n      await this.awsPool.connect()\n      console.log('✅ Connected to AWS database')\n    } catch (error) {\n      console.error('❌ Failed to connect to AWS database:', error.message)\n      throw error\n    }\n  }\n\n  async getTableDefinitions() {\n    console.log('📋 Extracting table definitions...')\n\n    const result = await this.awsPool.query(`\n\t\t\tSELECT \n\t\t\t\ttable_name,\n\t\t\t\tcolumn_name,\n\t\t\t\tdata_type,\n\t\t\t\tis_nullable,\n\t\t\t\tcolumn_default,\n\t\t\t\tcharacter_maximum_length,\n\t\t\t\tnumeric_precision,\n\t\t\t\tnumeric_scale,\n\t\t\t\tordinal_position\n\t\t\tFROM information_schema.columns \n\t\t\tWHERE table_schema = 'public' \n\t\t\tORDER BY table_name, ordinal_position\n\t\t`)\n\n    const tables = {}\n    result.rows.forEach(row => {\n      if (!tables[row.table_name]) {\n        tables[row.table_name] = []\n      }\n      tables[row.table_name].push(row)\n    })\n\n    console.log(`   Found ${Object.keys(tables).length} tables`)\n    return tables\n  }\n\n  async getIndexes() {\n    console.log('🔍 Extracting indexes...')\n\n    const result = await this.awsPool.query(`\n\t\t\tSELECT \n\t\t\t\ttablename,\n\t\t\t\tindexname,\n\t\t\t\tindexdef\n\t\t\tFROM pg_indexes \n\t\t\tWHERE schemaname = 'public'\n\t\t\tORDER BY tablename, indexname\n\t\t`)\n\n    console.log(`   Found ${result.rows.length} indexes`)\n    return result.rows\n  }\n\n  async getConstraints() {\n    console.log('🔗 Extracting constraints...')\n\n    const result = await this.awsPool.query(`\n\t\t\tSELECT \n\t\t\t\ttc.table_name,\n\t\t\t\ttc.constraint_name,\n\t\t\t\ttc.constraint_type,\n\t\t\t\tkcu.column_name,\n\t\t\t\tccu.table_name AS foreign_table_name,\n\t\t\t\tccu.column_name AS foreign_column_name\n\t\t\tFROM information_schema.table_constraints AS tc \n\t\t\tLEFT JOIN information_schema.key_column_usage AS kcu\n\t\t\t\tON tc.constraint_name = kcu.constraint_name\n\t\t\t\tAND tc.table_schema = kcu.table_schema\n\t\t\tLEFT JOIN information_schema.constraint_column_usage AS ccu\n\t\t\t\tON ccu.constraint_name = tc.constraint_name\n\t\t\t\tAND ccu.table_schema = tc.table_schema\n\t\t\tWHERE tc.table_schema = 'public'\n\t\t\tORDER BY tc.table_name, tc.constraint_type, tc.constraint_name\n\t\t`)\n\n    console.log(`   Found ${result.rows.length} constraints`)\n    return result.rows\n  }\n\n  async getFunctions() {\n    console.log('⚙️  Extracting functions...')\n\n    const result = await this.awsPool.query(`\n\t\t\tSELECT \n\t\t\t\troutine_name,\n\t\t\t\troutine_definition\n\t\t\tFROM information_schema.routines \n\t\t\tWHERE routine_schema = 'public' \n\t\t\tAND routine_type = 'FUNCTION'\n\t\t\tORDER BY routine_name\n\t\t`)\n\n    console.log(`   Found ${result.rows.length} functions`)\n    return result.rows\n  }\n\n  async getTriggers() {\n    console.log('🎯 Extracting triggers...')\n\n    const result = await this.awsPool.query(`\n\t\t\tSELECT \n\t\t\t\ttrigger_name,\n\t\t\t\tevent_object_table,\n\t\t\t\taction_statement\n\t\t\tFROM information_schema.triggers \n\t\t\tWHERE trigger_schema = 'public'\n\t\t\tORDER BY event_object_table, trigger_name\n\t\t`)\n\n    console.log(`   Found ${result.rows.length} triggers`)\n    return result.rows\n  }\n\n  async getViews() {\n    console.log('👁️  Extracting views...')\n\n    const result = await this.awsPool.query(`\n\t\t\tSELECT \n\t\t\t\ttable_name,\n\t\t\t\tview_definition\n\t\t\tFROM information_schema.views \n\t\t\tWHERE table_schema = 'public'\n\t\t\tORDER BY table_name\n\t\t`)\n\n    console.log(`   Found ${result.rows.length} views`)\n    return result.rows\n  }\n\n  generateCreateTableSQL(tableName, columns) {\n    let sql = `CREATE TABLE ${tableName} (\\n`\n\n    const columnDefs = columns.map(col => {\n      let def = `  ${col.column_name} ${col.data_type}`\n\n      if (col.character_maximum_length) {\n        def += `(${col.character_maximum_length})`\n      } else if (col.numeric_precision) {\n        def += `(${col.numeric_precision}`\n        if (col.numeric_scale) {\n          def += `,${col.numeric_scale}`\n        }\n        def += `)`\n      }\n\n      if (col.is_nullable === 'NO') {\n        def += ' NOT NULL'\n      }\n\n      if (col.column_default) {\n        def += ` DEFAULT ${col.column_default}`\n      }\n\n      return def\n    })\n\n    sql += columnDefs.join(',\\n')\n    sql += '\\n);'\n\n    return sql\n  }\n\n  async generateCompleteSchema() {\n    console.log('🚀 Generating complete schema...\\n')\n\n    const tables = await this.getTableDefinitions()\n    const indexes = await this.getIndexes()\n    const constraints = await this.getConstraints()\n    const functions = await this.getFunctions()\n    const triggers = await this.getTriggers()\n    const views = await this.getViews()\n\n    let schema = `-- AWS Database Schema Export\n-- Generated on: ${new Date().toISOString()}\n-- Source: ${awsConfig.host}\n\n-- Enable required extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\nCREATE EXTENSION IF NOT EXISTS \"pgcrypto\";\n\n`\n\n    // Generate CREATE TABLE statements\n    Object.keys(tables).forEach(tableName => {\n      schema += `\\n-- Table: ${tableName}\\n`\n      schema += this.generateCreateTableSQL(tableName, tables[tableName])\n      schema += '\\n\\n'\n    })\n\n    // Generate indexes\n    if (indexes.length > 0) {\n      schema += '-- Indexes\\n'\n      indexes.forEach(index => {\n        if (!index.indexname.includes('_pkey')) {\n          // Skip primary keys\n          schema += `${index.indexdef};\\n`\n        }\n      })\n      schema += '\\n'\n    }\n\n    // Generate constraints\n    if (constraints.length > 0) {\n      schema += '-- Constraints\\n'\n      constraints.forEach(constraint => {\n        if (constraint.constraint_type === 'FOREIGN KEY') {\n          schema += `ALTER TABLE ${constraint.table_name} ADD CONSTRAINT ${constraint.constraint_name} FOREIGN KEY (${constraint.column_name}) REFERENCES ${constraint.foreign_table_name}(${constraint.foreign_column_name});\\n`\n        }\n      })\n      schema += '\\n'\n    }\n\n    // Generate functions\n    if (functions.length > 0) {\n      schema += '-- Functions\\n'\n      functions.forEach(func => {\n        schema += `-- Function: ${func.routine_name}\\n`\n        schema += `${func.routine_definition};\\n\\n`\n      })\n    }\n\n    // Generate triggers\n    if (triggers.length > 0) {\n      schema += '-- Triggers\\n'\n      triggers.forEach(trigger => {\n        schema += `CREATE TRIGGER ${trigger.trigger_name}\\n`\n        schema += `  ON ${trigger.event_object_table}\\n`\n        schema += `  ${trigger.action_statement};\\n\\n`\n      })\n    }\n\n    // Generate views\n    if (views.length > 0) {\n      schema += '-- Views\\n'\n      views.forEach(view => {\n        schema += `CREATE VIEW ${view.table_name} AS\\n`\n        schema += `${view.view_definition};\\n\\n`\n      })\n    }\n\n    return schema\n  }\n\n  async extract() {\n    console.log('🚀 Starting AWS schema extraction...\\n')\n\n    await this.connect()\n\n    const schema = await this.generateCompleteSchema()\n\n    // Write to file\n    const outputFile = 'aws-schema.sql'\n    fs.writeFileSync(outputFile, schema)\n\n    console.log(`\\n✅ Schema extraction completed!`)\n    console.log(`📄 Schema saved to: ${outputFile}`)\n    console.log(`📊 Total size: ${(schema.length / 1024).toFixed(2)} KB`)\n  }\n\n  async close() {\n    if (this.awsPool) {\n      await this.awsPool.end()\n      console.log('🔌 Disconnected from AWS database')\n    }\n  }\n}\n\n// Main execution\nasync function main() {\n  const extractor = new SchemaExtractor()\n\n  try {\n    await extractor.extract()\n  } catch (error) {\n    console.error('❌ Schema extraction failed:', error)\n    process.exit(1)\n  } finally {\n    await extractor.close()\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error)\n}\n\nexport { SchemaExtractor }\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/fix-accessibility.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":8,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Accessibility 경고 자동 수정 스크립트\n * label과 input/select를 자동으로 연결\n */\n\nimport { readFileSync, writeFileSync } from 'fs'\nimport { glob } from 'glob'\n\nconsole.log('🔧 Accessibility 경고 자동 수정 시작...')\n\n// 수정할 파일들 찾기\nconst files = glob.sync('src/**/*.svelte')\n\nlet totalFixed = 0\n\nfor (const file of files) {\n  try {\n    let content = readFileSync(file, 'utf8')\n    let modified = false\n\n    // label과 input 연결 패턴 찾기\n    const labelInputPattern =\n      /<label([^>]*)class=\"([^\"]*)\"([^>]*)>([^<]*)<\\/label>\\s*<input\\s*([^>]*?)>/g\n\n    content = content.replace(\n      labelInputPattern,\n      (match, before, className, after, labelText, inputAttrs) => {\n        // 고유한 ID 생성\n        const id = `input-${Math.random().toString(36).substr(2, 9)}`\n\n        // label에 for 속성 추가\n        const newLabel = `<label${before}for=\"${id}\" class=\"${className}\"${after}>${labelText}</label>`\n\n        // input에 id 속성 추가\n        const newInput = `<input id=\"${id}\" ${inputAttrs}>`\n\n        modified = true\n        return `${newLabel}\\n\\t\\t\\t\\t\\t${newInput}`\n      }\n    )\n\n    // label과 select 연결 패턴 찾기\n    const labelSelectPattern =\n      /<label([^>]*)class=\"([^\"]*)\"([^>]*)>([^<]*)<\\/label>\\s*<select\\s*([^>]*?)>/g\n\n    content = content.replace(\n      labelSelectPattern,\n      (match, before, className, after, labelText, selectAttrs) => {\n        // 고유한 ID 생성\n        const id = `select-${Math.random().toString(36).substr(2, 9)}`\n\n        // label에 for 속성 추가\n        const newLabel = `<label${before}for=\"${id}\" class=\"${className}\"${after}>${labelText}</label>`\n\n        // select에 id 속성 추가\n        const newSelect = `<select id=\"${id}\" ${selectAttrs}>`\n\n        modified = true\n        return `${newLabel}\\n\\t\\t\\t\\t\\t${newSelect}`\n      }\n    )\n\n    if (modified) {\n      writeFileSync(file, content, 'utf8')\n      console.log(`✅ ${file} 수정 완료`)\n      totalFixed++\n    }\n  } catch (error) {\n    console.error(`❌ ${file} 수정 실패:`, error.message)\n  }\n}\n\nconsole.log(`\\n🎉 총 ${totalFixed}개 파일의 accessibility 경고 수정 완료!`)\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/fix-schema.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":10,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Schema Fixer\n *\n * This script fixes common issues in the extracted AWS schema\n * Usage: node scripts/fix-schema.js\n */\n\nimport fs from 'fs'\n\nfunction fixSchema() {\n  console.log('🔧 Fixing AWS schema...')\n\n  let schema = fs.readFileSync('aws-schema.sql', 'utf8')\n\n  // Fix integer data types with precision (PostgreSQL doesn't support integer(32))\n  schema = schema.replace(/integer\\(\\d+\\)/g, 'integer')\n  schema = schema.replace(/bigint\\(\\d+\\)/g, 'bigint')\n\n  // Fix ARRAY type\n  schema = schema.replace(/ARRAY,/g, 'text[],')\n\n  // Fix function definitions - add proper function syntax\n  schema = schema.replace(\n    /CREATE OR REPLACE FUNCTION update_updated_at_column\\(\\)\\s*RETURNS TRIGGER AS \\$\\$\\s*BEGIN\\s*NEW\\.updated_at = CURRENT_TIMESTAMP;\\s*RETURN NEW;\\s*END;\\s*\\$\\$ LANGUAGE plpgsql;/g,\n    `CREATE OR REPLACE FUNCTION update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = CURRENT_TIMESTAMP;\n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;`\n  )\n\n  // Fix trigger definitions\n  schema = schema.replace(/CREATE TRIGGER update_[^;]+;\\s*null;/g, '')\n\n  // Remove problematic trigger definitions\n  schema = schema.replace(/CREATE TRIGGER [^;]+;\\s*null;/g, '')\n\n  // Remove duplicate table definitions\n  const lines = schema.split('\\n')\n  const seenTables = new Set()\n  const fixedLines = []\n\n  for (const line of lines) {\n    const createTableMatch = line.match(/CREATE TABLE (\\w+)/)\n    if (createTableMatch) {\n      const tableName = createTableMatch[1]\n      if (seenTables.has(tableName)) {\n        console.log(`   ⏭️  Skipping duplicate table: ${tableName}`)\n        continue\n      }\n      seenTables.add(tableName)\n    }\n    fixedLines.push(line)\n  }\n\n  schema = fixedLines.join('\\n')\n\n  // Write fixed schema\n  fs.writeFileSync('aws-schema-fixed.sql', schema)\n\n  console.log('✅ Schema fixed!')\n  console.log('📄 Fixed schema saved to: aws-schema-fixed.sql')\n  console.log(`📊 Total size: ${(schema.length / 1024).toFixed(2)} KB`)\n}\n\n// Main execution\nfixSchema()\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/migrate-employee-fields.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\nasync function migrateEmployeeFields() {\n  try {\n    console.log('🔄 Starting employee fields migration...')\n\n    // Add birth_date column\n    console.log('📅 Adding birth_date column...')\n    await query(`\n            ALTER TABLE employees ADD COLUMN IF NOT EXISTS birth_date DATE\n        `)\n\n    // Add termination_date column\n    console.log('📅 Adding termination_date column...')\n    await query(`\n            ALTER TABLE employees ADD COLUMN IF NOT EXISTS termination_date DATE\n        `)\n\n    // Add indexes for better performance\n    console.log('🔍 Adding indexes...')\n    await query(`\n            CREATE INDEX IF NOT EXISTS idx_employees_birth_date ON employees(birth_date)\n        `)\n\n    await query(`\n            CREATE INDEX IF NOT EXISTS idx_employees_termination_date ON employees(termination_date)\n        `)\n\n    // Update status to 'terminated' for employees with termination_date\n    console.log('🔄 Updating employee statuses...')\n    await query(`\n            UPDATE employees \n            SET status = 'terminated' \n            WHERE termination_date IS NOT NULL AND status != 'terminated'\n        `)\n\n    // Add comments to columns\n    console.log('📝 Adding column comments...')\n    await query(`\n            COMMENT ON COLUMN employees.birth_date IS 'Employee birth date'\n        `)\n\n    await query(`\n            COMMENT ON COLUMN employees.termination_date IS 'Employee termination date (when they left the company)'\n        `)\n\n    console.log('✅ Employee fields migration completed successfully!')\n\n    // Verify the changes\n    console.log('🔍 Verifying changes...')\n    const result = await query(`\n            SELECT column_name, data_type, is_nullable \n            FROM information_schema.columns \n            WHERE table_name = 'employees' \n            AND column_name IN ('birth_date', 'termination_date')\n            ORDER BY column_name\n        `)\n\n    console.log('📋 New columns:')\n    result.rows.forEach(row => {\n      console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable})`)\n    })\n  } catch (error) {\n    console.error('❌ Migration failed:', error)\n    throw error\n  }\n}\n\n// Run the migration\nmigrateEmployeeFields()\n  .then(() => {\n    console.log('🎉 Migration completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Migration failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/quality-gate.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":10,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 코드 품질 게이트 스크립트\n *\n * 이 스크립트는 코드 품질 임계값을 정의하고 체크합니다.\n * CI/CD 파이프라인에서 사용하여 품질 기준을 만족하지 않으면 빌드를 실패시킵니다.\n */\n\nimport { execSync } from 'child_process'\n\n// 색상 정의\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m',\n  magenta: '\\x1b[35m',\n  cyan: '\\x1b[36m'\n}\n\n// 품질 게이트 임계값 정의\nconst QUALITY_GATES = {\n  // TypeScript 오류 허용 개수\n  MAX_TYPESCRIPT_ERRORS: 0,\n\n  // ESLint 오류 허용 개수\n  MAX_ESLINT_ERRORS: 0,\n  MAX_ESLINT_WARNINGS: 10,\n\n  // 테스트 커버리지 (백분율)\n  MIN_TEST_COVERAGE: 80,\n\n  // 코드 복잡도\n  MAX_CYCLOMATIC_COMPLEXITY: 10,\n\n  // 파일 크기 (라인 수)\n  MAX_FILE_SIZE: 500,\n\n  // 함수 크기 (라인 수)\n  MAX_FUNCTION_SIZE: 50,\n\n  // 중첩 깊이\n  MAX_NESTING_DEPTH: 4,\n\n  // 보안 취약점\n  MAX_SECURITY_VULNERABILITIES: 0,\n\n  // 의존성 문제\n  MAX_DEPENDENCY_ISSUES: 0,\n\n  // 빌드 시간 (초)\n  MAX_BUILD_TIME: 120\n}\n\nfunction log(message, color = 'reset') {\n  console.log(`${colors[color]}${message}${colors.reset}`)\n}\n\nfunction logSection(title) {\n  log(`\\n${'='.repeat(60)}`, 'cyan')\n  log(`${title}`, 'bright')\n  log(`${'='.repeat(60)}`, 'cyan')\n}\n\nfunction logSuccess(message) {\n  log(`✅ ${message}`, 'green')\n}\n\nfunction logError(message) {\n  log(`❌ ${message}`, 'red')\n}\n\nfunction logWarning(message) {\n  log(`⚠️  ${message}`, 'yellow')\n}\n\nfunction logInfo(message) {\n  log(`ℹ️  ${message}`, 'blue')\n}\n\nclass QualityGate {\n  constructor() {\n    this.results = {\n      typescript: { passed: false, errors: 0, warnings: 0 },\n      eslint: { passed: false, errors: 0, warnings: 0 },\n      build: { passed: false, time: 0 },\n      security: { passed: false, vulnerabilities: 0 },\n      dependencies: { passed: false, issues: 0 },\n      coverage: { passed: false, percentage: 0 },\n      complexity: { passed: false, maxComplexity: 0 },\n      fileSize: { passed: false, maxSize: 0 },\n      overall: { passed: false }\n    }\n  }\n\n  async checkTypeScript() {\n    logSection('TypeScript 품질 체크')\n\n    try {\n      const startTime = Date.now()\n      const result = execSync('npm run check', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      })\n      const endTime = Date.now()\n\n      logSuccess('TypeScript 체크 통과!')\n      this.results.typescript.passed = true\n      this.results.typescript.errors = 0\n      this.results.typescript.warnings = 0\n\n      return true\n    } catch (error) {\n      const output = error.stdout || error.stderr || ''\n      const errorLines = output\n        .split('\\n')\n        .filter(line => line.includes('error') || line.includes('Error'))\n      const warningLines = output\n        .split('\\n')\n        .filter(line => line.includes('warning') || line.includes('Warning'))\n\n      this.results.typescript.errors = errorLines.length\n      this.results.typescript.warnings = warningLines.length\n\n      if (this.results.typescript.errors > QUALITY_GATES.MAX_TYPESCRIPT_ERRORS) {\n        logError(\n          `TypeScript 오류 ${this.results.typescript.errors}개 (허용: ${QUALITY_GATES.MAX_TYPESCRIPT_ERRORS}개)`\n        )\n        this.results.typescript.passed = false\n        return false\n      }\n\n      logWarning(`TypeScript 경고 ${this.results.typescript.warnings}개 발견`)\n      this.results.typescript.passed = true\n      return true\n    }\n  }\n\n  async checkESLint() {\n    logSection('ESLint 품질 체크')\n\n    try {\n      const result = execSync('npx eslint src/ --ext .ts,.svelte --format=json', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      })\n\n      logSuccess('ESLint 체크 통과!')\n      this.results.eslint.passed = true\n      this.results.eslint.errors = 0\n      this.results.eslint.warnings = 0\n\n      return true\n    } catch (error) {\n      try {\n        const output = error.stdout || ''\n        const eslintResults = JSON.parse(output)\n\n        let totalErrors = 0\n        let totalWarnings = 0\n\n        eslintResults.forEach(file => {\n          totalErrors += file.errorCount || 0\n          totalWarnings += file.warningCount || 0\n        })\n\n        this.results.eslint.errors = totalErrors\n        this.results.eslint.warnings = totalWarnings\n\n        if (totalErrors > QUALITY_GATES.MAX_ESLINT_ERRORS) {\n          logError(`ESLint 오류 ${totalErrors}개 (허용: ${QUALITY_GATES.MAX_ESLINT_ERRORS}개)`)\n          this.results.eslint.passed = false\n          return false\n        }\n\n        if (totalWarnings > QUALITY_GATES.MAX_ESLINT_WARNINGS) {\n          logWarning(\n            `ESLint 경고 ${totalWarnings}개 (허용: ${QUALITY_GATES.MAX_ESLINT_WARNINGS}개)`\n          )\n          this.results.eslint.passed = false\n          return false\n        }\n\n        logSuccess('ESLint 품질 게이트 통과!')\n        this.results.eslint.passed = true\n        return true\n      } catch (parseError) {\n        logError('ESLint 결과 파싱 실패')\n        this.results.eslint.passed = false\n        return false\n      }\n    }\n  }\n\n  async checkBuild() {\n    logSection('빌드 품질 체크')\n\n    try {\n      const startTime = Date.now()\n      execSync('npm run build', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      })\n      const endTime = Date.now()\n\n      const buildTime = (endTime - startTime) / 1000\n      this.results.build.time = buildTime\n\n      if (buildTime > QUALITY_GATES.MAX_BUILD_TIME) {\n        logWarning(`빌드 시간 ${buildTime.toFixed(2)}초 (허용: ${QUALITY_GATES.MAX_BUILD_TIME}초)`)\n        this.results.build.passed = false\n        return false\n      }\n\n      logSuccess(`빌드 성공! (${buildTime.toFixed(2)}초)`)\n      this.results.build.passed = true\n      return true\n    } catch (error) {\n      logError('빌드 실패')\n      this.results.build.passed = false\n      return false\n    }\n  }\n\n  async checkSecurity() {\n    logSection('보안 품질 체크')\n\n    try {\n      const result = execSync('npm audit --json', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      })\n\n      const auditResult = JSON.parse(result)\n      const vulnerabilities = auditResult.metadata?.vulnerabilities || {}\n\n      let totalVulnerabilities = 0\n      Object.values(vulnerabilities).forEach(count => {\n        if (typeof count === 'number') {\n          totalVulnerabilities += count\n        }\n      })\n\n      this.results.security.vulnerabilities = totalVulnerabilities\n\n      if (totalVulnerabilities > QUALITY_GATES.MAX_SECURITY_VULNERABILITIES) {\n        logError(\n          `보안 취약점 ${totalVulnerabilities}개 발견 (허용: ${QUALITY_GATES.MAX_SECURITY_VULNERABILITIES}개)`\n        )\n        this.results.security.passed = false\n        return false\n      }\n\n      logSuccess('보안 체크 통과!')\n      this.results.security.passed = true\n      return true\n    } catch (error) {\n      logWarning('보안 체크를 건너뜁니다 (npm audit 실패)')\n      this.results.security.passed = true\n      return true\n    }\n  }\n\n  async checkFileSizes() {\n    logSection('파일 크기 체크')\n\n    try {\n      // 간단한 파일 크기 체크 (실제로는 더 정교한 도구 사용 권장)\n      const result = execSync('find src -name \"*.ts\" -o -name \"*.svelte\" | xargs wc -l | tail -1', {\n        encoding: 'utf8',\n        stdio: 'pipe'\n      })\n\n      const totalLines = parseInt(result.trim().split(' ')[0]) || 0\n      this.results.fileSize.maxSize = totalLines\n\n      if (totalLines > QUALITY_GATES.MAX_FILE_SIZE * 100) {\n        // 전체 프로젝트 기준\n        logWarning(\n          `전체 코드 라인 수 ${totalLines}줄 (권장: ${QUALITY_GATES.MAX_FILE_SIZE * 100}줄 이하)`\n        )\n        this.results.fileSize.passed = false\n        return false\n      }\n\n      logSuccess(`파일 크기 체크 통과! (${totalLines}줄)`)\n      this.results.fileSize.passed = true\n      return true\n    } catch (error) {\n      logWarning('파일 크기 체크를 건너뜁니다')\n      this.results.fileSize.passed = true\n      return true\n    }\n  }\n\n  generateReport() {\n    logSection('품질 게이트 리포트')\n\n    const allPassed = Object.values(this.results).every(result =>\n      typeof result === 'boolean' ? result : result.passed\n    )\n\n    this.results.overall.passed = allPassed\n\n    // 결과 출력\n    logInfo('TypeScript: ' + (this.results.typescript.passed ? '✅ 통과' : '❌ 실패'))\n    logInfo(`  - 오류: ${this.results.typescript.errors}개`)\n    logInfo(`  - 경고: ${this.results.typescript.warnings}개`)\n\n    logInfo('ESLint: ' + (this.results.eslint.passed ? '✅ 통과' : '❌ 실패'))\n    logInfo(`  - 오류: ${this.results.eslint.errors}개`)\n    logInfo(`  - 경고: ${this.results.eslint.warnings}개`)\n\n    logInfo('빌드: ' + (this.results.build.passed ? '✅ 통과' : '❌ 실패'))\n    logInfo(`  - 시간: ${this.results.build.time.toFixed(2)}초`)\n\n    logInfo('보안: ' + (this.results.security.passed ? '✅ 통과' : '❌ 실패'))\n    logInfo(`  - 취약점: ${this.results.security.vulnerabilities}개`)\n\n    logInfo('파일 크기: ' + (this.results.fileSize.passed ? '✅ 통과' : '❌ 실패'))\n    logInfo(`  - 총 라인 수: ${this.results.fileSize.maxSize}줄`)\n\n    if (allPassed) {\n      logSuccess('\\n🎉 모든 품질 게이트 통과!')\n      logInfo('코드가 프로덕션 배포 기준을 만족합니다.')\n    } else {\n      logError('\\n🚫 품질 게이트 실패!')\n      logInfo('코드 품질을 개선한 후 다시 시도하세요.')\n    }\n\n    return allPassed\n  }\n\n  async run() {\n    log('🔍 코드 품질 게이트 실행', 'bright')\n    log('='.repeat(60), 'cyan')\n\n    const checks = [\n      this.checkTypeScript(),\n      this.checkESLint(),\n      this.checkBuild(),\n      this.checkSecurity(),\n      this.checkFileSizes()\n    ]\n\n    await Promise.all(checks)\n\n    const passed = this.generateReport()\n\n    if (!passed) {\n      process.exit(1)\n    }\n\n    process.exit(0)\n  }\n}\n\n// 스크립트 실행\nconst qualityGate = new QualityGate()\nqualityGate.run().catch(error => {\n  logError(`품질 게이트 실행 중 오류: ${error.message}`)\n  process.exit(1)\n})\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/quick-check.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":8,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 빠른 오류 체크 스크립트\n * 코드 작성 후 즉시 실행할 수 있는 간단한 체크\n */\n\nimport { execSync } from 'child_process'\n\nconst colors = {\n  reset: '\\x1b[0m',\n  bright: '\\x1b[1m',\n  red: '\\x1b[31m',\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  blue: '\\x1b[34m'\n}\n\nfunction log(message, color = 'reset') {\n  console.log(`${colors[color]}${message}${colors.reset}`)\n}\n\nasync function quickCheck() {\n  log('🔍 빠른 오류 체크', 'bright')\n  log('─'.repeat(40), 'blue')\n\n  try {\n    // TypeScript 체크\n    log('TypeScript 체크 중...', 'blue')\n    execSync('npm run check', { stdio: 'pipe' })\n    log('✅ TypeScript: OK', 'green')\n\n    // 빌드 체크\n    log('빌드 테스트 중...', 'blue')\n    execSync('npm run build', { stdio: 'pipe' })\n    log('✅ 빌드: OK', 'green')\n\n    log('\\n🎉 모든 체크 통과!', 'green')\n  } catch (error) {\n    log('\\n❌ 오류 발견!', 'red')\n    log('자세한 내용을 보려면: npm run check:errors', 'yellow')\n    process.exit(1)\n  }\n}\n\nquickCheck()\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/reduce-any-trivial.cjs","messages":[{"ruleId":"no-undef","severity":2,"message":"'process' is not defined.","line":16,"column":15,"nodeType":"Identifier","messageId":"undef","endLine":16,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":55,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":55,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'console' is not defined.","line":60,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":60,"endColumn":8}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n// Trivial any -> unknown codemod (SAFE)\n// Scope: src/**/*.{ts,tsx}\n// Changes:\n//  - any[]           -> unknown[]\n//  - Array<any>      -> Array<unknown>\n//  - Record<*, any>  -> Record<*, unknown>\n//  - $state<any[]>   -> $state<unknown[]>\n// Skips:\n//  - .d.ts files\n//  - test/spec files\n\nconst fs = require('fs')\nconst glob = require('glob')\n\nconst WRITE = process.argv.includes('--write')\n\nconst files = glob.sync('src/**/*.{ts,tsx}', {\n  ignore: [\n    '**/node_modules/**',\n    '**/.svelte-kit/**',\n    '**/build/**',\n    '**/dist/**',\n    '**/*.d.ts',\n    '**/*.{test,spec}.ts',\n    '**/*.{test,spec}.tsx'\n  ]\n})\n\nlet changedFiles = 0\nlet totalReplacements = 0\n\nfor (const f of files) {\n  const src = fs.readFileSync(f, 'utf8')\n  let out = src\n\n  const before = out\n\n  // Replace any[] when used as a type (avoid string literals)\n  out = out.replace(/\\bany\\[\\]/g, 'unknown[]')\n  // Replace Array<any>\n  out = out.replace(/\\bArray<\\s*any\\s*>/g, 'Array<unknown>')\n  // Replace Record<string, any> and Record<..., any>\n  out = out.replace(/\\bRecord<([^,>]+),\\s*any\\s*>/g, 'Record<$1, unknown>')\n  // Replace $state<any[]>(...)\n  out = out.replace(/\\$state<\\s*any\\s*\\[\\s*\\]\\s*>\\s*\\(/g, '$state<unknown[]>(')\n\n  if (out !== before) {\n    const count = (out.match(/unknown/g) || []).length - (before.match(/unknown/g) || []).length\n    totalReplacements += Math.max(0, count)\n    changedFiles++\n    if (WRITE) {\n      fs.writeFileSync(f, out, 'utf8')\n    } else {\n      console.log(`[DRY-RUN] ${f}: would update trivial any usages`)\n    }\n  }\n}\n\nconsole.log(\n  JSON.stringify(\n    {\n      filesScanned: files.length,\n      changedFiles,\n      totalReplacements,\n      mode: WRITE ? 'WRITE' : 'DRY-RUN'\n    },\n    null,\n    2\n  )\n)\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/remove-contract-amount-column.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":10,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * contract_amount 컬럼 제거 스크립트\n *\n * 이 스크립트는 project_members 테이블에서 contract_amount 컬럼을 완전히 제거합니다.\n * 실제 근로계약서 데이터를 사용하므로 중복된 contract_amount 컬럼은 혼란을 야기할 수 있습니다.\n */\n\nimport { Pool } from 'pg'\n\n// 데이터베이스 연결 설정\nconst dbConfig = {\n  host: process.env.DB_HOST || 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: parseInt(process.env.DB_PORT || '5432'),\n  database: process.env.DB_NAME || 'postgres',\n  user: process.env.DB_USER || 'postgres',\n  password: process.env.DB_PASSWORD || 'viahubdev',\n  ssl: {\n    rejectUnauthorized: false\n  }\n}\n\nasync function removeContractAmountColumn() {\n  const pool = new Pool(dbConfig)\n\n  try {\n    console.log('🔄 Starting contract_amount column removal...')\n    console.log('📊 Database config:', { ...dbConfig, password: '[HIDDEN]' })\n\n    const client = await pool.connect()\n    console.log('✅ Database connection successful!')\n\n    // 1. 컬럼 존재 여부 확인\n    console.log('🔍 Checking if contract_amount column exists...')\n    const columnCheckResult = await client.query(`\n\t\t\tSELECT column_name \n\t\t\tFROM information_schema.columns \n\t\t\tWHERE table_name = 'project_members' \n\t\t\tAND column_name = 'contract_amount'\n\t\t`)\n\n    if (columnCheckResult.rows.length === 0) {\n      console.log('ℹ️  contract_amount column does not exist. Nothing to remove.')\n      return\n    }\n\n    console.log('📋 Found contract_amount column in project_members table')\n\n    // 2. 컬럼 제거 전 데이터 백업 (참고용)\n    console.log('📊 Backing up contract_amount data for reference...')\n    const backupResult = await client.query(`\n\t\t\tSELECT id, employee_id, contract_amount, monthly_amount, participation_rate\n\t\t\tFROM project_members \n\t\t\tWHERE contract_amount IS NOT NULL AND contract_amount != 0\n\t\t`)\n\n    if (backupResult.rows.length > 0) {\n      console.log(`📋 Found ${backupResult.rows.length} records with non-zero contract_amount:`)\n      backupResult.rows.forEach(row => {\n        console.log(\n          `   - ID: ${row.id}, Employee: ${row.employee_id}, Contract: ${row.contract_amount}, Monthly: ${row.monthly_amount}, Rate: ${row.participation_rate}%`\n        )\n      })\n    } else {\n      console.log('📋 No non-zero contract_amount values found')\n    }\n\n    // 3. 컬럼 제거\n    console.log('🗑️  Removing contract_amount column...')\n    await client.query(`\n\t\t\tALTER TABLE project_members \n\t\t\tDROP COLUMN IF EXISTS contract_amount\n\t\t`)\n    console.log('✅ contract_amount column removed successfully!')\n\n    // 4. 결과 확인\n    console.log('🔍 Verifying column removal...')\n    const finalCheckResult = await client.query(`\n\t\t\tSELECT column_name \n\t\t\tFROM information_schema.columns \n\t\t\tWHERE table_name = 'project_members' \n\t\t\tAND column_name = 'contract_amount'\n\t\t`)\n\n    if (finalCheckResult.rows.length === 0) {\n      console.log('✅ contract_amount column successfully removed from project_members table')\n    } else {\n      console.log('❌ contract_amount column still exists')\n    }\n\n    // 5. 현재 테이블 구조 확인\n    console.log('📋 Current project_members table structure:')\n    const tableStructureResult = await client.query(`\n\t\t\tSELECT column_name, data_type, is_nullable, column_default\n\t\t\tFROM information_schema.columns \n\t\t\tWHERE table_name = 'project_members'\n\t\t\tORDER BY ordinal_position\n\t\t`)\n\n    tableStructureResult.rows.forEach(row => {\n      console.log(\n        `   - ${row.column_name}: ${row.data_type} (${row.is_nullable === 'YES' ? 'nullable' : 'not null'})`\n      )\n    })\n\n    client.release()\n    console.log('🎉 contract_amount column removal completed successfully!')\n  } catch (error) {\n    console.error('❌ Error removing contract_amount column:', error)\n    throw error\n  } finally {\n    await pool.end()\n  }\n}\n\n// 스크립트 실행\nremoveContractAmountColumn()\n  .then(() => {\n    console.log('✅ Script completed successfully')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('❌ Script failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/restore-departments.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\n// 직원별 부서 배치 (입사일과 경력, 이름을 고려하여 배치)\nconst departmentAssignments = {\n  // 경영기획팀 (대표이사 직속)\n  1001: '경영기획팀', // 박기선 - 최고 경력자\n  1002: '경영기획팀', // 한승훈 - 퇴사했지만 경영진급\n\n  // 경영지원팀 (재무이사 직속)\n  1003: '경영지원팀', // 이건희\n  1004: '경영지원팀', // 문민종 - 퇴사\n  1005: '경영지원팀', // 오지영 - 퇴사\n  1006: '경영지원팀', // 백승현 - 퇴사\n  1007: '경영지원팀', // 두아현 - 퇴사\n  1008: '경영지원팀', // 김수영 - 퇴사\n  1009: '경영지원팀', // 김두현 - 퇴사\n  1010: '경영지원팀', // 정은지 - 퇴사\n  1011: '경영지원팀', // 최시용\n  1012: '경영지원팀', // 김순영 - 퇴사\n  1013: '경영지원팀', // 차수연 - 퇴사\n  1014: '경영지원팀', // 김상환 - 퇴사\n  1015: '경영지원팀', // 김채연 - 퇴사\n  1016: '경영지원팀', // 황태희 - 퇴사\n  1017: '경영지원팀', // 전재일 - 퇴사\n  1018: '경영지원팀', // 장미경 - 퇴사\n  1019: '경영지원팀', // 한가연 - 퇴사\n  1020: '경영지원팀', // 송승엽 - 퇴사\n\n  // PSR팀 (연구소장 직속) - 연구개발 중심\n  1021: 'PSR팀', // 차지은\n  1022: 'PSR팀', // 장한진\n  1023: 'PSR팀', // 김대곤\n  1024: 'PSR팀', // 김혁일 - 퇴사\n  1025: 'PSR팀', // 노인규 - 퇴사\n  1026: 'PSR팀', // 이지후\n  1027: 'PSR팀', // 박형일 - 퇴사\n  1028: 'PSR팀', // 정예원 - 퇴사\n  1029: 'PSR팀', // 김수겸 - 퇴사\n  1030: 'PSR팀', // 오준 - 퇴사\n  1031: 'PSR팀', // 김현영\n  1032: 'PSR팀', // 오현종\n  1033: 'PSR팀', // 고동훤\n  1034: 'PSR팀', // 최현민\n  1035: 'PSR팀', // 김성호\n  1036: 'PSR팀', // 장영아\n  1037: 'PSR팀', // 오현아\n  1038: 'PSR팀' // 최제윤\n}\n\n// 직책도 함께 업데이트\nconst positionAssignments = {\n  // 경영기획팀\n  1001: '대표이사', // 박기선\n  1002: '경영기획팀장', // 한승훈\n\n  // 경영지원팀\n  1003: '재무이사', // 이건희\n  1004: '경영지원팀장', // 문민종\n  1005: '인사팀장', // 오지영\n  1006: '총무팀장', // 백승현\n  1007: '회계팀장', // 두아현\n  1008: '인사담당', // 김수영\n  1009: '총무담당', // 김두현\n  1010: '회계담당', // 정은지\n  1011: '경영지원담당', // 최시용\n  1012: '인사담당', // 김순영\n  1013: '총무담당', // 차수연\n  1014: '회계담당', // 김상환\n  1015: '경영지원담당', // 김채연\n  1016: '인사담당', // 황태희\n  1017: '총무담당', // 전재일\n  1018: '회계담당', // 장미경\n  1019: '경영지원담당', // 한가연\n  1020: '인사담당', // 송승엽\n\n  // PSR팀\n  1021: '연구소장', // 차지은\n  1022: 'PSR팀장', // 장한진\n  1023: '선임연구원', // 김대곤\n  1024: '연구원', // 김혁일\n  1025: '연구원', // 노인규\n  1026: '연구원', // 이지후\n  1027: '연구원', // 박형일\n  1028: '연구원', // 정예원\n  1029: '연구원', // 김수겸\n  1030: '연구원', // 오준\n  1031: '선임연구원', // 김현영\n  1032: '선임연구원', // 오현종\n  1033: '연구원', // 고동훤\n  1034: '연구원', // 최현민\n  1035: '연구원', // 김성호\n  1036: '연구원', // 장영아\n  1037: '연구원', // 오현아\n  1038: '연구원' // 최제윤\n}\n\nasync function restoreDepartments() {\n  try {\n    console.log('🔄 Starting department restoration...')\n\n    // 각 직원의 부서와 직책 업데이트\n    for (const [employeeId, department] of Object.entries(departmentAssignments)) {\n      const position = positionAssignments[employeeId]\n\n      await query(\n        `\n\t\t\t\tUPDATE employees \n\t\t\t\tSET department = $1, position = $2, updated_at = $3\n\t\t\t\tWHERE employee_id = $4\n\t\t\t`,\n        [department, position, new Date(), employeeId]\n      )\n\n      console.log(`✅ Updated employee ${employeeId}: ${department} - ${position}`)\n    }\n\n    // 결과 확인\n    console.log('🔍 Verifying department assignments...')\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\tdepartment,\n\t\t\t\tCOUNT(*) as count,\n\t\t\t\tCOUNT(CASE WHEN status = 'active' THEN 1 END) as active_count,\n\t\t\t\tCOUNT(CASE WHEN status = 'terminated' THEN 1 END) as terminated_count\n\t\t\tFROM employees \n\t\t\tGROUP BY department\n\t\t\tORDER BY department\n\t\t`)\n\n    console.log('📋 Department summary:')\n    result.rows.forEach(row => {\n      console.log(\n        `  ${row.department}: ${row.count}명 (재직: ${row.active_count}명, 퇴사: ${row.terminated_count}명)`\n      )\n    })\n\n    // 부서별 직원 목록\n    console.log('👥 Department details:')\n    const detailResult = await query(`\n\t\t\tSELECT \n\t\t\t\temployee_id, first_name, last_name, department, position, status\n\t\t\tFROM employees \n\t\t\tORDER BY department, position, employee_id\n\t\t`)\n\n    let currentDept = ''\n    detailResult.rows.forEach(row => {\n      if (row.department !== currentDept) {\n        console.log(`\\n📁 ${row.department}:`)\n        currentDept = row.department\n      }\n      const statusIcon = row.status === 'active' ? '🟢' : '🔴'\n      console.log(\n        `  ${statusIcon} ${row.employee_id}: ${row.last_name}${row.first_name} (${row.position})`\n      )\n    })\n\n    console.log('\\n✅ Department restoration completed successfully!')\n  } catch (error) {\n    console.error('❌ Department restoration failed:', error)\n    throw error\n  }\n}\n\n// Run the restoration\nrestoreDepartments()\n  .then(() => {\n    console.log('🎉 Department restoration completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Department restoration failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/run-research-stipend-migration.js","messages":[{"ruleId":"no-redeclare","severity":2,"message":"'fetch' is already defined as a built-in global variable.","line":10,"column":7,"nodeType":"Identifier","messageId":"redeclaredAsBuiltin","endLine":10,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * 연구수당 컬럼 추가 마이그레이션 실행 스크립트\n *\n * 사용법:\n * node scripts/run-research-stipend-migration.js\n */\n\nconst fetch = require('node-fetch')\n\nasync function runMigration() {\n  try {\n    console.log('🚀 연구수당 컬럼 추가 마이그레이션을 시작합니다...')\n\n    const response = await fetch(\n      'http://localhost:5173/api/project-management/migrate-add-research-stipend',\n      {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }\n    )\n\n    const result = await response.json()\n\n    if (result.success) {\n      console.log('✅ 마이그레이션이 성공적으로 완료되었습니다!')\n      console.log('📋 추가된 컬럼들:')\n      result.addedColumns.forEach(col => {\n        console.log(`  - ${col.name} (${col.type}) - 기본값: ${col.default}`)\n      })\n    } else {\n      console.error('❌ 마이그레이션 실패:', result.message)\n      if (result.error) {\n        console.error('오류 상세:', result.error)\n      }\n      process.exit(1)\n    }\n  } catch (error) {\n    console.error('❌ 마이그레이션 실행 중 오류 발생:', error.message)\n    console.error('서버가 실행 중인지 확인해주세요. (npm run dev)')\n    process.exit(1)\n  }\n}\n\n// 스크립트 실행\nrunMigration()\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/setup-evidence-db.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import fs from 'fs'\nimport path from 'path'\nimport { Pool } from 'pg'\nimport { fileURLToPath } from 'url'\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = path.dirname(__filename)\n\n// Database configuration\nconst dbConfig = {\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: {\n    rejectUnauthorized: false\n  }\n}\n\nasync function setupEvidenceDatabase() {\n  const pool = new Pool(dbConfig)\n\n  try {\n    console.log('데이터베이스 연결 중...')\n\n    // SQL 파일 읽기\n    const sqlPath = path.join(__dirname, 'setup-evidence-management.sql')\n    const sqlContent = fs.readFileSync(sqlPath, 'utf8')\n\n    console.log('증빙 관리 데이터베이스 스키마 실행 중...')\n\n    // SQL 실행\n    await pool.query(sqlContent)\n\n    console.log('✅ 증빙 관리 데이터베이스 스키마가 성공적으로 생성되었습니다!')\n\n    // 테이블 확인\n    const tablesResult = await pool.query(`\n            SELECT table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public' \n            AND table_name LIKE 'evidence_%'\n            ORDER BY table_name\n        `)\n\n    console.log('\\n생성된 테이블:')\n    tablesResult.rows.forEach(row => {\n      console.log(`- ${row.table_name}`)\n    })\n\n    // 뷰 확인\n    const viewsResult = await pool.query(`\n            SELECT table_name \n            FROM information_schema.views \n            WHERE table_schema = 'public' \n            AND table_name LIKE 'evidence_%'\n            ORDER BY table_name\n        `)\n\n    console.log('\\n생성된 뷰:')\n    viewsResult.rows.forEach(row => {\n      console.log(`- ${row.table_name}`)\n    })\n\n    // 기본 데이터 확인\n    const categoriesResult = await pool.query('SELECT * FROM evidence_categories')\n    console.log('\\n기본 증빙 카테고리:')\n    categoriesResult.rows.forEach(row => {\n      console.log(`- ${row.name}: ${row.description}`)\n    })\n  } catch (error) {\n    console.error('❌ 데이터베이스 설정 중 오류 발생:', error)\n    throw error\n  } finally {\n    await pool.end()\n  }\n}\n\n// 실행\nsetupEvidenceDatabase()\n  .then(() => {\n    console.log('\\n🎉 증빙 관리 데이터베이스 설정이 완료되었습니다!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('설정 실패:', error)\n    process.exit(1)\n  })\n\nexport { setupEvidenceDatabase }\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/switch-env.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":10,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Database Environment Switcher\n *\n * This script helps switch between local and AWS database environments\n * Usage: node scripts/switch-env.js [local|aws]\n */\n\nimport fs from 'fs'\nimport path from 'path'\n\nconst envFile = '.env'\nconst validEnvs = ['local', 'aws']\n\nfunction updateEnvFile(env) {\n  if (!validEnvs.includes(env)) {\n    console.error(`❌ Invalid environment: ${env}`)\n    console.error(`Valid options: ${validEnvs.join(', ')}`)\n    process.exit(1)\n  }\n\n  try {\n    // Read current .env file\n    const envPath = path.resolve(envFile)\n    let envContent = fs.readFileSync(envPath, 'utf8')\n\n    // Update DB_ENV line\n    envContent = envContent.replace(/^DB_ENV=.*$/m, `DB_ENV=${env}`)\n\n    // Write back to file\n    fs.writeFileSync(envPath, envContent)\n\n    console.log(`✅ Database environment switched to: ${env.toUpperCase()}`)\n    console.log(`📝 Updated ${envFile}`)\n\n    if (env === 'local') {\n      console.log(`💡 Make sure local PostgreSQL is running: docker-compose up postgres -d`)\n    }\n  } catch (error) {\n    console.error(`❌ Failed to update ${envFile}:`, error.message)\n    process.exit(1)\n  }\n}\n\nfunction showCurrentEnv() {\n  try {\n    const envPath = path.resolve(envFile)\n    const envContent = fs.readFileSync(envPath, 'utf8')\n    const match = envContent.match(/^DB_ENV=(.*)$/m)\n\n    if (match) {\n      console.log(`🗄️  Current database environment: ${match[1].toUpperCase()}`)\n    } else {\n      console.log(`❓ No DB_ENV found in ${envFile}`)\n    }\n  } catch (error) {\n    console.error(`❌ Failed to read ${envFile}:`, error.message)\n    process.exit(1)\n  }\n}\n\n// Main execution\nconst args = process.argv.slice(2)\n\nif (args.length === 0) {\n  showCurrentEnv()\n} else {\n  const env = args[0].toLowerCase()\n  updateEnvFile(env)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/sync-payslips.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":10,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\n/**\n * Payslips Synchronization Script\n *\n * This script syncs missing payslips from AWS to local database\n * Usage: node scripts/sync-payslips.js\n */\n\nimport { Pool } from 'pg'\n\n// AWS Database Configuration\nconst awsConfig = {\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: {\n    rejectUnauthorized: false\n  }\n}\n\n// Local Database Configuration\nconst localConfig = {\n  host: 'localhost',\n  port: 5432,\n  database: 'workstream',\n  user: 'adminvia'\n}\n\nclass PayslipsSync {\n  constructor() {\n    this.awsPool = null\n    this.localPool = null\n  }\n\n  async connect() {\n    console.log('🔗 Connecting to databases...')\n\n    // Connect to AWS\n    try {\n      this.awsPool = new Pool(awsConfig)\n      await this.awsPool.connect()\n      console.log('✅ Connected to AWS database')\n    } catch (error) {\n      console.error('❌ Failed to connect to AWS database:', error.message)\n      throw error\n    }\n\n    // Connect to local\n    try {\n      this.localPool = new Pool(localConfig)\n      await this.localPool.connect()\n      console.log('✅ Connected to local database')\n    } catch (error) {\n      console.error('❌ Failed to connect to local database:', error.message)\n      throw error\n    }\n  }\n\n  async getMissingPayslips() {\n    // Get all payslips from AWS\n    const awsResult = await this.awsPool.query('SELECT * FROM payslips ORDER BY created_at DESC')\n    const awsPayslips = awsResult.rows\n\n    // Get existing payslips from local\n    const localResult = await this.localPool.query('SELECT employee_name, period FROM payslips')\n    const localPayslips = new Set(localResult.rows.map(p => `${p.employee_name}-${p.period}`))\n\n    // Find missing payslips\n    const missingPayslips = awsPayslips.filter(\n      p => !localPayslips.has(`${p.employee_name}-${p.period}`)\n    )\n\n    console.log(`📊 AWS payslips: ${awsPayslips.length}`)\n    console.log(`📊 Local payslips: ${localResult.rows.length}`)\n    console.log(`📊 Missing payslips: ${missingPayslips.length}`)\n\n    return missingPayslips\n  }\n\n  async insertPayslip(payslip) {\n    try {\n      const query = `\n\t\t\t\tINSERT INTO payslips (\n\t\t\t\t\tid, employee_id, pay_period_start, pay_period_end,\n\t\t\t\t\tbase_salary, overtime_pay, bonus, old_deductions,\n\t\t\t\t\ttotal_amount, status, created_at, updated_at,\n\t\t\t\t\tperiod, pay_date, employee_name, employee_id_number,\n\t\t\t\t\tdepartment, position, hire_date, total_payments,\n\t\t\t\t\ttotal_deductions, net_salary, payments, is_generated,\n\t\t\t\t\tcreated_by, updated_by, deductions\n\t\t\t\t) VALUES (\n\t\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12,\n\t\t\t\t\t$13, $14, $15, $16, $17, $18, $19, $20, $21, $22,\n\t\t\t\t\t$23, $24, $25, $26, $27\n\t\t\t\t)\n\t\t\t`\n\n      const values = [\n        payslip.id,\n        payslip.employee_id,\n        payslip.pay_period_start,\n        payslip.pay_period_end,\n        payslip.base_salary,\n        payslip.overtime_pay,\n        payslip.bonus,\n        payslip.old_deductions,\n        payslip.total_amount,\n        payslip.status,\n        payslip.created_at,\n        payslip.updated_at,\n        payslip.period,\n        payslip.pay_date,\n        payslip.employee_name,\n        payslip.employee_id_number,\n        payslip.department,\n        payslip.position,\n        payslip.hire_date,\n        payslip.total_payments,\n        payslip.total_deductions,\n        payslip.net_salary,\n        payslip.payments,\n        payslip.is_generated,\n        payslip.created_by,\n        payslip.updated_by,\n        payslip.deductions\n      ]\n\n      await this.localPool.query(query, values)\n      return true\n    } catch (error) {\n      console.error(\n        `❌ Failed to insert payslip ${payslip.employee_name}-${payslip.period}:`,\n        error.message\n      )\n      return false\n    }\n  }\n\n  async syncPayslips() {\n    console.log('🚀 Starting payslips synchronization...\\n')\n\n    await this.connect()\n\n    // Get missing payslips\n    const missingPayslips = await this.getMissingPayslips()\n\n    if (missingPayslips.length === 0) {\n      console.log('✅ All payslips are already synchronized!')\n      return\n    }\n\n    console.log('\\n📋 Missing payslips to sync:')\n    missingPayslips.forEach((payslip, index) => {\n      console.log(\n        `   ${index + 1}. ${payslip.employee_name || 'Unknown'} - ${payslip.period} (${payslip.total_amount?.toLocaleString()}원)`\n      )\n    })\n\n    // Sync missing payslips\n    console.log('\\n🔄 Syncing payslips...')\n    let successCount = 0\n    let failCount = 0\n\n    for (const payslip of missingPayslips) {\n      const success = await this.insertPayslip(payslip)\n      if (success) {\n        successCount++\n        console.log(`   ✅ ${payslip.employee_name || 'Unknown'} - ${payslip.period}`)\n      } else {\n        failCount++\n      }\n    }\n\n    // Summary\n    console.log('\\n📊 SYNC SUMMARY:')\n    console.log(`   ✅ Successfully synced: ${successCount}`)\n    console.log(`   ❌ Failed to sync: ${failCount}`)\n    console.log(`   📊 Total processed: ${missingPayslips.length}`)\n\n    if (successCount > 0) {\n      console.log('\\n🎉 Payslips synchronization completed!')\n    }\n  }\n\n  async close() {\n    if (this.awsPool) {\n      await this.awsPool.end()\n      console.log('\\n🔌 Disconnected from AWS database')\n    }\n    if (this.localPool) {\n      await this.localPool.end()\n      console.log('🔌 Disconnected from local database')\n    }\n  }\n}\n\n// Main execution\nasync function main() {\n  const sync = new PayslipsSync()\n\n  try {\n    await sync.syncPayslips()\n  } catch (error) {\n    console.error('❌ Payslips synchronization failed:', error)\n    process.exit(1)\n  } finally {\n    await sync.close()\n  }\n}\n\n// Run if called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main().catch(console.error)\n}\n\nexport { PayslipsSync }\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/test-app-db.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { healthCheck, query } from '../src/lib/database/connection.ts'\n\nasync function testAppConnection() {\n  try {\n    console.log('🔄 Testing application database connection...')\n\n    const isHealthy = await healthCheck()\n    console.log('Health check result:', isHealthy)\n\n    if (isHealthy) {\n      const result = await query('SELECT version() as version')\n      console.log('✅ Database connection successful!')\n      console.log('📊 PostgreSQL version:', result.rows[0].version)\n    } else {\n      console.log('❌ Database health check failed')\n    }\n  } catch (error) {\n    console.error('❌ Database connection error:', error.message)\n    console.error('Full error:', error)\n  }\n}\n\ntestAppConnection()\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/test-db-connection.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from 'pg'\n\n// Database configuration\nconst dbConfig = {\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: {\n    rejectUnauthorized: false\n  },\n  max: 20,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000\n}\n\nasync function testConnection() {\n  const pool = new Pool(dbConfig)\n\n  try {\n    console.log('🔄 Testing database connection...')\n\n    // Test basic connection\n    const client = await pool.connect()\n    console.log('✅ Database connection successful!')\n\n    // Test query\n    const result = await client.query('SELECT version()')\n    console.log('📊 PostgreSQL version:', result.rows[0].version)\n\n    // Check if tables exist\n    const tablesResult = await client.query(`\n            SELECT table_name \n            FROM information_schema.tables \n            WHERE table_schema = 'public' \n            ORDER BY table_name\n        `)\n\n    console.log('📋 Existing tables:')\n    if (tablesResult.rows.length === 0) {\n      console.log('   No tables found. Database needs to be initialized.')\n    } else {\n      tablesResult.rows.forEach(row => {\n        console.log(`   - ${row.table_name}`)\n      })\n    }\n\n    client.release()\n  } catch (error) {\n    console.error('❌ Database connection failed:', error.message)\n    console.error('Error details:', error)\n  } finally {\n    await pool.end()\n  }\n}\n\n// Run the test\ntestConnection()\n  .then(() => {\n    console.log('🏁 Connection test completed.')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Test failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/test-project-creation.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from 'pg'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false }\n})\n\n// 테스트용 프로젝트 데이터\nconst testProjectData = {\n  name: 'RND-VR2024 테스트 프로젝트',\n  description: 'VR 기술 개발을 위한 테스트 프로젝트입니다.',\n  startDate: '2024-04-01',\n  endDate: '2026-03-31',\n  totalBudget: 400000000, // 4억원\n  annualPeriods: [\n    {\n      periodNumber: 1,\n      startDate: '2024-04-01',\n      endDate: '2025-03-31',\n      budget: 200000000 // 2억원\n    },\n    {\n      periodNumber: 2,\n      startDate: '2025-04-01',\n      endDate: '2026-03-31',\n      budget: 200000000 // 2억원\n    }\n  ],\n  budgetCategories: [\n    { name: '인건비', percentage: 40 },\n    { name: '재료비', percentage: 30 },\n    { name: '연구활동비', percentage: 20 },\n    { name: '간접비', percentage: 10 }\n  ],\n  members: [\n    {\n      employeeId: '8edea9ec-1187-4742-a1ae-df2f143cf8eb', // 예원 정\n      role: '프로젝트매니저',\n      participationRate: 30,\n      monthlyAmount: 5000000, // 500만원\n      startDate: '2024-04-01',\n      endDate: '2026-03-31'\n    },\n    {\n      employeeId: 'eed202f6-fcb3-4db4-8e18-6b102df87809', // 형일 박\n      role: '선임연구원',\n      participationRate: 40,\n      monthlyAmount: 4000000, // 400만원\n      startDate: '2024-04-01',\n      endDate: '2025-12-31'\n    },\n    {\n      employeeId: '65a78743-cc04-442d-8943-173c14260c17', // 기선 박\n      role: '연구원',\n      participationRate: 30,\n      monthlyAmount: 3000000, // 300만원\n      startDate: '2024-04-01',\n      endDate: '2026-03-31'\n    }\n  ],\n  evidenceSettings: {\n    autoGenerate: true,\n    namingConvention: '{name}({year}-{month})'\n  }\n}\n\nasync function testProjectCreation() {\n  console.log('🧪 [테스트] 프로젝트 생성 로직 테스트 시작')\n  console.log('📋 [테스트] 테스트 데이터:', JSON.stringify(testProjectData, null, 2))\n\n  try {\n    // 1단계: 입력 데이터 검증 테스트\n    console.log('\\n🔍 [1단계] 입력 데이터 검증 테스트')\n    const validationResult = await validateProjectData(testProjectData)\n    console.log('✅ [1단계] 검증 결과:', validationResult)\n\n    if (!validationResult.isValid) {\n      console.log('❌ [1단계] 검증 실패로 테스트 중단')\n      return\n    }\n\n    // 2단계: 프로젝트 생성 테스트\n    console.log('\\n📝 [2단계] 프로젝트 생성 테스트')\n    const projectId = await createProject(testProjectData)\n    console.log('✅ [2단계] 프로젝트 생성 완료 - ID:', projectId)\n\n    // 3단계: 연차별 예산 생성 테스트\n    console.log('\\n💰 [3단계] 연차별 예산 생성 테스트')\n    const budgetIds = await createProjectBudgets(projectId, testProjectData)\n    console.log('✅ [3단계] 연차별 예산 생성 완료 - IDs:', budgetIds)\n\n    // 4단계: 참여연구원 생성 테스트\n    console.log('\\n👥 [4단계] 참여연구원 생성 테스트')\n    const memberIds = await createProjectMembers(projectId, testProjectData)\n    console.log('✅ [4단계] 참여연구원 생성 완료 - IDs:', memberIds)\n\n    // 5단계: 증빙 항목 자동 생성 테스트\n    console.log('\\n📄 [5단계] 증빙 항목 자동 생성 테스트')\n    const evidenceIds = await createEvidenceItems(projectId, testProjectData)\n    console.log('✅ [5단계] 증빙 항목 자동 생성 완료 - IDs:', evidenceIds)\n\n    // 6단계: 생성된 데이터 검증 테스트\n    console.log('\\n🔍 [6단계] 생성된 데이터 검증 테스트')\n    const finalValidation = await validateCreatedProject(projectId)\n    console.log('✅ [6단계] 최종 검증 결과:', finalValidation)\n\n    // 7단계: 생성된 데이터 확인\n    console.log('\\n📊 [7단계] 생성된 데이터 확인')\n    await displayCreatedData(projectId)\n\n    console.log('\\n🎉 [완료] 프로젝트 생성 로직 테스트 성공!')\n  } catch (error) {\n    console.error('💥 [오류] 테스트 중 오류 발생:', error)\n  } finally {\n    await pool.end()\n  }\n}\n\n// 입력 데이터 검증 함수\nasync function validateProjectData(data) {\n  console.log('🔍 [검증] 프로젝트 기본 정보 검증')\n  const errors = []\n\n  if (!data.name || data.name.trim().length === 0) {\n    errors.push('프로젝트명은 필수입니다.')\n  }\n\n  if (!data.startDate || !data.endDate) {\n    errors.push('프로젝트 시작일과 종료일은 필수입니다.')\n  }\n\n  if (new Date(data.startDate) >= new Date(data.endDate)) {\n    errors.push('프로젝트 종료일은 시작일보다 늦어야 합니다.')\n  }\n\n  console.log('🔍 [검증] 연차별 예산 검증')\n  if (!data.annualPeriods || data.annualPeriods.length === 0) {\n    errors.push('연차별 예산 정보는 필수입니다.')\n  }\n\n  // 연차별 예산 합계 검증\n  const totalBudgetFromPeriods = data.annualPeriods.reduce((sum, period) => sum + period.budget, 0)\n  if (Math.abs(totalBudgetFromPeriods - data.totalBudget) > 1000) {\n    errors.push(\n      `연차별 예산 합계(${totalBudgetFromPeriods.toLocaleString()}원)와 총 예산(${data.totalBudget.toLocaleString()}원)이 일치하지 않습니다.`\n    )\n  }\n\n  console.log('🔍 [검증] 참여연구원 검증')\n  if (!data.members || data.members.length === 0) {\n    errors.push('참여연구원 정보는 필수입니다.')\n  }\n\n  // 참여연구원 참여율 검증\n  for (const member of data.members) {\n    if (member.participationRate <= 0 || member.participationRate > 100) {\n      errors.push(`${member.employeeId}의 참여율은 0% 초과 100% 이하여야 합니다.`)\n    }\n  }\n\n  // 연차별 참여연구원 참여율 합계 검증\n  for (const period of data.annualPeriods) {\n    const periodMembers = data.members.filter(\n      member =>\n        new Date(member.startDate) <= new Date(period.endDate) &&\n        new Date(member.endDate) >= new Date(period.startDate)\n    )\n\n    const totalParticipationRate = periodMembers.reduce(\n      (sum, member) => sum + member.participationRate,\n      0\n    )\n    if (totalParticipationRate > 100) {\n      errors.push(\n        `${period.periodNumber}차년도 참여연구원 참여율 합계(${totalParticipationRate}%)가 100%를 초과합니다.`\n      )\n    }\n  }\n\n  return { isValid: errors.length === 0, errors }\n}\n\n// 프로젝트 생성 함수\nasync function createProject(data) {\n  console.log('📝 [생성] 프로젝트 기본 정보 삽입')\n\n  const projectQuery = `\n    INSERT INTO projects (\n      code, title, description, start_date, end_date, budget_total, \n      status, created_at, updated_at\n    ) VALUES ($1, $2, $3, $4, $5, $6, 'active', NOW(), NOW())\n    RETURNING id\n  `\n\n  const result = await pool.query(projectQuery, [\n    `PRJ-${Date.now()}`, // 프로젝트 코드 자동 생성\n    data.name,\n    data.description,\n    data.startDate,\n    data.endDate,\n    data.totalBudget\n  ])\n\n  const projectId = result.rows[0].id\n  console.log(`📝 [생성] 프로젝트 생성 완료 - ID: ${projectId}`)\n\n  return projectId\n}\n\n// 연차별 예산 생성 함수\nasync function createProjectBudgets(projectId, data) {\n  console.log('💰 [생성] 연차별 예산 삽입 시작')\n\n  const budgetIds = []\n\n  for (const period of data.annualPeriods) {\n    console.log(`💰 [생성] ${period.periodNumber}차년도 예산 생성`)\n\n    // 예산 항목별 배분 계산\n    const personnelCost = Math.round(\n      (period.budget * (data.budgetCategories.find(c => c.name === '인건비')?.percentage || 0)) /\n        100\n    )\n    const materialCost = Math.round(\n      (period.budget * (data.budgetCategories.find(c => c.name === '재료비')?.percentage || 0)) /\n        100\n    )\n    const activityCost = Math.round(\n      (period.budget *\n        (data.budgetCategories.find(c => c.name === '연구활동비')?.percentage || 0)) /\n        100\n    )\n    const indirectCost = Math.round(\n      (period.budget * (data.budgetCategories.find(c => c.name === '간접비')?.percentage || 0)) /\n        100\n    )\n\n    const budgetQuery = `\n      INSERT INTO project_budgets (\n        project_id, fiscal_year, period_number, start_date, end_date, total_budget,\n        personnel_cost, research_material_cost, research_activity_cost, indirect_cost,\n        spent_amount, created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, 0, NOW(), NOW())\n      RETURNING id\n    `\n\n    // fiscal_year는 시작일의 연도로 설정\n    const fiscalYear = new Date(period.startDate).getFullYear()\n\n    const result = await pool.query(budgetQuery, [\n      projectId,\n      fiscalYear,\n      period.periodNumber,\n      period.startDate,\n      period.endDate,\n      period.budget,\n      personnelCost,\n      materialCost,\n      activityCost,\n      indirectCost\n    ])\n\n    budgetIds.push(result.rows[0].id)\n    console.log(`💰 [생성] ${period.periodNumber}차년도 예산 생성 완료 - ID: ${result.rows[0].id}`)\n  }\n\n  return budgetIds\n}\n\n// 참여연구원 생성 함수\nasync function createProjectMembers(projectId, data) {\n  console.log('👥 [생성] 참여연구원 삽입 시작')\n\n  const memberIds = []\n\n  for (const member of data.members) {\n    console.log(`👥 [생성] 참여연구원 ${member.employeeId} 등록`)\n\n    const memberQuery = `\n      INSERT INTO project_members (\n        project_id, employee_id, role, participation_rate, monthly_amount,\n        start_date, end_date, created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())\n      RETURNING id\n    `\n\n    const result = await pool.query(memberQuery, [\n      projectId,\n      member.employeeId,\n      member.role,\n      member.participationRate,\n      member.monthlyAmount,\n      member.startDate,\n      member.endDate\n    ])\n\n    memberIds.push(result.rows[0].id)\n    console.log(`👥 [생성] 참여연구원 ${member.employeeId} 등록 완료 - ID: ${result.rows[0].id}`)\n  }\n\n  return memberIds\n}\n\n// 증빙 항목 자동 생성 함수\nasync function createEvidenceItems(projectId, data) {\n  console.log('📄 [생성] 증빙 항목 자동 생성 시작')\n\n  const evidenceIds = []\n\n  // 각 연차별로 증빙 항목 생성\n  for (const period of data.annualPeriods) {\n    console.log(`📄 [생성] ${period.periodNumber}차년도 증빙 항목 생성`)\n\n    // 해당 연차의 예산 ID 조회\n    const budgetResult = await pool.query(\n      'SELECT id FROM project_budgets WHERE project_id = $1 AND period_number = $2',\n      [projectId, period.periodNumber]\n    )\n\n    if (budgetResult.rows.length === 0) {\n      console.log(`❌ [생성] ${period.periodNumber}차년도 예산을 찾을 수 없습니다.`)\n      continue\n    }\n\n    const projectBudgetId = budgetResult.rows[0].id\n\n    // 예산 항목별로 증빙 항목 생성\n    for (const category of data.budgetCategories) {\n      if (category.percentage > 0) {\n        // 카테고리 ID 조회 (기본 카테고리 사용)\n        const categoryResult = await pool.query(\n          'SELECT id FROM evidence_categories WHERE name = $1 LIMIT 1',\n          [category.name]\n        )\n\n        let categoryId = null\n        if (categoryResult.rows.length > 0) {\n          categoryId = categoryResult.rows[0].id\n        } else {\n          // 카테고리가 없으면 기본 카테고리 생성\n          const createCategoryResult = await pool.query(\n            'INSERT INTO evidence_categories (name, description) VALUES ($1, $2) RETURNING id',\n            [category.name, `${category.name} 증빙 항목`]\n          )\n          categoryId = createCategoryResult.rows[0].id\n        }\n\n        const evidenceQuery = `\n          INSERT INTO evidence_items (\n            project_budget_id, category_id, name, budget_amount, spent_amount,\n            status, due_date, created_at, updated_at\n          ) VALUES ($1, $2, $3, $4, 0, 'planned', $5, NOW(), NOW())\n          RETURNING id\n        `\n\n        const dueDate = new Date(period.endDate)\n        dueDate.setMonth(dueDate.getMonth() + 1) // 연차 종료 후 1개월\n\n        const result = await pool.query(evidenceQuery, [\n          projectBudgetId,\n          categoryId,\n          `${category.name} 증빙`,\n          Math.round((period.budget * category.percentage) / 100),\n          dueDate.toISOString().split('T')[0]\n        ])\n\n        evidenceIds.push(result.rows[0].id)\n        console.log(\n          `📄 [생성] ${period.periodNumber}차년도 ${category.name} 증빙 항목 생성 완료 - ID: ${result.rows[0].id}`\n        )\n      }\n    }\n  }\n\n  return evidenceIds\n}\n\n// 생성된 프로젝트 검증 함수\nasync function validateCreatedProject(projectId) {\n  console.log('🔍 [검증] 생성된 프로젝트 데이터 검증 시작')\n\n  const errors = []\n\n  // 프로젝트 기본 정보 확인\n  const projectResult = await pool.query('SELECT * FROM projects WHERE id = $1', [projectId])\n  if (projectResult.rows.length === 0) {\n    errors.push('프로젝트가 생성되지 않았습니다.')\n  }\n\n  // 연차별 예산 확인\n  const budgetResult = await pool.query(\n    'SELECT * FROM project_budgets WHERE project_id = $1 ORDER BY period_number',\n    [projectId]\n  )\n  if (budgetResult.rows.length === 0) {\n    errors.push('연차별 예산이 생성되지 않았습니다.')\n  }\n\n  // 참여연구원 확인\n  const memberResult = await pool.query('SELECT * FROM project_members WHERE project_id = $1', [\n    projectId\n  ])\n  if (memberResult.rows.length === 0) {\n    errors.push('참여연구원이 등록되지 않았습니다.')\n  }\n\n  // 예산 합계 검증\n  const totalBudgetFromDB = budgetResult.rows.reduce(\n    (sum, budget) => sum + parseFloat(budget.total_budget),\n    0\n  )\n  const projectBudget = parseFloat(projectResult.rows[0].budget_total)\n\n  if (Math.abs(totalBudgetFromDB - projectBudget) > 1000) {\n    errors.push(\n      `데이터베이스의 연차별 예산 합계(${totalBudgetFromDB.toLocaleString()}원)와 프로젝트 총 예산(${projectBudget.toLocaleString()}원)이 일치하지 않습니다.`\n    )\n  }\n\n  console.log('🔍 [검증] 생성된 프로젝트 데이터 검증 완료')\n\n  return { isValid: errors.length === 0, errors }\n}\n\n// 생성된 데이터 표시 함수\nasync function displayCreatedData(projectId) {\n  console.log('📊 [확인] 생성된 프로젝트 데이터 표시')\n\n  // 프로젝트 기본 정보\n  const projectResult = await pool.query('SELECT * FROM projects WHERE id = $1', [projectId])\n  if (projectResult.rows.length > 0) {\n    const project = projectResult.rows[0]\n    console.log(\n      `📊 [확인] 프로젝트: ${project.title} (${project.start_date} ~ ${project.end_date})`\n    )\n    console.log(`📊 [확인] 총 예산: ${parseInt(project.budget_total).toLocaleString()}원`)\n  }\n\n  // 연차별 예산\n  const budgetResult = await pool.query(\n    'SELECT * FROM project_budgets WHERE project_id = $1 ORDER BY period_number',\n    [projectId]\n  )\n  console.log(`📊 [확인] 연차별 예산 (${budgetResult.rows.length}개):`)\n  budgetResult.rows.forEach(budget => {\n    console.log(\n      `  - ${budget.period_number}차년도: ${parseInt(budget.total_budget).toLocaleString()}원`\n    )\n    console.log(`    인건비: ${parseInt(budget.personnel_cost).toLocaleString()}원`)\n    console.log(`    재료비: ${parseInt(budget.research_material_cost).toLocaleString()}원`)\n    console.log(`    연구활동비: ${parseInt(budget.research_activity_cost).toLocaleString()}원`)\n    console.log(`    간접비: ${parseInt(budget.indirect_cost).toLocaleString()}원`)\n  })\n\n  // 참여연구원\n  const memberResult = await pool.query('SELECT * FROM project_members WHERE project_id = $1', [\n    projectId\n  ])\n  console.log(`📊 [확인] 참여연구원 (${memberResult.rows.length}명):`)\n  memberResult.rows.forEach(member => {\n    console.log(\n      `  - ${member.employee_id} (${member.role}): ${member.participation_rate}% - ${parseInt(member.monthly_amount).toLocaleString()}원/월`\n    )\n  })\n\n  // 증빙 항목\n  const evidenceResult = await pool.query(\n    `\n    SELECT ei.*, ec.name as category_name, pb.period_number\n    FROM evidence_items ei\n    JOIN evidence_categories ec ON ei.category_id = ec.id\n    JOIN project_budgets pb ON ei.project_budget_id = pb.id\n    WHERE pb.project_id = $1\n    ORDER BY pb.period_number, ec.name\n  `,\n    [projectId]\n  )\n  console.log(`📊 [확인] 증빙 항목 (${evidenceResult.rows.length}개):`)\n  evidenceResult.rows.forEach(evidence => {\n    console.log(\n      `  - ${evidence.period_number}차년도 ${evidence.category_name}: ${parseInt(evidence.budget_amount).toLocaleString()}원 (${evidence.due_date})`\n    )\n  })\n}\n\n// 테스트 실행\ntestProjectCreation()\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-employee-data.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\n// 직원 데이터 (입사일 순)\nconst employeeData = [\n  { name: '박기선', hireDate: '2019-05-01', birthDate: '1978-01-22', terminationDate: null },\n  {\n    name: '한승훈',\n    hireDate: '2020-05-01',\n    birthDate: '1979-10-31',\n    terminationDate: '2022-08-31'\n  },\n  { name: '이건희', hireDate: '2020-07-06', birthDate: '1995-01-03', terminationDate: null },\n  {\n    name: '문민종',\n    hireDate: '2020-11-01',\n    birthDate: '1995-06-08',\n    terminationDate: '2023-08-31'\n  },\n  {\n    name: '오지영',\n    hireDate: '2021-06-01',\n    birthDate: '1978-02-16',\n    terminationDate: '2022-10-31'\n  },\n  {\n    name: '백승현',\n    hireDate: '2021-07-01',\n    birthDate: '1994-01-06',\n    terminationDate: '2025-05-31'\n  },\n  {\n    name: '두아현',\n    hireDate: '2021-07-01',\n    birthDate: '1996-05-08',\n    terminationDate: '2022-10-31'\n  },\n  {\n    name: '김수영',\n    hireDate: '2021-12-01',\n    birthDate: '1999-12-02',\n    terminationDate: '2023-08-31'\n  },\n  {\n    name: '김두현',\n    hireDate: '2022-03-01',\n    birthDate: '1997-01-22',\n    terminationDate: '2023-08-31'\n  },\n  {\n    name: '정은지',\n    hireDate: '2022-03-01',\n    birthDate: '1997-05-12',\n    terminationDate: '2025-06-30'\n  },\n  { name: '최시용', hireDate: '2022-04-01', birthDate: '1991-10-23', terminationDate: null },\n  {\n    name: '김순영',\n    hireDate: '2022-08-16',\n    birthDate: '1979-07-26',\n    terminationDate: '2022-08-31'\n  },\n  {\n    name: '차수연',\n    hireDate: '2022-09-01',\n    birthDate: '1984-03-21',\n    terminationDate: '2023-10-31'\n  },\n  {\n    name: '김상환',\n    hireDate: '2022-09-01',\n    birthDate: '1978-11-16',\n    terminationDate: '2022-11-30'\n  },\n  {\n    name: '김채연',\n    hireDate: '2022-10-01',\n    birthDate: '1999-05-14',\n    terminationDate: '2023-10-31'\n  },\n  {\n    name: '황태희',\n    hireDate: '2022-11-01',\n    birthDate: '1970-03-01',\n    terminationDate: '2023-10-31'\n  },\n  {\n    name: '전재일',\n    hireDate: '2023-01-01',\n    birthDate: '1973-09-10',\n    terminationDate: '2023-10-31'\n  },\n  {\n    name: '장미경',\n    hireDate: '2023-03-01',\n    birthDate: '1978-02-06',\n    terminationDate: '2024-11-30'\n  },\n  {\n    name: '한가연',\n    hireDate: '2023-04-01',\n    birthDate: '1996-10-15',\n    terminationDate: '2023-10-31'\n  },\n  {\n    name: '송승엽',\n    hireDate: '2023-06-01',\n    birthDate: '1984-02-28',\n    terminationDate: '2023-10-31'\n  },\n  { name: '차지은', hireDate: '2023-12-11', birthDate: '1993-11-13', terminationDate: null },\n  { name: '장한진', hireDate: '2024-09-01', birthDate: '1988-08-05', terminationDate: null },\n  { name: '김대곤', hireDate: '2024-10-01', birthDate: '1980-02-14', terminationDate: null },\n  {\n    name: '김혁일',\n    hireDate: '2024-10-01',\n    birthDate: '1997-07-25',\n    terminationDate: '2024-11-30'\n  },\n  {\n    name: '노인규',\n    hireDate: '2024-12-01',\n    birthDate: '1973-03-23',\n    terminationDate: '2025-02-28'\n  },\n  { name: '이지후', hireDate: '2024-12-01', birthDate: '1991-07-04', terminationDate: null },\n  {\n    name: '박형일',\n    hireDate: '2024-12-01',\n    birthDate: '1996-02-13',\n    terminationDate: '2025-02-28'\n  },\n  {\n    name: '정예원',\n    hireDate: '2024-12-01',\n    birthDate: '1997-10-19',\n    terminationDate: '2025-02-28'\n  },\n  {\n    name: '김수겸',\n    hireDate: '2025-01-01',\n    birthDate: '1994-10-08',\n    terminationDate: '2025-02-28'\n  },\n  { name: '오준', hireDate: '2025-01-16', birthDate: '1993-02-19', terminationDate: '2025-03-31' },\n  { name: '김현영', hireDate: '2025-02-01', birthDate: '1985-07-21', terminationDate: null },\n  { name: '오현종', hireDate: '2025-03-01', birthDate: '1980-02-25', terminationDate: null },\n  { name: '고동훤', hireDate: '2025-05-01', birthDate: '1993-09-23', terminationDate: null },\n  { name: '최현민', hireDate: '2025-07-01', birthDate: '1982-03-11', terminationDate: null },\n  { name: '김성호', hireDate: '2025-07-14', birthDate: '1986-01-05', terminationDate: null },\n  { name: '장영아', hireDate: '2025-07-14', birthDate: '2000-08-12', terminationDate: null },\n  { name: '오현아', hireDate: '2025-09-01', birthDate: '1979-07-04', terminationDate: null },\n  { name: '최제윤', hireDate: '2025-09-01', birthDate: '1996-07-29', terminationDate: null }\n]\n\nasync function updateEmployeeData() {\n  try {\n    console.log('🔄 Starting employee data update...')\n\n    // 기존 직원 데이터 삭제\n    console.log('🗑️ Clearing existing employee data...')\n    await query('DELETE FROM employees')\n\n    // 직원 데이터 삽입\n    console.log('👥 Inserting employee data...')\n    let employeeId = 1001\n\n    for (const emp of employeeData) {\n      const [lastName, firstName] =\n        emp.name.length === 2\n          ? [emp.name[0], emp.name[1]]\n          : [emp.name.slice(0, 1), emp.name.slice(1)]\n\n      const status = emp.terminationDate ? 'terminated' : 'active'\n      const email = `${firstName.toLowerCase()}.${lastName.toLowerCase()}@company.com`\n\n      await query(\n        `\n\t\t\t\tINSERT INTO employees (\n\t\t\t\t\temployee_id, first_name, last_name, email, phone,\n\t\t\t\t\tdepartment, position, salary, hire_date, birth_date, termination_date, status,\n\t\t\t\t\temployment_type, created_at, updated_at\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n\t\t\t`,\n        [\n          employeeId.toString(),\n          firstName,\n          lastName,\n          email,\n          '010-0000-0000',\n          '부서없음',\n          '직원',\n          30000000, // 기본 급여 3천만원\n          emp.hireDate,\n          emp.birthDate,\n          emp.terminationDate,\n          status,\n          'full-time',\n          new Date(),\n          new Date()\n        ]\n      )\n\n      console.log(`✅ Added employee: ${emp.name} (ID: ${employeeId})`)\n      employeeId++\n    }\n\n    // 결과 확인\n    console.log('🔍 Verifying data...')\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\temployee_id, first_name, last_name, hire_date, birth_date, termination_date, status, department\n\t\t\tFROM employees \n\t\t\tORDER BY hire_date ASC\n\t\t`)\n\n    console.log('📋 Employee data summary:')\n    console.log(`Total employees: ${result.rows.length}`)\n    console.log(`Active employees: ${result.rows.filter(r => r.status === 'active').length}`)\n    console.log(\n      `Terminated employees: ${result.rows.filter(r => r.status === 'terminated').length}`\n    )\n\n    console.log('📅 First 5 employees:')\n    result.rows.slice(0, 5).forEach(row => {\n      console.log(\n        `  ${row.employee_id}: ${row.last_name}${row.first_name} (입사: ${row.hire_date}, 생일: ${row.birth_date})`\n      )\n    })\n\n    console.log('✅ Employee data update completed successfully!')\n  } catch (error) {\n    console.error('❌ Employee data update failed:', error)\n    throw error\n  }\n}\n\n// Run the update\nupdateEmployeeData()\n  .then(() => {\n    console.log('🎉 Employee data update completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Employee data update failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-employee-departments.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-employee-ids-emails.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\n// 한글 이름을 영문 이메일로 변환하는 함수\nfunction generateEmail(firstName, lastName) {\n  // 한글 이름을 영문으로 변환하는 매핑\n  const nameMapping = {\n    // 성씨\n    박: 'park',\n    김: 'kim',\n    이: 'lee',\n    최: 'choi',\n    정: 'jung',\n    한: 'han',\n    문: 'moon',\n    오: 'oh',\n    백: 'baek',\n    두: 'doo',\n    차: 'cha',\n    황: 'hwang',\n    전: 'jeon',\n    장: 'jang',\n    송: 'song',\n    노: 'no',\n    고: 'ko',\n\n    // 이름\n    기선: 'kiseon',\n    승훈: 'seunghoon',\n    건희: 'gunhee',\n    민종: 'minjong',\n    지영: 'jiyoung',\n    승현: 'seunghyun',\n    아현: 'ahyun',\n    수영: 'suyoung',\n    두현: 'doohyun',\n    은지: 'eunji',\n    시용: 'siyong',\n    순영: 'sunyoung',\n    수연: 'suyeon',\n    상환: 'sanghwan',\n    채연: 'chaeyeon',\n    태희: 'taehee',\n    재일: 'jaeil',\n    미경: 'mikyung',\n    가연: 'gayeon',\n    승엽: 'seungyeop',\n    지은: 'jieun',\n    한진: 'hanjin',\n    대곤: 'daegon',\n    혁일: 'hyukil',\n    인규: 'ingyu',\n    지후: 'jihuu',\n    형일: 'hyungil',\n    예원: 'yewon',\n    수겸: 'sugyeom',\n    준: 'jun',\n    현영: 'hyunyoung',\n    현종: 'hyunjong',\n    동훤: 'donghwon',\n    현민: 'hyunmin',\n    성호: 'sungho',\n    영아: 'younga',\n    현아: 'hyuna',\n    제윤: 'jeyoon'\n  }\n\n  // 성과 이름을 영문으로 변환\n  const lastEng = nameMapping[lastName] || lastName.toLowerCase()\n  const firstEng = nameMapping[firstName] || firstName.toLowerCase()\n\n  // 이메일 형식: kspark@viasoft.ai (이름성@viasoft.ai)\n  return `${firstEng}${lastEng}@viasoft.ai`\n}\n\n// 이메일 중복 체크 및 번호 추가\nfunction generateUniqueEmail(firstName, lastName, existingEmails) {\n  let baseEmail = generateEmail(firstName, lastName)\n  let email = baseEmail\n  let counter = 1\n\n  // 중복 체크\n  while (existingEmails.includes(email)) {\n    counter++\n    const counterStr = counter.toString().padStart(2, '0')\n    email = baseEmail.replace('@viasoft.ai', `${counterStr}@viasoft.ai`)\n  }\n\n  return email\n}\n\nasync function updateEmployeeIdsAndEmails() {\n  try {\n    console.log('🔄 Starting employee ID and email update...')\n\n    // 모든 직원 조회 (입사일 순으로 정렬)\n    const employeesResult = await query(`\n\t\t\tSELECT id, first_name, last_name, hire_date, employee_id, email\n\t\t\tFROM employees \n\t\t\tORDER BY hire_date ASC\n\t\t`)\n\n    const employees = employeesResult.rows\n    console.log(`📋 Found ${employees.length} employees to update`)\n\n    // 새로운 사번과 이메일 생성\n    const updates = []\n    const existingEmails = []\n\n    employees.forEach((emp, index) => {\n      const newEmployeeId = (1001 + index).toString()\n      const newEmail = generateUniqueEmail(emp.first_name, emp.last_name, existingEmails)\n\n      existingEmails.push(newEmail)\n\n      updates.push({\n        id: emp.id,\n        oldEmployeeId: emp.employee_id,\n        newEmployeeId: newEmployeeId,\n        oldEmail: emp.email,\n        newEmail: newEmail,\n        name: `${emp.last_name}${emp.first_name}`\n      })\n    })\n\n    // 데이터베이스 업데이트 (사번 중복 방지를 위해 2단계로 진행)\n    console.log('📝 Updating employee IDs and emails...')\n\n    // 1단계: 모든 사번을 임시 번호로 변경\n    console.log('🔄 Step 1: Setting temporary employee IDs...')\n    for (let i = 0; i < updates.length; i++) {\n      const update = updates[i]\n      const tempId = `TEMP${i + 1}`\n      await query(\n        `\n\t\t\t\tUPDATE employees \n\t\t\t\tSET employee_id = $1, updated_at = $2\n\t\t\t\tWHERE id = $3\n\t\t\t`,\n        [tempId, new Date(), update.id]\n      )\n    }\n\n    // 2단계: 최종 사번과 이메일로 업데이트\n    console.log('🔄 Step 2: Setting final employee IDs and emails...')\n    for (const update of updates) {\n      await query(\n        `\n\t\t\t\tUPDATE employees \n\t\t\t\tSET employee_id = $1, email = $2, updated_at = $3\n\t\t\t\tWHERE id = $4\n\t\t\t`,\n        [update.newEmployeeId, update.newEmail, new Date(), update.id]\n      )\n\n      console.log(\n        `✅ ${update.name}: ${update.oldEmployeeId} → ${update.newEmployeeId}, ${update.oldEmail} → ${update.newEmail}`\n      )\n    }\n\n    // 결과 확인\n    console.log('\\n🔍 Verifying updates...')\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\temployee_id, first_name, last_name, email, hire_date, department, position\n\t\t\tFROM employees \n\t\t\tORDER BY employee_id ASC\n\t\t`)\n\n    console.log('📋 Updated employee list:')\n    result.rows.forEach(row => {\n      const statusIcon = row.employee_id.startsWith('10') ? '🟢' : '🔴'\n      console.log(\n        `${statusIcon} ${row.employee_id}: ${row.last_name}${row.first_name} (${row.email}) - ${row.department} ${row.position}`\n      )\n    })\n\n    // 이메일 도메인 확인\n    const emailDomains = await query(`\n\t\t\tSELECT \n\t\t\t\tSUBSTRING(email FROM '@(.+)$') as domain,\n\t\t\t\tCOUNT(*) as count\n\t\t\tFROM employees \n\t\t\tGROUP BY SUBSTRING(email FROM '@(.+)$')\n\t\t`)\n\n    console.log('\\n📧 Email domain summary:')\n    emailDomains.rows.forEach(row => {\n      console.log(`  ${row.domain}: ${row.count}명`)\n    })\n\n    console.log('\\n✅ Employee ID and email update completed successfully!')\n  } catch (error) {\n    console.error('❌ Employee ID and email update failed:', error)\n    throw error\n  }\n}\n\n// Run the update\nupdateEmployeeIdsAndEmails()\n  .then(() => {\n    console.log('🎉 Employee ID and email update completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Employee ID and email update failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-employee-job-titles.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-employee-positions.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\n// 직원별 직책 업데이트 매핑\nconst positionUpdates = [\n  // 연구소장\n  { employeeId: '1021', newPosition: '연구소장' }, // 차지은\n\n  // 상무 (경영기획팀의 고위직들을 상무로 승격)\n  { employeeId: '1001', newPosition: '상무' }, // 박기선 (대표이사 → 상무)\n  { employeeId: '1002', newPosition: '상무' } // 한승훈 (경영기획팀장 → 상무)\n]\n\nasync function updateEmployeePositions() {\n  try {\n    console.log('🔄 Updating employee positions...')\n\n    for (const update of positionUpdates) {\n      // 직원 정보 조회\n      const employeeResult = await query(\n        'SELECT id, first_name, last_name, department, position FROM employees WHERE employee_id = $1',\n        [update.employeeId]\n      )\n\n      if (employeeResult.rows.length === 0) {\n        console.log(`⚠️  Employee with ID ${update.employeeId} not found`)\n        continue\n      }\n\n      const employee = employeeResult.rows[0]\n      const oldPosition = employee.position\n\n      // 직책 업데이트\n      await query(\n        `\n\t\t\t\tUPDATE employees \n\t\t\t\tSET position = $1, updated_at = $2\n\t\t\t\tWHERE employee_id = $3\n\t\t\t`,\n        [update.newPosition, new Date(), update.employeeId]\n      )\n\n      console.log(\n        `✅ Updated ${employee.last_name}${employee.first_name} (${update.employeeId}): ${oldPosition} → ${update.newPosition}`\n      )\n    }\n\n    // 결과 확인\n    console.log('\\n🔍 Verifying position updates...')\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\temployee_id, first_name, last_name, department, position, status\n\t\t\tFROM employees \n\t\t\tWHERE position IN ('연구소장', '상무')\n\t\t\tORDER BY position, employee_id\n\t\t`)\n\n    console.log('📋 Updated executive positions:')\n    result.rows.forEach(row => {\n      const statusIcon = row.status === 'active' ? '🟢' : '🔴'\n      console.log(\n        `  ${statusIcon} ${row.employee_id}: ${row.last_name}${row.first_name} - ${row.position} (${row.department})`\n      )\n    })\n\n    // 전체 직급 분포 확인\n    console.log('\\n📊 Position distribution:')\n    const positionStats = await query(`\n\t\t\tSELECT \n\t\t\t\tposition,\n\t\t\t\tCOUNT(*) as count,\n\t\t\t\tCOUNT(CASE WHEN status = 'active' THEN 1 END) as active_count,\n\t\t\t\tCOUNT(CASE WHEN status = 'terminated' THEN 1 END) as terminated_count\n\t\t\tFROM employees \n\t\t\tGROUP BY position\n\t\t\tORDER BY \n\t\t\t\tCASE position\n\t\t\t\t\tWHEN '상무' THEN 1\n\t\t\t\t\tWHEN '연구소장' THEN 2\n\t\t\t\t\tWHEN '대표이사' THEN 3\n\t\t\t\t\tWHEN '재무이사' THEN 4\n\t\t\t\t\tWHEN 'PSR팀장' THEN 5\n\t\t\t\t\tWHEN '경영기획팀장' THEN 6\n\t\t\t\t\tWHEN '경영지원팀장' THEN 7\n\t\t\t\t\tWHEN '선임연구원' THEN 8\n\t\t\t\t\tWHEN '연구원' THEN 9\n\t\t\t\t\tELSE 10\n\t\t\t\tEND,\n\t\t\t\tposition\n\t\t`)\n\n    positionStats.rows.forEach(row => {\n      console.log(\n        `  ${row.position}: ${row.count}명 (재직: ${row.active_count}명, 퇴사: ${row.terminated_count}명)`\n      )\n    })\n\n    console.log('\\n✅ Employee position updates completed successfully!')\n  } catch (error) {\n    console.error('❌ Failed to update employee positions:', error)\n    throw error\n  }\n}\n\n// Run the script\nupdateEmployeePositions()\n  .then(() => {\n    console.log('🎉 Employee position updates completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Employee position updates failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-position-name.js","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '../src/lib/database/connection.ts'\n\nasync function updatePositionName() {\n  try {\n    console.log('🔄 Updating position name: 연구소장 (PSR) → 연구소장...')\n\n    // 연구소장 (PSR팀) 직급명을 연구소장으로 변경\n    const result = await query(\n      `\n\t\t\tUPDATE positions \n\t\t\tSET name = '연구소장', updated_at = $1\n\t\t\tWHERE name = '연구소장 (PSR팀)'\n\t\t\tRETURNING id, name, description, department, level\n\t\t`,\n      [new Date()]\n    )\n\n    if (result.rows.length > 0) {\n      const position = result.rows[0]\n      console.log(\n        `✅ Updated position: ${position.name} (${position.department}) - Level ${position.level}`\n      )\n      console.log(`   Description: ${position.description}`)\n    } else {\n      console.log('⚠️  No position found with name \"연구소장 (PSR)\"')\n    }\n\n    // 결과 확인\n    console.log('\\n🔍 Verifying position update...')\n    const verifyResult = await query(`\n\t\t\tSELECT \n\t\t\t\tname, description, department, level, status\n\t\t\tFROM positions \n\t\t\tWHERE name = '연구소장'\n\t\t\tORDER BY department, level DESC\n\t\t`)\n\n    console.log('📋 Updated position:')\n    verifyResult.rows.forEach(row => {\n      console.log(`  ${row.name} (${row.department}) - Level ${row.level}: ${row.description}`)\n    })\n\n    console.log('\\n✅ Position name update completed successfully!')\n  } catch (error) {\n    console.error('❌ Failed to update position name:', error)\n    throw error\n  }\n}\n\n// Run the script\nupdatePositionName()\n  .then(() => {\n    console.log('🎉 Position name update completed successfully!')\n    process.exit(0)\n  })\n  .catch(error => {\n    console.error('💥 Position name update failed:', error)\n    process.exit(1)\n  })\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/scripts/update-terminated-employees.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/app.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/hooks.client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/hooks.server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/auth/middleware.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/auth/session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/hr/EmployeeModal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/layout/Header.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/layout/PageLayout.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/layout/Sidebar.svelte","messages":[{"ruleId":"svelte/require-optimized-style-attribute","severity":1,"message":"It cannot be optimized because too complex.","line":82,"column":13,"nodeType":"SvelteAttribute","messageId":"complex","endLine":84,"endColumn":80},{"ruleId":"svelte/no-unknown-style-directive-property","severity":2,"message":"Unexpected unknown style directive property 'hover'.","line":86,"column":17,"nodeType":"SvelteName","messageId":"unknown","endLine":86,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { page } from '$app/stores'\n  import {\n    HomeIcon,\n    BarChart3Icon,\n    UsersIcon,\n    BriefcaseIcon,\n    FileTextIcon,\n    SettingsIcon,\n    BanknoteIcon,\n    FlaskConicalIcon,\n    BuildingIcon,\n    CalendarIcon,\n    MessageSquareIcon,\n    ChevronLeftIcon,\n    ChevronRightIcon,\n    DollarSignIcon\n  } from '@lucide/svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n\n  let { isCollapsed = $bindable(true) } = $props<{ isCollapsed?: boolean }>()\n\n  const navigationItems = [\n    { name: '대시보드', href: '/', icon: HomeIcon },\n    { name: '재무관리', href: '/finance', icon: BanknoteIcon },\n    { name: '급여관리', href: '/salary', icon: DollarSignIcon },\n    { name: '인사관리', href: '/hr', icon: UsersIcon },\n    { name: '연구개발', href: '/project-management', icon: FlaskConicalIcon },\n    { name: '영업관리', href: '/sales', icon: BriefcaseIcon },\n    { name: '고객관리', href: '/crm', icon: BuildingIcon },\n    { name: '일정관리', href: '/calendar', icon: CalendarIcon },\n    { name: '보고서', href: '/reports', icon: FileTextIcon },\n    { name: '분석', href: '/analytics', icon: BarChart3Icon },\n    { name: '메시지', href: '/messages', icon: MessageSquareIcon },\n    { name: '설정', href: '/settings', icon: SettingsIcon }\n  ]\n\n  function toggleCollapse() {\n    isCollapsed = !isCollapsed\n  }\n</script>\n\n<aside\n  class=\"transition-all duration-300 {isCollapsed\n    ? 'w-16'\n    : 'w-64'} flex-shrink-0 h-screen sticky top-0\"\n  style:background=\"var(--color-surface)\"\n  style:border-right=\"1px solid var(--color-border)\"\n>\n  <div class=\"flex h-full flex-col\">\n    <!-- Toggle Button -->\n    <div\n      class=\"flex h-12 items-center justify-center\"\n      style:border-bottom=\"1px solid var(--color-border)\"\n    >\n      <ThemeButton\n        variant=\"ghost\"\n        size=\"sm\"\n        onclick={toggleCollapse}\n        class=\"p-2 transition-colors text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200\"\n      >\n        {#if isCollapsed}\n          <ChevronRightIcon size={16} />\n        {:else}\n          <ChevronLeftIcon size={16} />\n        {/if}\n      </ThemeButton>\n    </div>\n\n    <!-- Navigation -->\n    <nav class=\"flex-1 px-3 py-4 space-y-1\">\n      {#each navigationItems as item (item.name)}\n        {@const currentPath = $page.url.pathname}\n        {@const isCurrent =\n          (item.href === '/' && currentPath === '/') ||\n            (item.href !== '/' && currentPath.startsWith(item.href))}\n        <a\n          href={item.href}\n          class=\"group flex items-center px-3 py-3 text-sm font-medium rounded-xl transition-all duration-200 relative\n            {isCurrent ? 'text-white shadow-lg' : 'hover:scale-[1.02] hover:shadow-md'}\"\n          style=\"\n            {isCurrent\n              ? 'background: var(--color-primary);'\n              : 'color: var(--color-text-secondary); background: transparent;'}\n          \"\n          style:hover={isCurrent ? null : 'background: var(--color-surface-elevated)'}\n          title={isCollapsed ? item.name : ''}\n        >\n          {#if isCurrent}\n            <div class=\"absolute left-0 top-1/2 transform -translate-y-1/2 w-1 h-8 bg-white rounded-r-full\"\n            ></div>\n          {/if}\n          {#if item.icon}\n            <item.icon size={20} class=\"flex-shrink-0 {isCurrent ? 'text-white' : ''}\" />\n          {/if}\n          {#if !isCollapsed}\n            <span class=\"ml-3 font-medium\" class:text-white={isCurrent}>{item.name}</span>\n          {/if}\n          {#if isCurrent && !isCollapsed}\n            <div class=\"ml-auto\">\n              <div class=\"w-2 h-2 bg-white rounded-full\"></div>\n            </div>\n          {/if}\n        </a>\n      {/each}\n    </nav>\n  </div>\n</aside>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/AnnualBudgetForm.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ParticipationCard.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectBudgetSummary.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectCreationForm.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":95,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":95,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[2275,2293],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":217,"column":13,"nodeType":"Identifier","messageId":"unusedVar","endLine":217,"endColumn":18,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[6218,6223],"text":""},"desc":"Remove unused variable 'error'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { CheckIcon, XIcon } from '@lucide/svelte'\n  import { createEventDispatcher } from 'svelte'\n\n  const dispatch = createEventDispatcher()\n\n  // 간소화된 폼 데이터 상태\n  let projectData = $state({\n    title: '',\n    code: '',\n    description: '',\n    status: 'planning' // 기본값을 '기획'으로 설정\n  })\n\n  // 예산 입력 단계 관리\n  let showBudgetStep = $state(false)\n  let createdProjectId = $state<string | null>(null)\n\n  // UI 상태\n  let isSubmitting = $state(false)\n  let validationErrors = $state<string[]>([])\n\n  // 간소화된 폼 검증\n  function validateForm(): boolean {\n    const errors: string[] = []\n\n    if (!projectData.title.trim()) {\n      errors.push('프로젝트명을 입력해주세요.')\n    }\n\n    if (!projectData.code.trim()) {\n      errors.push('프로젝트 코드를 입력해주세요.')\n    }\n\n    validationErrors = errors\n    return errors.length === 0\n  }\n\n  // 간소화된 프로젝트 생성\n  async function createProject() {\n    if (!validateForm()) return\n\n    isSubmitting = true\n    validationErrors = []\n\n    try {\n      logger.log('🚀 [UI] 프로젝트 생성 요청 시작')\n      logger.log('📋 [UI] 전송 데이터:', JSON.stringify(projectData, null, 2))\n\n      const response = await fetch('/api/project-management/projects', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(projectData)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        logger.log('✅ [UI] 프로젝트 생성 성공:', result)\n        createdProjectId = result.data?.id\n\n        if (createdProjectId) {\n          // 예산 입력 단계로 이동\n          showBudgetStep = true\n        } else {\n          // 예산 입력 없이 완료\n          dispatch('projectCreated', result)\n          resetForm()\n        }\n      } else {\n        logger.log('❌ [UI] 프로젝트 생성 실패:', result.error)\n        validationErrors = [result.error || '프로젝트 생성 중 오류가 발생했습니다.']\n      }\n    } catch (error) {\n      logger.error('💥 [UI] 프로젝트 생성 중 오류:', error)\n      validationErrors = ['프로젝트 생성 중 오류가 발생했습니다.']\n    } finally {\n      isSubmitting = false\n    }\n  }\n\n  // 폼 초기화\n  function resetForm() {\n    projectData.title = ''\n    projectData.code = ''\n    projectData.description = ''\n    projectData.status = 'planning'\n    showBudgetStep = false\n    createdProjectId = null\n  }\n\n  // 예산 저장 완료 핸들러\n  function handleBudgetSaved(event: CustomEvent) {\n    dispatch('projectCreated', {\n      success: true,\n      data: { id: createdProjectId },\n      message: '프로젝트와 예산이 성공적으로 생성되었습니다.'\n    })\n    resetForm()\n  }\n\n  // 예산 입력 건너뛰기\n  function skipBudgetStep() {\n    dispatch('projectCreated', {\n      success: true,\n      data: { id: createdProjectId },\n      message: '프로젝트가 성공적으로 생성되었습니다. 예산은 나중에 설정할 수 있습니다.'\n    })\n    resetForm()\n  }\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-lg\">\n  <h2 class=\"text-2xl font-bold text-gray-900 mb-6\">새 프로젝트 생성</h2>\n\n  <!-- 검증 오류 표시 -->\n  {#if validationErrors.length > 0}\n    <div class=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg\">\n      <div class=\"flex items-center\">\n        <XIcon class=\"w-5 h-5 text-red-500 mr-2\" />\n        <h3 class=\"text-sm font-medium text-red-800\">검증 오류</h3>\n      </div>\n      <ul class=\"mt-2 text-sm text-red-700\">\n        {#each validationErrors as error, i (i)}\n          <li>• {error}</li>\n        {/each}\n      </ul>\n    </div>\n  {/if}\n  {#if !showBudgetStep}\n    <!-- 1단계: 기본 프로젝트 정보 입력 -->\n    <div class=\"space-y-6\">\n      <div>\n        <label for=\"projectTitle\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n          프로젝트명 *\n        </label>\n        <input\n          id=\"projectTitle\"\n          type=\"text\"\n          bind:value={projectData.title}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"프로젝트명을 입력하세요\"\n        />\n      </div>\n\n      <div>\n        <label for=\"projectCode\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n          프로젝트 코드 *\n        </label>\n        <input\n          id=\"projectCode\"\n          type=\"text\"\n          bind:value={projectData.code}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"예: PROJ-2024-001\"\n        />\n      </div>\n\n      <div>\n        <label for=\"description\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n          프로젝트 설명 (선택사항)\n        </label>\n        <textarea\n          id=\"description\"\n          bind:value={projectData.description}\n          rows=\"4\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"프로젝트에 대한 설명을 입력하세요\"\n        ></textarea>\n      </div>\n\n      <div>\n        <label for=\"status\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n          프로젝트 상태\n        </label>\n        <select\n          id=\"status\"\n          bind:value={projectData.status}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"planning\">기획</option>\n          <option value=\"active\">진행</option>\n          <option value=\"completed\">완료</option>\n        </select>\n      </div>\n    </div>\n  {:else}\n    <!-- 2단계: 연차별 예산 입력 -->\n    <div class=\"mb-6\">\n      <div class=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n        <div class=\"flex items-center\">\n          <CheckIcon class=\"w-5 h-5 text-green-500 mr-2\" />\n          <div>\n            <h3 class=\"text-sm font-medium text-green-800\">프로젝트가 생성되었습니다!</h3>\n            <p class=\"text-sm text-green-700 mt-1\">이제 연차별 예산을 설정해주세요.</p>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    {#await import('$lib/components/project-management/AnnualBudgetForm.svelte')}\n      <div class=\"text-center py-8\">\n        <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto\"></div>\n        <p class=\"mt-2 text-gray-600\">예산 입력 폼을 로딩 중...</p>\n      </div>\n    {:then { default: AnnualBudgetForm }}\n      <AnnualBudgetForm\n        projectId={createdProjectId || ''}\n        existingBudgets={[]}\n        readonly={false}\n        onbudgetSaved={handleBudgetSaved}\n      />\n    {:catch error}\n      <div class=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <div class=\"flex items-center\">\n          <XIcon class=\"w-5 h-5 text-red-500 mr-2\" />\n          <div>\n            <h3 class=\"text-sm font-medium text-red-800\">예산 폼 로딩 실패</h3>\n            <p class=\"text-sm text-red-700 mt-1\">예산 입력 폼을 로딩할 수 없습니다.</p>\n          </div>\n        </div>\n      </div>\n    {/await}\n  {/if}\n\n  <!-- 하단 버튼 -->\n  <div class=\"flex justify-between mt-8 pt-6 border-t border-gray-200\">\n    {#if showBudgetStep}\n      <button\n        type=\"button\"\n        onclick={skipBudgetStep}\n        class=\"px-4 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50\"\n      >\n        나중에 설정\n      </button>\n    {:else}\n      <div></div>\n    {/if}\n\n    {#if !showBudgetStep}\n      <button\n        type=\"button\"\n        onclick={createProject}\n        disabled={isSubmitting}\n        class=\"flex items-center px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n      >\n        {#if isSubmitting}\n          <div class=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n          생성 중...\n        {:else}\n          <CheckIcon class=\"w-4 h-4 mr-2\" />\n          프로젝트 생성\n        {/if}\n      </button>\n    {/if}\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectDetailView.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getPersonnelCost' is defined but never used.","line":60,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"getPersonnelCost"},"fix":{"range":[1651,1775],"text":""},"desc":"Remove unused variable 'getPersonnelCost'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getResearchMaterialCost' is defined but never used.","line":68,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":68,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"getResearchMaterialCost"},"fix":{"range":[1920,2066],"text":""},"desc":"Remove unused variable 'getResearchMaterialCost'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getResearchActivityCost' is defined but never used.","line":76,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"getResearchActivityCost"},"fix":{"range":[2233,2379],"text":""},"desc":"Remove unused variable 'getResearchActivityCost'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getResearchStipend' is defined but never used.","line":84,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":84,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"getResearchStipend"},"fix":{"range":[2546,2676],"text":""},"desc":"Remove unused variable 'getResearchStipend'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getProjectStartDate' is defined but never used.","line":281,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":281,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"getProjectStartDate"},"fix":{"range":[8902,9021],"text":""},"desc":"Remove unused variable 'getProjectStartDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getProjectEndDate' is defined but never used.","line":285,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":285,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"getProjectEndDate"},"fix":{"range":[9025,9138],"text":""},"desc":"Remove unused variable 'getProjectEndDate'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'showMemberModal' is assigned a value but never used.","line":316,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":316,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'evidenceList' is assigned a value but never used.","line":376,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":376,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'evidenceTypes' is assigned a value but never used.","line":380,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":380,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'autoValidationEnabled' is assigned a value but never used.","line":393,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":393,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'editProjectForm' is assigned a value but never used.","line":412,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":412,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'budgetCategories' is assigned a value but never used.","line":428,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":428,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'memberValidation' is assigned a value but never used.","line":432,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":432,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'memberValidationLastChecked' is assigned a value but never used.","line":434,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":434,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'openEvidenceModal' is defined but never used.","line":1274,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":1274,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"openEvidenceModal"},"fix":{"range":[37972,38112],"text":""},"desc":"Remove unused variable 'openEvidenceModal'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updateEvidenceItem' is defined but never used.","line":1374,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":1374,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"updateEvidenceItem"},"fix":{"range":[40496,41081],"text":""},"desc":"Remove unused variable 'updateEvidenceItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'deleteEvidenceItem' is defined but never used.","line":1399,"column":18,"nodeType":"Identifier","messageId":"unusedVar","endLine":1399,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"deleteEvidenceItem"},"fix":{"range":[41099,41531],"text":""},"desc":"Remove unused variable 'deleteEvidenceItem'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":1889,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":1889,"endColumn":22,"suggestions":[{"messageId":"removeVar","data":{"varName":"error"},"fix":{"range":[55135,55140],"text":""},"desc":"Remove unused variable 'error'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalBudget' is assigned a value but never used.","line":1966,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":1966,"endColumn":34}],"suppressedMessages":[],"errorCount":19,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeBadge from '$lib/components/ui/ThemeBadge.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import { formatCurrency, formatDate, formatDateForInput } from '$lib/utils/format'\n  import { isKoreanName } from '$lib/utils/korean-name'\n  import { calculateMonthlySalary } from '$lib/utils/salary-calculator'\n  import {\n    AlertTriangleIcon,\n    CalendarIcon,\n    CheckCircleIcon,\n    CheckIcon,\n    ChevronDownIcon,\n    ChevronRightIcon,\n    ChevronUpIcon,\n    DollarSignIcon,\n    EditIcon,\n    FileTextIcon,\n    PlusIcon,\n    RefreshCwIcon,\n    ShieldAlertIcon,\n    ShieldCheckIcon,\n    TrashIcon,\n    UserIcon,\n    UsersIcon,\n    XCircleIcon,\n    XIcon\n  } from '@lucide/svelte'\n  import { createEventDispatcher, onMount } from 'svelte'\n\n  const dispatch = createEventDispatcher()\n\n  // 예산 데이터 필드 접근 유틸리티 함수들\n  function getBudgetField(\n    budget: any,\n    camelCase: string,\n    snakeCase: string,\n    defaultValue: any = null\n  ) {\n    return budget[camelCase] || budget[snakeCase] || defaultValue\n  }\n\n  function getPeriodNumber(budget: any): number {\n    return getBudgetField(budget, 'periodNumber', 'period_number', 1)\n  }\n\n  function getStartDate(budget: any): string {\n    return getBudgetField(budget, 'startDate', 'start_date')\n  }\n\n  function getEndDate(budget: any): string {\n    return getBudgetField(budget, 'endDate', 'end_date')\n  }\n\n  function getFiscalYear(budget: any): string {\n    return getBudgetField(budget, 'fiscalYear', 'fiscal_year')\n  }\n\n  function getPersonnelCost(budget: any): number {\n    return getBudgetField(budget, 'personnelCost', 'personnel_cost', 0)\n  }\n\n  function getPersonnelCostCash(budget: any): number {\n    return getBudgetField(budget, 'personnelCostCash', 'personnel_cost_cash', 0)\n  }\n\n  function getResearchMaterialCost(budget: any): number {\n    return getBudgetField(budget, 'researchMaterialCost', 'research_material_cost', 0)\n  }\n\n  function getResearchMaterialCostCash(budget: any): number {\n    return getBudgetField(budget, 'researchMaterialCostCash', 'research_material_cost_cash', 0)\n  }\n\n  function getResearchActivityCost(budget: any): number {\n    return getBudgetField(budget, 'researchActivityCost', 'research_activity_cost', 0)\n  }\n\n  function getResearchActivityCostCash(budget: any): number {\n    return getBudgetField(budget, 'researchActivityCostCash', 'research_activity_cost_cash', 0)\n  }\n\n  function getResearchStipend(budget: any): number {\n    return getBudgetField(budget, 'researchStipend', 'research_stipend', 0)\n  }\n  function getResearchStipendCash(budget: any): number {\n    return getBudgetField(budget, 'researchStipendCash', 'research_stipend_cash', 0)\n  }\n  function getResearchStipendInKind(budget: any): number {\n    return getBudgetField(budget, 'researchStipendInKind', 'research_stipend_in_kind', 0)\n  }\n\n  function getIndirectCost(budget: any): number {\n    return getBudgetField(budget, 'indirectCost', 'indirect_cost', 0)\n  }\n  function getIndirectCostCash(budget: any): number {\n    return getBudgetField(budget, 'indirectCostCash', 'indirect_cost_cash', 0)\n  }\n\n  function getPersonnelCostInKind(budget: any): number {\n    return getBudgetField(budget, 'personnelCostInKind', 'personnel_cost_in_kind', 0)\n  }\n\n  function getResearchMaterialCostInKind(budget: any): number {\n    return getBudgetField(budget, 'researchMaterialCostInKind', 'research_material_cost_in_kind', 0)\n  }\n\n  function getResearchActivityCostInKind(budget: any): number {\n    return getBudgetField(budget, 'researchActivityCostInKind', 'research_activity_cost_in_kind', 0)\n  }\n\n  function getIndirectCostInKind(budget: any): number {\n    return getBudgetField(budget, 'indirectCostInKind', 'indirect_cost_in_kind', 0)\n  }\n\n  function formatPeriodDisplay(budget: any): string {\n    return `Y${getPeriodNumber(budget)}`\n  }\n\n  function formatPeriodTooltip(budget: any): string {\n    const startDate = getStartDate(budget)\n    const endDate = getEndDate(budget)\n    const fiscalYear = getFiscalYear(budget)\n\n    const startDisplay = startDate ? formatDate(startDate) : `${fiscalYear}년`\n    const endDisplay = endDate ? formatDate(endDate) : `${fiscalYear}년`\n    const monthsDisplay =\n      startDate && endDate ? `${calculatePeriodMonths(startDate, endDate)}개월` : '1년'\n\n    return `기간: ${startDisplay} ~ ${endDisplay} (${monthsDisplay})`\n  }\n\n  // 날짜 처리 유틸리티 함수들 (표준화된 함수 사용)\n\n  // 연차 정보 기반 프로젝트 기간 계산\n  async function updateProjectPeriodFromBudgets() {\n    if (!selectedProject?.id) return\n\n    try {\n      const response = await fetch(\n        `/api/project-management/projects/${selectedProject.id}/annual-budgets`\n      )\n      const result = await response.json()\n\n      if (result.success && result.data?.budgets && result.data.budgets.length > 0) {\n        const budgets = result.data.budgets\n        const firstBudget = budgets[0]\n        const lastBudget = budgets[budgets.length - 1]\n\n        if (firstBudget.startDate && lastBudget.endDate) {\n          const periodElement = document.getElementById('project-period')\n          if (periodElement) {\n            periodElement.textContent = `${formatDate(firstBudget.startDate)} ~ ${formatDate(lastBudget.endDate)}`\n          }\n        } else {\n          const periodElement = document.getElementById('project-period')\n          if (periodElement) {\n            periodElement.textContent = '연차별 기간 정보 없음'\n          }\n        }\n      } else {\n        const periodElement = document.getElementById('project-period')\n        if (periodElement) {\n          periodElement.textContent = '연차별 예산 정보 없음'\n        }\n      }\n    } catch (error) {\n      logger.error('프로젝트 기간 업데이트 실패:', error)\n      const periodElement = document.getElementById('project-period')\n      if (periodElement) {\n        periodElement.textContent = '기간 정보 로드 실패'\n      }\n    }\n  }\n\n  // 멤버 데이터 필드 접근 유틸리티 함수들\n  function getMemberField(\n    member: any,\n    camelCase: string,\n    snakeCase: string,\n    defaultValue: any = null\n  ) {\n    return member[camelCase] || member[snakeCase] || defaultValue\n  }\n\n  function getMemberStartDate(member: any): string {\n    return getMemberField(member, 'startDate', 'start_date', '')\n  }\n\n  function getMemberEndDate(member: any): string {\n    return getMemberField(member, 'endDate', 'end_date', '')\n  }\n\n  function getMemberEmployeeId(member: any): string {\n    return getMemberField(member, 'employeeId', 'employee_id')\n  }\n\n  function getMemberParticipationRate(member: any): number {\n    return getMemberField(member, 'participationRate', 'participation_rate', 0)\n  }\n\n  function getMemberMonthlyAmount(member: any): number {\n    return getMemberField(member, 'monthlyAmount', 'monthly_amount', 0)\n  }\n\n  function getMemberContributionType(member: any): string {\n    return getMemberField(member, 'contributionType', 'contribution_type', 'cash')\n  }\n\n  function getMemberEmployeeName(member: any): string {\n    return getMemberField(member, 'employeeName', 'employee_name')\n  }\n\n  // 한국식 이름 처리 유틸리티 함수 (통합된 유틸리티 사용)\n  function formatKoreanName(name: string): string {\n    if (!name) return ''\n\n    const trimmed = name.trim()\n\n    // 이미 표준 형식인 경우 (띄어쓰기 없음)\n    if (!trimmed.includes(' ')) {\n      return trimmed\n    }\n\n    // 한국 이름인 경우 표준 형식으로 변환\n    if (isKoreanName(trimmed)) {\n      const parts = trimmed.split(/\\s+/)\n      if (parts.length === 2) {\n        const [first, second] = parts\n\n        // 일반적으로 성은 1글자, 이름은 2글자 이상\n        if (first.length >= 2 && second.length === 1) {\n          // \"지은 차\" -> \"차지은\" (이름 성 -> 성 이름)\n          return `${second}${first}`\n        } else if (first.length === 1 && second.length >= 2) {\n          // \"차 지은\" -> \"차지은\" (이미 올바른 순서)\n          return `${first}${second}`\n        }\n      }\n    }\n\n    // 한국 이름이 아닌 경우 원본 반환\n    return trimmed\n  }\n\n  // 담당자 이름 처리 통일된 유틸리티 함수들\n  function formatAssigneeName(\n    assigneeName: string | null | undefined,\n    fallback: string = '미할당'\n  ): string {\n    if (!assigneeName) return fallback\n    // 데이터베이스에서 \"지은 차\" 형식으로 저장된 것을 \"차지은\" 형식으로 변환\n    return formatKoreanName(assigneeName)\n  }\n\n  function formatAssigneeNameFromFields(item: any, fallback: string = '미할당'): string {\n    const name = item.assignee_full_name || item.assignee_name\n    return formatAssigneeName(name, fallback)\n  }\n\n  function createAssigneeNameFromEmployee(employee: any): string {\n    if (!employee) return ''\n    return formatKoreanName(`${employee.last_name}${employee.first_name}`)\n  }\n\n  function formatEmployeeForSelect(employee: any): string {\n    return createAssigneeNameFromEmployee(employee)\n  }\n\n  // 프로젝트 데이터 필드 접근 유틸리티 함수들\n  function getProjectField(\n    project: any,\n    camelCase: string,\n    snakeCase: string,\n    defaultValue: any = null\n  ) {\n    return project[camelCase] || project[snakeCase] || defaultValue\n  }\n\n  function getProjectStartDate(project: any): string {\n    return getProjectField(project, 'startDate', 'start_date')\n  }\n\n  function getProjectEndDate(project: any): string {\n    return getProjectField(project, 'endDate', 'end_date')\n  }\n\n  function getProjectCode(project: any): string {\n    return getProjectField(project, 'code', 'code')\n  }\n\n  function getProjectDescription(project: any): string {\n    return getProjectField(project, 'description', 'description')\n  }\n\n  function getProjectStatus(project: any): string {\n    return getProjectField(project, 'status', 'status', 'active')\n  }\n\n  function getProjectSponsorType(project: any): string {\n    return getProjectField(project, 'sponsorType', 'sponsor_type', 'internal')\n  }\n\n  let { selectedProject }: { selectedProject: any } = $props()\n\n  // 프로젝트 변경 시 기간 업데이트\n  $effect(() => {\n    if (selectedProject?.id) {\n      updateProjectPeriodFromBudgets()\n    }\n  })\n\n  // 모달 상태\n  let showBudgetModal = $state(false)\n  let showMemberModal = $state(false)\n  let showEditProjectModal = $state(false)\n  let showDeleteConfirmModal = $state(false)\n  let isUpdating = $state(false)\n  let editingBudget = $state<any>(null)\n  let editingMember = $state<any>(null)\n  let addingMember = $state(false)\n  let isDeleting = $state(false)\n  let deleteConfirmationCode = $state('')\n  let budgetRefreshTrigger = $state(0)\n\n  // 폼 데이터\n  let budgetForm = $state({\n    periodNumber: 1, // 연차 번호 (1연차, 2연차, ...)\n    startDate: '', // 연차 시작일\n    endDate: '', // 연차 종료일\n    // 현금 비목들\n    personnelCostCash: '',\n    researchMaterialCostCash: '',\n    researchActivityCostCash: '',\n    researchStipendCash: '',\n    indirectCostCash: '',\n    // 현물 비목들\n    personnelCostInKind: '',\n    researchMaterialCostInKind: '',\n    researchActivityCostInKind: '',\n    researchStipendInKind: '',\n    indirectCostInKind: ''\n  })\n\n  let projectForm = $state({\n    title: '',\n    code: '',\n    description: '',\n    status: 'active',\n    sponsorType: 'internal',\n    priority: 'medium',\n    researchType: 'applied'\n  })\n\n  let memberForm = $state({\n    employeeId: '',\n    role: 'researcher',\n    startDate: '',\n    endDate: '',\n    participationRate: 100, // 기본 참여율 100%\n    monthlyAmount: '0', // 월간 금액\n    contributionType: 'cash' // 'cash' or 'in_kind'\n  })\n\n  // 사용자가 수동으로 월간금액을 입력했는지 추적\n  let isManualMonthlyAmount = $state(false)\n\n  let calculatedMonthlyAmount = $state(0)\n  let isCalculatingMonthlyAmount = $state(false)\n  let isPersonnelSummaryExpanded = $state(false)\n\n  // 증빙 내역 관리 상태\n  let showEvidenceModal = $state(false)\n  let selectedBudgetForEvidence = $state(null)\n  let evidenceList = $state([])\n  let selectedEvidencePeriod = $state(1)\n  let showEvidenceDetailModal = $state(false)\n  let selectedEvidenceItem = $state(null)\n  let evidenceTypes = $state([])\n  let expandedEvidenceSections = $state({\n    personnel: true,\n    material: true,\n    activity: true,\n    indirect: true\n  })\n\n  // 검증 및 자동화 상태\n  let showValidationModal = $state(false)\n  let validationResults = $state<any>(null)\n  let isRunningValidation = $state(false)\n  let validationHistory = $state<any[]>([])\n  let autoValidationEnabled = $state(true)\n  let evidenceCategories = $state([])\n  let evidenceItems = $state([])\n  let isLoadingEvidence = $state(false)\n\n  // 증빙 추가 폼\n  let newEvidenceForm = $state({\n    categoryId: '',\n    name: '',\n    description: '',\n    budgetAmount: '',\n    assigneeId: '',\n    dueDate: ''\n  })\n\n  // 증빙 등록 검증 상태\n  let evidenceValidation = $state<any>(null)\n  let isValidatingEvidence = $state(false)\n\n  let editProjectForm = $state({\n    title: '',\n    description: '',\n    sponsorType: '',\n    sponsorName: '',\n    startDate: '',\n    endDate: '',\n    budgetTotal: '',\n    researchType: '',\n    priority: '',\n    status: ''\n  })\n\n  // 데이터\n  let projectMembers = $state<any[]>([])\n  let projectBudgets = $state<any[]>([])\n  let budgetCategories = $state<any[]>([])\n  let availableEmployees = $state<any[]>([])\n\n  // 참여연구원 검증 상태 (테이블용)\n  let memberValidation = $state<any>(null)\n  let isValidatingMembers = $state(false)\n  let memberValidationLastChecked = $state<Date | null>(null)\n\n  // 개별 멤버 검증 상태\n  let memberValidationStatuses = $state<Record<string, any>>({})\n\n  // 컴포넌트 마운트 시 초기화\n  onMount(async () => {\n    if (selectedProject?.id) {\n      await loadProjectBudgets()\n      await loadProjectMembers()\n      await loadEvidenceCategories()\n    }\n  })\n\n  // 증빙 등록 시 재직 기간 검증 함수\n  async function validateEvidenceRegistration() {\n    if (!newEvidenceForm.assigneeId || !newEvidenceForm.dueDate || !selectedBudgetForEvidence?.id) {\n      evidenceValidation = null\n      return\n    }\n\n    // 인건비 카테고리인 경우에만 검증\n    const selectedCategory = evidenceCategories.find(cat => cat.id === newEvidenceForm.categoryId)\n    if (selectedCategory?.name !== '인건비') {\n      evidenceValidation = null\n      return\n    }\n\n    isValidatingEvidence = true\n    try {\n      const response = await fetch('/api/project-management/evidence-items/validate-employment', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          assigneeId: newEvidenceForm.assigneeId,\n          dueDate: newEvidenceForm.dueDate,\n          projectBudgetId: selectedBudgetForEvidence.id\n        })\n      })\n\n      if (response.ok) {\n        const data = await response.json()\n        evidenceValidation = data\n      } else {\n        logger.error('증빙 등록 검증 실패:', response.statusText)\n        evidenceValidation = null\n      }\n    } catch (error) {\n      logger.error('증빙 등록 검증 중 오류:', error)\n      evidenceValidation = null\n    } finally {\n      isValidatingEvidence = false\n    }\n  }\n\n  // 참여연구원 검증 함수 (테이블용)\n  async function validateMembers() {\n    if (!selectedProject?.id) return\n\n    isValidatingMembers = true\n    try {\n      const response = await fetch(\n        `/api/project-management/researcher-validation?projectId=${selectedProject.id}`\n      )\n      if (response.ok) {\n        const data = await response.json()\n        memberValidation = data\n        memberValidationLastChecked = new Date()\n\n        // 개별 멤버 검증 상태 업데이트\n        if (data.success && data.data?.validation?.issues) {\n          updateMemberValidationStatuses(data.data.validation.issues)\n        }\n      } else {\n        logger.error('참여연구원 검증 실패:', response.statusText)\n      }\n    } catch (error) {\n      logger.error('참여연구원 검증 중 오류:', error)\n    } finally {\n      isValidatingMembers = false\n    }\n  }\n\n  // 개별 멤버 검증 상태 업데이트\n  function updateMemberValidationStatuses(issues: any[]) {\n    // 초기화\n    memberValidationStatuses = {}\n\n    // 각 멤버별로 검증 상태 설정\n    projectMembers.forEach(member => {\n      const memberIssues = issues.filter(issue => issue.memberId === member.id)\n\n      if (memberIssues.length === 0) {\n        memberValidationStatuses[member.id] = {\n          status: 'valid',\n          message: '검증 완료',\n          issues: []\n        }\n      } else {\n        const hasErrors = memberIssues.some(issue => issue.severity === 'error')\n        const hasWarnings = memberIssues.some(issue => issue.severity === 'warning')\n        const errorCount = memberIssues.filter(i => i.severity === 'error').length\n        const warningCount = memberIssues.filter(i => i.severity === 'warning').length\n\n        // 더 자세한 메시지 생성\n        let detailedMessage = ''\n        if (hasErrors && hasWarnings) {\n          detailedMessage = `${errorCount}개 오류, ${warningCount}개 경고`\n        } else if (hasErrors) {\n          detailedMessage = `${errorCount}개 오류`\n        } else {\n          detailedMessage = `${warningCount}개 경고`\n        }\n\n        memberValidationStatuses[member.id] = {\n          status: hasErrors ? 'error' : 'warning',\n          message: detailedMessage,\n          issues: memberIssues.map(issue => ({\n            ...issue,\n            // API에서 제공하는 실제 메시지 사용\n            priority: issue.severity === 'error' ? 'high' : 'medium'\n          }))\n        }\n      }\n    })\n  }\n\n  // 프로젝트 멤버 로드\n  async function loadProjectMembers() {\n    try {\n      logger.log('참여연구원 목록 로드 시작, 프로젝트 ID:', selectedProject.id)\n      const response = await fetch(\n        `/api/project-management/project-members?projectId=${selectedProject.id}`\n      )\n      if (response.ok) {\n        const data = await response.json()\n        logger.log('참여연구원 목록 로드 성공:', data.data?.length, '명')\n        projectMembers = data.data || []\n        logger.log('참여연구원 상태 업데이트 완료:', projectMembers.length, '명')\n\n      // 자동 검증 제거 - 수작업으로만 검증 실행\n      } else {\n        logger.error('참여연구원 목록 로드 실패, 응답 상태:', response.status)\n      }\n    } catch (error) {\n      logger.error('프로젝트 멤버 로드 실패:', error)\n    }\n  }\n\n  // 프로젝트 사업비 로드\n  async function loadProjectBudgets() {\n    try {\n      const response = await fetch(\n        `/api/project-management/project-budgets?projectId=${selectedProject.id}`\n      )\n      if (response.ok) {\n        const data = await response.json()\n        projectBudgets = data.data || []\n      }\n    } catch (error) {\n      logger.error('프로젝트 사업비 로드 실패:', error)\n    }\n  }\n\n  // 사업비 항목 로드\n  async function loadBudgetCategories() {\n    try {\n      const response = await fetch('/api/project-management/budget-categories')\n      if (response.ok) {\n        const data = await response.json()\n        budgetCategories = data.data || []\n      }\n    } catch (error) {\n      logger.error('사업비 항목 로드 실패:', error)\n    }\n  }\n\n  // 사용 가능한 직원 로드\n  async function loadAvailableEmployees() {\n    try {\n      logger.log('직원 목록 로딩 시작, 프로젝트 ID:', selectedProject.id)\n      const response = await fetch(\n        `/api/project-management/employees?excludeProjectMembers=true&projectId=${selectedProject.id}`\n      )\n      logger.log('직원 목록 API 응답 상태:', response.status)\n\n      if (response.ok) {\n        const data = await response.json()\n        logger.log('직원 목록 API 응답 데이터:', data)\n        availableEmployees = data.data || []\n        logger.log('로드된 직원 수:', availableEmployees.length)\n      } else {\n        logger.error('직원 목록 API 오류:', response.status, response.statusText)\n        const errorData = await response.text()\n        logger.error('오류 상세:', errorData)\n      }\n    } catch (error) {\n      logger.error('직원 목록 로드 실패:', error)\n    }\n  }\n\n  // 사업비 추가\n  async function addBudget() {\n    // 필수 필드 검증\n    if (!budgetForm.startDate || !budgetForm.endDate) {\n      alert('연차 기간(시작일, 종료일)을 모두 입력해주세요.')\n      return\n    }\n\n    // 시작일이 종료일보다 늦은지 검증\n    if (new Date(budgetForm.startDate) >= new Date(budgetForm.endDate)) {\n      alert('시작일은 종료일보다 빨라야 합니다.')\n      return\n    }\n\n    try {\n      const response = await fetch('/api/project-management/project-budgets', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          projectId: selectedProject.id,\n          periodNumber: budgetForm.periodNumber,\n          startDate: budgetForm.startDate,\n          endDate: budgetForm.endDate,\n          // 현금 비목들 (천원 단위를 원 단위로 변환, 인건비는 100만원 단위로 조정)\n          personnelCostCash: fromThousands(budgetForm.personnelCostCash),\n          researchMaterialCostCash: fromThousands(budgetForm.researchMaterialCostCash),\n          researchActivityCostCash: fromThousands(budgetForm.researchActivityCostCash),\n          researchStipendCash: fromThousands(budgetForm.researchStipendCash),\n          indirectCostCash: fromThousands(budgetForm.indirectCostCash),\n          // 현물 비목들 (천원 단위를 원 단위로 변환)\n          personnelCostInKind: fromThousands(budgetForm.personnelCostInKind),\n          researchMaterialCostInKind: fromThousands(budgetForm.researchMaterialCostInKind),\n          researchActivityCostInKind: fromThousands(budgetForm.researchActivityCostInKind),\n          researchStipendInKind: fromThousands(budgetForm.researchStipendInKind),\n          indirectCostInKind: fromThousands(budgetForm.indirectCostInKind)\n        })\n      })\n\n      if (response.ok) {\n        const result = await response.json()\n        showBudgetModal = false\n        budgetForm = {\n          periodNumber: 1,\n          startDate: '',\n          endDate: '',\n          personnelCostCash: '',\n          researchMaterialCostCash: '',\n          researchActivityCostCash: '',\n          researchStipendCash: '',\n          indirectCostCash: '',\n          personnelCostInKind: '',\n          researchMaterialCostInKind: '',\n          researchActivityCostInKind: '',\n          researchStipendInKind: '',\n          indirectCostInKind: ''\n        }\n        await loadProjectBudgets()\n        // 예산 추가 후 프로젝트 기간 정보 업데이트\n        updateProjectPeriodFromBudgets()\n        // 예산 요약 새로고침\n        budgetRefreshTrigger++\n        dispatch('refresh')\n\n        // 성공 메시지 표시\n        if (result.message) {\n          alert(result.message)\n        }\n      } else {\n        const errorData = await response.json()\n        alert(errorData.message || '사업비 추가에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('사업비 추가 실패:', error)\n      alert('사업비 추가 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 멤버 추가\n  async function addMember() {\n    // 참여율 검증\n    if (memberForm.participationRate < 0 || memberForm.participationRate > 100) {\n      alert('참여율은 0-100 사이의 값이어야 합니다.')\n      return\n    }\n\n    try {\n      const response = await fetch('/api/project-management/project-members', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          projectId: selectedProject.id,\n          employeeId: memberForm.employeeId,\n          role: memberForm.role,\n          startDate: memberForm.startDate,\n          endDate: memberForm.endDate,\n          participationRate: memberForm.participationRate,\n          contributionType: memberForm.contributionType\n        })\n      })\n\n      if (response.ok) {\n        addingMember = false\n        resetMemberForm()\n        await loadProjectMembers()\n        dispatch('refresh')\n      } else {\n        const errorData = await response.json()\n        alert(errorData.message || '멤버 추가에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('멤버 추가 실패:', error)\n      alert('멤버 추가 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 멤버 추가 시작\n  function startAddMember() {\n    addingMember = true\n    editingMember = null\n    resetMemberForm()\n  }\n\n  // 멤버 추가 취소\n  function cancelAddMember() {\n    addingMember = false\n    resetMemberForm()\n  }\n\n  // 멤버 수정 시작\n  function editMember(member: any) {\n    editingMember = member\n\n    // 디버깅: 멤버 데이터 확인\n    logger.log('editMember - member data:', member)\n    logger.log('editMember - startDate raw:', getMemberStartDate(member))\n    logger.log('editMember - endDate raw:', getMemberEndDate(member))\n\n    // 날짜 데이터 확인 및 안전한 처리\n    const rawStartDate = getMemberStartDate(member)\n    const rawEndDate = getMemberEndDate(member)\n\n    memberForm = {\n      employeeId: getMemberEmployeeId(member),\n      role: member.role,\n      startDate: rawStartDate ? formatDateForInput(rawStartDate) : '',\n      endDate: rawEndDate ? formatDateForInput(rawEndDate) : '',\n      participationRate: getMemberParticipationRate(member) || 0,\n      monthlyAmount: (getMemberMonthlyAmount(member) || 0).toString(),\n      contributionType: getMemberContributionType(member)\n    }\n\n    // 디버깅: memberForm 확인\n    logger.log('editMember - memberForm after setting:', memberForm)\n\n    // 수정 시 월간금액 자동 계산 (수동 입력 플래그 초기화)\n    isManualMonthlyAmount = false\n    updateMonthlyAmount()\n  }\n\n  // 멤버 폼 초기화\n  function resetMemberForm() {\n    memberForm = {\n      employeeId: '',\n      role: 'researcher',\n      startDate: '',\n      endDate: '',\n      participationRate: 100,\n      monthlyAmount: '0',\n      contributionType: 'cash'\n    }\n    calculatedMonthlyAmount = 0\n    isManualMonthlyAmount = false\n  }\n\n  // 멤버 수정 취소\n  function cancelEditMember() {\n    editingMember = null\n    resetMemberForm()\n  }\n\n  // 멤버 수정 완료\n  async function updateMember() {\n    if (!editingMember) return\n\n    // 참여율 검증\n    if (memberForm.participationRate < 0 || memberForm.participationRate > 100) {\n      alert('참여율은 0-100 사이의 값이어야 합니다.')\n      return\n    }\n\n    // 디버깅: 필드 값 확인\n    logger.log('updateMember - memberForm:', memberForm)\n    logger.log(\n      'updateMember - startDate:',\n      memberForm.startDate,\n      'type:',\n      typeof memberForm.startDate\n    )\n    logger.log('updateMember - endDate:', memberForm.endDate, 'type:', typeof memberForm.endDate)\n\n    // 필수 필드 검증\n    if (!memberForm.startDate || !memberForm.endDate) {\n      alert('참여기간(시작일, 종료일)을 모두 입력해주세요.')\n      return\n    }\n\n    try {\n      logger.log('참여연구원 수정 요청 데이터:', {\n        id: editingMember.id,\n        role: memberForm.role,\n        startDate: memberForm.startDate,\n        endDate: memberForm.endDate,\n        participationRate: memberForm.participationRate,\n        contributionType: memberForm.contributionType\n      })\n\n      const response = await fetch(`/api/project-management/project-members/${editingMember.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          role: memberForm.role,\n          startDate: memberForm.startDate,\n          endDate: memberForm.endDate,\n          participationRate: memberForm.participationRate,\n          contributionType: memberForm.contributionType\n        })\n      })\n\n      logger.log('참여연구원 수정 응답 상태:', response.status)\n\n      if (response.ok) {\n        const result = await response.json()\n        logger.log('참여연구원 수정 성공 응답:', result)\n\n        editingMember = null\n        addingMember = false\n        resetMemberForm()\n\n        // 데이터 새로고침\n        await loadProjectMembers()\n        logger.log('참여연구원 목록 새로고침 완료')\n\n        dispatch('refresh')\n\n        // 성공 메시지 표시\n        if (result.message) {\n          alert(result.message)\n        }\n      } else {\n        const errorData = await response.json()\n        logger.error('참여연구원 수정 API 에러 응답:', errorData)\n        alert(errorData.message || '연구원 정보 수정에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('멤버 수정 실패:', error)\n      alert('연구원 정보 수정 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 멤버 삭제\n  async function removeMember(memberId: string) {\n    if (!confirm('정말로 이 멤버를 제거하시겠습니까?')) return\n\n    try {\n      const response = await fetch(`/api/project-management/project-members/${memberId}`, {\n        method: 'DELETE'\n      })\n\n      if (response.ok) {\n        await loadProjectMembers()\n        dispatch('refresh')\n      }\n    } catch (error) {\n      logger.error('멤버 삭제 실패:', error)\n    }\n  }\n\n  // 사업비 편집\n  function editBudget(budget: any) {\n    editingBudget = budget\n\n    // 중복된 formatDateForInput 함수 제거됨 - 상단의 유틸리티 함수 사용\n\n    budgetForm = {\n      periodNumber: getPeriodNumber(budget),\n      startDate: formatDateForInput(getStartDate(budget)),\n      endDate: formatDateForInput(getEndDate(budget)),\n      // 현금 비목들 (천원 단위로 변환, 인건비는 조정된 값 표시)\n      personnelCostCash: toThousands(getPersonnelCostCash(budget)),\n      researchMaterialCostCash: toThousands(getResearchMaterialCostCash(budget)),\n      researchActivityCostCash: toThousands(getResearchActivityCostCash(budget)),\n      researchStipendCash: toThousands(getResearchStipendCash(budget)),\n      indirectCostCash: toThousands(getIndirectCost(budget)),\n      // 현물 비목들 (천원 단위로 변환)\n      personnelCostInKind: toThousands(getPersonnelCostInKind(budget)),\n      researchMaterialCostInKind: toThousands(getResearchMaterialCostInKind(budget)),\n      researchActivityCostInKind: toThousands(getResearchActivityCostInKind(budget)),\n      researchStipendInKind: toThousands(getResearchStipendInKind(budget)),\n      indirectCostInKind: toThousands(getIndirectCostInKind(budget))\n    }\n    showBudgetModal = true\n  }\n\n  // 사업비 업데이트\n  async function updateBudget() {\n    if (!editingBudget) return\n\n    // 필수 필드 검증\n    if (!budgetForm.startDate || !budgetForm.endDate) {\n      alert('연차 기간(시작일, 종료일)을 모두 입력해주세요.')\n      return\n    }\n\n    // 시작일이 종료일보다 늦은지 검증\n    if (new Date(budgetForm.startDate) >= new Date(budgetForm.endDate)) {\n      alert('시작일은 종료일보다 빨라야 합니다.')\n      return\n    }\n\n    try {\n      const response = await fetch(`/api/project-management/project-budgets/${editingBudget.id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          periodNumber: budgetForm.periodNumber,\n          startDate: budgetForm.startDate,\n          endDate: budgetForm.endDate,\n          // 현금 비목들 (천원 단위를 원 단위로 변환, 인건비는 100만원 단위로 조정)\n          personnelCostCash: fromThousands(budgetForm.personnelCostCash),\n          researchMaterialCostCash: fromThousands(budgetForm.researchMaterialCostCash),\n          researchActivityCostCash: fromThousands(budgetForm.researchActivityCostCash),\n          researchStipendCash: fromThousands(budgetForm.researchStipendCash),\n          indirectCostCash: fromThousands(budgetForm.indirectCostCash),\n          // 현물 비목들 (천원 단위를 원 단위로 변환)\n          personnelCostInKind: fromThousands(budgetForm.personnelCostInKind),\n          researchMaterialCostInKind: fromThousands(budgetForm.researchMaterialCostInKind),\n          researchActivityCostInKind: fromThousands(budgetForm.researchActivityCostInKind),\n          researchStipendInKind: fromThousands(budgetForm.researchStipendInKind),\n          indirectCostInKind: fromThousands(budgetForm.indirectCostInKind)\n        })\n      })\n\n      if (response.ok) {\n        const result = await response.json()\n        showBudgetModal = false\n        editingBudget = null\n        budgetForm = {\n          periodNumber: 1,\n          startDate: '',\n          endDate: '',\n          personnelCostCash: '',\n          researchMaterialCostCash: '',\n          researchActivityCostCash: '',\n          researchStipendCash: '',\n          indirectCostCash: '',\n          personnelCostInKind: '',\n          researchMaterialCostInKind: '',\n          researchActivityCostInKind: '',\n          researchStipendInKind: '',\n          indirectCostInKind: ''\n        }\n        await loadProjectBudgets()\n        // 예산 수정 후 프로젝트 기간 정보 업데이트\n        updateProjectPeriodFromBudgets()\n        // 예산 요약 새로고침\n        budgetRefreshTrigger++\n        dispatch('refresh')\n\n        // 성공 메시지 표시\n        if (result.message) {\n          alert(result.message)\n        }\n      } else {\n        const errorData = await response.json()\n        alert(errorData.message || '사업비 수정에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('사업비 업데이트 실패:', error)\n      alert('사업비 수정 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 사업비 삭제\n  async function removeBudget(budgetId: string) {\n    if (!confirm('정말로 이 사업비 항목을 삭제하시겠습니까?')) return\n\n    try {\n      const response = await fetch(`/api/project-management/project-budgets/${budgetId}`, {\n        method: 'DELETE'\n      })\n\n      if (response.ok) {\n        await loadProjectBudgets()\n        // 예산 삭제 후 프로젝트 기간 정보 업데이트\n        updateProjectPeriodFromBudgets()\n        // 예산 요약 새로고침\n        budgetRefreshTrigger++\n        dispatch('refresh')\n      }\n    } catch (error) {\n      logger.error('사업비 삭제 실패:', error)\n    }\n  }\n\n  // 프로젝트 수정 폼 초기화\n  function initProjectForm() {\n    if (selectedProject) {\n      projectForm = {\n        title: selectedProject.title || '',\n        code: getProjectCode(selectedProject),\n        description: getProjectDescription(selectedProject),\n        status: getProjectStatus(selectedProject),\n        sponsorType: getProjectSponsorType(selectedProject),\n        priority: selectedProject.priority || 'medium',\n        researchType: selectedProject.research_type || selectedProject.researchType || 'applied'\n      }\n    }\n  }\n\n  // 프로젝트 수정\n  async function updateProject() {\n    if (!selectedProject) return\n\n    isUpdating = true\n    try {\n      const response = await fetch(`/api/project-management/projects/${selectedProject.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(projectForm)\n      })\n\n      const result = await response.json()\n\n      if (response.ok && result.success) {\n        // 프로젝트 정보 업데이트\n        selectedProject = { ...selectedProject, ...result.data }\n        showEditProjectModal = false\n\n        // 부모 컴포넌트에 프로젝트 업데이트 이벤트 전송\n        dispatch('project-updated', {\n          projectId: selectedProject.id,\n          updatedProject: result.data\n        })\n\n        alert('프로젝트가 성공적으로 수정되었습니다.')\n      } else {\n        alert(result.message || '프로젝트 수정에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('프로젝트 수정 실패:', error)\n      alert('프로젝트 수정 중 오류가 발생했습니다.')\n    } finally {\n      isUpdating = false\n    }\n  }\n\n  // 삭제 확인 코드 검증\n  function isDeleteCodeValid(): boolean {\n    return deleteConfirmationCode === selectedProject?.code\n  }\n\n  // 프로젝트 삭제\n  async function deleteProject() {\n    if (!selectedProject) return\n\n    // 삭제 확인 코드 검증\n    if (!isDeleteCodeValid()) {\n      alert('프로젝트 코드가 일치하지 않습니다. 정확한 코드를 입력해주세요.')\n      return\n    }\n\n    isDeleting = true\n    try {\n      const response = await fetch(`/api/project-management/projects/${selectedProject.id}`, {\n        method: 'DELETE'\n      })\n\n      const result = await response.json()\n\n      if (response.ok && result.success) {\n        showDeleteConfirmModal = false\n        deleteConfirmationCode = '' // 삭제 후 코드 초기화\n        dispatch('project-deleted', { projectId: selectedProject.id })\n        dispatch('refresh')\n      } else {\n        alert(result.message || '프로젝트 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('프로젝트 삭제 실패:', error)\n      alert('프로젝트 삭제 중 오류가 발생했습니다.')\n    } finally {\n      isDeleting = false\n    }\n  }\n\n  // 월간금액 자동 계산 (참여기간 내 계약 정보 기반)\n  async function calculateMonthlyAmount(\n    employeeId: string,\n    participationRate: number | string,\n    startDate?: string,\n    endDate?: string\n  ): Promise<number> {\n    logger.log('calculateMonthlyAmount 호출:', {\n      employeeId,\n      participationRate,\n      startDate,\n      endDate,\n      type: typeof participationRate\n    })\n\n    // participationRate를 숫자로 변환\n    const rate =\n      typeof participationRate === 'string' ? parseFloat(participationRate) : participationRate\n\n    if (!employeeId || !rate || isNaN(rate)) {\n      logger.log('employeeId 또는 participationRate가 없거나 유효하지 않음:', { employeeId, rate })\n      return 0\n    }\n\n    // 참여기간이 없으면 기본값 사용\n    if (!startDate || !endDate) {\n      logger.log('참여기간이 설정되지 않음')\n      return 0\n    }\n\n    try {\n      // 참여기간 내의 계약 정보 조회\n      const response = await fetch(\n        `/api/project-management/employees/${employeeId}/contract?startDate=${startDate}&endDate=${endDate}`\n      )\n      if (!response.ok) {\n        logger.log('계약 정보 조회 실패:', response.status)\n        return 0\n      }\n\n      const contractData = await response.json()\n      logger.log('계약 정보:', contractData)\n\n      if (!contractData.success || !contractData.data) {\n        logger.log('계약 정보가 없음:', contractData.message)\n        if (contractData.debug) {\n          logger.log('디버그 정보:', contractData.debug)\n        }\n        return 0\n      }\n\n      const contract = contractData.data\n      const annualSalary = parseFloat(contract.annual_salary) || 0\n      logger.log('계약 연봉 (원본):', contract.annual_salary)\n      logger.log('계약 연봉 (변환):', annualSalary)\n\n      if (annualSalary === 0) {\n        logger.log('연봉이 0원임')\n        return 0\n      }\n\n      // 중앙화된 급여 계산 함수 사용\n      const monthlyAmount = calculateMonthlySalary(annualSalary, rate)\n      logger.log('계산된 월간금액:', monthlyAmount)\n\n      return monthlyAmount\n    } catch (error) {\n      logger.error('월간금액 계산 중 오류:', error)\n      return 0\n    }\n  }\n\n  // 월간금액 계산 및 업데이트\n  async function updateMonthlyAmount() {\n    if (\n      !memberForm.employeeId ||\n      !memberForm.participationRate ||\n      !memberForm.startDate ||\n      !memberForm.endDate\n    ) {\n      calculatedMonthlyAmount = 0\n      return\n    }\n\n    // 사용자가 수동으로 월간금액을 입력한 경우 자동 계산하지 않음\n    if (isManualMonthlyAmount) {\n      calculatedMonthlyAmount = parseFloat(memberForm.monthlyAmount) || 0\n      return\n    }\n\n    isCalculatingMonthlyAmount = true\n    try {\n      const amount = await calculateMonthlyAmount(\n        memberForm.employeeId,\n        memberForm.participationRate,\n        memberForm.startDate,\n        memberForm.endDate\n      )\n      calculatedMonthlyAmount = amount\n    } catch (error) {\n      logger.error('월간금액 계산 실패:', error)\n      calculatedMonthlyAmount = 0\n    } finally {\n      isCalculatingMonthlyAmount = false\n    }\n  }\n\n  // 종합 검증 실행\n  async function runComprehensiveValidation() {\n    if (!selectedProject) return\n\n    isRunningValidation = true\n    try {\n      const response = await fetch(\n        `/api/project-management/comprehensive-validation?projectId=${selectedProject.id}&scope=all`\n      )\n      const result = await response.json()\n\n      validationResults = result\n\n      // 검증 히스토리에 추가\n      validationHistory.unshift({\n        timestamp: new Date().toISOString(),\n        projectId: selectedProject.id,\n        results: result\n      })\n\n      // 최대 10개까지만 유지\n      if (validationHistory.length > 10) {\n        validationHistory = validationHistory.slice(0, 10)\n      }\n\n      showValidationModal = true\n    } catch (error) {\n      logger.error('검증 실행 실패:', error)\n      alert('검증 실행 중 오류가 발생했습니다.')\n    } finally {\n      isRunningValidation = false\n    }\n  }\n\n  // 증빙 내역 모달 표시\n  function openEvidenceModal(budget) {\n    selectedBudgetForEvidence = budget\n    showEvidenceModal = true\n    loadEvidenceList(budget.id)\n  }\n\n  async function openEvidenceDetail(item) {\n    selectedEvidenceItem = item\n    showEvidenceDetailModal = true\n\n    // 증빙 항목 상세 정보 로드\n    if (item.id) {\n      try {\n        const response = await fetch(`/api/project-management/evidence/${item.id}`)\n        const result = await response.json()\n\n        if (result.success) {\n          selectedEvidenceItem = result.data\n        }\n      } catch (error) {\n        logger.error('증빙 항목 상세 정보 로드 실패:', error)\n      }\n    }\n  }\n\n  // 증빙 카테고리 로드\n  async function loadEvidenceCategories() {\n    try {\n      const response = await fetch('/api/project-management/evidence-categories')\n      const result = await response.json()\n\n      if (result.success) {\n        evidenceCategories = result.data\n      }\n    } catch (error) {\n      logger.error('증빙 카테고리 로드 실패:', error)\n    }\n  }\n\n  // 증빙 항목 로드 (모든 연차)\n  async function loadEvidenceItems() {\n    if (!selectedProject || projectBudgets.length === 0) return\n\n    try {\n      isLoadingEvidence = true\n      let allEvidenceItems = []\n\n      // 모든 연차의 증빙 데이터를 로드\n      for (const budget of projectBudgets) {\n        const response = await fetch(\n          `/api/project-management/evidence?projectBudgetId=${budget.id}`\n        )\n        const result = await response.json()\n\n        if (result.success) {\n          allEvidenceItems = [...allEvidenceItems, ...result.data]\n        }\n      }\n\n      evidenceItems = allEvidenceItems\n    } catch (error) {\n      logger.error('증빙 항목 로드 실패:', error)\n    } finally {\n      isLoadingEvidence = false\n    }\n  }\n\n  // 증빙 항목 추가\n  async function addEvidenceItem(categoryId, itemData) {\n    try {\n      const currentBudget =\n        projectBudgets.find(b => getPeriodNumber(b) === selectedEvidencePeriod) || projectBudgets[0]\n\n      const response = await fetch('/api/project-management/evidence', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectBudgetId: currentBudget.id,\n          categoryId: categoryId,\n          ...itemData\n        })\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await loadEvidenceItems()\n        return result.data\n      } else {\n        throw new Error(result.message)\n      }\n    } catch (error) {\n      logger.error('증빙 항목 추가 실패:', error)\n      throw error\n    }\n  }\n\n  // 증빙 항목 수정\n  async function updateEvidenceItem(itemId, updateData) {\n    try {\n      const response = await fetch(`/api/project-management/evidence/${itemId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updateData)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await loadEvidenceItems()\n        return result.data\n      } else {\n        throw new Error(result.message)\n      }\n    } catch (error) {\n      logger.error('증빙 항목 수정 실패:', error)\n      throw error\n    }\n  }\n\n  // 증빙 항목 삭제\n  async function deleteEvidenceItem(itemId) {\n    try {\n      const response = await fetch(`/api/project-management/evidence/${itemId}`, {\n        method: 'DELETE'\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await loadEvidenceItems()\n      } else {\n        throw new Error(result.message)\n      }\n    } catch (error) {\n      logger.error('증빙 항목 삭제 실패:', error)\n      throw error\n    }\n  }\n\n  // 증빙 항목 추가 핸들러\n  async function handleAddEvidenceItem() {\n    if (!newEvidenceForm.categoryId || !newEvidenceForm.name || !newEvidenceForm.budgetAmount) {\n      alert('필수 필드를 모두 입력해주세요.')\n      return\n    }\n\n    try {\n      isUpdating = true\n\n      const selectedEmployee = availableEmployees.find(emp => emp.id === newEvidenceForm.assigneeId)\n      const assigneeName = createAssigneeNameFromEmployee(selectedEmployee)\n\n      await addEvidenceItem(newEvidenceForm.categoryId, {\n        name: newEvidenceForm.name,\n        description: newEvidenceForm.description,\n        budgetAmount: parseFloat(newEvidenceForm.budgetAmount),\n        assigneeId: newEvidenceForm.assigneeId,\n        assigneeName: assigneeName,\n        dueDate: newEvidenceForm.dueDate\n      })\n\n      // 폼 초기화\n      newEvidenceForm = {\n        categoryId: '',\n        name: '',\n        description: '',\n        budgetAmount: '',\n        assigneeId: '',\n        dueDate: ''\n      }\n\n      showEvidenceModal = false\n    } catch (error) {\n      logger.error('증빙 항목 추가 실패:', error)\n      alert('증빙 항목 추가에 실패했습니다.')\n    } finally {\n      isUpdating = false\n    }\n  }\n\n  // 증빙 내역 목록 로드\n  async function loadEvidenceList(budgetId) {\n    try {\n      const response = await fetch(\n        `/api/project-management/budget-evidence?projectBudgetId=${budgetId}`\n      )\n      if (response.ok) {\n        const data = await response.json()\n        evidenceList = data.data || []\n      }\n    } catch (error) {\n      logger.error('증빙 내역 로드 실패:', error)\n    }\n  }\n\n  // 증빙 유형 목록 로드\n  async function loadEvidenceTypes() {\n    try {\n      const response = await fetch('/api/project-management/evidence-types')\n      if (response.ok) {\n        const data = await response.json()\n        evidenceTypes = data.data || []\n      }\n    } catch (error) {\n      logger.error('증빙 유형 로드 실패:', error)\n    }\n  }\n\n  // 상태별 색상 반환\n  function getStatusColor(\n    status: string\n  ): 'success' | 'warning' | 'info' | 'error' | 'default' | 'primary' | 'ghost' {\n    switch (status) {\n      case 'active':\n        return 'success'\n      case 'planning':\n        return 'warning'\n      case 'completed':\n        return 'info'\n      case 'cancelled':\n        return 'error'\n      case 'suspended':\n        return 'default'\n      default:\n        return 'default'\n    }\n  }\n\n  // 상태별 텍스트 반환\n  function getStatusText(status: string) {\n    switch (status) {\n      case 'active':\n        return '진행중'\n      case 'planning':\n        return '계획중'\n      case 'completed':\n        return '완료'\n      case 'cancelled':\n        return '취소'\n      case 'suspended':\n        return '중단'\n      default:\n        return status\n    }\n  }\n\n  // 우선순위별 색상 반환\n  function getPriorityColor(\n    priority: string\n  ): 'success' | 'warning' | 'info' | 'error' | 'default' | 'primary' | 'ghost' {\n    switch (priority) {\n      case 'critical':\n        return 'error'\n      case 'high':\n        return 'warning'\n      case 'medium':\n        return 'info'\n      case 'low':\n        return 'default'\n      default:\n        return 'default'\n    }\n  }\n\n  // 우선순위별 텍스트 반환\n  function getPriorityText(priority: string) {\n    switch (priority) {\n      case 'critical':\n        return '긴급'\n      case 'high':\n        return '높음'\n      case 'medium':\n        return '보통'\n      case 'low':\n        return '낮음'\n      default:\n        return priority\n    }\n  }\n\n  // 스폰서 유형별 텍스트 반환\n  function getSponsorTypeText(sponsorType: string) {\n    switch (sponsorType) {\n      case 'government':\n        return '정부'\n      case 'private':\n        return '민간'\n      case 'internal':\n        return '내부'\n      default:\n        return sponsorType\n    }\n  }\n\n  // 연구 유형별 텍스트 반환\n  function getResearchTypeText(researchType: string) {\n    switch (researchType) {\n      case 'basic':\n        return '기초연구'\n      case 'applied':\n        return '응용연구'\n      case 'development':\n        return '개발연구'\n      default:\n        return researchType\n    }\n  }\n\n  // 연차 기간 계산 (개월 수)\n  function calculatePeriodMonths(startDate: string, endDate: string): number {\n    if (!startDate || !endDate) return 0\n\n    const start = new Date(startDate)\n    const end = new Date(endDate)\n    const diffTime = Math.abs(end.getTime() - start.getTime())\n    const diffMonths = Math.ceil(diffTime / (1000 * 60 * 60 * 24 * 30.44)) // 평균 월 일수\n\n    return diffMonths\n  }\n\n  // 천원 단위로 변환 (입력용)\n  function toThousands(value: string | number): string {\n    const num = typeof value === 'string' ? parseFloat(value) : value\n    return (num / 1000).toString()\n  }\n\n  // 천원 단위에서 원 단위로 변환 (저장용)\n  function fromThousands(value: string): number {\n    const num = parseFloat(value) || 0\n    return num * 1000\n  }\n\n  // 사업비 합계 계산\n  function calculateBudgetTotals() {\n    if (!projectBudgets || projectBudgets.length === 0) {\n      return {\n        personnelCash: 0,\n        personnelInKind: 0,\n        researchMaterialCash: 0,\n        researchMaterialInKind: 0,\n        researchActivityCash: 0,\n        researchActivityInKind: 0,\n        indirectCash: 0,\n        indirectInKind: 0,\n        totalCash: 0,\n        totalInKind: 0,\n        totalBudget: 0\n      }\n    }\n\n    const totals = projectBudgets.reduce(\n      (acc, budget) => {\n        // 모든 항목을 예산 편성 데이터에서 직접 가져오기 (미래 기간 구분 없이)\n        acc.personnelCash += parseFloat(budget.personnel_cost_cash) || 0\n        acc.personnelInKind += parseFloat(budget.personnel_cost_in_kind) || 0\n        acc.researchMaterialCash += parseFloat(budget.research_material_cost_cash) || 0\n        acc.researchMaterialInKind += parseFloat(budget.research_material_cost_in_kind) || 0\n        acc.researchActivityCash += parseFloat(budget.research_activity_cost_cash) || 0\n        acc.researchActivityInKind += parseFloat(budget.research_activity_cost_in_kind) || 0\n        acc.researchStipendCash += parseFloat(budget.research_stipend_cash) || 0\n        acc.researchStipendInKind += parseFloat(budget.research_stipend_in_kind) || 0\n        acc.indirectCash += parseFloat(budget.indirect_cost_cash) || 0\n        acc.indirectInKind += parseFloat(budget.indirect_cost_in_kind) || 0\n\n        return acc\n      },\n      {\n        personnelCash: 0,\n        personnelInKind: 0,\n        researchMaterialCash: 0,\n        researchMaterialInKind: 0,\n        researchActivityCash: 0,\n        researchActivityInKind: 0,\n        researchStipendCash: 0,\n        researchStipendInKind: 0,\n        indirectCash: 0,\n        indirectInKind: 0,\n        totalBudget: 0,\n        totalSpent: 0\n      }\n    )\n\n    // 총 예산은 각 비목의 합계로 직접 계산 (reduce 외부에서)\n    totals.totalBudget =\n      totals.personnelCash +\n      totals.personnelInKind +\n      totals.researchMaterialCash +\n      totals.researchMaterialInKind +\n      totals.researchActivityCash +\n      totals.researchActivityInKind +\n      totals.researchStipendCash +\n      totals.researchStipendInKind +\n      totals.indirectCash +\n      totals.indirectInKind\n\n    totals.totalCash =\n      totals.personnelCash +\n      totals.researchMaterialCash +\n      totals.researchActivityCash +\n      totals.researchStipendCash +\n      totals.indirectCash\n    totals.totalInKind =\n      totals.personnelInKind +\n      totals.researchMaterialInKind +\n      totals.researchActivityInKind +\n      totals.researchStipendInKind +\n      totals.indirectInKind\n\n    return totals\n  }\n\n  // 인건비 요약 계산 (해당 연차의 인건비 합계 및 월별 상세)\n  function calculatePersonnelCostSummary() {\n    if (\n      !projectMembers ||\n      projectMembers.length === 0 ||\n      !projectBudgets ||\n      projectBudgets.length === 0\n    ) {\n      return {\n        totalCash: 0,\n        totalInKind: 0,\n        totalCost: 0,\n        monthlyCosts: [],\n        periodInfo: null\n      }\n    }\n\n    // 현재 연차의 첫 번째 사업비 정보를 기준으로 기간 설정\n    const currentBudget = projectBudgets[0]\n    if (!currentBudget.start_date || !currentBudget.end_date) {\n      return {\n        totalCash: 0,\n        totalInKind: 0,\n        totalCost: 0,\n        monthlyCosts: [],\n        periodInfo: null\n      }\n    }\n\n    const startDate = new Date(currentBudget.start_date)\n    const endDate = new Date(currentBudget.end_date)\n\n    let totalCash = 0\n    let totalInKind = 0\n    const monthlyCosts = []\n\n    // 월별 데이터 생성\n    const currentDate = new Date(startDate)\n    let monthIndex = 1\n\n    while (currentDate <= endDate) {\n      const year = currentDate.getFullYear()\n      const month = currentDate.getMonth() + 1\n      const monthName = currentDate.toLocaleDateString('ko-KR', { year: 'numeric', month: 'long' })\n\n      let monthlyCash = 0\n      let monthlyInKind = 0\n\n      // 각 멤버의 해당 월 인건비 계산\n      projectMembers.forEach(member => {\n        const memberStartDate = new Date(member.startDate || member.start_date)\n        const memberEndDate = new Date(member.endDate || member.end_date)\n        const monthStart = new Date(year, month - 1, 1)\n        const monthEnd = new Date(year, month, 0) // 해당 월의 마지막 날\n\n        // 해당 월에 참여하는지 확인\n        if (memberStartDate <= monthEnd && memberEndDate >= monthStart) {\n          const memberMonthlyCost = parseFloat(member.monthlyAmount || member.monthly_amount) || 0\n\n          if ((member.contributionType || member.contribution_type) === 'cash') {\n            monthlyCash += memberMonthlyCost\n          } else {\n            monthlyInKind += memberMonthlyCost\n          }\n        }\n      })\n\n      monthlyCosts.push({\n        month: monthIndex,\n        year: year,\n        monthNumber: month,\n        monthName: monthName,\n        cash: monthlyCash,\n        inKind: monthlyInKind,\n        total: monthlyCash + monthlyInKind\n      })\n\n      // 다음 달로 이동\n      currentDate.setMonth(currentDate.getMonth() + 1)\n      monthIndex++\n    }\n\n    // 총합 계산\n    totalCash = monthlyCosts.reduce((sum, month) => sum + month.cash, 0)\n    totalInKind = monthlyCosts.reduce((sum, month) => sum + month.inKind, 0)\n    const totalCost = totalCash + totalInKind\n\n    return {\n      totalCash,\n      totalInKind,\n      totalCost,\n      monthlyCosts,\n      periodInfo: {\n        startDate: getStartDate(currentBudget),\n        endDate: getEndDate(currentBudget),\n        periodNumber: getPeriodNumber(currentBudget)\n      }\n    }\n  }\n\n  // 초기화\n  $effect(() => {\n    if (selectedProject && selectedProject.id) {\n      loadProjectMembers()\n      loadProjectBudgets()\n      loadBudgetCategories()\n      loadAvailableEmployees()\n      loadEvidenceTypes()\n      loadEvidenceCategories()\n    }\n  })\n\n  // Svelte 5: 증빙 데이터 로드\n  $effect(() => {\n    if (selectedProject && projectBudgets.length > 0) {\n      loadEvidenceItems()\n    }\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n{#if selectedProject}\n  <div class=\"space-y-6\">\n    <!-- 프로젝트 기본 정보 -->\n    <ThemeCard class=\"p-6\">\n      <!-- 헤더: 제목과 액션 버튼 -->\n      <div class=\"flex items-start justify-between mb-6\">\n        <div class=\"flex-1\">\n          <!-- 프로젝트 제목과 코드 -->\n          <div class=\"flex items-center gap-3 mb-3\">\n            <h2 class=\"text-2xl font-bold text-gray-900\">{selectedProject.title}</h2>\n            <span class=\"text-sm text-gray-500 font-mono\">{selectedProject.code}</span>\n          </div>\n\n          <!-- 상태 및 우선순위 태그 -->\n          <div class=\"flex items-center gap-2 mb-3\">\n            <ThemeBadge variant={getStatusColor(selectedProject.status)} size=\"md\">\n              {getStatusText(selectedProject.status)}\n            </ThemeBadge>\n            <ThemeBadge variant={getPriorityColor(selectedProject.priority)} size=\"md\">\n              {getPriorityText(selectedProject.priority)}\n            </ThemeBadge>\n            <ThemeBadge variant=\"info\" size=\"md\">\n              {getSponsorTypeText(selectedProject.sponsor_type || selectedProject.sponsorType)}\n            </ThemeBadge>\n            <ThemeBadge variant=\"primary\" size=\"md\">\n              {getResearchTypeText(selectedProject.research_type || selectedProject.researchType)}\n            </ThemeBadge>\n          </div>\n\n          {#if selectedProject.description}\n            <p class=\"text-gray-700 mb-3\">{selectedProject.description}</p>\n          {/if}\n\n          <!-- 프로젝트 기간 (연차 정보 기반) -->\n          <div class=\"flex items-center text-sm text-gray-600\">\n            <CalendarIcon size={16} class=\"mr-2 text-orange-600\" />\n            <span id=\"project-period\">연차 정보를 불러오는 중...</span>\n          </div>\n        </div>\n\n        <!-- 액션 버튼 -->\n        <div class=\"flex gap-2 ml-4\">\n          <ThemeButton\n            variant=\"primary\"\n            size=\"sm\"\n            onclick={() => {\n              initProjectForm()\n              showEditProjectModal = true\n            }}\n          >\n            <EditIcon size={16} class=\"mr-2\" />\n            정보 수정\n          </ThemeButton>\n          <ThemeButton variant=\"primary\" size=\"sm\" onclick={() => dispatch('showBudgetModal')}>\n            <DollarSignIcon size={16} class=\"mr-2\" />\n            예산 수정\n          </ThemeButton>\n          <ThemeButton variant=\"error\" size=\"sm\" onclick={() => (showDeleteConfirmModal = true)}>\n            <TrashIcon size={16} class=\"mr-2\" />\n            삭제\n          </ThemeButton>\n        </div>\n      </div>\n\n      <!-- 사업비 예산 -->\n      <div class=\"bg-gray-50 rounded-lg p-6\">\n        {#await import('$lib/components/project-management/ProjectBudgetSummary.svelte')}\n          <div class=\"flex items-center justify-center py-4\">\n            <div class=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n            <span class=\"ml-2 text-gray-600 text-sm\">로딩 중...</span>\n          </div>\n        {:then { default: ProjectBudgetSummary }}\n          <ProjectBudgetSummary\n            projectId={selectedProject.id}\n            compact={true}\n            refreshTrigger={budgetRefreshTrigger}\n          />\n        {:catch error}\n          <div class=\"text-center py-4 text-gray-500\">\n            <p class=\"text-sm\">예산 정보를 불러올 수 없습니다.</p>\n          </div>\n        {/await}\n      </div>\n    </ThemeCard>\n\n    <!-- 연차별 사업비 관리 -->\n    <ThemeCard class=\"p-6\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h3 class=\"text-lg font-semibold text-gray-900\">연구개발비</h3>\n        <div class=\"flex gap-2\">\n          <ThemeButton\n            onclick={runComprehensiveValidation}\n            size=\"sm\"\n            disabled={isRunningValidation}\n          >\n            <ShieldCheckIcon size={16} class=\"mr-2\" />\n            {isRunningValidation ? '검증 중...' : '검증 실행'}\n          </ThemeButton>\n          <ThemeButton onclick={() => (showBudgetModal = true)} size=\"sm\">\n            <PlusIcon size={16} class=\"mr-2\" />\n            사업비 추가\n          </ThemeButton>\n        </div>\n      </div>\n\n      <!-- 단위 안내 -->\n      <div class=\"mb-4 p-3 bg-gray-50 border border-gray-200 rounded-lg\">\n        <div class=\"flex items-center justify-between\">\n          <div class=\"text-sm text-gray-700\">\n            <span class=\"font-medium\">금액 단위: 천원</span>\n            <span class=\"ml-4 text-gray-600\"> (현금) | (현물) </span>\n          </div>\n          <div class=\"text-xs text-gray-600\">예: 1,000 = 1,000천원</div>\n        </div>\n      </div>\n\n      <div class=\"overflow-x-auto\">\n        <table class=\"w-full divide-y divide-gray-200\" style:min-width=\"100%\">\n          <thead class=\"bg-gray-50\">\n            <tr>\n              <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24\"\n              >연차</th\n              >\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <div>인건비</div>\n              </th>\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <div>연구재료비</div>\n              </th>\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <div>연구활동비</div>\n              </th>\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <div>연구수당</div>\n              </th>\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <div>간접비</div>\n              </th>\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <div>총 예산</div>\n              </th>\n              <th class=\"px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-32\"\n              >액션</th\n              >\n            </tr>\n          </thead>\n          <tbody class=\"bg-white divide-y divide-gray-200\">\n            {#each projectBudgets as budget, i (i)}\n              {@const totalBudget =\n                getPersonnelCostCash(budget) +\n                  getPersonnelCostInKind(budget) +\n                  getResearchMaterialCostCash(budget) +\n                  getResearchMaterialCostInKind(budget) +\n                  getResearchActivityCostCash(budget) +\n                  getResearchActivityCostInKind(budget) +\n                  getResearchStipendCash(budget) +\n                  getResearchStipendInKind(budget) +\n                  getIndirectCostCash(budget) +\n                  getIndirectCostInKind(budget)}\n              {@const personnelCash = Number(getPersonnelCostCash(budget)) || 0}\n              {@const materialCash = Number(getResearchMaterialCostCash(budget)) || 0}\n              {@const activityCash = Number(getResearchActivityCostCash(budget)) || 0}\n              {@const stipendCash = Number(getResearchStipendCash(budget)) || 0}\n              {@const indirectCash = Number(getIndirectCostCash(budget)) || 0}\n              {@const cashTotal =\n                personnelCash + materialCash + activityCash + stipendCash + indirectCash}\n              {@const personnelInKind = Number(getPersonnelCostInKind(budget)) || 0}\n              {@const materialInKind = Number(getResearchMaterialCostInKind(budget)) || 0}\n              {@const activityInKind = Number(getResearchActivityCostInKind(budget)) || 0}\n              {@const stipendInKind = Number(getResearchStipendInKind(budget)) || 0}\n              {@const indirectInKind = Number(getIndirectCostInKind(budget)) || 0}\n              {@const inKindTotal =\n                personnelInKind + materialInKind + activityInKind + stipendInKind + indirectInKind}\n              <tr class=\"hover:bg-gray-50\">\n                <!-- 연차 -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 w-24\">\n                  <div class=\"text-sm cursor-help\" title={formatPeriodTooltip(budget)}>\n                    <div class=\"font-medium\">{formatPeriodDisplay(budget)}</div>\n                    <div class=\"text-xs text-gray-500 mt-1\">현금 | 현물</div>\n                  </div>\n                </td>\n                <!-- 인건비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(personnelCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(personnelInKind, false)}\n                    </div>\n                  </div>\n                </td>\n                <!-- 연구재료비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(materialCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">{formatCurrency(materialInKind, false)}</div>\n                  </div>\n                </td>\n                <!-- 연구활동비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(activityCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">{formatCurrency(activityInKind, false)}</div>\n                  </div>\n                </td>\n                <!-- 연구수당 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(stipendCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">{formatCurrency(stipendInKind, false)}</div>\n                  </div>\n                </td>\n                <!-- 간접비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(indirectCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">{formatCurrency(indirectInKind, false)}</div>\n                  </div>\n                </td>\n                <!-- 총 예산 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900 text-right\"\n                >\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-semibold\">\n                      {formatCurrency(cashTotal, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600 font-semibold\">\n                      {formatCurrency(inKindTotal, false)}\n                    </div>\n                  </div>\n                </td>\n                <!-- 액션 -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm font-medium w-32\">\n                  <div class=\"flex space-x-1 justify-center\">\n                    <ThemeButton variant=\"ghost\" size=\"sm\" onclick={() => editBudget(budget)}>\n                      <EditIcon size={16} class=\"text-blue-600 mr-1\" />\n                      수정\n                    </ThemeButton>\n                    <ThemeButton variant=\"ghost\" size=\"sm\" onclick={() => removeBudget(budget.id)}>\n                      <TrashIcon size={16} class=\"text-red-600 mr-1\" />\n                      삭제\n                    </ThemeButton>\n                  </div>\n                </td>\n              </tr>\n            {:else}\n              <tr>\n                <td colspan=\"7\" class=\"px-4 py-12 text-center text-gray-500\">\n                  <DollarSignIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n                  <p>등록된 사업비가 없습니다.</p>\n                </td>\n              </tr>\n            {/each}\n\n            <!-- 합계 행 -->\n            {#if projectBudgets && projectBudgets.length > 0}\n              {@const totals = calculateBudgetTotals()}\n              <tr class=\"bg-gray-100 border-t-2 border-gray-300\">\n                <!-- 연차 -->\n                <td class=\"px-6 py-6 whitespace-nowrap text-sm text-gray-900 w-24\">\n                  <div class=\"text-center\">\n                    <div class=\"font-medium\">합계</div>\n                    <div class=\"text-xs text-gray-600\">{projectBudgets.length}개 연차</div>\n                  </div>\n                </td>\n                <!-- 인건비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(totals.personnelCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(totals.personnelInKind, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-800 font-medium border-t pt-2\">\n                      소계: {formatCurrency(\n                        (totals.personnelCash || 0) + (totals.personnelInKind || 0),\n                        false\n                      )}\n                    </div>\n                  </div>\n                </td>\n                <!-- 연구재료비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(totals.researchMaterialCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(totals.researchMaterialInKind, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-800 font-medium border-t pt-2\">\n                      소계: {formatCurrency(\n                        (totals.researchMaterialCash || 0) + (totals.researchMaterialInKind || 0),\n                        false\n                      )}\n                    </div>\n                  </div>\n                </td>\n                <!-- 연구활동비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(totals.researchActivityCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(totals.researchActivityInKind, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-800 font-medium border-t pt-2\">\n                      소계: {formatCurrency(\n                        (totals.researchActivityCash || 0) + (totals.researchActivityInKind || 0),\n                        false\n                      )}\n                    </div>\n                  </div>\n                </td>\n                <!-- 연구수당 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(totals.researchStipendCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(totals.researchStipendInKind, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-800 font-medium border-t pt-2\">\n                      소계: {formatCurrency(\n                        (totals.researchStipendCash || 0) + (totals.researchStipendInKind || 0),\n                        false\n                      )}\n                    </div>\n                  </div>\n                </td>\n                <!-- 간접비 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(totals.indirectCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(totals.indirectInKind, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-800 font-medium border-t pt-2\">\n                      소계: {formatCurrency(\n                        (totals.indirectCash || 0) + (totals.indirectInKind || 0),\n                        false\n                      )}\n                    </div>\n                  </div>\n                </td>\n                <!-- 총 예산 (현금/현물) -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  <div class=\"space-y-2\">\n                    <div class=\"text-sm text-blue-600 font-medium\">\n                      {formatCurrency(totals.totalCash, false)}\n                    </div>\n                    <div class=\"text-sm text-gray-600\">\n                      {formatCurrency(totals.totalInKind, false)}\n                    </div>\n                    <div class=\"text-base text-gray-900 font-bold border-t-2 pt-2\">\n                      총계: {formatCurrency(totals.totalBudget, false)}\n                    </div>\n                  </div>\n                </td>\n                <!-- 액션 -->\n                <td class=\"px-4 py-4 whitespace-nowrap text-sm font-medium w-32\">\n                  <div class=\"text-sm text-gray-500 text-center\">-</div>\n                </td>\n              </tr>\n            {/if}\n          </tbody>\n        </table>\n      </div>\n    </ThemeCard>\n  </div>\n\n  <!-- 사업비 추가/편집 모달 -->\n  <ThemeModal\n    open={showBudgetModal}\n    onclose={() => {\n      showBudgetModal = false\n      editingBudget = null\n      budgetForm = {\n        periodNumber: 1,\n        startDate: '',\n        endDate: '',\n        personnelCostCash: '',\n        researchMaterialCostCash: '',\n        researchActivityCostCash: '',\n        researchStipendCash: '',\n        indirectCostCash: '',\n        personnelCostInKind: '',\n        researchMaterialCostInKind: '',\n        researchActivityCostInKind: '',\n        researchStipendInKind: '',\n        indirectCostInKind: ''\n      }\n    }}\n    size=\"lg\"\n  >\n    <div class=\"space-y-6\">\n      <!-- 모달 제목 -->\n      <div class=\"flex justify-between items-center mb-4\">\n        <h3 class=\"text-lg font-semibold text-gray-900\">\n          {editingBudget ? '사업비 편집' : '사업비 추가'}\n        </h3>\n      </div>\n\n      <!-- 기본 정보 -->\n      <div class=\"space-y-4\">\n        <div class=\"grid grid-cols-3 gap-4\">\n          <div>\n            <label\n              for=\"pm-budget-period-number\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\">연차 번호 *</label\n            >\n            <input\n              id=\"pm-budget-period-number\"\n              type=\"number\"\n              bind:value={budgetForm.periodNumber}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              min=\"1\"\n              max=\"10\"\n            />\n          </div>\n          <div>\n            <label\n              for=\"pm-budget-start-date\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >시작일 *</label\n            >\n            <input\n              id=\"pm-budget-start-date\"\n              type=\"date\"\n              bind:value={budgetForm.startDate}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label\n              for=\"pm-budget-end-date\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >종료일 *</label\n            >\n            <input\n              id=\"pm-budget-end-date\"\n              type=\"date\"\n              bind:value={budgetForm.endDate}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <!-- 직접비 -->\n      <div class=\"space-y-4\">\n        <h4 class=\"text-lg font-medium text-gray-900\">직접비</h4>\n\n        <!-- 인건비 -->\n        <div class=\"space-y-2\">\n          <div class=\"block text-sm font-medium text-gray-700\">인건비</div>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"pm-budget-personnel-cash\"\n                class=\"block text-xs text-gray-500 mb-1\"\n              >현금 (천원)</label\n              >\n              <input\n                id=\"pm-budget-personnel-cash\"\n                type=\"number\"\n                bind:value={budgetForm.personnelCostCash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"pm-budget-personnel-in-kind\"\n                class=\"block text-xs text-gray-500 mb-1\"\n              >현물 (천원)</label\n              >\n              <input\n                id=\"pm-budget-personnel-in-kind\"\n                type=\"number\"\n                bind:value={budgetForm.personnelCostInKind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <!-- 연구재료비 -->\n        <div class=\"space-y-2\">\n          <div class=\"block text-sm font-medium text-gray-700\">연구재료비</div>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"pm-budget-research-material-cash\"\n                class=\"block text-xs text-gray-500 mb-1\"\n              >현금 (천원)</label\n              >\n              <input\n                id=\"pm-budget-research-material-cash\"\n                type=\"number\"\n                bind:value={budgetForm.researchMaterialCostCash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"pm-budget-research-material-in-kind\"\n                class=\"block text-xs text-gray-500 mb-1\">현물 (천원)</label\n              >\n              <input\n                id=\"pm-budget-research-material-in-kind\"\n                type=\"number\"\n                bind:value={budgetForm.researchMaterialCostInKind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <!-- 연구활동비 -->\n        <div class=\"space-y-2\">\n          <div class=\"block text-sm font-medium text-gray-700\">연구활동비</div>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"pm-budget-research-activity-cash\"\n                class=\"block text-xs text-gray-500 mb-1\"\n              >현금 (천원)</label\n              >\n              <input\n                id=\"pm-budget-research-activity-cash\"\n                type=\"number\"\n                bind:value={budgetForm.researchActivityCostCash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"pm-budget-research-activity-in-kind\"\n                class=\"block text-xs text-gray-500 mb-1\">현물 (천원)</label\n              >\n              <input\n                id=\"pm-budget-research-activity-in-kind\"\n                type=\"number\"\n                bind:value={budgetForm.researchActivityCostInKind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 연구수당 -->\n      <div class=\"space-y-4\">\n        <h4 class=\"text-lg font-medium text-gray-900\">연구수당</h4>\n        <div class=\"space-y-2\">\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"pm-budget-research-stipend-cash\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                연구수당 (현금)\n              </label>\n              <input\n                id=\"pm-budget-research-stipend-cash\"\n                type=\"number\"\n                bind:value={budgetForm.researchStipendCash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"pm-budget-research-stipend-in-kind\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                연구수당 (현물)\n              </label>\n              <input\n                id=\"pm-budget-research-stipend-in-kind\"\n                type=\"number\"\n                bind:value={budgetForm.researchStipendInKind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 간접비 -->\n      <div class=\"space-y-4\">\n        <h4 class=\"text-lg font-medium text-gray-900\">간접비</h4>\n        <div class=\"space-y-2\">\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"pm-budget-indirect-cash\"\n                class=\"block text-xs text-gray-500 mb-1\"\n              >현금 (천원)</label\n              >\n              <input\n                id=\"pm-budget-indirect-cash\"\n                type=\"number\"\n                bind:value={budgetForm.indirectCostCash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"pm-budget-indirect-in-kind\"\n                class=\"block text-xs text-gray-500 mb-1\"\n              >현물 (천원)</label\n              >\n              <input\n                id=\"pm-budget-indirect-in-kind\"\n                type=\"number\"\n                bind:value={budgetForm.indirectCostInKind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"0\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"flex justify-end space-x-3 mt-6\">\n      <ThemeButton\n        variant=\"ghost\"\n        onclick={() => {\n          showBudgetModal = false\n          editingBudget = null\n          budgetForm = {\n            periodNumber: 1,\n            startDate: '',\n            endDate: '',\n            personnelCostCash: '',\n            researchMaterialCostCash: '',\n            researchActivityCostCash: '',\n            researchStipendCash: '',\n            indirectCostCash: '',\n            personnelCostInKind: '',\n            researchMaterialCostInKind: '',\n            researchActivityCostInKind: '',\n            researchStipendInKind: '',\n            indirectCostInKind: ''\n          }\n        }}\n      >\n        취소\n      </ThemeButton>\n      <ThemeButton onclick={editingBudget ? updateBudget : addBudget}>\n        {editingBudget ? '수정' : '추가'}\n      </ThemeButton>\n    </div>\n  </ThemeModal>\n\n  <!-- 연구원 추가 폼 카드 -->\n  {#if addingMember}\n    <ThemeCard class=\"p-6 mb-6 border-green-200 bg-gradient-to-r from-green-50 to-emerald-50\">\n      <div class=\"flex items-center mb-4\">\n        <div class=\"w-1 h-6 bg-green-500 rounded-full mr-3\"></div>\n        <h3 class=\"text-lg font-semibold text-green-800\">연구원 추가</h3>\n      </div>\n\n      <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <!-- 연구원 선택 -->\n        <div>\n          <label\n            for=\"member-employee-select\"\n            class=\"block text-sm font-medium text-gray-700 mb-2\"\n          >연구원</label\n          >\n          <select\n            id=\"member-employee-select\"\n            bind:value={memberForm.employeeId}\n            class=\"w-full px-3 py-2 border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm font-medium bg-white shadow-sm\"\n            onchange={() => {\n              isManualMonthlyAmount = false\n              updateMonthlyAmount()\n            }}\n          >\n            <option value=\"\">👥 연구원 선택 ({availableEmployees.length}명)</option>\n            {#each availableEmployees as employee, i (i)}\n              <option value={employee.id}\n              >{formatKoreanName(employee.name)} ({employee.department})</option\n              >\n            {/each}\n          </select>\n        </div>\n\n        <!-- 역할 -->\n        <div>\n          <label\n            for=\"member-role-select\"\n            class=\"block text-sm font-medium text-gray-700 mb-2\"\n          >역할</label\n          >\n          <select\n            id=\"member-role-select\"\n            bind:value={memberForm.role}\n            class=\"w-full px-3 py-2 border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm font-medium bg-white shadow-sm\"\n          >\n            <option value=\"researcher\">👨‍🔬 연구원</option>\n            <option value=\"lead\">👑 연구책임자</option>\n            <option value=\"support\">🤝 지원</option>\n          </select>\n        </div>\n\n        <!-- 참여율 -->\n        <div>\n          <label\n            for=\"member-participation-rate\"\n            class=\"block text-sm font-medium text-gray-700 mb-2\">참여율</label\n          >\n          <div class=\"relative\">\n            <input\n              id=\"member-participation-rate\"\n              type=\"number\"\n              bind:value={memberForm.participationRate}\n              class=\"w-full px-3 py-2 pr-8 border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm font-medium bg-white shadow-sm\"\n              min=\"0\"\n              max=\"100\"\n              step=\"0.1\"\n              placeholder=\"100\"\n              oninput={e => {\n                const target = e.target as HTMLInputElement\n                const value = parseFloat(target.value)\n                if (value < 0) memberForm.participationRate = 0\n                if (value > 100) memberForm.participationRate = 100\n                isManualMonthlyAmount = false\n                updateMonthlyAmount()\n              }}\n            />\n            <span class=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500 pointer-events-none\"\n            >%</span\n            >\n          </div>\n        </div>\n\n        <!-- 기여 유형 -->\n        <div>\n          <label\n            for=\"member-contribution-type\"\n            class=\"block text-sm font-medium text-gray-700 mb-2\"\n          >기여 유형</label\n          >\n          <select\n            id=\"member-contribution-type\"\n            bind:value={memberForm.contributionType}\n            class=\"w-full px-3 py-2 border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm font-medium bg-white shadow-sm\"\n          >\n            <option value=\"cash\">💰 현금</option>\n            <option value=\"in_kind\">📦 현물</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mt-4\">\n        <!-- 월간금액 -->\n        <div>\n          <label\n            for=\"member-monthly-amount\"\n            class=\"block text-sm font-medium text-gray-700 mb-2\"\n          >월간금액</label\n          >\n          <div class=\"flex items-center space-x-2\">\n            <input\n              id=\"member-monthly-amount\"\n              type=\"number\"\n              bind:value={memberForm.monthlyAmount}\n              oninput={() => {\n                isManualMonthlyAmount = true\n                calculatedMonthlyAmount = parseFloat(memberForm.monthlyAmount) || 0\n              }}\n              class=\"flex-1 px-3 py-2 border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm font-medium bg-white shadow-sm\"\n              placeholder=\"0\"\n            />\n            <div class=\"text-sm min-w-0\">\n              {#if isCalculatingMonthlyAmount}\n                <div class=\"flex items-center text-blue-600\">\n                  <div class=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600 mr-2\"\n                  ></div>\n                  계산 중...\n                </div>\n              {:else if calculatedMonthlyAmount > 0 && !isManualMonthlyAmount}\n                <div class=\"flex items-center text-green-600\">\n                  <div class=\"w-2 h-2 bg-green-500 rounded-full mr-2\"></div>\n                  <span class=\"font-medium\">자동: {formatCurrency(calculatedMonthlyAmount)}</span>\n                </div>\n              {:else if isManualMonthlyAmount}\n                <div class=\"flex items-center text-purple-600\">\n                  <div class=\"w-2 h-2 bg-purple-500 rounded-full mr-2\"></div>\n                  <span class=\"font-medium\">수동 입력</span>\n                </div>\n              {:else if memberForm.employeeId && memberForm.participationRate && memberForm.startDate && memberForm.endDate}\n                <div class=\"flex items-center text-blue-600\">\n                  <div class=\"w-2 h-2 bg-blue-500 rounded-full mr-2\"></div>\n                  <span>계산 가능</span>\n                </div>\n              {:else}\n                <div class=\"flex items-center text-gray-400\">\n                  <div class=\"w-2 h-2 bg-gray-400 rounded-full mr-2\"></div>\n                  <span>자동 계산</span>\n                </div>\n              {/if}\n            </div>\n          </div>\n        </div>\n\n        <!-- 참여기간 -->\n        <div>\n          <div class=\"block text-sm font-medium text-gray-700 mb-2\">참여기간</div>\n          <div class=\"flex space-x-2\">\n            <div class=\"flex-1\">\n              <label for=\"member-start-date\" class=\"sr-only\">시작일</label>\n              <input\n                id=\"member-start-date\"\n                type=\"date\"\n                bind:value={memberForm.startDate}\n                class=\"w-full px-3 py-2 border border-green-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white shadow-sm\"\n                onchange={() => {\n                  isManualMonthlyAmount = false\n                  updateMonthlyAmount()\n                }}\n              />\n            </div>\n            <div class=\"flex-1\">\n              <label for=\"member-end-date\" class=\"sr-only\">종료일</label>\n              <input\n                id=\"member-end-date\"\n                type=\"date\"\n                bind:value={memberForm.endDate}\n                class=\"w-full px-3 py-2 border border-green-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500 bg-white shadow-sm\"\n                onchange={() => {\n                  isManualMonthlyAmount = false\n                  updateMonthlyAmount()\n                }}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 폼 검증 메시지 -->\n      {#if !memberForm.employeeId || !memberForm.startDate || !memberForm.endDate}\n        <div class=\"mt-4 p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n          <div class=\"flex items-center\">\n            <div class=\"w-5 h-5 text-amber-600 mr-2\">⚠️</div>\n            <div class=\"text-sm text-amber-800\">\n              {#if !memberForm.employeeId}\n                연구원을 선택해주세요.\n              {:else if !memberForm.startDate || !memberForm.endDate}\n                참여기간을 입력해주세요.\n              {/if}\n            </div>\n          </div>\n        </div>\n      {/if}\n\n      <!-- 액션 버튼 -->\n      <div class=\"flex justify-end space-x-3 mt-6\">\n        <ThemeButton variant=\"secondary\" onclick={cancelAddMember} class=\"px-6 py-2\">\n          <XIcon size={16} class=\"mr-2\" />\n          취소\n        </ThemeButton>\n        <ThemeButton\n          variant=\"primary\"\n          onclick={addMember}\n          disabled={!memberForm.employeeId || !memberForm.startDate || !memberForm.endDate}\n          class=\"px-6 py-2\"\n        >\n          <CheckIcon size={16} class=\"mr-2\" />\n          추가\n        </ThemeButton>\n      </div>\n    </ThemeCard>\n  {/if}\n\n  <!-- 프로젝트 멤버 관리 -->\n  <ThemeCard class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-4\">\n      <h3 class=\"text-lg font-semibold text-gray-900\">참여연구원</h3>\n      <div class=\"flex items-center gap-2\">\n        {#if projectMembers.length > 0}\n          <ThemeButton\n            onclick={validateMembers}\n            size=\"sm\"\n            variant=\"primary\"\n            disabled={isValidatingMembers}\n          >\n            {#if isValidatingMembers}\n              <RefreshCwIcon size={14} class=\"mr-2 animate-spin\" />\n              검증 중...\n            {:else}\n              <ShieldCheckIcon size={14} class=\"mr-2\" />\n              검증 실행\n            {/if}\n          </ThemeButton>\n        {/if}\n        <ThemeButton\n          onclick={startAddMember}\n          size=\"sm\"\n          disabled={addingMember || editingMember !== null}\n        >\n          <PlusIcon size={16} class=\"mr-2\" />\n          연구원 추가\n        </ThemeButton>\n      </div>\n    </div>\n\n    <div class=\"overflow-x-auto\">\n      <table class=\"min-w-full divide-y divide-gray-200\" style:min-width=\"1000px\">\n        <thead class=\"bg-gray-50\">\n          <tr>\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-48\"\n            >연구원</th\n            >\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-24\"\n            >참여율</th\n            >\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-40\"\n            >월간금액</th\n            >\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-56\"\n            >참여기간</th\n            >\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-32\"\n            >기여 유형</th\n            >\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-32\"\n            >검증 상태</th\n            >\n            <th class=\"px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-40\"\n            >액션</th\n            >\n          </tr>\n        </thead>\n        <tbody class=\"bg-white divide-y divide-gray-200\">\n          {#each projectMembers as member, i (i)}\n            <tr\n              class=\"hover:bg-gray-50 {editingMember && editingMember.id === member.id\n                ? 'bg-gradient-to-r from-blue-50 to-indigo-50 border-l-4 border-blue-400 shadow-sm'\n                : ''}\"\n            >\n              <td class=\"px-4 py-4 whitespace-nowrap w-48\">\n                <div class=\"flex items-center\">\n                  <UserIcon size={20} class=\"text-gray-400 mr-2\" />\n                  <div class=\"flex-1 min-w-0\">\n                    <div class=\"flex items-center gap-2 mb-1\">\n                      <div class=\"text-sm font-medium text-gray-900 truncate\">\n                        {formatKoreanName(getMemberEmployeeName(member))}\n                      </div>\n                      <ThemeBadge variant=\"info\" size=\"sm\">{member.role}</ThemeBadge>\n                    </div>\n                    <div class=\"text-xs text-gray-500 truncate\">\n                      {member.employee_department} / {member.employee_position}\n                    </div>\n                  </div>\n                </div>\n              </td>\n              <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900 w-24\">\n                {#if editingMember && editingMember.id === member.id}\n                  <div class=\"relative\">\n                    <input\n                      type=\"number\"\n                      bind:value={memberForm.participationRate}\n                      class=\"w-20 px-3 py-2 border border-blue-300 rounded-lg text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white shadow-sm\"\n                      min=\"0\"\n                      max=\"100\"\n                      step=\"0.1\"\n                      onchange={() => {\n                        isManualMonthlyAmount = false\n                        updateMonthlyAmount()\n                      }}\n                    />\n                    <span class=\"absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-gray-500 pointer-events-none\"\n                    >%</span\n                    >\n                  </div>\n                {:else}\n                  {member.participationRate}%\n                {/if}\n              </td>\n              <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n                {#if editingMember && editingMember.id === member.id}\n                  <div class=\"relative\">\n                    <input\n                      type=\"number\"\n                      bind:value={memberForm.monthlyAmount}\n                      oninput={() => {\n                        isManualMonthlyAmount = true\n                        calculatedMonthlyAmount = parseFloat(memberForm.monthlyAmount) || 0\n                      }}\n                      class=\"w-32 px-3 py-2 border border-blue-300 rounded-lg text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white shadow-sm\"\n                      placeholder=\"0\"\n                    />\n                  </div>\n                {:else}\n                  {formatCurrency(getMemberMonthlyAmount(member))}\n                {/if}\n              </td>\n              <td class=\"px-4 py-4 whitespace-nowrap text-sm text-gray-900\">\n                {#if editingMember && editingMember.id === member.id}\n                  <div class=\"space-y-2\">\n                    <div class=\"flex items-center gap-3\">\n                      <span class=\"text-xs font-medium text-blue-700 w-10\">시작:</span>\n                      <input\n                        type=\"date\"\n                        bind:value={memberForm.startDate}\n                        class=\"flex-1 px-3 py-2 border border-blue-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white shadow-sm\"\n                        onchange={() => {\n                          isManualMonthlyAmount = false\n                          updateMonthlyAmount()\n                        }}\n                      />\n                    </div>\n                    <div class=\"flex items-center gap-3\">\n                      <span class=\"text-xs font-medium text-blue-700 w-10\">종료:</span>\n                      <input\n                        type=\"date\"\n                        bind:value={memberForm.endDate}\n                        class=\"flex-1 px-3 py-2 border border-blue-300 rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white shadow-sm\"\n                        onchange={() => {\n                          isManualMonthlyAmount = false\n                          updateMonthlyAmount()\n                        }}\n                      />\n                    </div>\n                  </div>\n                {:else}\n                  <div class=\"space-y-1\">\n                    <div class=\"text-xs text-gray-500\">\n                      시작: {formatDate(getMemberStartDate(member))}\n                    </div>\n                    <div class=\"text-xs text-gray-500\">\n                      종료: {formatDate(getMemberEndDate(member))}\n                    </div>\n                  </div>\n                {/if}\n              </td>\n              <td class=\"px-4 py-4 whitespace-nowrap\">\n                {#if editingMember && editingMember.id === member.id}\n                  <select\n                    bind:value={memberForm.contributionType}\n                    class=\"w-full px-3 py-2 border border-blue-300 rounded-lg text-sm font-medium focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white shadow-sm\"\n                  >\n                    <option value=\"cash\">💰 현금</option>\n                    <option value=\"in_kind\">🏢 현물</option>\n                  </select>\n                {:else}\n                  <ThemeBadge\n                    variant={(member.contributionType || member.contribution_type) === 'cash'\n                      ? 'success'\n                      : 'warning'}\n                    size=\"sm\"\n                  >\n                    {(member.contributionType || member.contribution_type) === 'cash'\n                      ? '현금'\n                      : '현물'}\n                  </ThemeBadge>\n                {/if}\n              </td>\n              <!-- 검증 상태 -->\n              <td class=\"px-4 py-4 whitespace-nowrap\">\n                <div class=\"flex items-center justify-center\">\n                  {#if memberValidationStatuses[member.id]}\n                    {@const validationStatus = memberValidationStatuses[member.id]}\n                    {#if validationStatus.status === 'valid'}\n                      <div class=\"relative inline-block group\">\n                        <CheckCircleIcon class=\"h-6 w-6 text-green-500 cursor-help hover:text-green-600 transition-colors\"\n                        />\n                        <div class=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-20 max-w-xs\"\n                        >\n                          <div class=\"font-semibold text-green-400 mb-1\">✅ 검증 완료</div>\n                          <div class=\"text-gray-300\">모든 검증 항목이 정상입니다.</div>\n                          <div class=\"text-gray-400 mt-1\">• 근로계약서 유효</div>\n                          <div class=\"text-gray-400\">• 참여율 적정</div>\n                          <div class=\"text-gray-400\">• 월간금액 정상</div>\n                        </div>\n                      </div>\n                    {:else if validationStatus.status === 'warning'}\n                      <div class=\"relative inline-block group\">\n                        <AlertTriangleIcon class=\"h-6 w-6 text-yellow-500 cursor-help hover:text-yellow-600 transition-colors\"\n                        />\n                        <div class=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-20 max-w-sm\"\n                        >\n                          <div class=\"font-semibold text-yellow-400 mb-2\">⚠️ 경고 사항</div>\n                          <div class=\"text-gray-300 mb-1\">{validationStatus.message}</div>\n                          {#if validationStatus.issues && validationStatus.issues.length > 0}\n                            {#each validationStatus.issues as issue, i (i)}\n                              <div class=\"mb-2 last:mb-0 p-2 bg-gray-800 rounded\">\n                                <div class=\"text-gray-300 font-medium\">{issue.message}</div>\n                                {#if issue.suggestedFix}\n                                  <div class=\"text-gray-400 mt-1 text-xs\">\n                                    💡 {issue.suggestedFix}\n                                  </div>\n                                {/if}\n                                {#if issue.data}\n                                  <div class=\"text-gray-500 mt-1 text-xs\">\n                                    {#if issue.type === 'participation_rate_excess'}\n                                      현재 참여율: {issue.data.participationRate}%\n                                    {:else if issue.type === 'amount_excess'}\n                                      현재: {issue.data.monthlyAmount?.toLocaleString()}원<br />\n                                      예상: {issue.data.expectedMonthlyAmount?.toLocaleString()}원\n                                    {:else if issue.type === 'duplicate_participation'}\n                                      총 참여율: {issue.data.totalParticipationRate?.toFixed(1)}%\n                                      {#if issue.data.conflictingProjects && issue.data.conflictingProjects.length > 0}\n                                        <br />충돌 프로젝트: {issue.data.conflictingProjects\n                                          .length}개\n                                      {/if}\n                                    {:else if issue.type === 'contract_missing' || issue.type === 'contract_period_mismatch'}\n                                      참여 기간: {issue.data.participationPeriod}\n                                    {/if}\n                                  </div>\n                                {/if}\n                              </div>\n                            {/each}\n                          {/if}\n                        </div>\n                      </div>\n                    {:else if validationStatus.status === 'error'}\n                      <div class=\"relative inline-block group\">\n                        <XCircleIcon class=\"h-6 w-6 text-red-500 cursor-help hover:text-red-600 transition-colors\"\n                        />\n                        <div class=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-4 py-3 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 z-20 max-w-sm\"\n                        >\n                          <div class=\"font-semibold text-red-400 mb-2\">❌ 검증 실패</div>\n                          <div class=\"text-gray-300 mb-1\">{validationStatus.message}</div>\n                          {#if validationStatus.issues && validationStatus.issues.length > 0}\n                            {#each validationStatus.issues as issue, i (i)}\n                              <div class=\"mb-2 last:mb-0 p-2 bg-gray-800 rounded\">\n                                <div class=\"text-gray-300 font-medium\">{issue.message}</div>\n                                {#if issue.suggestedFix}\n                                  <div class=\"text-gray-400 mt-1 text-xs\">\n                                    🔧 {issue.suggestedFix}\n                                  </div>\n                                {/if}\n                                {#if issue.data}\n                                  <div class=\"text-gray-500 mt-1 text-xs\">\n                                    {#if issue.type === 'participation_rate_excess'}\n                                      현재 참여율: {issue.data.participationRate}%\n                                    {:else if issue.type === 'amount_excess'}\n                                      현재: {issue.data.monthlyAmount?.toLocaleString()}원<br />\n                                      예상: {issue.data.expectedMonthlyAmount?.toLocaleString()}원\n                                    {:else if issue.type === 'duplicate_participation'}\n                                      총 참여율: {issue.data.totalParticipationRate?.toFixed(1)}%\n                                      {#if issue.data.conflictingProjects && issue.data.conflictingProjects.length > 0}\n                                        <br />충돌 프로젝트: {issue.data.conflictingProjects\n                                          .length}개\n                                      {/if}\n                                    {:else if issue.type === 'contract_missing' || issue.type === 'contract_period_mismatch'}\n                                      참여 기간: {issue.data.participationPeriod}\n                                    {/if}\n                                  </div>\n                                {/if}\n                              </div>\n                            {/each}\n                          {/if}\n                        </div>\n                      </div>\n                    {/if}\n                  {:else}\n                    <div class=\"relative inline-block group\">\n                      <div class=\"animate-pulse bg-gray-300 rounded-full w-6 h-6 cursor-help hover:bg-gray-400 transition-colors\"\n                      ></div>\n                      <div class=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-gray-900 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap z-10\"\n                      >\n                        <div class=\"font-semibold text-gray-400\">⏳ 검증 대기 중</div>\n                        <div class=\"text-gray-500\">아직 검증되지 않았습니다.</div>\n                      </div>\n                    </div>\n                  {/if}\n                </div>\n              </td>\n              <td class=\"px-4 py-4 whitespace-nowrap text-sm font-medium\">\n                <div class=\"flex space-x-1 justify-center\">\n                  {#if editingMember && editingMember.id === member.id}\n                    <div class=\"flex space-x-1\">\n                      <button\n                        type=\"button\"\n                        onclick={updateMember}\n                        class=\"p-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors duration-200 shadow-sm\"\n                        title=\"저장\"\n                      >\n                        <CheckIcon size={14} />\n                      </button>\n                      <button\n                        type=\"button\"\n                        onclick={cancelEditMember}\n                        class=\"p-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors duration-200 shadow-sm\"\n                        title=\"취소\"\n                      >\n                        <XIcon size={14} />\n                      </button>\n                    </div>\n                  {:else}\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => editMember(member)}\n                      disabled={editingMember !== null}\n                    >\n                      <EditIcon size={16} class=\"text-blue-600 mr-1\" />\n                      수정\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => removeMember(member.id)}\n                      disabled={editingMember !== null}\n                    >\n                      <TrashIcon size={16} class=\"text-red-600 mr-1\" />\n                      삭제\n                    </ThemeButton>\n                  {/if}\n                </div>\n              </td>\n            </tr>\n          {/each}\n\n          {#if projectMembers.length === 0 && !addingMember}\n            <tr>\n              <td colspan=\"7\" class=\"px-6 py-12 text-center text-gray-500\">\n                <UsersIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n                <p>참여 연구원이 없습니다.</p>\n              </td>\n            </tr>\n          {/if}\n        </tbody>\n      </table>\n    </div>\n\n    <!-- 인건비 요약 -->\n    {#if projectMembers.length > 0}\n      {@const personnelSummary = calculatePersonnelCostSummary()}\n      <div class=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n        <div class=\"flex items-center justify-between mb-2\">\n          <h4 class=\"text-sm font-medium text-gray-700\">\n            인건비 합계\n            {#if personnelSummary.periodInfo}\n              <span class=\"text-xs text-gray-500 ml-2\">\n                (Y{personnelSummary.periodInfo.periodNumber})\n              </span>\n            {/if}\n          </h4>\n          <button\n            type=\"button\"\n            onclick={() => (isPersonnelSummaryExpanded = !isPersonnelSummaryExpanded)}\n            class=\"flex items-center gap-1 text-xs text-gray-500 hover:text-gray-700\"\n          >\n            {#if isPersonnelSummaryExpanded}\n              <ChevronUpIcon size={16} />\n              접기\n            {:else}\n              <ChevronDownIcon size={16} />\n              월별 상세\n            {/if}\n          </button>\n        </div>\n\n        <!-- 기본 요약 정보 -->\n        <div class=\"grid grid-cols-3 gap-4\">\n          <div class=\"text-center\">\n            <div class=\"text-sm font-semibold text-green-600\">\n              {formatCurrency(personnelSummary.totalCash)}\n            </div>\n            <div class=\"text-xs text-gray-500\">현금</div>\n          </div>\n          <div class=\"text-center\">\n            <div class=\"text-sm font-semibold text-orange-600\">\n              {formatCurrency(personnelSummary.totalInKind)}\n            </div>\n            <div class=\"text-xs text-gray-500\">현물</div>\n          </div>\n          <div class=\"text-center\">\n            <div class=\"text-sm font-semibold text-blue-600\">\n              {formatCurrency(personnelSummary.totalCost)}\n            </div>\n            <div class=\"text-xs text-gray-500\">합계</div>\n          </div>\n        </div>\n\n        <!-- 월별 상세 정보 -->\n        {#if isPersonnelSummaryExpanded}\n          <div class=\"mt-4 pt-4 border-t border-gray-200\">\n            <h5 class=\"text-xs font-medium text-gray-600 mb-3\">월별 인건비 상세</h5>\n            <div class=\"overflow-x-auto\">\n              <table class=\"min-w-full divide-y divide-gray-200\">\n                <thead class=\"bg-gray-100\">\n                  <tr>\n                    <th class=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >월</th\n                    >\n                    <th class=\"px-3 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >현금</th\n                    >\n                    <th class=\"px-3 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >현물</th\n                    >\n                    <th class=\"px-3 py-2 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                    >합계</th\n                    >\n                  </tr>\n                </thead>\n                <tbody class=\"bg-white divide-y divide-gray-200\">\n                  {#each personnelSummary.monthlyCosts as monthData, i (i)}\n                    <tr class=\"hover:bg-gray-50\">\n                      <td class=\"px-3 py-2 whitespace-nowrap text-sm font-medium text-gray-900\">\n                        {monthData.monthName}\n                      </td>\n                      <td class=\"px-3 py-2 whitespace-nowrap text-sm text-right text-green-600\">\n                        {formatCurrency(monthData.cash)}\n                      </td>\n                      <td class=\"px-3 py-2 whitespace-nowrap text-sm text-right text-orange-600\">\n                        {formatCurrency(monthData.inKind)}\n                      </td>\n                      <td class=\"px-3 py-2 whitespace-nowrap text-sm text-right font-medium text-gray-900\"\n                      >\n                        {formatCurrency(monthData.total)}\n                      </td>\n                    </tr>\n                  {/each}\n                  <!-- 합계 행 -->\n                  <tr class=\"bg-gray-100 border-t-2 border-gray-300\">\n                    <td class=\"px-3 py-2 whitespace-nowrap text-sm font-bold text-gray-900\">\n                      연차 합계\n                    </td>\n                    <td class=\"px-3 py-2 whitespace-nowrap text-sm text-right font-bold text-green-600\"\n                    >\n                      {formatCurrency(personnelSummary.totalCash)}\n                    </td>\n                    <td class=\"px-3 py-2 whitespace-nowrap text-sm text-right font-bold text-orange-600\"\n                    >\n                      {formatCurrency(personnelSummary.totalInKind)}\n                    </td>\n                    <td class=\"px-3 py-2 whitespace-nowrap text-sm text-right font-bold text-blue-600\"\n                    >\n                      {formatCurrency(personnelSummary.totalCost)}\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n            </div>\n          </div>\n        {/if}\n      </div>\n    {/if}\n  </ThemeCard>\n\n  <!-- 증빙 관리 -->\n  <ThemeCard class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-4\">\n      <div class=\"flex items-center gap-4\">\n        <h3 class=\"text-lg font-semibold text-gray-900\">증빙 관리</h3>\n        {#if projectBudgets.length > 0}\n          <select\n            bind:value={selectedEvidencePeriod}\n            class=\"px-3 py-1 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            {#each projectBudgets as budget, i (i)}\n              <option value={getPeriodNumber(budget)}>\n                {formatPeriodDisplay(budget)}\n              </option>\n            {/each}\n          </select>\n        {/if}\n      </div>\n      <ThemeButton onclick={() => (showEvidenceModal = true)} size=\"sm\">\n        <PlusIcon size={16} class=\"mr-2\" />\n        증빙 추가\n      </ThemeButton>\n    </div>\n\n    {#if projectBudgets.length > 0}\n      {@const currentBudget =\n        projectBudgets.find(b => getPeriodNumber(b) === selectedEvidencePeriod) ||\n          projectBudgets[0]}\n      {@const budgetCategories = [\n        {\n          id: 'personnel',\n          type: 'personnel',\n          name: '인건비',\n          cash: parseFloat(currentBudget.personnel_cost) || 0,\n          inKind: parseFloat(currentBudget.personnel_cost_in_kind) || 0\n        },\n        {\n          id: 'material',\n          type: 'material',\n          name: '연구재료비',\n          cash: parseFloat(currentBudget.research_material_cost) || 0,\n          inKind: parseFloat(currentBudget.research_material_cost_in_kind) || 0\n        },\n        {\n          id: 'activity',\n          type: 'activity',\n          name: '연구활동비',\n          cash: parseFloat(currentBudget.research_activity_cost) || 0,\n          inKind: parseFloat(currentBudget.research_activity_cost_in_kind) || 0\n        },\n        {\n          id: 'stipend',\n          type: 'stipend',\n          name: '연구수당',\n          cash: parseFloat(currentBudget.research_stipend) || 0,\n          inKind: parseFloat(currentBudget.research_stipend_in_kind) || 0\n        },\n        {\n          id: 'indirect',\n          type: 'indirect',\n          name: '간접비',\n          cash: parseFloat(currentBudget.indirect_cost) || 0,\n          inKind: parseFloat(currentBudget.indirect_cost_in_kind) || 0\n        }\n      ].filter(category => category.cash + category.inKind > 0)}\n\n      {#if isLoadingEvidence}\n        <div class=\"text-center py-8\">\n          <div class=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n          ></div>\n          <p class=\"mt-2 text-sm text-gray-500\">증빙 데이터를 로드하는 중...</p>\n        </div>\n      {:else}\n        <div class=\"space-y-4\">\n          {#each budgetCategories as budgetCategory, i (i)}\n            {@const categoryItems = evidenceItems.filter(\n              item => item.category_name === budgetCategory.name\n            )}\n            {@const totalAmount = budgetCategory.cash + budgetCategory.inKind}\n            {@const totalItems = categoryItems.length}\n            {@const completedItems = categoryItems.filter(\n              item => item.status === 'completed'\n            ).length}\n            {@const inProgressItems = categoryItems.filter(\n              item => item.status === 'in_progress'\n            ).length}\n            {@const overallProgress =\n              totalItems > 0 ? Math.floor((completedItems / totalItems) * 100) : 0}\n\n            <div class=\"border border-gray-200 rounded-lg\">\n              <!-- 카테고리 헤더 -->\n              <button\n                type=\"button\"\n                class=\"flex items-center justify-between p-4 bg-gray-50 cursor-pointer hover:bg-gray-100 w-full text-left\"\n                onclick={() =>\n                  (expandedEvidenceSections[budgetCategory.type] =\n                    !expandedEvidenceSections[budgetCategory.type])}\n                onkeydown={e =>\n                  e.key === 'Enter' &&\n                    (expandedEvidenceSections[budgetCategory.type] =\n                      !expandedEvidenceSections[budgetCategory.type])}\n              >\n                <div class=\"flex items-center space-x-3\">\n                  {#if expandedEvidenceSections[budgetCategory.type]}\n                    <ChevronDownIcon size={16} class=\"text-gray-500\" />\n                  {:else}\n                    <ChevronRightIcon size={16} class=\"text-gray-500\" />\n                  {/if}\n                  <div>\n                    <h4 class=\"text-md font-medium text-gray-900\">{budgetCategory.name}</h4>\n                    <div class=\"text-xs text-gray-500\">\n                      예산: {formatCurrency(totalAmount)} | 증빙: {totalItems}개 | 완료: {completedItems}개\n                      | 진행중: {inProgressItems}개\n                    </div>\n                  </div>\n                </div>\n                <div class=\"flex items-center space-x-3\">\n                  <div class=\"flex items-center\">\n                    <div class=\"w-20 bg-gray-200 rounded-full h-2 mr-2\">\n                      <div\n                        class=\"h-2 rounded-full {overallProgress >= 100\n                          ? 'bg-green-600'\n                          : overallProgress >= 70\n                          ? 'bg-blue-600'\n                          : overallProgress >= 30\n                          ? 'bg-yellow-500'\n                          : 'bg-red-500'}\"\n                        style:width=\"{Math.min(overallProgress, 100)}%\"\n                      ></div>\n                    </div>\n                    <span class=\"text-xs text-gray-600\">{overallProgress}%</span>\n                  </div>\n                  <ThemeButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onclick={() => openEvidenceDetail(budgetCategory)}\n                  >\n                    <PlusIcon size={14} class=\"mr-1\" />\n                    추가\n                  </ThemeButton>\n                </div>\n              </button>\n\n              <!-- 카테고리 내용 -->\n              {#if expandedEvidenceSections[budgetCategory.type]}\n                <div class=\"p-4 border-t border-gray-200\">\n                  {#if categoryItems.length > 0}\n                    <div class=\"overflow-x-auto\">\n                      <table class=\"min-w-full divide-y divide-gray-200\">\n                        <thead class=\"bg-gray-50\">\n                          <tr>\n                            <th class=\"px-3 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-48\"\n                            >증빙 항목</th\n                            >\n                            <th class=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-32\"\n                            >금액</th\n                            >\n                            <th class=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-24\"\n                            >담당자</th\n                            >\n                            <th class=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-24\"\n                            >진행률</th\n                            >\n                            <th class=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-24\"\n                            >마감일</th\n                            >\n                            <th class=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-24\"\n                            >상태</th\n                            >\n                            <th class=\"px-3 py-2 text-center text-xs font-medium text-gray-500 uppercase tracking-wider w-32\"\n                            >액션</th\n                            >\n                          </tr>\n                        </thead>\n                        <tbody class=\"bg-white divide-y divide-gray-200\">\n                          {#each categoryItems as item, i (i)}\n                            {@const isOverdue =\n                              new Date(item.due_date) < new Date() && item.status !== 'completed'}\n                            <tr class=\"hover:bg-gray-50\">\n                              <!-- 증빙 항목 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm font-medium text-gray-900\"\n                              >\n                                {item.name}\n                              </td>\n\n                              <!-- 금액 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm text-gray-900 text-center\"\n                              >\n                                <span class=\"font-medium\">{formatCurrency(item.budget_amount)}</span\n                                >\n                              </td>\n\n                              <!-- 담당자 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm text-gray-900 text-center\"\n                              >\n                                <span class=\"text-gray-600\"\n                                >{formatAssigneeNameFromFields(item)}</span\n                                >\n                              </td>\n\n                              <!-- 진행률 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm text-gray-900\">\n                                <div class=\"flex items-center\">\n                                  <div class=\"w-12 bg-gray-200 rounded-full h-2 mr-2\">\n                                    <div\n                                      class=\"h-2 rounded-full {item.progress >= 100\n                                        ? 'bg-green-600'\n                                        : item.progress >= 70\n                                        ? 'bg-blue-600'\n                                        : item.progress >= 30\n                                        ? 'bg-yellow-500'\n                                        : 'bg-red-500'}\"\n                                      style:width=\"{Math.min(item.progress, 100)}%\"\n                                    ></div>\n                                  </div>\n                                  <span class=\"text-xs text-gray-600\">{item.progress}%</span>\n                                </div>\n                              </td>\n\n                              <!-- 마감일 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm text-center\">\n                                <span\n                                  class=\"text-xs {isOverdue\n                                    ? 'text-red-600 font-medium'\n                                    : 'text-gray-600'}\"\n                                >\n                                  {item.due_date ? formatDate(item.due_date) : '-'}\n                                </span>\n                              </td>\n\n                              <!-- 상태 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm text-center\">\n                                <span\n                                  class=\"px-2 py-1 text-xs font-medium rounded-full {item.status ===\n                                    'completed'\n                                    ? 'bg-green-100 text-green-800'\n                                    : item.status === 'in_progress'\n                                    ? 'bg-blue-100 text-blue-800'\n                                    : item.status === 'planned'\n                                    ? 'bg-gray-100 text-gray-800'\n                                    : 'bg-yellow-100 text-yellow-800'}\"\n                                >\n                                  {item.status === 'completed'\n                                    ? '완료'\n                                    : item.status === 'in_progress'\n                                    ? '진행중'\n                                    : item.status === 'planned'\n                                    ? '계획'\n                                    : '검토중'}\n                                </span>\n                              </td>\n\n                              <!-- 액션 -->\n                              <td class=\"px-3 py-3 whitespace-nowrap text-sm font-medium text-center\"\n                              >\n                                <div class=\"flex space-x-1 justify-center\">\n                                  <ThemeButton\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onclick={() => openEvidenceDetail(item)}\n                                  >\n                                    <EditIcon size={12} class=\"mr-1\" />\n                                    상세\n                                  </ThemeButton>\n                                </div>\n                              </td>\n                            </tr>\n                          {/each}\n                        </tbody>\n                      </table>\n                    </div>\n                  {:else}\n                    <div class=\"text-center py-8 text-gray-500\">\n                      <FileTextIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n                      <p>등록된 증빙 항목이 없습니다.</p>\n                      <ThemeButton\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        class=\"mt-2\"\n                        onclick={() => openEvidenceDetail(budgetCategory)}\n                      >\n                        <PlusIcon size={14} class=\"mr-1\" />\n                        첫 번째 증빙 추가\n                      </ThemeButton>\n                    </div>\n                  {/if}\n                </div>\n              {/if}\n            </div>\n          {/each}\n        </div>\n      {/if}\n    {:else}\n      <div class=\"text-center py-8 text-gray-500\">\n        <FileTextIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n        <p>등록된 사업비가 없어 증빙을 관리할 수 없습니다.</p>\n      </div>\n    {/if}\n  </ThemeCard>\n\n  <!-- 증빙 상세 모달 -->\n  {#if showEvidenceDetailModal}\n    <ThemeModal open={showEvidenceDetailModal} onclose={() => (showEvidenceDetailModal = false)}>\n      <div class=\"p-6 max-w-4xl\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h3 class=\"text-lg font-medium text-gray-900\">\n            {selectedEvidenceItem?.name} 증빙 관리\n          </h3>\n          <button\n            type=\"button\"\n            onclick={() => (showEvidenceDetailModal = false)}\n            class=\"text-gray-400 hover:text-gray-600\"\n          >\n            <XIcon size={20} />\n          </button>\n        </div>\n\n        {#if selectedEvidenceItem}\n          <div class=\"space-y-6\">\n            <!-- 기본 정보 -->\n            <div class=\"bg-gray-50 rounded-lg p-4\">\n              <h4 class=\"text-md font-medium text-gray-900 mb-3\">기본 정보</h4>\n              <div class=\"grid grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <span class=\"text-gray-600\">예산액:</span>\n                  <span class=\"ml-2 font-medium\">\n                    {formatCurrency(selectedEvidenceItem.budget_amount || 0)}\n                  </span>\n                </div>\n                <div>\n                  <span class=\"text-gray-600\">담당자:</span>\n                  <span class=\"ml-2\"\n                  >{formatAssigneeNameFromFields(selectedEvidenceItem, '미지정')}</span\n                  >\n                </div>\n                <div>\n                  <span class=\"text-gray-600\">진행률:</span>\n                  <span class=\"ml-2\">{selectedEvidenceItem.progress || 0}%</span>\n                </div>\n                <div>\n                  <span class=\"text-gray-600\">마감일:</span>\n                  <span class=\"ml-2\"\n                  >{selectedEvidenceItem.due_date\n                    ? formatDate(selectedEvidenceItem.due_date)\n                    : '미설정'}</span\n                  >\n                </div>\n                <div>\n                  <span class=\"text-gray-600\">상태:</span>\n                  <span class=\"ml-2\">\n                    {#if selectedEvidenceItem.status === 'completed'}\n                      <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\"\n                      >완료</span\n                      >\n                    {:else if selectedEvidenceItem.status === 'in_progress'}\n                      <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\"\n                      >진행중</span\n                      >\n                    {:else if selectedEvidenceItem.status === 'planned'}\n                      <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800\"\n                      >계획</span\n                      >\n                    {:else}\n                      <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\"\n                      >{selectedEvidenceItem.status}</span\n                      >\n                    {/if}\n                  </span>\n                </div>\n                <div>\n                  <span class=\"text-gray-600\">카테고리:</span>\n                  <span class=\"ml-2\">{selectedEvidenceItem.category_name}</span>\n                </div>\n              </div>\n            </div>\n\n            <!-- 증빙 서류 관리 -->\n            <div class=\"space-y-4\">\n              <div class=\"flex items-center justify-between\">\n                <h5 class=\"text-md font-medium text-gray-900\">증빙 서류</h5>\n                <ThemeButton size=\"sm\">\n                  <PlusIcon size={14} class=\"mr-1\" />\n                  서류 추가\n                </ThemeButton>\n              </div>\n\n              <div class=\"space-y-2\">\n                {#if selectedEvidenceItem.documents && selectedEvidenceItem.documents.length > 0}\n                  {#each selectedEvidenceItem.documents as document, i (i)}\n                    <div class=\"flex items-center justify-between p-3 bg-white border border-gray-200 rounded-lg\"\n                    >\n                      <div class=\"flex items-center space-x-3\">\n                        <div>\n                          <div class=\"font-medium text-sm\">{document.document_type}</div>\n                          <div class=\"text-xs text-gray-500\">{document.document_name}</div>\n                          {#if document.uploader_name}\n                            <div class=\"text-xs text-gray-400\">\n                              업로더: {document.uploader_name}\n                            </div>\n                          {/if}\n                        </div>\n                        {#if document.file_size}\n                          <div class=\"text-xs text-gray-500\">\n                            크기: {(document.file_size / 1024).toFixed(1)}KB\n                          </div>\n                        {/if}\n                      </div>\n                      <div class=\"flex items-center space-x-2\">\n                        {#if document.status === 'approved'}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\"\n                          >\n                            승인됨\n                          </span>\n                        {:else if document.status === 'reviewed'}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800\"\n                          >\n                            검토됨\n                          </span>\n                        {:else if document.status === 'rejected'}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800\"\n                          >\n                            거부됨\n                          </span>\n                        {:else}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800\"\n                          >\n                            업로드됨\n                          </span>\n                        {/if}\n                        <ThemeButton variant=\"ghost\" size=\"sm\">\n                          <FileTextIcon size={12} class=\"mr-1\" />\n                          보기\n                        </ThemeButton>\n                      </div>\n                    </div>\n                  {/each}\n                {:else}\n                  <div class=\"text-center py-8 text-gray-500\">\n                    <FileTextIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n                    <p>등록된 증빙 서류가 없습니다.</p>\n                  </div>\n                {/if}\n              </div>\n            </div>\n\n            <!-- 증빙 일정 관리 -->\n            <div class=\"space-y-4\">\n              <div class=\"flex items-center justify-between\">\n                <h5 class=\"text-md font-medium text-gray-900\">증빙 일정</h5>\n                <ThemeButton size=\"sm\">\n                  <PlusIcon size={14} class=\"mr-1\" />\n                  일정 추가\n                </ThemeButton>\n              </div>\n\n              <div class=\"space-y-2\">\n                {#if selectedEvidenceItem.schedules && selectedEvidenceItem.schedules.length > 0}\n                  {#each selectedEvidenceItem.schedules as schedule, i (i)}\n                    <div class=\"flex items-center justify-between p-3 bg-white border border-gray-200 rounded-lg\"\n                    >\n                      <div class=\"flex items-center space-x-3\">\n                        <div>\n                          <div class=\"font-medium text-sm\">{schedule.task_name}</div>\n                          {#if schedule.description}\n                            <div class=\"text-xs text-gray-500\">{schedule.description}</div>\n                          {/if}\n                          <div class=\"text-xs text-gray-400\">\n                            마감일: {formatDate(schedule.due_date)}\n                            {#if schedule.assignee_name}\n                              | 담당자: {formatAssigneeName(schedule.assignee_name)}\n                            {/if}\n                          </div>\n                        </div>\n                      </div>\n                      <div class=\"flex items-center space-x-2\">\n                        {#if schedule.status === 'completed'}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800\"\n                          >\n                            완료\n                          </span>\n                        {:else if schedule.status === 'in_progress'}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-yellow-100 text-yellow-800\"\n                          >\n                            진행중\n                          </span>\n                        {:else if schedule.status === 'overdue'}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800\"\n                          >\n                            지연\n                          </span>\n                        {:else}\n                          <span class=\"px-2 py-1 text-xs font-medium rounded-full bg-gray-100 text-gray-800\"\n                          >\n                            대기\n                          </span>\n                        {/if}\n                        {#if schedule.priority === 'high'}\n                          <span class=\"px-1 py-1 text-xs font-medium rounded-full bg-red-100 text-red-800\"\n                          >\n                            높음\n                          </span>\n                        {:else if schedule.priority === 'urgent'}\n                          <span class=\"px-1 py-1 text-xs font-medium rounded-full bg-red-200 text-red-900\"\n                          >\n                            긴급\n                          </span>\n                        {/if}\n                      </div>\n                    </div>\n                  {/each}\n                {:else}\n                  <div class=\"text-center py-8 text-gray-500\">\n                    <CalendarIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n                    <p>등록된 증빙 일정이 없습니다.</p>\n                  </div>\n                {/if}\n              </div>\n            </div>\n\n            <!-- 액션 버튼 -->\n            <div class=\"flex justify-end space-x-3 pt-4 border-t border-gray-200\">\n              <ThemeButton variant=\"ghost\" onclick={() => (showEvidenceDetailModal = false)}>\n                닫기\n              </ThemeButton>\n              <ThemeButton>저장</ThemeButton>\n            </div>\n          </div>\n        {/if}\n      </div>\n    </ThemeModal>\n  {/if}\n\n  <!-- 증빙 추가 모달 -->\n  {#if showEvidenceModal}\n    <ThemeModal open={showEvidenceModal} onclose={() => (showEvidenceModal = false)}>\n      <div class=\"p-6 max-w-2xl\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h3 class=\"text-lg font-medium text-gray-900\">증빙 항목 추가</h3>\n          <button\n            type=\"button\"\n            onclick={() => (showEvidenceModal = false)}\n            class=\"text-gray-400 hover:text-gray-600\"\n          >\n            <XIcon size={20} />\n          </button>\n        </div>\n\n        <div class=\"space-y-4\">\n          <!-- 증빙 카테고리 선택 -->\n          <div>\n            <label for=\"evidence-category\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              증빙 카테고리 *\n            </label>\n            <select\n              id=\"evidence-category\"\n              bind:value={newEvidenceForm.categoryId}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              required\n            >\n              <option value=\"\">카테고리를 선택하세요</option>\n              {#each evidenceCategories as category, i (i)}\n                <option value={category.id}>{category.name}</option>\n              {/each}\n            </select>\n          </div>\n\n          <!-- 증빙 항목명 -->\n          <div>\n            <label for=\"evidence-name\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              증빙 항목명 *\n            </label>\n            <input\n              id=\"evidence-name\"\n              type=\"text\"\n              bind:value={newEvidenceForm.name}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"예: 박기선 (2025-01), 모터 10개, 출장비 (국내)\"\n              required\n            />\n          </div>\n\n          <!-- 설명 -->\n          <div>\n            <label for=\"evidence-description\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              설명\n            </label>\n            <textarea\n              id=\"evidence-description\"\n              bind:value={newEvidenceForm.description}\n              rows=\"3\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"증빙 항목에 대한 상세 설명\"\n            ></textarea>\n          </div>\n\n          <!-- 예산액 -->\n          <div>\n            <label\n              for=\"evidence-budget-amount\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              예산액 *\n            </label>\n            <input\n              id=\"evidence-budget-amount\"\n              type=\"number\"\n              bind:value={newEvidenceForm.budgetAmount}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"0\"\n              required\n            />\n          </div>\n\n          <!-- 담당자 -->\n          <div>\n            <label for=\"evidence-assignee\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              담당자\n            </label>\n            <select\n              id=\"evidence-assignee\"\n              bind:value={newEvidenceForm.assigneeId}\n              onchange={validateEvidenceRegistration}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">담당자를 선택하세요</option>\n              {#each availableEmployees as employee, i (i)}\n                <option value={employee.id}>\n                  {formatEmployeeForSelect(employee)}\n                </option>\n              {/each}\n            </select>\n          </div>\n\n          <!-- 마감일 -->\n          <div>\n            <label for=\"evidence-due-date\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              마감일\n            </label>\n            <input\n              id=\"evidence-due-date\"\n              type=\"date\"\n              bind:value={newEvidenceForm.dueDate}\n              onchange={validateEvidenceRegistration}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          <!-- 재직 기간 검증 결과 (인건비인 경우에만 표시) -->\n          {#if newEvidenceForm.categoryId && evidenceCategories.find(cat => cat.id === newEvidenceForm.categoryId)?.name === '인건비'}\n            {#if isValidatingEvidence}\n              <div class=\"p-3 bg-gray-50 border border-gray-200 rounded-md\">\n                <div class=\"flex items-center space-x-2\">\n                  <RefreshCwIcon class=\"h-4 w-4 text-gray-600 animate-spin\" />\n                  <span class=\"text-sm text-gray-700\">재직 기간 검증 중...</span>\n                </div>\n              </div>\n            {:else if evidenceValidation}\n              <div\n                class=\"p-3 border rounded-md {evidenceValidation.validation.isValid\n                  ? 'bg-green-50 border-green-200'\n                  : 'bg-red-50 border-red-200'}\"\n              >\n                <div class=\"flex items-center space-x-2 mb-2\">\n                  {#if evidenceValidation.validation.isValid}\n                    <ShieldCheckIcon class=\"h-4 w-4 text-green-600\" />\n                    <span class=\"text-sm font-medium text-green-800\">재직 기간 검증 통과</span>\n                  {:else}\n                    <ShieldAlertIcon class=\"h-4 w-4 text-red-600\" />\n                    <span class=\"text-sm font-medium text-red-800\">재직 기간 검증 실패</span>\n                  {/if}\n                </div>\n                <p\n                  class=\"text-sm {evidenceValidation.validation.isValid\n                    ? 'text-green-700'\n                    : 'text-red-700'}\"\n                >\n                  {evidenceValidation.validation.message}\n                </p>\n                {#if evidenceValidation.validation.warnings && evidenceValidation.validation.warnings.length > 0}\n                  <div class=\"mt-2\">\n                    {#each evidenceValidation.validation.warnings as warning, i (i)}\n                      <p class=\"text-sm text-yellow-700\">⚠️ {warning}</p>\n                    {/each}\n                  </div>\n                {/if}\n              </div>\n            {/if}\n          {/if}\n        </div>\n\n        <!-- 액션 버튼 -->\n        <div class=\"flex justify-end space-x-3 pt-4 border-t border-gray-200 mt-6\">\n          <ThemeButton variant=\"ghost\" onclick={() => (showEvidenceModal = false)}>\n            취소\n          </ThemeButton>\n          <ThemeButton\n            onclick={handleAddEvidenceItem}\n            disabled={isUpdating || (evidenceValidation && !evidenceValidation.validation.isValid)}\n          >\n            {isUpdating ? '추가 중...' : '추가'}\n          </ThemeButton>\n        </div>\n      </div>\n    </ThemeModal>\n  {/if}\n\n  <!-- 프로젝트 수정 모달 -->\n  {#if showEditProjectModal}\n    <ThemeModal open={showEditProjectModal} onclose={() => (showEditProjectModal = false)}>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-medium text-gray-900 mb-4\">프로젝트 수정</h3>\n\n        <div class=\"space-y-4\">\n          <!-- 프로젝트 제목 -->\n          <div>\n            <label for=\"edit-project-title\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              프로젝트 제목 *\n            </label>\n            <input\n              id=\"edit-project-title\"\n              type=\"text\"\n              bind:value={projectForm.title}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"프로젝트 제목을 입력하세요\"\n              required\n            />\n          </div>\n\n          <!-- 프로젝트 코드 -->\n          <div>\n            <label for=\"edit-project-code\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n              프로젝트 코드 *\n            </label>\n            <input\n              id=\"edit-project-code\"\n              type=\"text\"\n              bind:value={projectForm.code}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"프로젝트 코드를 입력하세요\"\n              required\n            />\n          </div>\n\n          <!-- 프로젝트 설명 -->\n          <div>\n            <label\n              for=\"edit-project-description\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >\n              프로젝트 설명\n            </label>\n            <textarea\n              id=\"edit-project-description\"\n              bind:value={projectForm.description}\n              rows=\"3\"\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              placeholder=\"프로젝트 설명을 입력하세요\"\n            ></textarea>\n          </div>\n\n          <!-- 프로젝트 상태 및 우선순위 -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label for=\"edit-project-status\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n                상태 *\n              </label>\n              <select\n                id=\"edit-project-status\"\n                bind:value={projectForm.status}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              >\n                <option value=\"planning\">계획</option>\n                <option value=\"active\">진행중</option>\n                <option value=\"completed\">완료</option>\n                <option value=\"cancelled\">취소</option>\n                <option value=\"suspended\">중단</option>\n              </select>\n            </div>\n            <div>\n              <label\n                for=\"edit-project-priority\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                우선순위 *\n              </label>\n              <select\n                id=\"edit-project-priority\"\n                bind:value={projectForm.priority}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              >\n                <option value=\"low\">낮음</option>\n                <option value=\"medium\">보통</option>\n                <option value=\"high\">높음</option>\n                <option value=\"critical\">긴급</option>\n              </select>\n            </div>\n          </div>\n\n          <!-- 후원기관 및 연구유형 -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"edit-project-sponsor\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                후원기관 *\n              </label>\n              <select\n                id=\"edit-project-sponsor\"\n                bind:value={projectForm.sponsorType}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              >\n                <option value=\"internal\">내부</option>\n                <option value=\"government\">정부</option>\n                <option value=\"private\">민간</option>\n                <option value=\"international\">국제</option>\n              </select>\n            </div>\n            <div>\n              <label\n                for=\"edit-project-research-type\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >\n                연구유형 *\n              </label>\n              <select\n                id=\"edit-project-research-type\"\n                bind:value={projectForm.researchType}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                required\n              >\n                <option value=\"basic\">기초연구</option>\n                <option value=\"applied\">응용연구</option>\n                <option value=\"development\">개발연구</option>\n              </select>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"flex justify-end space-x-3 mt-6\">\n          <ThemeButton\n            variant=\"ghost\"\n            onclick={() => (showEditProjectModal = false)}\n            disabled={isUpdating}\n          >\n            취소\n          </ThemeButton>\n          <ThemeButton onclick={updateProject} disabled={isUpdating}>\n            {#if isUpdating}\n              수정 중...\n            {:else}\n              수정\n            {/if}\n          </ThemeButton>\n        </div>\n      </div>\n    </ThemeModal>\n  {/if}\n\n  <!-- 프로젝트 삭제 확인 모달 -->\n  {#if showDeleteConfirmModal}\n    <ThemeModal\n      open={showDeleteConfirmModal}\n      onclose={() => {\n        showDeleteConfirmModal = false\n        deleteConfirmationCode = '' // 모달 닫을 때 코드 초기화\n      }}\n    >\n      <div class=\"p-6\">\n        <div class=\"flex items-center mb-4\">\n          <AlertTriangleIcon class=\"h-6 w-6 text-red-500 mr-3\" />\n          <h3 class=\"text-lg font-medium text-gray-900\">프로젝트 삭제 확인</h3>\n        </div>\n\n        <div class=\"mb-6\">\n          <p class=\"text-sm text-gray-600 mb-4\">다음 프로젝트를 완전히 삭제하시겠습니까?</p>\n          <div class=\"bg-gray-50 p-4 rounded-lg\">\n            <p class=\"font-medium text-gray-900\">{selectedProject?.title}</p>\n            <p class=\"text-sm text-gray-600\">코드: {selectedProject?.code}</p>\n          </div>\n          <div class=\"mt-4 p-4 bg-red-50 border border-red-200 rounded-lg\">\n            <p class=\"text-sm text-red-800 font-medium mb-2\">⚠️ 삭제될 데이터:</p>\n            <ul class=\"text-sm text-red-700 space-y-1\">\n              <li>• 참여연구원 정보 ({projectMembers.length}명)</li>\n              <li>• 프로젝트 사업비 정보 ({projectBudgets.length}개 연차)</li>\n              <li>• 참여율 이력 데이터</li>\n              <li>• 프로젝트 마일스톤</li>\n              <li>• 프로젝트 위험 요소</li>\n            </ul>\n            <p class=\"text-sm text-red-800 font-medium mt-3\">이 작업은 되돌릴 수 없습니다.</p>\n          </div>\n\n          <!-- 프로젝트 코드 입력 확인 -->\n          <div class=\"mt-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n            <p class=\"text-sm text-yellow-800 font-medium mb-3\">\n              🔒 삭제를 확인하려면 프로젝트 코드를 입력하세요\n            </p>\n            <div>\n              <label\n                for=\"delete-confirmation-code\"\n                class=\"block text-sm font-medium text-gray-700 mb-2\"\n              >\n                프로젝트 코드 입력\n              </label>\n              <input\n                id=\"delete-confirmation-code\"\n                type=\"text\"\n                bind:value={deleteConfirmationCode}\n                placeholder=\"프로젝트 코드를 정확히 입력하세요\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                autocomplete=\"off\"\n              />\n              {#if deleteConfirmationCode && !isDeleteCodeValid()}\n                <p class=\"text-sm text-red-600 mt-1\">❌ 코드가 일치하지 않습니다</p>\n              {:else if isDeleteCodeValid()}\n                <p class=\"text-sm text-green-600 mt-1\">✅ 코드가 일치합니다</p>\n              {/if}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"flex justify-end space-x-3\">\n          <ThemeButton\n            variant=\"ghost\"\n            onclick={() => {\n              showDeleteConfirmModal = false\n              deleteConfirmationCode = '' // 모달 닫을 때 코드 초기화\n            }}\n            disabled={isDeleting}\n          >\n            취소\n          </ThemeButton>\n          <ThemeButton\n            variant=\"error\"\n            onclick={deleteProject}\n            disabled={isDeleting || !isDeleteCodeValid()}\n          >\n            {#if isDeleting}\n              삭제 중...\n            {:else}\n              삭제\n            {/if}\n          </ThemeButton>\n        </div>\n      </div>\n    </ThemeModal>\n  {/if}\n\n  <!-- 검증 결과 모달 -->\n  <ThemeModal open={showValidationModal} onclose={() => (showValidationModal = false)}>\n    <div class=\"max-w-4xl\">\n      <div class=\"flex justify-between items-center mb-4\">\n        <h3 class=\"text-lg font-semibold text-gray-900\">프로젝트 검증 결과</h3>\n        <ThemeButton variant=\"ghost\" onclick={() => (showValidationModal = false)}>\n          <XIcon size={16} />\n        </ThemeButton>\n      </div>\n\n      {#if validationResults}\n        <div class=\"space-y-6\">\n          <!-- 검증 요약 -->\n          <div class=\"bg-gray-50 p-4 rounded-lg\">\n            <h4 class=\"font-medium text-gray-900 mb-2\">검증 요약</h4>\n            <div class=\"grid grid-cols-3 gap-4 text-sm\">\n              <div>\n                <span class=\"text-gray-600\">총 검증 항목:</span>\n                <span class=\"font-medium ml-2\">{validationResults.summary?.total || 0}</span>\n              </div>\n              <div>\n                <span class=\"text-gray-600\">유효:</span>\n                <span class=\"font-medium text-green-600 ml-2\"\n                >{validationResults.summary?.valid || 0}</span\n                >\n              </div>\n              <div>\n                <span class=\"text-gray-600\">문제:</span>\n                <span class=\"font-medium text-red-600 ml-2\"\n                >{validationResults.summary?.invalid || 0}</span\n                >\n              </div>\n            </div>\n          </div>\n\n          <!-- 스키마 검증 결과 -->\n          {#if validationResults.schema}\n            <div class=\"border rounded-lg p-4\">\n              <h4 class=\"font-medium text-gray-900 mb-3\">스키마 검증</h4>\n              <div class=\"space-y-2 text-sm\">\n                <div class=\"flex justify-between\">\n                  <span>데이터베이스 스키마:</span>\n                  <span\n                    class={validationResults.schema.database?.isValid\n                      ? 'text-green-600'\n                      : 'text-red-600'}\n                  >\n                    {validationResults.schema.database?.isValid ? '유효' : '문제 있음'}\n                  </span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span>컬럼 명명 규칙:</span>\n                  <span\n                    class={validationResults.schema.naming?.isValid\n                      ? 'text-green-600'\n                      : 'text-red-600'}\n                  >\n                    {validationResults.schema.naming?.isValid ? '유효' : '문제 있음'}\n                  </span>\n                </div>\n              </div>\n            </div>\n          {/if}\n\n          <!-- 프로젝트 검증 결과 -->\n          {#if validationResults.project}\n            <div class=\"border rounded-lg p-4\">\n              <h4 class=\"font-medium text-gray-900 mb-3\">프로젝트 검증</h4>\n              <div class=\"space-y-2 text-sm\">\n                {#each validationResults.project.validationResults || [] as result, i (i)}\n                  <div class=\"flex justify-between\">\n                    <span>{result.ruleName}:</span>\n                    <span class={result.isValid ? 'text-green-600' : 'text-red-600'}>\n                      {result.isValid ? '유효' : '문제 있음'}\n                    </span>\n                  </div>\n                {/each}\n              </div>\n            </div>\n          {/if}\n\n          <!-- 문제점 목록 -->\n          {#if validationResults.summary?.issues?.length > 0}\n            <div class=\"border border-red-200 rounded-lg p-4 bg-red-50\">\n              <h4 class=\"font-medium text-red-900 mb-3\">발견된 문제점</h4>\n              <ul class=\"space-y-1 text-sm text-red-800\">\n                {#each validationResults.summary.issues as issue, i (i)}\n                  <li>• {issue}</li>\n                {/each}\n              </ul>\n            </div>\n          {/if}\n        </div>\n      {/if}\n    </div>\n  </ThemeModal>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectListCard.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ProjectOverviewCard.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/ResearcherValidationTable.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'memberId' is defined but never used.","line":24,"column":23,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":39,"suggestions":[{"messageId":"removeVar","data":{"varName":"memberId"},"fix":{"range":[553,570],"text":""},"desc":"Remove unused variable 'memberId'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'updates' is defined but never used.","line":24,"column":41,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":53,"suggestions":[{"messageId":"removeVar","data":{"varName":"updates"},"fix":{"range":[569,583],"text":""},"desc":"Remove unused variable 'updates'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeBadge from '$lib/components/ui/ThemeBadge.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import {\n    AlertTriangleIcon,\n    CheckCircleIcon,\n    RefreshCwIcon,\n    SettingsIcon,\n    UserIcon,\n    WrenchIcon,\n    XCircleIcon\n  } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  // Props\n  let {\n    projectId,\n    members = [],\n    onMemberUpdate\n  }: {\n    projectId: string\n    members?: any[]\n    onMemberUpdate?: (memberId: string, updates: any) => void\n  } = $props()\n\n  // Default function for onMemberUpdate\n  if (!onMemberUpdate) {\n    onMemberUpdate = () => {}\n  }\n\n  // State\n  let validationState = $state({\n    isValidating: false,\n    isValid: false,\n    lastValidated: null as string | null,\n    issues: [] as any[],\n    summary: {\n      totalMembers: 0,\n      validMembers: 0,\n      invalidMembers: 0\n    }\n  })\n\n  let showValidationDetails = $state(false)\n  let selectedMember = $state<any>(null)\n\n  // 검증 상태 아이콘\n  function getValidationIcon() {\n    if (validationState.isValidating) {\n      return RefreshCwIcon\n    }\n    return validationState.isValid ? CheckCircleIcon : AlertTriangleIcon\n  }\n\n  // 검증 상태 색상\n  function getValidationColor() {\n    if (validationState.isValidating) {\n      return 'text-blue-600'\n    }\n    return validationState.isValid ? 'text-green-600' : 'text-red-600'\n  }\n\n  // 검증 상태 텍스트\n  function getValidationText() {\n    if (validationState.isValidating) {\n      return '검증 중...'\n    }\n    return validationState.isValid\n      ? '검증 완료'\n      : `${validationState.summary.invalidMembers}개 이슈 발견`\n  }\n\n  // 멤버별 검증 상태\n  function getMemberValidationStatus(member: any) {\n    const memberIssues = validationState.issues.filter(issue => issue.memberId === member.id)\n\n    if (memberIssues.length === 0) {\n      return {\n        status: 'valid',\n        icon: CheckCircleIcon,\n        color: 'text-green-600',\n        text: '정상'\n      }\n    }\n\n    const hasErrors = memberIssues.some(issue => issue.severity === 'error')\n    return {\n      status: hasErrors ? 'error' : 'warning',\n      icon: hasErrors ? XCircleIcon : AlertTriangleIcon,\n      color: hasErrors ? 'text-red-600' : 'text-yellow-600',\n      text: hasErrors ? '오류' : '주의'\n    }\n  }\n\n  // 참여율 색상\n  function getParticipationRateColor(rate: number) {\n    if (rate > 100) return 'danger'\n    if (rate >= 80) return 'success'\n    if (rate >= 50) return 'warning'\n    return 'secondary'\n  }\n\n  // 검증 실행\n  async function runValidation() {\n    if (!projectId) return\n\n    validationState.isValidating = true\n\n    try {\n      const response = await fetch(\n        `/api/project-management/researcher-validation?projectId=${projectId}`\n      )\n      const result = await response.json()\n\n      if (result.success) {\n        validationState.isValid = result.data.validation.isValid\n        validationState.issues = result.data.validation.issues\n        validationState.summary = result.data.validation.summary\n        validationState.lastValidated = new Date().toISOString()\n      } else {\n        logger.error('검증 실패:', result.error)\n      }\n    } catch (error) {\n      logger.error('검증 오류:', error)\n    } finally {\n      validationState.isValidating = false\n    }\n  }\n\n  // 자동 수정 실행\n  async function runAutoFix() {\n    if (!projectId) return\n\n    // 수정 가능한 이슈들 수집\n    const fixes = validationState.issues\n      .filter(issue => issue.type === 'participation_rate_excess')\n      .map(issue => ({\n        type: 'participation_rate_adjustment',\n        memberId: issue.memberId,\n        oldValue: issue.data?.participationRate || 100,\n        newValue: 100\n      }))\n\n    if (fixes.length === 0) {\n      return\n    }\n\n    try {\n      const response = await fetch('/api/project-management/researcher-validation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId,\n          fixes\n        })\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        // 수정 완료 후 재검증\n        await runValidation()\n\n        // 멤버 데이터 새로고침\n        onMemberUpdate('refresh', {})\n      }\n    } catch (error) {\n      logger.error('자동 수정 오류:', error)\n    }\n  }\n\n  // 멤버 상세 정보 보기\n  function showMemberDetails(member: any) {\n    selectedMember = member\n    showValidationDetails = true\n  }\n\n  // 날짜 포맷팅\n  function formatDate(dateString: string) {\n    if (!dateString) return '-'\n    return new Date(dateString).toLocaleDateString('ko-KR')\n  }\n\n  // 금액 포맷팅\n  function formatCurrency(amount: number) {\n    if (!amount) return '0원'\n    return new Intl.NumberFormat('ko-KR', {\n      style: 'currency',\n      currency: 'KRW',\n      minimumFractionDigits: 0\n    }).format(amount)\n  }\n\n  // 컴포넌트 마운트 시 자동 검증\n  onMount(() => {\n    if (projectId && members.length > 0) {\n      runValidation()\n    }\n  })\n\n  // 멤버 데이터 변경 시 재검증\n  $effect(() => {\n    if (projectId && members.length > 0 && !validationState.isValidating) {\n      runValidation()\n    }\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"space-y-4\">\n  <!-- 검증 상태 헤더 -->\n  <ThemeCard>\n    <div class=\"p-4\">\n      <div class=\"flex items-center justify-between\">\n        <div class=\"flex items-center gap-3\">\n          <svelte:component this={getValidationIcon()} size={24} class={getValidationColor()} />\n          <div>\n            <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n              참여연구원 검증 상태\n            </h3>\n            <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n              {getValidationText()}\n              {#if validationState.lastValidated}\n                • 마지막 검증: {new Date(validationState.lastValidated).toLocaleString('ko-KR')}\n              {/if}\n            </p>\n          </div>\n        </div>\n\n        <div class=\"flex items-center gap-2\">\n          {#if !validationState.isValid && validationState.issues.some(issue => issue.type === 'participation_rate_excess')}\n            <ThemeButton\n              variant=\"warning\"\n              size=\"sm\"\n              onclick={runAutoFix}\n              disabled={validationState.isValidating}\n            >\n              <WrenchIcon size={16} class=\"mr-1\" />\n              자동 수정\n            </ThemeButton>\n          {/if}\n\n          <ThemeButton\n            variant=\"secondary\"\n            size=\"sm\"\n            onclick={runValidation}\n            disabled={validationState.isValidating}\n          >\n            <RefreshCwIcon\n              size={16}\n              class=\"mr-1 {validationState.isValidating ? 'animate-spin' : ''}\"\n            />\n            다시 검증\n          </ThemeButton>\n        </div>\n      </div>\n\n      <!-- 검증 요약 -->\n      {#if validationState.summary.totalMembers > 0}\n        <div class=\"mt-4 grid grid-cols-3 gap-4\">\n          <div class=\"text-center\">\n            <div class=\"text-2xl font-bold text-gray-900\">\n              {validationState.summary.totalMembers}\n            </div>\n            <div class=\"text-sm text-gray-600\">전체 연구원</div>\n          </div>\n          <div class=\"text-center\">\n            <div class=\"text-2xl font-bold text-green-600\">\n              {validationState.summary.validMembers}\n            </div>\n            <div class=\"text-sm text-gray-600\">정상</div>\n          </div>\n          <div class=\"text-center\">\n            <div class=\"text-2xl font-bold text-red-600\">\n              {validationState.summary.invalidMembers}\n            </div>\n            <div class=\"text-sm text-gray-600\">이슈 있음</div>\n          </div>\n        </div>\n      {/if}\n    </div>\n  </ThemeCard>\n\n  <!-- 참여연구원 테이블 -->\n  <ThemeCard>\n    <div class=\"overflow-x-auto\">\n      <table class=\"w-full\">\n        <thead>\n          <tr class=\"border-b\" style:border-color=\"var(--color-border)\">\n            <th class=\"text-left py-3 px-4 font-medium\" style:color=\"var(--color-text)\">연구원</th>\n            <th class=\"text-left py-3 px-4 font-medium\" style:color=\"var(--color-text)\">참여율</th>\n            <th class=\"text-left py-3 px-4 font-medium\" style:color=\"var(--color-text)\">월간금액</th\n            >\n            <th class=\"text-left py-3 px-4 font-medium\" style:color=\"var(--color-text)\">참여기간</th\n            >\n            <th\n              class=\"text-left py-3 px-4 font-medium\"\n              style:color=\"var(--color-text)\"\n            >기여 유형</th\n            >\n            <th\n              class=\"text-left py-3 px-4 font-medium\"\n              style:color=\"var(--color-text)\"\n            >검증 상태</th\n            >\n            <th class=\"text-left py-3 px-4 font-medium\" style:color=\"var(--color-text)\">액션</th>\n          </tr>\n        </thead>\n        <tbody>\n          {#each members as member, i (i)}\n            {@const validationStatus = getMemberValidationStatus(member)}\n            <tr class=\"border-b hover:bg-opacity-50\" style:border-color=\"var(--color-border)\">\n              <!-- 연구원 정보 -->\n              <td class=\"py-3 px-4\">\n                <div class=\"flex items-center gap-2\">\n                  <UserIcon size={16} style=\"color: var(--color-primary);\" />\n                  <div>\n                    <div class=\"font-medium\" style:color=\"var(--color-text)\">\n                      {member.employee_name}\n                    </div>\n                    <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                      {member.employee_department} / {member.employee_position}\n                    </div>\n                  </div>\n                </div>\n              </td>\n\n              <!-- 참여율 -->\n              <td class=\"py-3 px-4\">\n                <ThemeBadge\n                  variant={getParticipationRateColor(\n                    parseFloat(member.participation_rate) || 0\n                  ) as any}\n                >\n                  {member.participation_rate}%\n                </ThemeBadge>\n              </td>\n\n              <!-- 월간금액 -->\n              <td class=\"py-3 px-4\" style:color=\"var(--color-text)\">\n                {formatCurrency(parseFloat(member.monthly_amount) || 0)}\n              </td>\n\n              <!-- 참여기간 -->\n              <td class=\"py-3 px-4\" style:color=\"var(--color-text)\">\n                <div class=\"text-sm\">\n                  <div>시작: {formatDate(member.start_date)}</div>\n                  <div>종료: {formatDate(member.end_date)}</div>\n                </div>\n              </td>\n\n              <!-- 기여 유형 -->\n              <td class=\"py-3 px-4\">\n                <ThemeBadge variant=\"success\">\n                  {member.contribution_type === 'cash' ? '현금' : member.contribution_type}\n                </ThemeBadge>\n              </td>\n\n              <!-- 검증 상태 -->\n              <td class=\"py-3 px-4\">\n                <div class=\"flex items-center gap-2\">\n                  <svelte:component\n                    this={validationStatus.icon}\n                    size={16}\n                    class={validationStatus.color}\n                  />\n                  <span class=\"text-sm\" style:color=\"var(--color-text)\">\n                    {validationStatus.text}\n                  </span>\n                </div>\n              </td>\n\n              <!-- 액션 -->\n              <td class=\"py-3 px-4\">\n                <div class=\"flex items-center gap-2\">\n                  <ThemeButton\n                    variant=\"secondary\"\n                    size=\"sm\"\n                    onclick={() => showMemberDetails(member)}\n                  >\n                    <SettingsIcon size={14} class=\"mr-1\" />\n                    상세\n                  </ThemeButton>\n                </div>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  </ThemeCard>\n\n  <!-- 검증 상세 모달 -->\n  {#if showValidationDetails && selectedMember}\n    <div class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div class=\"bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h3 class=\"text-lg font-semibold text-gray-900\">\n            {selectedMember.employee_name} 검증 상세\n          </h3>\n          <button\n            type=\"button\"\n            onclick={() => (showValidationDetails = false)}\n            class=\"text-gray-400 hover:text-gray-600\"\n          >\n            <XCircleIcon size={24} />\n          </button>\n        </div>\n\n        <!-- 멤버 기본 정보 -->\n        <div class=\"mb-6 p-4 bg-gray-50 rounded-lg\">\n          <h4 class=\"font-medium text-gray-900 mb-2\">기본 정보</h4>\n          <div class=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span class=\"text-gray-600\">부서/직급:</span>\n              <span class=\"ml-2\"\n              >{selectedMember.employee_department} / {selectedMember.employee_position}</span\n              >\n            </div>\n            <div>\n              <span class=\"text-gray-600\">참여율:</span>\n              <span class=\"ml-2\">{selectedMember.participation_rate}%</span>\n            </div>\n            <div>\n              <span class=\"text-gray-600\">월간금액:</span>\n              <span class=\"ml-2\"\n              >{formatCurrency(parseFloat(selectedMember.monthly_amount) || 0)}</span\n              >\n            </div>\n            <div>\n              <span class=\"text-gray-600\">참여기간:</span>\n              <span class=\"ml-2\"\n              >{formatDate(selectedMember.start_date)} ~ {formatDate(\n                selectedMember.end_date\n              )}</span\n              >\n            </div>\n          </div>\n        </div>\n\n        <!-- 검증 이슈 -->\n        {@const memberIssues = validationState.issues.filter(\n          issue => issue.memberId === selectedMember.id\n        )}\n\n        {#if memberIssues.length > 0}\n          <div class=\"space-y-3\">\n            <h4 class=\"font-medium text-gray-900\">발견된 이슈</h4>\n            {#each memberIssues as issue, i (i)}\n              <div\n                class=\"p-3 rounded-lg border {issue.severity === 'error'\n                  ? 'border-red-200 bg-red-50'\n                  : 'border-yellow-200 bg-yellow-50'}\"\n              >\n                <div class=\"flex items-start gap-2\">\n                  <svelte:component\n                    this={issue.severity === 'error' ? XCircleIcon : AlertTriangleIcon}\n                    size={20}\n                    class={issue.severity === 'error' ? 'text-red-600' : 'text-yellow-600'}\n                  />\n                  <div class=\"flex-1\">\n                    <div class=\"font-medium text-gray-900\">{issue.message}</div>\n                    {#if issue.suggestedFix}\n                      <div class=\"text-sm text-gray-600 mt-1\">\n                        💡 {issue.suggestedFix}\n                      </div>\n                    {/if}\n                  </div>\n                </div>\n              </div>\n            {/each}\n          </div>\n        {:else}\n          <div class=\"text-center py-8\">\n            <CheckCircleIcon size={48} class=\"text-green-600 mx-auto mb-2\" />\n            <div class=\"text-lg font-medium text-gray-900\">검증 통과</div>\n            <div class=\"text-sm text-gray-600\">이 연구원의 모든 검증 항목이 정상입니다.</div>\n          </div>\n        {/if}\n\n        <div class=\"flex justify-end gap-2 mt-6\">\n          <ThemeButton variant=\"secondary\" onclick={() => (showValidationDetails = false)}>\n            닫기\n          </ThemeButton>\n        </div>\n      </div>\n    </div>\n  {/if}\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/project-management/SimpleBudgetForm.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":150,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":150,"endColumn":35,"suggestions":[{"messageId":"removeVar","data":{"varName":"index"},"fix":{"range":[4413,4420],"text":""},"desc":"Remove unused variable 'index'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import type { AnnualBudgetFormData } from '$lib/types/project-budget'\n  import { toUTC } from '$lib/utils/date-handler'\n  import { formatDateForInput } from '$lib/utils/format'\n  import { CheckIcon, PlusIcon, TrashIcon } from '@lucide/svelte'\n  import { createEventDispatcher } from 'svelte'\n\n  const dispatch = createEventDispatcher()\n\n  let { projectId } = $props<{\n    projectId: string\n  }>()\n\n  // 간단한 연차별 예산 데이터 (기간 포함)\n  let budgets = $state<AnnualBudgetFormData[]>([\n    {\n      year: 1,\n      startDate: '',\n      endDate: '',\n      governmentFunding: 0,\n      companyCash: 0,\n      companyInKind: 0\n    }\n  ])\n\n  let isSubmitting = $state(false)\n  let validationErrors = $state<string[]>([])\n  let isLoading = $state(true)\n\n  // 기존 예산 데이터 로드\n  async function loadExistingBudgets() {\n    if (!projectId) return\n\n    try {\n      isLoading = true\n      const response = await fetch(`/api/project-management/projects/${projectId}/annual-budgets`)\n      const result = await response.json()\n\n      if (result.success && result.data?.budgets && result.data.budgets.length > 0) {\n        // 기존 예산 데이터가 있으면 로드 (UTC 날짜 처리 함수 사용)\n        logger.log('기존 예산 데이터 로드:', result.data.budgets)\n        budgets = result.data.budgets.map(budget => ({\n          year: budget.year,\n          startDate: budget.startDate ? formatDateForInput(budget.startDate) : '',\n          endDate: budget.endDate ? formatDateForInput(budget.endDate) : '',\n          governmentFunding: budget.governmentFunding || 0,\n          companyCash: budget.companyCash || 0,\n          companyInKind: budget.companyInKind || 0,\n          notes: budget.notes || ''\n        }))\n        logger.log('변환된 예산 데이터:', budgets)\n      } else {\n        logger.log('기존 예산 데이터 없음 - 기본값 사용')\n      }\n    } catch (error) {\n      logger.error('기존 예산 데이터 로드 실패:', error)\n    } finally {\n      isLoading = false\n    }\n  }\n\n  // 컴포넌트 마운트 시 기존 데이터 로드\n  $effect(() => {\n    if (projectId) {\n      loadExistingBudgets()\n    }\n  })\n\n  // 연차 추가\n  function addYear() {\n    const nextYear = budgets.length + 1\n    const lastBudget = budgets[budgets.length - 1]\n\n    // 이전 연차의 종료일 다음날을 시작일로 설정\n    let startDate = ''\n    let endDate = ''\n\n    if (lastBudget?.endDate) {\n      // UTC 기준으로 날짜 계산\n      const lastEndUTC = toUTC(lastBudget.endDate)\n      const lastEndDate = new Date(lastEndUTC)\n\n      // 다음날을 시작일로 설정\n      const nextStartDate = new Date(lastEndDate)\n      nextStartDate.setUTCDate(nextStartDate.getUTCDate() + 1)\n      startDate = formatDateForInput(nextStartDate.toISOString())\n\n      // 1년 후를 종료일로 설정\n      const nextEndDate = new Date(nextStartDate)\n      nextEndDate.setUTCFullYear(nextEndDate.getUTCFullYear() + 1)\n      nextEndDate.setUTCDate(nextEndDate.getUTCDate() - 1)\n      endDate = formatDateForInput(nextEndDate.toISOString())\n    }\n\n    budgets.push({\n      year: nextYear,\n      startDate,\n      endDate,\n      governmentFunding: 0,\n      companyCash: 0,\n      companyInKind: 0\n    })\n  }\n\n  // 연차 삭제\n  function removeYear(index: number) {\n    if (budgets.length > 1) {\n      budgets.splice(index, 1)\n      // 연차 번호 재정렬\n      budgets.forEach((budget, idx) => {\n        budget.year = idx + 1\n      })\n    }\n  }\n\n  // 총액 계산\n  function calculateTotal(budget: AnnualBudgetFormData): number {\n    return (budget.governmentFunding || 0) + (budget.companyCash || 0) + (budget.companyInKind || 0)\n  }\n\n  // 전체 총액 계산\n  function calculateGrandTotal(): number {\n    return budgets.reduce((sum, budget) => sum + calculateTotal(budget), 0)\n  }\n\n  // 전체 사업 기간 계산 (UTC 기준)\n  function calculateProjectPeriod(): { startDate: string | null; endDate: string | null } {\n    const validBudgets = budgets.filter(b => b.startDate && b.endDate)\n    if (validBudgets.length === 0) {\n      return { startDate: null, endDate: null }\n    }\n\n    // UTC 기준으로 날짜 변환\n    const startDatesUTC = validBudgets.map(b => new Date(toUTC(b.startDate!)))\n    const endDatesUTC = validBudgets.map(b => new Date(toUTC(b.endDate!)))\n\n    const projectStartDate = new Date(Math.min(...startDatesUTC.map(d => d.getTime())))\n    const projectEndDate = new Date(Math.max(...endDatesUTC.map(d => d.getTime())))\n\n    return {\n      startDate: formatDateForInput(projectStartDate.toISOString()),\n      endDate: formatDateForInput(projectEndDate.toISOString())\n    }\n  }\n\n  // 검증\n  function validateForm(): boolean {\n    const errors: string[] = []\n\n    budgets.forEach((budget, index) => {\n      const yearLabel = `${budget.year}차년도`\n\n      // 기간 검증\n      if (!budget.startDate) {\n        errors.push(`${yearLabel}: 시작일을 입력해주세요.`)\n      }\n      if (!budget.endDate) {\n        errors.push(`${yearLabel}: 종료일을 입력해주세요.`)\n      }\n\n      // 날짜 순서 검증 (UTC 기준)\n      if (budget.startDate && budget.endDate) {\n        const startDateUTC = new Date(toUTC(budget.startDate))\n        const endDateUTC = new Date(toUTC(budget.endDate))\n        if (startDateUTC > endDateUTC) {\n          errors.push(`${yearLabel}: 시작일이 종료일보다 늦을 수 없습니다.`)\n        }\n      }\n\n      // 예산 검증\n      const total = calculateTotal(budget)\n      if (total === 0) {\n        errors.push(`${yearLabel}: 예산을 입력해주세요.`)\n      }\n    })\n\n    // 연차 간 기간 중복 검증\n    for (let i = 0; i < budgets.length - 1; i++) {\n      const current = budgets[i]\n      const next = budgets[i + 1]\n\n      if (current.endDate && next.startDate) {\n        const currentEndUTC = new Date(toUTC(current.endDate))\n        const nextStartUTC = new Date(toUTC(next.startDate))\n\n        if (currentEndUTC >= nextStartUTC) {\n          errors.push(`${current.year}차년도와 ${next.year}차년도 기간이 중복됩니다.`)\n        }\n      }\n    }\n\n    validationErrors = errors\n    return errors.length === 0\n  }\n\n  // 저장\n  async function saveBudgets() {\n    if (!validateForm()) return\n\n    isSubmitting = true\n\n    try {\n      // 전체 사업 기간 계산\n      const projectPeriod = calculateProjectPeriod()\n\n      const response = await fetch(`/api/project-management/projects/${projectId}/annual-budgets`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          budgets,\n          projectPeriod // 전체 사업 기간도 함께 전송\n        })\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        dispatch('budgetSaved', result.data)\n      } else {\n        validationErrors = [result.error || '예산 저장에 실패했습니다.']\n      }\n    } catch (error) {\n      logger.error('예산 저장 오류:', error)\n      validationErrors = ['예산 저장 중 오류가 발생했습니다.']\n    } finally {\n      isSubmitting = false\n    }\n  }\n\n  // 숫자 포맷팅\n  function formatNumber(num: number): string {\n    return new Intl.NumberFormat('ko-KR').format(num)\n  }\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"space-y-6\">\n  <div class=\"text-center\">\n    <h3 class=\"text-lg font-semibold text-gray-900\">연차별 연구개발비 예산</h3>\n    <p class=\"text-sm text-gray-600 mt-1\">지원금, 기업부담금, 현물지원을 연차별로 입력하세요</p>\n  </div>\n\n  {#if isLoading}\n    <div class=\"flex items-center justify-center py-8\">\n      <div class=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n      <span class=\"ml-2 text-gray-600\">기존 예산 데이터를 불러오는 중...</span>\n    </div>\n  {:else}\n    <!-- 검증 오류 표시 -->\n    {#if validationErrors.length > 0}\n      <div class=\"p-3 bg-red-50 border border-red-200 rounded-lg\">\n        <ul class=\"text-sm text-red-700\">\n          {#each validationErrors as error, i (i)}\n            <li>• {error}</li>\n          {/each}\n        </ul>\n      </div>\n    {/if}\n\n    <!-- 연차별 예산 입력 -->\n    <div class=\"space-y-4\">\n      {#each budgets as budget, index (index)}\n        <div class=\"border border-gray-200 rounded-lg p-4\">\n          <div class=\"flex items-center justify-between mb-4\">\n            <h4 class=\"font-medium text-gray-900\">{budget.year}차년도</h4>\n            {#if budgets.length > 1}\n              <button\n                type=\"button\"\n                onclick={() => removeYear(index)}\n                class=\"text-red-600 hover:text-red-800\"\n              >\n                <TrashIcon class=\"w-4 h-4\" />\n              </button>\n            {/if}\n          </div>\n\n          <!-- 기간 설정 -->\n          <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <div>\n              <label for=\"start-date-{index}\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n                시작일 *\n              </label>\n              <input\n                id=\"start-date-{index}\"\n                type=\"date\"\n                bind:value={budget.startDate}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label for=\"end-date-{index}\" class=\"block text-sm font-medium text-gray-700 mb-1\">\n                종료일 *\n              </label>\n              <input\n                id=\"end-date-{index}\"\n                type=\"date\"\n                bind:value={budget.endDate}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n\n          <!-- 예산 입력 -->\n          <div class=\"space-y-3\">\n            <!-- 단위 안내 -->\n            <div class=\"text-xs text-gray-500 text-center bg-gray-50 py-1 rounded\">\n              금액 단위: 천원 (예: 1000 입력 = 1,000천원)\n            </div>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <label\n                  for=\"gov-funding-{index}\"\n                  class=\"block text-sm font-medium text-green-700 mb-1\"\n                >\n                  지원금\n                </label>\n                <div class=\"relative\">\n                  <input\n                    id=\"gov-funding-{index}\"\n                    type=\"number\"\n                    bind:value={budget.governmentFunding}\n                    min=\"0\"\n                    step=\"1000\"\n                    class=\"w-full px-3 py-2 pr-12 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500\"\n                    placeholder=\"0\"\n                  />\n                  <div class=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\"\n                  >\n                    <span class=\"text-gray-500 text-sm\">천원</span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <label\n                  for=\"company-cash-{index}\"\n                  class=\"block text-sm font-medium text-orange-700 mb-1\"\n                >\n                  기업부담금\n                </label>\n                <div class=\"relative\">\n                  <input\n                    id=\"company-cash-{index}\"\n                    type=\"number\"\n                    bind:value={budget.companyCash}\n                    min=\"0\"\n                    step=\"1000\"\n                    class=\"w-full px-3 py-2 pr-12 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500\"\n                    placeholder=\"0\"\n                  />\n                  <div class=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\"\n                  >\n                    <span class=\"text-gray-500 text-sm\">천원</span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <label\n                  for=\"company-inkind-{index}\"\n                  class=\"block text-sm font-medium text-purple-700 mb-1\"\n                >\n                  현물 지원\n                </label>\n                <div class=\"relative\">\n                  <input\n                    id=\"company-inkind-{index}\"\n                    type=\"number\"\n                    bind:value={budget.companyInKind}\n                    min=\"0\"\n                    step=\"1000\"\n                    class=\"w-full px-3 py-2 pr-12 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500\"\n                    placeholder=\"0\"\n                  />\n                  <div class=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\"\n                  >\n                    <span class=\"text-gray-500 text-sm\">천원</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- 연차 소계 -->\n          <div class=\"mt-3 p-3 bg-gray-50 rounded-md\">\n            <div class=\"text-sm font-medium text-gray-900\">\n              {budget.year}차년도 사업비: {formatNumber(calculateTotal(budget))}원\n            </div>\n            <div class=\"text-xs text-gray-500 mt-1\">\n              지원금 {formatNumber(budget.governmentFunding || 0)}천원 + 기업부담금 {formatNumber(\n                budget.companyCash || 0\n              )}천원 + 현물지원 {formatNumber(budget.companyInKind || 0)}천원\n            </div>\n          </div>\n        </div>\n      {/each}\n    </div>\n\n    <!-- 연차 추가 버튼 -->\n    <div class=\"text-center\">\n      <button\n        type=\"button\"\n        onclick={addYear}\n        class=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n      >\n        <PlusIcon class=\"w-4 h-4 mr-2\" />\n        {budgets.length + 1}차년도 추가\n      </button>\n    </div>\n\n    <!-- 전체 합계 및 사업 기간 -->\n    <div class=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n      <div class=\"text-center space-y-3\">\n        <!-- 전체 사업비 -->\n        <div>\n          <div class=\"text-sm text-blue-700 mb-1\">전체 사업비</div>\n          <div class=\"text-2xl font-bold text-blue-900\">\n            {formatNumber(calculateGrandTotal())}원\n          </div>\n          <div class=\"text-sm text-blue-600\">\n            {budgets.length}년차 사업 총액\n          </div>\n          <!-- 세부 내역 -->\n          <div class=\"mt-2 text-xs text-blue-500 space-y-1\">\n            <div>\n              지원금: {formatNumber(\n                budgets.reduce((sum, b) => sum + (b.governmentFunding || 0), 0)\n              )}천원\n            </div>\n            <div>\n              기업부담금: {formatNumber(\n                budgets.reduce((sum, b) => sum + (b.companyCash || 0), 0)\n              )}천원\n            </div>\n            <div>\n              현물지원: {formatNumber(\n                budgets.reduce((sum, b) => sum + (b.companyInKind || 0), 0)\n              )}천원\n            </div>\n          </div>\n        </div>\n\n        <!-- 전체 사업 기간 -->\n        {#if calculateProjectPeriod().startDate && calculateProjectPeriod().endDate}\n          {@const period = calculateProjectPeriod()}\n          <div class=\"pt-3 border-t border-blue-200\">\n            <div class=\"text-sm text-blue-700 mb-1\">전체 사업 기간</div>\n            <div class=\"text-lg font-semibold text-blue-900\">\n              {period.startDate} ~ {period.endDate}\n            </div>\n            <div class=\"text-sm text-blue-600\">연차별 기간으로부터 자동 계산</div>\n          </div>\n        {:else}\n          <div class=\"pt-3 border-t border-blue-200\">\n            <div class=\"text-sm text-gray-500\">\n              연차별 기간을 설정하면 전체 사업 기간이 자동 계산됩니다\n            </div>\n          </div>\n        {/if}\n      </div>\n    </div>\n\n    <!-- 저장 버튼 -->\n    <div class=\"flex justify-center\">\n      <button\n        type=\"button\"\n        onclick={saveBudgets}\n        disabled={isSubmitting || calculateGrandTotal() === 0}\n        class=\"flex items-center px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50\"\n      >\n        {#if isSubmitting}\n          <div class=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n          저장 중...\n        {:else}\n          <CheckIcon class=\"w-4 h-4 mr-2\" />\n          예산 저장\n        {/if}\n      </button>\n    </div>\n  {/if}\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/EmployeeSalaryHistory.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'payroll' is defined but never used.","line":149,"column":34,"nodeType":"Identifier","messageId":"unusedVar","endLine":149,"endColumn":46,"suggestions":[{"messageId":"removeVar","data":{"varName":"payroll"},"fix":{"range":[3869,3881],"text":""},"desc":"Remove unused variable 'payroll'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getChangeIcon' is defined but never used.","line":190,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":190,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"getChangeIcon"},"fix":{"range":[4794,4945],"text":""},"desc":"Remove unused variable 'getChangeIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getChangeColor' is defined but never used.","line":197,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"getChangeColor"},"fix":{"range":[4964,5130],"text":""},"desc":"Remove unused variable 'getChangeColor'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { onMount } from 'svelte'\n  import { payslips, loadPayslips, loadSalaryHistory } from '$lib/stores/salary/salary-store'\n  import { formatCurrency, formatDate } from '$lib/utils/format'\n  import {\n    SearchIcon,\n    FilterIcon,\n    DownloadIcon,\n    EyeIcon,\n    CalendarIcon,\n    DollarSignIcon,\n    FileTextIcon,\n    TrendingUpIcon,\n    TrendingDownIcon,\n    MinusIcon\n  } from '@lucide/svelte'\n\n  // 검색 및 필터 상태\n  let searchQuery = $state('')\n  let selectedPeriod = $state('')\n  let selectedStatus = $state('')\n  let sortBy = $state('period')\n  let sortOrder = $state('desc')\n\n  // 모달 상태\n  let showDetailsModal = $state(false)\n  let selectedPayroll = $state(null)\n\n  // 기간 옵션 생성\n  const periodOptions = $derived(() => {\n    const periods = new Set()\n    $payslips.forEach(payslip => {\n      const period = payslip.period // YYYY-MM 형식\n      periods.add(period)\n    })\n    return Array.from(periods).sort().reverse()\n  })\n\n  // 필터링된 급여 이력\n  const filteredHistory = $derived(() => {\n    let filtered = [...$payslips]\n\n    // 검색 필터\n    if (searchQuery) {\n      const query = searchQuery.toLowerCase()\n      filtered = filtered.filter(\n        payroll =>\n          payroll.employeeName.toLowerCase().includes(query) ||\n            payroll.employeeIdNumber.toLowerCase().includes(query) ||\n            payroll.department.toLowerCase().includes(query) ||\n            payroll.position.toLowerCase().includes(query)\n      )\n    }\n\n    // 기간 필터\n    if (selectedPeriod) {\n      filtered = filtered.filter(payroll => payroll.payDate.startsWith(selectedPeriod))\n    }\n\n    // 상태 필터\n    if (selectedStatus) {\n      filtered = filtered.filter(payroll => payroll.status === selectedStatus)\n    }\n\n    // 정렬\n    filtered.sort((a, b) => {\n      let aValue, bValue\n\n      switch (sortBy) {\n        case 'name':\n          aValue = a.employeeName\n          bValue = b.employeeName\n          break\n        case 'department':\n          aValue = a.department\n          bValue = b.department\n          break\n        case 'grossSalary':\n          aValue = a.grossSalary\n          bValue = b.grossSalary\n          break\n        case 'netSalary':\n          aValue = a.netSalary\n          bValue = b.netSalary\n          break\n        case 'period':\n        default:\n          aValue = a.payDate\n          bValue = b.payDate\n          break\n      }\n\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\n        return sortOrder === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue)\n      }\n\n      if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1\n      if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1\n      return 0\n    })\n\n    return filtered\n  })\n\n  // 통계 계산\n  const statistics = $derived(() => {\n    const total = filteredHistory.length\n    const totalGrossSalary = filteredHistory.reduce((sum, payroll) => sum + payroll.grossSalary, 0)\n    const totalNetSalary = filteredHistory.reduce((sum, payroll) => sum + payroll.netSalary, 0)\n    const totalDeductions = filteredHistory.reduce(\n      (sum, payroll) => sum + payroll.totalDeductions,\n      0\n    )\n    const averageGrossSalary = total > 0 ? totalGrossSalary / total : 0\n    const averageNetSalary = total > 0 ? totalNetSalary / total : 0\n\n    return {\n      total,\n      totalGrossSalary,\n      totalNetSalary,\n      totalDeductions,\n      averageGrossSalary,\n      averageNetSalary\n    }\n  })\n\n  onMount(async () => {\n    await loadPayslips()\n    await loadSalaryHistory()\n  })\n\n  // 급여 상세 정보 보기\n  function viewPayrollDetails(payroll: any) {\n    selectedPayroll = payroll\n    showDetailsModal = true\n  }\n\n  // 정렬 변경\n  function handleSort(field: string) {\n    if (sortBy === field) {\n      sortOrder = sortOrder === 'asc' ? 'desc' : 'asc'\n    } else {\n      sortBy = field\n      sortOrder = 'desc'\n    }\n  }\n\n  // 급여명세서 다운로드\n  async function downloadPayslip(payroll: any) {\n  // 급여명세서 다운로드 기능은 PayslipGenerator에서 구현됨\n  }\n\n  // 상태별 색상 반환\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'pending':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'calculated':\n        return 'text-blue-600 bg-blue-100'\n      case 'approved':\n        return 'text-green-600 bg-green-100'\n      case 'paid':\n        return 'text-purple-600 bg-purple-100'\n      case 'error':\n        return 'text-red-600 bg-red-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  // 상태별 라벨 반환\n  function getStatusLabel(status: string): string {\n    switch (status) {\n      case 'pending':\n        return '대기중'\n      case 'calculated':\n        return '계산완료'\n      case 'approved':\n        return '승인완료'\n      case 'paid':\n        return '지급완료'\n      case 'error':\n        return '오류'\n      default:\n        return '알수없음'\n    }\n  }\n\n  // 변화율 아이콘 반환\n  function getChangeIcon(change: number) {\n    if (change > 0) return TrendingUpIcon\n    if (change < 0) return TrendingDownIcon\n    return MinusIcon\n  }\n\n  // 변화율 색상 반환\n  function getChangeColor(change: number): string {\n    if (change > 0) return 'text-green-600'\n    if (change < 0) return 'text-red-600'\n    return 'text-gray-600'\n  }\n</script>\n\n<div class=\"space-y-6\">\n  <!-- 헤더 -->\n  <div class=\"flex items-center justify-between\">\n    <div>\n      <h2 class=\"text-2xl font-bold text-gray-900\">직원별 급여 이력</h2>\n      <p class=\"mt-1 text-sm text-gray-500\">전체 직원의 급여 지급 이력 및 상세 정보</p>\n    </div>\n    <div class=\"flex items-center space-x-3\">\n      <button\n        type=\"button\"\n        class=\"inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50\"\n      >\n        <DownloadIcon size={16} class=\"mr-2\" />\n        엑셀 다운로드\n      </button>\n      <button\n        type=\"button\"\n        class=\"inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700\"\n      >\n        급여 계산\n      </button>\n    </div>\n  </div>\n\n  <!-- 통계 카드 -->\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <p class=\"text-sm font-medium text-gray-600\">총 급여 건수</p>\n          <p class=\"text-2xl font-bold text-gray-900\">{$statistics.total}건</p>\n        </div>\n        <div class=\"p-2 bg-blue-100 rounded-full\">\n          <FileTextIcon size={20} class=\"text-blue-600\" />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <p class=\"text-sm font-medium text-gray-600\">총 지급액</p>\n          <p class=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency($statistics.totalGrossSalary)}\n          </p>\n        </div>\n        <div class=\"p-2 bg-green-100 rounded-full\">\n          <DollarSignIcon size={20} class=\"text-green-600\" />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <p class=\"text-sm font-medium text-gray-600\">총 실지급액</p>\n          <p class=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency($statistics.totalNetSalary)}\n          </p>\n        </div>\n        <div class=\"p-2 bg-purple-100 rounded-full\">\n          <TrendingUpIcon size={20} class=\"text-purple-600\" />\n        </div>\n      </div>\n    </div>\n\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n      <div class=\"flex items-center justify-between\">\n        <div>\n          <p class=\"text-sm font-medium text-gray-600\">평균 급여</p>\n          <p class=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency($statistics.averageGrossSalary)}\n          </p>\n        </div>\n        <div class=\"p-2 bg-yellow-100 rounded-full\">\n          <CalendarIcon size={20} class=\"text-yellow-600\" />\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <!-- 검색 및 필터 -->\n  <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4\">\n    <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n      <div class=\"relative\">\n        <SearchIcon size={20} class=\"absolute left-3 top-3 text-gray-400\" />\n        <input\n          type=\"text\"\n          placeholder=\"직원명, 사번, 부서로 검색...\"\n          bind:value={searchQuery}\n          class=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        />\n      </div>\n\n      <div class=\"relative\">\n        <CalendarIcon size={20} class=\"absolute left-3 top-3 text-gray-400\" />\n        <select\n          bind:value={selectedPeriod}\n          class=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        >\n          <option value=\"\">전체 기간</option>\n          {#each periodOptions as period, i (i)}\n            <option value={period}>{period}</option>\n          {/each}\n        </select>\n      </div>\n\n      <div class=\"relative\">\n        <FilterIcon size={20} class=\"absolute left-3 top-3 text-gray-400\" />\n        <select\n          bind:value={selectedStatus}\n          class=\"w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n        >\n          <option value=\"\">전체 상태</option>\n          <option value=\"pending\">대기중</option>\n          <option value=\"calculated\">계산완료</option>\n          <option value=\"approved\">승인완료</option>\n          <option value=\"paid\">지급완료</option>\n          <option value=\"error\">오류</option>\n        </select>\n      </div>\n\n      <div class=\"flex items-center space-x-2\">\n        <button\n          type=\"button\"\n          onclick={() => handleSort('period')}\n          class=\"px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          기간 {sortBy === 'period' ? (sortOrder === 'asc' ? '↑' : '↓') : ''}\n        </button>\n        <button\n          type=\"button\"\n          onclick={() => handleSort('netSalary')}\n          class=\"px-3 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          급여 {sortBy === 'netSalary' ? (sortOrder === 'asc' ? '↑' : '↓') : ''}\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <!-- 급여 이력 테이블 -->\n  <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden\">\n    <div class=\"overflow-x-auto\">\n      <table class=\"min-w-full divide-y divide-gray-200\">\n        <thead class=\"bg-gray-50\">\n          <tr>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              직원 정보\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              부서/직위\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              지급 기간\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              기본급\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              수당\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              공제\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              실지급액\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              상태\n            </th>\n            <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              작업\n            </th>\n          </tr>\n        </thead>\n        <tbody class=\"bg-white divide-y divide-gray-200\">\n          {#each filteredHistory as payroll, i (i)}\n            <tr class=\"hover:bg-gray-50\">\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <div class=\"flex items-center\">\n                  <div class=\"flex-shrink-0 h-10 w-10\">\n                    <div class=\"h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center\"\n                    >\n                      <span class=\"text-sm font-medium text-blue-600\">\n                        {payroll.employeeName.charAt(0)}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"ml-4\">\n                    <div class=\"text-sm font-medium text-gray-900\">\n                      {payroll.employeeName}\n                    </div>\n                    <div class=\"text-sm text-gray-500\">\n                      {payroll.employeeIdNumber}\n                    </div>\n                  </div>\n                </div>\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <div class=\"text-sm text-gray-900\">{payroll.department}</div>\n                <div class=\"text-sm text-gray-500\">{payroll.position}</div>\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {formatDate(payroll.payDate)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                {formatCurrency(payroll.baseSalary)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-green-600\">\n                +{formatCurrency(payroll.totalAllowances)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-red-600\">\n                -{formatCurrency(payroll.totalDeductions)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <div class=\"text-sm font-medium text-gray-900\">\n                  {formatCurrency(payroll.netSalary)}\n                </div>\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <span\n                  class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {getStatusColor(\n                    payroll.status\n                  )}\"\n                >\n                  {getStatusLabel(payroll.status)}\n                </span>\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                <div class=\"flex items-center space-x-2\">\n                  <button\n                    type=\"button\"\n                    onclick={() => viewPayrollDetails(payroll)}\n                    class=\"text-blue-600 hover:text-blue-900\"\n                  >\n                    <EyeIcon size={16} />\n                  </button>\n                  <button\n                    type=\"button\"\n                    onclick={() => downloadPayslip(payroll)}\n                    class=\"text-green-600 hover:text-green-900\"\n                  >\n                    <DownloadIcon size={16} />\n                  </button>\n                </div>\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n\n    <!-- 결과가 없을 때 -->\n    {#if filteredHistory.length === 0}\n      <div class=\"text-center py-12\">\n        <FileTextIcon size={48} class=\"mx-auto text-gray-400\" />\n        <h3 class=\"mt-2 text-sm font-medium text-gray-900\">급여 이력이 없습니다</h3>\n        <p class=\"mt-1 text-sm text-gray-500\">검색 조건을 변경하거나 급여를 계산해보세요.</p>\n      </div>\n    {/if}\n  </div>\n</div>\n\n<!-- 급여 상세 정보 모달 -->\n{#if showDetailsModal && selectedPayroll}\n  <!-- 모달 구현 (별도 컴포넌트로 분리 가능) -->\n  <div class=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50\">\n    <div class=\"relative top-20 mx-auto p-5 border w-11/12 max-w-2xl shadow-lg rounded-md bg-white\">\n      <div class=\"mt-3\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h3 class=\"text-lg font-medium text-gray-900\">급여 상세 정보</h3>\n          <button\n            type=\"button\"\n            onclick={() => (showDetailsModal = false)}\n            class=\"text-gray-400 hover:text-gray-600\"\n            aria-label=\"모달 닫기\"\n          >\n            <svg\n              class=\"w-6 h-6\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\">\n              <path\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n                stroke-width=\"2\"\n                d=\"M6 18L18 6M6 6l12 12\"\n              />\n            </svg>\n          </button>\n        </div>\n\n        <div class=\"space-y-4\">\n          <!-- 기본 정보 -->\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700\">직원명</label>\n              <p class=\"mt-1 text-sm text-gray-900\">{selectedPayroll.employeeInfo.name}</p>\n            </div>\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700\">사번</label>\n              <p class=\"mt-1 text-sm text-gray-900\">{selectedPayroll.employeeInfo.employeeId}</p>\n            </div>\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700\">부서</label>\n              <p class=\"mt-1 text-sm text-gray-900\">{selectedPayroll.employeeInfo.department}</p>\n            </div>\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700\">직위</label>\n              <p class=\"mt-1 text-sm text-gray-900\">{selectedPayroll.employeeInfo.position}</p>\n            </div>\n          </div>\n\n          <!-- 급여 정보 -->\n          <div class=\"border-t pt-4\">\n            <h4 class=\"text-md font-medium text-gray-900 mb-3\">급여 내역</h4>\n            <div class=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700\">기본급</label>\n                <p class=\"mt-1 text-sm text-gray-900\">\n                  {formatCurrency(selectedPayroll.salaryInfo.baseSalary)}\n                </p>\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700\">총 수당</label>\n                <p class=\"mt-1 text-sm text-green-600\">\n                  {formatCurrency(selectedPayroll.totals.totalAllowances)}\n                </p>\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700\">총 공제</label>\n                <p class=\"mt-1 text-sm text-red-600\">\n                  {formatCurrency(selectedPayroll.totals.totalDeductions)}\n                </p>\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700\">실지급액</label>\n                <p class=\"mt-1 text-lg font-bold text-gray-900\">\n                  {formatCurrency(selectedPayroll.totals.netSalary)}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <!-- 액션 버튼 -->\n          <div class=\"flex justify-end space-x-3 pt-4 border-t\">\n            <button\n              type=\"button\"\n              onclick={() => (showDetailsModal = false)}\n              class=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n            >\n              닫기\n            </button>\n            <button\n              type=\"button\"\n              onclick={() => downloadPayslip(selectedPayroll)}\n              class=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700\"\n            >\n              급여명세서 다운로드\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/PayslipGenerator.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":108,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":108,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":159,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":159,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":159,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":159,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[5229,5229],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":412,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":412,"endColumn":19},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":500,"column":11,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":502,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import { formatCurrency } from '$lib/utils/format'\n  import {\n    AlertCircleIcon,\n    EditIcon,\n    PlusIcon,\n    PrinterIcon,\n    SaveIcon,\n    UserIcon\n  } from '@lucide/svelte'\n\n  let { payroll = undefined }: { payroll?: any } = $props()\n\n  let employeeList = $state<any[]>([])\n  let selectedEmployeeId = $state('')\n  let selectedYear = $state(new Date().getFullYear())\n  let payslipData = $state<any[]>([])\n  let isLoadingPayslipData = $state(false)\n  let editingMonth = $state<number | null>(null)\n  let editingPayslip = $state<any>(null)\n\n  // 급여명세서 데이터 로드 (월별)\n  async function loadPayslipData() {\n    if (!selectedEmployeeId) {\n      payslipData = []\n      return\n    }\n\n    isLoadingPayslipData = true\n    try {\n      const response = await fetch(\n        `/api/salary/payslips/employee/${selectedEmployeeId}?year=${selectedYear}`\n      )\n      const result = await response.json()\n\n      // 현재 날짜 기준으로 허용 가능한 월 계산\n      const currentDate = new Date()\n      const currentYear = currentDate.getFullYear()\n      const currentMonth = currentDate.getMonth() + 1 // 1-12\n\n      // 선택된 직원의 입사일 확인\n      const selectedEmployee = employeeList.find(emp => emp.id === selectedEmployeeId)\n      const hireDate = selectedEmployee?.hireDate ? new Date(selectedEmployee.hireDate) : null\n      const hireYear = hireDate ? hireDate.getFullYear() : null\n      const hireMonth = hireDate ? hireDate.getMonth() + 1 : null\n\n      if (result.success && result.data) {\n        // 월별로 정리\n        const monthlyData = Array.from({ length: 12 }, (_, i) => {\n          const month = i + 1\n          const period = `${selectedYear}-${String(month).padStart(2, '0')}`\n\n          // API 응답이 배열인지 단일 객체인지 확인\n          let payslip = null\n          if (Array.isArray(result.data)) {\n            payslip = result.data.find((p: any) => p.period === period)\n          } else if (result.data.period === period) {\n            payslip = result.data\n          }\n\n          // 미래 월인지 확인 (현재 연도와 월 기준)\n          const isFutureMonth =\n            selectedYear > currentYear || (selectedYear === currentYear && month > currentMonth)\n\n          // 입사일 이전 월인지 확인\n          const isBeforeHire =\n            hireDate &&\n              (selectedYear < hireYear || (selectedYear === hireYear && month < hireMonth))\n\n          return {\n            month,\n            period,\n            label: `${month}월`,\n            payslip: payslip || null,\n            hasData: !!payslip,\n            isFutureMonth,\n            isBeforeHire,\n            isLocked: isFutureMonth || isBeforeHire\n          }\n        })\n\n        payslipData = monthlyData\n      } else {\n        // 데이터가 없어도 12개월 구조 생성\n        payslipData = Array.from({ length: 12 }, (_, i) => {\n          const month = i + 1\n          const isFutureMonth =\n            selectedYear > currentYear || (selectedYear === currentYear && month > currentMonth)\n\n          // 입사일 이전 월인지 확인\n          const isBeforeHire =\n            hireDate &&\n              (selectedYear < hireYear || (selectedYear === hireYear && month < hireMonth))\n\n          return {\n            month,\n            period: `${selectedYear}-${String(month).padStart(2, '0')}`,\n            label: `${month}월`,\n            payslip: null,\n            hasData: false,\n            isFutureMonth,\n            isBeforeHire,\n            isLocked: isFutureMonth || isBeforeHire\n          }\n        })\n      }\n    } catch (error) {\n      const currentDate = new Date()\n      const currentYear = currentDate.getFullYear()\n      const currentMonth = currentDate.getMonth() + 1\n\n      // 선택된 직원의 입사일 확인\n      const selectedEmployee = employeeList.find(emp => emp.id === selectedEmployeeId)\n      const hireDate = selectedEmployee?.hireDate ? new Date(selectedEmployee.hireDate) : null\n      const hireYear = hireDate ? hireDate.getFullYear() : null\n      const hireMonth = hireDate ? hireDate.getMonth() + 1 : null\n\n      payslipData = Array.from({ length: 12 }, (_, i) => {\n        const month = i + 1\n        const isFutureMonth =\n          selectedYear > currentYear || (selectedYear === currentYear && month > currentMonth)\n\n        // 입사일 이전 월인지 확인\n        const isBeforeHire =\n          hireDate && (selectedYear < hireYear || (selectedYear === hireYear && month < hireMonth))\n\n        return {\n          month,\n          period: `${selectedYear}-${String(month).padStart(2, '0')}`,\n          label: `${month}월`,\n          payslip: null,\n          hasData: false,\n          isFutureMonth,\n          isBeforeHire,\n          isLocked: isFutureMonth || isBeforeHire\n        }\n      })\n    } finally {\n      isLoadingPayslipData = false\n    }\n  }\n\n  // 직원 목록 로드\n  async function loadEmployeeList() {\n    try {\n      const response = await fetch('/api/employees')\n      const result = await response.json()\n      if (result.success) {\n        employeeList = result.data.map((emp: any) => ({\n          id: emp.id,\n          employeeId: emp.employee_id,\n          name: `${emp.last_name}${emp.first_name} (${emp.position})`,\n          department: emp.department || '부서없음',\n          position: emp.position,\n          hireDate: emp.hire_date\n        }))\n      }\n    } catch (error) {}\n  }\n\n  // 급여명세서 편집 모드 진입\n  function enterEditMode(month: number, payslip?: any) {\n    editingMonth = month\n    if (payslip) {\n      editingPayslip = {\n        ...payslip,\n        allowances: payslip.allowances || [\n          { id: 'basic_salary', name: '기본급', type: 'basic', amount: 0, isTaxable: true },\n          {\n            id: 'position_allowance',\n            name: '직책수당',\n            type: 'allowance',\n            amount: 0,\n            isTaxable: true\n          },\n          { id: 'bonus', name: '상여금', type: 'bonus', amount: 0, isTaxable: true },\n          { id: 'meal_allowance', name: '식대', type: 'allowance', amount: 0, isTaxable: false },\n          {\n            id: 'vehicle_maintenance',\n            name: '차량유지',\n            type: 'allowance',\n            amount: 0,\n            isTaxable: false\n          },\n          {\n            id: 'annual_leave_allowance',\n            name: '연차수당',\n            type: 'allowance',\n            amount: 0,\n            isTaxable: true\n          },\n          {\n            id: 'year_end_settlement',\n            name: '연말정산',\n            type: 'settlement',\n            amount: 0,\n            isTaxable: true\n          }\n        ],\n        deductions: payslip.deductions || [\n          {\n            id: 'health_insurance',\n            name: '건강보험',\n            rate: 0.034,\n            type: 'insurance',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'long_term_care',\n            name: '장기요양보험',\n            rate: 0.0034,\n            type: 'insurance',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'national_pension',\n            name: '국민연금',\n            rate: 0.045,\n            type: 'pension',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'employment_insurance',\n            name: '고용보험',\n            rate: 0.008,\n            type: 'insurance',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'income_tax',\n            name: '갑근세',\n            rate: 0.13,\n            type: 'tax',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'local_tax',\n            name: '주민세',\n            rate: 0.013,\n            type: 'tax',\n            amount: 0,\n            isMandatory: true\n          },\n          { id: 'other', name: '기타', rate: 0, type: 'other', amount: 0, isMandatory: false }\n        ]\n      }\n    } else {\n      // 새 급여명세서 생성\n      editingPayslip = {\n        period: `${selectedYear}-${String(month).padStart(2, '0')}`,\n        allowances: [\n          { id: 'basic_salary', name: '기본급', type: 'basic', amount: 0, isTaxable: true },\n          {\n            id: 'position_allowance',\n            name: '직책수당',\n            type: 'allowance',\n            amount: 0,\n            isTaxable: true\n          },\n          { id: 'bonus', name: '상여금', type: 'bonus', amount: 0, isTaxable: true },\n          { id: 'meal_allowance', name: '식대', type: 'allowance', amount: 0, isTaxable: false },\n          {\n            id: 'vehicle_maintenance',\n            name: '차량유지',\n            type: 'allowance',\n            amount: 0,\n            isTaxable: false\n          },\n          {\n            id: 'annual_leave_allowance',\n            name: '연차수당',\n            type: 'allowance',\n            amount: 0,\n            isTaxable: true\n          },\n          {\n            id: 'year_end_settlement',\n            name: '연말정산',\n            type: 'settlement',\n            amount: 0,\n            isTaxable: true\n          }\n        ],\n        deductions: [\n          {\n            id: 'health_insurance',\n            name: '건강보험',\n            rate: 0.034,\n            type: 'insurance',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'long_term_care',\n            name: '장기요양보험',\n            rate: 0.0034,\n            type: 'insurance',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'national_pension',\n            name: '국민연금',\n            rate: 0.045,\n            type: 'pension',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'employment_insurance',\n            name: '고용보험',\n            rate: 0.008,\n            type: 'insurance',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'income_tax',\n            name: '갑근세',\n            rate: 0.13,\n            type: 'tax',\n            amount: 0,\n            isMandatory: true\n          },\n          {\n            id: 'local_tax',\n            name: '주민세',\n            rate: 0.013,\n            type: 'tax',\n            amount: 0,\n            isMandatory: true\n          },\n          { id: 'other', name: '기타', rate: 0, type: 'other', amount: 0, isMandatory: false }\n        ],\n        totalPayments: 0,\n        totalDeductions: 0,\n        netSalary: 0\n      }\n    }\n  }\n\n  // 편집 모드 취소\n  function cancelEdit() {\n    editingMonth = null\n    editingPayslip = null\n  }\n\n  // 총액 재계산\n  function recalculateTotals() {\n    if (!editingPayslip) return\n\n    editingPayslip.totalPayments = editingPayslip.allowances.reduce(\n      (sum: number, item: any) => sum + (item.amount || 0),\n      0\n    )\n    editingPayslip.totalDeductions = editingPayslip.deductions.reduce(\n      (sum: number, item: any) => sum + (item.amount || 0),\n      0\n    )\n    editingPayslip.netSalary = editingPayslip.totalPayments - editingPayslip.totalDeductions\n  }\n\n  // 급여명세서 저장\n  async function savePayslip() {\n    if (!editingPayslip || !editingMonth) return\n\n    try {\n      // 총액 재계산\n      recalculateTotals()\n\n      // 기본급 계산 (지급사항에서 기본급 찾기)\n      const basicSalary =\n        editingPayslip.allowances.find((a: any) => a.id === 'basic_salary')?.amount || 0\n\n      // 지급일 설정 (해당 월의 마지막 날)\n      const [year, month] = editingPayslip.period.split('-')\n      const lastDay = new Date(parseInt(year), parseInt(month), 0).getDate()\n      const payDate = `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`\n\n      const response = await fetch('/api/salary/payslips', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          employeeId: selectedEmployeeId,\n          period: editingPayslip.period,\n          payDate: payDate,\n          baseSalary: basicSalary,\n          totalPayments: editingPayslip.totalPayments,\n          totalDeductions: editingPayslip.totalDeductions,\n          netSalary: editingPayslip.netSalary,\n          payments: editingPayslip.allowances,\n          deductions: editingPayslip.deductions,\n          status: 'draft',\n          isGenerated: false\n        })\n      })\n\n      const result = await response.json()\n      if (result.success) {\n        alert('급여명세서가 저장되었습니다.')\n        cancelEdit()\n        loadPayslipData()\n      } else {\n        alert(`저장에 실패했습니다: ${result.error}`)\n      }\n    } catch (error) {\n      alert('저장 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 누락된 급여명세서 개수 계산 (잠금된 월 제외)\n  function getMissingPayslipCount() {\n    return payslipData.filter(month => !month.hasData && !month.isLocked).length\n  }\n\n  // 계약 기간 내 누락된 급여명세서 확인 (잠금된 월 제외)\n  function getContractPeriodMissingPayslips() {\n    if (!selectedEmployeeId) return []\n\n    const selectedEmployee = employeeList.find(emp => emp.id === selectedEmployeeId)\n    if (!selectedEmployee?.hireDate) return []\n\n    const hireDate = new Date(selectedEmployee.hireDate)\n    const currentDate = new Date()\n    const missingPeriods = []\n\n    // 입사일부터 현재까지의 월별 확인\n    let current = new Date(hireDate.getFullYear(), hireDate.getMonth(), 1)\n    const end = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1)\n\n    while (current <= end) {\n      const period = `${current.getFullYear()}-${String(current.getMonth() + 1).padStart(2, '0')}`\n      const monthData = payslipData.find(month => month.period === period)\n\n      // 잠금되지 않고 데이터가 없는 경우만 누락으로 간주\n      if (monthData && !monthData.hasData && !monthData.isLocked) {\n        missingPeriods.push({\n          period,\n          year: current.getFullYear(),\n          month: current.getMonth() + 1,\n          label: `${current.getFullYear()}년 ${current.getMonth() + 1}월`\n        })\n      }\n\n      current.setMonth(current.getMonth() + 1)\n    }\n\n    return missingPeriods\n  }\n\n  $effect(async () => {\n    await loadEmployeeList()\n  })\n\n  // selectedEmployeeId나 selectedYear가 변경될 때마다 급여명세서 데이터 로드\n  $effect(() => {\n    if (selectedEmployeeId) {\n      loadPayslipData()\n    } else {\n      payslipData = []\n    }\n  })\n</script>\n\n{#if !payroll}\n  <!-- 급여명세서 월별 관리 -->\n  <div class=\"space-y-6\">\n    <!-- 직원 선택 및 연도 선택 -->\n    <div class=\"flex items-center space-x-4\">\n      <div class=\"flex-1\">\n        <label\n          for=\"employee-select\"\n          class=\"block text-sm font-medium text-gray-700 mb-2\"\n        >직원 선택</label\n        >\n        <select\n          id=\"employee-select\"\n          bind:value={selectedEmployeeId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">직원을 선택하세요</option>\n          {#each employeeList as employee, i (i)}\n            <option value={employee.id}>{employee.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div class=\"w-32\">\n        <label for=\"year-select\" class=\"block text-sm font-medium text-gray-700 mb-2\">연도</label>\n        <select\n          id=\"year-select\"\n          bind:value={selectedYear}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          {#each Array.from({ length: 5 }, (_, i) => new Date().getFullYear() - i) as year}\n            <option value={year}>{year}년</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n\n    {#if selectedEmployeeId}\n      {@const selectedEmployee = employeeList.find(emp => emp.id === selectedEmployeeId)}\n      {@const missingCount = getMissingPayslipCount()}\n      {@const contractMissingPeriods = getContractPeriodMissingPayslips()}\n\n      <!-- 누락된 급여명세서 안내 -->\n      {#if missingCount > 0 || contractMissingPeriods.length > 0}\n        <div class=\"bg-amber-50 border border-amber-200 rounded-lg p-6\">\n          <div class=\"flex items-start\">\n            <AlertCircleIcon size={24} class=\"text-amber-600 mr-3 mt-0.5\" />\n            <div class=\"flex-1\">\n              <h3 class=\"text-lg font-semibold text-amber-800 mb-2\">급여명세서 작성 필요</h3>\n              <p class=\"text-amber-700 mb-4\">\n                {selectedEmployee?.name}님의 {selectedYear}년 급여명세서 중\n                <strong>{missingCount}개월</strong>이 누락되었습니다.\n                {#if contractMissingPeriods.length > 0}\n                  <br />계약 기간 내 누락된 급여명세서:\n                  <strong>{contractMissingPeriods.length}개월</strong>\n                {/if}\n              </p>\n              <p class=\"text-amber-600 text-sm\">\n                아래 표에서 빨간색으로 표시된 월을 클릭하여 급여명세서를 작성해주세요.\n                <br />회색으로 표시된 월은 입사일 이전이거나 미래 월로 잠금되어 있습니다.\n              </p>\n            </div>\n          </div>\n        </div>\n      {/if}\n\n      <!-- 월별 급여명세서 표 -->\n      <div class=\"bg-white rounded-lg shadow-sm border border-gray-200\">\n        <div class=\"px-6 py-4 border-b border-gray-200\">\n          <h3 class=\"text-lg font-semibold text-gray-900\">\n            {selectedYear}년 월별 급여명세서\n            {#if selectedEmployee}\n              - {selectedEmployee.name}\n            {/if}\n          </h3>\n        </div>\n\n        {#if isLoadingPayslipData}\n          <div class=\"flex items-center justify-center py-12\">\n            <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n            <span class=\"ml-2 text-gray-600\">로딩 중...</span>\n          </div>\n        {:else}\n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full divide-y divide-gray-200\">\n              <thead class=\"bg-gray-50\">\n                <tr>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >월</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >기본급</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >수당</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >지급총액</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >공제총액</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >실지급액</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >상태</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >액션</th\n                  >\n                </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200\">\n                {#each payslipData as monthData, i (i)}\n                  {#if editingMonth === monthData.month}\n                    <!-- 편집 모드 행 -->\n                    <tr class=\"bg-blue-50 border-2 border-blue-200\">\n                      <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-blue-900\">\n                        {monthData.label} (편집 중)\n                      </td>\n                      <td colspan=\"7\" class=\"px-6 py-4\">\n                        <div class=\"space-y-4\">\n                          <!-- 지급사항 편집 -->\n                          <div>\n                            <h4 class=\"text-sm font-semibold text-gray-700 mb-2\">지급사항</h4>\n                            <div class=\"grid grid-cols-2 gap-2\">\n                              {#each editingPayslip.allowances as allowance, index (index)}\n                                <div class=\"flex items-center space-x-2\">\n                                  <input\n                                    type=\"text\"\n                                    value={allowance.name}\n                                    oninput={e => {\n                                      editingPayslip.allowances[index].name = e.target.value\n                                      recalculateTotals()\n                                    }}\n                                    class=\"flex-1 px-2 py-1 border border-gray-300 rounded text-sm\"\n                                  />\n                                  <input\n                                    type=\"number\"\n                                    value={allowance.amount}\n                                    oninput={e => {\n                                      editingPayslip.allowances[index].amount =\n                                        Number(e.target.value) || 0\n                                      recalculateTotals()\n                                    }}\n                                    class=\"w-24 px-2 py-1 border border-gray-300 rounded text-sm text-right\"\n                                  />\n                                </div>\n                              {/each}\n                            </div>\n                          </div>\n\n                          <!-- 공제사항 편집 -->\n                          <div>\n                            <h4 class=\"text-sm font-semibold text-gray-700 mb-2\">공제사항</h4>\n                            <div class=\"grid grid-cols-2 gap-2\">\n                              {#each editingPayslip.deductions as deduction, index (index)}\n                                <div class=\"flex items-center space-x-2\">\n                                  <input\n                                    type=\"text\"\n                                    value={deduction.name}\n                                    oninput={e => {\n                                      editingPayslip.deductions[index].name = e.target.value\n                                      recalculateTotals()\n                                    }}\n                                    class=\"flex-1 px-2 py-1 border border-gray-300 rounded text-sm\"\n                                  />\n                                  <input\n                                    type=\"number\"\n                                    value={deduction.amount}\n                                    oninput={e => {\n                                      editingPayslip.deductions[index].amount =\n                                        Number(e.target.value) || 0\n                                      recalculateTotals()\n                                    }}\n                                    class=\"w-24 px-2 py-1 border border-gray-300 rounded text-sm text-right\"\n                                  />\n                                </div>\n                              {/each}\n                            </div>\n                          </div>\n\n                          <!-- 총액 표시 -->\n                          <div class=\"bg-gray-50 p-3 rounded border\">\n                            <div class=\"grid grid-cols-3 gap-4 text-sm\">\n                              <div>\n                                <span class=\"font-medium\">지급총액:</span>\n                                <span class=\"ml-2 font-semibold text-green-600\"\n                                >{formatCurrency(editingPayslip.totalPayments)}</span\n                                >\n                              </div>\n                              <div>\n                                <span class=\"font-medium\">공제총액:</span>\n                                <span class=\"ml-2 font-semibold text-red-600\"\n                                >{formatCurrency(editingPayslip.totalDeductions)}</span\n                                >\n                              </div>\n                              <div>\n                                <span class=\"font-medium\">실지급액:</span>\n                                <span class=\"ml-2 font-semibold text-blue-600\"\n                                >{formatCurrency(editingPayslip.netSalary)}</span\n                                >\n                              </div>\n                            </div>\n                          </div>\n\n                          <!-- 액션 버튼 -->\n                          <div class=\"flex justify-end space-x-2\">\n                            <ThemeButton variant=\"ghost\" size=\"sm\" onclick={cancelEdit}>\n                              취소\n                            </ThemeButton>\n                            <ThemeButton\n                              size=\"sm\"\n                              onclick={savePayslip}\n                              class=\"bg-blue-600 hover:bg-blue-700\"\n                            >\n                              <SaveIcon size={16} class=\"mr-1\" />\n                              저장\n                            </ThemeButton>\n                          </div>\n                        </div>\n                      </td>\n                    </tr>\n                  {:else}\n                    <!-- 일반 표시 행 -->\n                    <tr\n                      class=\"hover:bg-gray-50\"\n                      class:bg-gray-100={monthData.isLocked}\n                      class:bg-red-50={!monthData.hasData && !monthData.isLocked}\n                    >\n                      <td\n                        class=\"px-6 py-4 whitespace-nowrap text-sm font-medium {monthData.isLocked\n                          ? 'text-gray-400'\n                          : 'text-gray-900'}\"\n                      >\n                        {monthData.label}\n                        {#if monthData.isLocked}\n                          <span class=\"ml-2 text-xs text-gray-500\">\n                            {monthData.isBeforeHire ? '(입사전)' : '(잠금)'}\n                          </span>\n                        {/if}\n                      </td>\n                      <td\n                        class=\"px-6 py-4 whitespace-nowrap text-sm {monthData.isLocked\n                          ? 'text-gray-400'\n                          : 'text-gray-500'}\"\n                      >\n                        {monthData.hasData\n                          ? formatCurrency(monthData.payslip?.baseSalary || 0)\n                          : monthData.isLocked\n                          ? '잠금'\n                          : '-'}\n                      </td>\n                      <td\n                        class=\"px-6 py-4 whitespace-nowrap text-sm {monthData.isLocked\n                          ? 'text-gray-400'\n                          : 'text-gray-500'}\"\n                      >\n                        {monthData.hasData\n                          ? formatCurrency(\n                            (monthData.payslip?.totalPayments || 0) -\n                            (monthData.payslip?.baseSalary || 0)\n                          )\n                          : monthData.isLocked\n                          ? '잠금'\n                          : '-'}\n                      </td>\n                      <td\n                        class=\"px-6 py-4 whitespace-nowrap text-sm {monthData.isLocked\n                          ? 'text-gray-400'\n                          : 'text-gray-500'}\"\n                      >\n                        {monthData.hasData\n                          ? formatCurrency(monthData.payslip?.totalPayments || 0)\n                          : monthData.isLocked\n                          ? '잠금'\n                          : '-'}\n                      </td>\n                      <td\n                        class=\"px-6 py-4 whitespace-nowrap text-sm {monthData.isLocked\n                          ? 'text-gray-400'\n                          : 'text-gray-500'}\"\n                      >\n                        {monthData.hasData\n                          ? formatCurrency(monthData.payslip?.totalDeductions || 0)\n                          : monthData.isLocked\n                          ? '잠금'\n                          : '-'}\n                      </td>\n                      <td\n                        class=\"px-6 py-4 whitespace-nowrap text-sm font-medium {monthData.isLocked\n                          ? 'text-gray-400'\n                          : 'text-gray-900'}\"\n                      >\n                        {monthData.hasData\n                          ? formatCurrency(monthData.payslip?.netSalary || 0)\n                          : monthData.isLocked\n                          ? '잠금'\n                          : '-'}\n                      </td>\n                      <td class=\"px-6 py-4 whitespace-nowrap\">\n                        {#if monthData.isLocked}\n                          <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-600\"\n                          >\n                            {monthData.isBeforeHire ? '입사전' : '잠금'}\n                          </span>\n                        {:else if monthData.hasData}\n                          <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\"\n                          >\n                            완료\n                          </span>\n                        {:else}\n                          <span class=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800\"\n                          >\n                            미작성\n                          </span>\n                        {/if}\n                      </td>\n                      <td class=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                        {#if monthData.isLocked}\n                          <span class=\"text-gray-400 text-sm\">\n                            {monthData.isBeforeHire ? '입사전' : '잠금됨'}\n                          </span>\n                        {:else if monthData.hasData}\n                          <ThemeButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onclick={() => enterEditMode(monthData.month, monthData.payslip)}\n                          >\n                            <EditIcon size={16} class=\"mr-1\" />\n                            편집\n                          </ThemeButton>\n                        {:else}\n                          <ThemeButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onclick={() => enterEditMode(monthData.month)}\n                            class=\"border-red-300 text-red-700 hover:bg-red-50\"\n                          >\n                            <PlusIcon size={16} class=\"mr-1\" />\n                            작성\n                          </ThemeButton>\n                        {/if}\n                      </td>\n                    </tr>\n                  {/if}\n                {/each}\n              </tbody>\n            </table>\n          </div>\n        {/if}\n      </div>\n    {:else}\n      <div class=\"text-center py-12 bg-gray-50 rounded-lg border border-gray-200\">\n        <UserIcon size={48} class=\"mx-auto text-gray-400 mb-4\" />\n        <p class=\"text-gray-500\">급여명세서를 조회하려면 직원을 선택해주세요.</p>\n      </div>\n    {/if}\n  </div>\n{:else}\n  <!-- payroll prop이 있는 경우 (급여 이력에서 클릭한 경우) -->\n  <div class=\"space-y-4\">\n    <div class=\"flex items-center justify-between\">\n      <div>\n        <h3 class=\"text-lg font-semibold text-gray-900\">급여명세서</h3>\n        <p class=\"text-sm text-gray-500\">\n          {payroll.employeeInfo?.name || payroll.employeeName} - {payroll.period}\n        </p>\n      </div>\n      <ThemeButton onclick={() => window.print()}>\n        <PrinterIcon size={16} class=\"mr-1\" />\n        출력\n      </ThemeButton>\n    </div>\n  </div>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/PayslipUploader.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":71,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":105,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import {\n    UploadIcon,\n    DownloadIcon,\n    FileSpreadsheetIcon,\n    CheckCircleIcon,\n    XCircleIcon,\n    AlertCircleIcon,\n    CalendarIcon\n  } from '@lucide/svelte'\n\n  let showUploadModal = $state(false)\n  let selectedFile = $state<File | null>(null)\n  let selectedYear = $state(new Date().getFullYear())\n  let selectedMonth = $state(new Date().getMonth() + 1)\n  let isUploading = $state(false)\n  let uploadResult = $state<any>(null)\n  let showResultModal = $state(false)\n\n  // 월 옵션 생성\n  const monthOptions = Array.from({ length: 12 }, (_, i) => ({\n    value: i + 1,\n    label: `${i + 1}월`\n  }))\n\n  // 연도 옵션 생성 (현재 연도 기준 ±2년)\n  const yearOptions = Array.from({ length: 5 }, (_, i) => {\n    const year = new Date().getFullYear() - 2 + i\n    return { value: year, label: `${year}년` }\n  })\n\n  // 파일 선택 처리\n  function handleFileSelect(event: Event) {\n    const target = event.target as HTMLInputElement\n    const file = target.files?.[0]\n\n    if (file) {\n      // 파일 확장자 검증\n      if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n        alert('엑셀 파일(.xlsx, .xls)만 업로드 가능합니다.')\n        target.value = ''\n        return\n      }\n\n      selectedFile = file\n    }\n  }\n\n  // 템플릿 다운로드\n  async function downloadTemplate() {\n    try {\n      const response = await fetch(\n        `/api/salary/payslips/template?year=${selectedYear}&month=${selectedMonth}`\n      )\n\n      if (!response.ok) {\n        throw new Error('템플릿 다운로드에 실패했습니다.')\n      }\n\n      const blob = await response.blob()\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = `payslip_template_${selectedYear}_${selectedMonth}.xlsx`\n      document.body.appendChild(a)\n      a.click()\n      document.body.removeChild(a)\n      window.URL.revokeObjectURL(url)\n    } catch (error) {\n      alert('템플릿 다운로드에 실패했습니다.')\n    }\n  }\n\n  // 파일 업로드\n  async function uploadFile() {\n    if (!selectedFile) {\n      alert('파일을 선택해주세요.')\n      return\n    }\n\n    isUploading = true\n\n    try {\n      const formData = new FormData()\n      formData.append('file', selectedFile)\n      formData.append('period', `${selectedYear}-${String(selectedMonth).padStart(2, '0')}`)\n\n      const response = await fetch('/api/salary/payslips/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        uploadResult = result\n        showResultModal = true\n        showUploadModal = false\n        selectedFile = null\n      } else {\n        alert(`업로드 실패: ${result.error}`)\n      }\n    } catch (error) {\n      alert('업로드 중 오류가 발생했습니다.')\n    } finally {\n      isUploading = false\n    }\n  }\n\n  // 모달 닫기\n  function closeUploadModal() {\n    showUploadModal = false\n    selectedFile = null\n  }\n\n  function closeResultModal() {\n    showResultModal = false\n    uploadResult = null\n  }\n</script>\n\n<!-- 업로드 버튼 -->\n<ThemeButton onclick={() => (showUploadModal = true)} class=\"bg-green-600 hover:bg-green-700\">\n  <UploadIcon size={16} class=\"mr-2\" />\n  엑셀 일괄 업로드\n</ThemeButton>\n\n<!-- 업로드 모달 -->\n<ThemeModal bind:open={showUploadModal} size=\"lg\">\n  <div class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-6\">\n      <h2 class=\"text-xl font-semibold text-gray-900\">급여명세서 엑셀 업로드</h2>\n      <button\n        type=\"button\"\n        onclick={closeUploadModal}\n        class=\"p-2 text-gray-400 hover:text-gray-600\"\n      >\n        <XCircleIcon size={20} />\n      </button>\n    </div>\n\n    <div class=\"space-y-6\">\n      <!-- 기간 선택 -->\n      <div class=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h3 class=\"text-lg font-semibold text-blue-800 mb-3 flex items-center\">\n          <CalendarIcon size={20} class=\"mr-2\" />\n          급여 기간 선택\n        </h3>\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label\n              for=\"upload-year\"\n              class=\"block text-sm font-medium text-blue-700 mb-2\"\n            >연도</label\n            >\n            <select\n              id=\"upload-year\"\n              bind:value={selectedYear}\n              class=\"w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {#each yearOptions as year, i (i)}\n                <option value={year.value}>{year.label}</option>\n              {/each}\n            </select>\n          </div>\n          <div>\n            <label for=\"upload-month\" class=\"block text-sm font-medium text-blue-700 mb-2\">월</label\n            >\n            <select\n              id=\"upload-month\"\n              bind:value={selectedMonth}\n              class=\"w-full px-3 py-2 border border-blue-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {#each monthOptions as month, i (i)}\n                <option value={month.value}>{month.label}</option>\n              {/each}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      <!-- 템플릿 다운로드 -->\n      <div class=\"bg-amber-50 border border-amber-200 rounded-lg p-4\">\n        <h3 class=\"text-lg font-semibold text-amber-800 mb-3 flex items-center\">\n          <FileSpreadsheetIcon size={20} class=\"mr-2\" />\n          엑셀 템플릿 다운로드\n        </h3>\n        <p class=\"text-amber-700 mb-3\">\n          업로드 전에 먼저 템플릿을 다운로드하여 급여 데이터를 입력하세요.\n        </p>\n        <ThemeButton\n          onclick={downloadTemplate}\n          variant=\"ghost\"\n          class=\"border-amber-300 text-amber-700 hover:bg-amber-100\"\n        >\n          <DownloadIcon size={16} class=\"mr-2\" />\n          템플릿 다운로드\n        </ThemeButton>\n      </div>\n\n      <!-- 파일 업로드 -->\n      <div class=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n        <h3 class=\"text-lg font-semibold text-gray-800 mb-3 flex items-center\">\n          <UploadIcon size={20} class=\"mr-2\" />\n          엑셀 파일 업로드\n        </h3>\n        <div class=\"space-y-4\">\n          <div>\n            <label for=\"file-upload\" class=\"block text-sm font-medium text-gray-700 mb-2\">\n              파일 선택\n            </label>\n            <input\n              id=\"file-upload\"\n              type=\"file\"\n              accept=\".xlsx,.xls\"\n              onchange={handleFileSelect}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n\n          {#if selectedFile}\n            <div class=\"flex items-center p-3 bg-green-50 border border-green-200 rounded-md\">\n              <CheckCircleIcon size={20} class=\"text-green-600 mr-2\" />\n              <span class=\"text-green-700 font-medium\">{selectedFile.name}</span>\n            </div>\n          {/if}\n\n          <div class=\"bg-yellow-50 border border-yellow-200 rounded-md p-3\">\n            <div class=\"flex items-start\">\n              <AlertCircleIcon size={20} class=\"text-yellow-600 mr-2 mt-0.5\" />\n              <div class=\"text-yellow-700 text-sm\">\n                <p class=\"font-medium mb-1\">주의사항:</p>\n                <ul class=\"list-disc list-inside space-y-1\">\n                  <li>템플릿의 형식을 그대로 유지해주세요</li>\n                  <li>숫자만 입력하고 콤마나 원화 표시는 제외해주세요</li>\n                  <li>기존 급여명세서가 있으면 덮어쓰기됩니다</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- 액션 버튼 -->\n      <div class=\"flex justify-end space-x-3\">\n        <ThemeButton variant=\"ghost\" onclick={closeUploadModal}>취소</ThemeButton>\n        <ThemeButton\n          onclick={uploadFile}\n          disabled={!selectedFile || isUploading}\n          class=\"bg-green-600 hover:bg-green-700 disabled:bg-gray-400\"\n        >\n          {#if isUploading}\n            <div class=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n            업로드 중...\n          {:else}\n            <UploadIcon size={16} class=\"mr-2\" />\n            업로드\n          {/if}\n        </ThemeButton>\n      </div>\n    </div>\n  </div>\n</ThemeModal>\n\n<!-- 결과 모달 -->\n<ThemeModal bind:open={showResultModal} size=\"xl\">\n  <div class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-6\">\n      <h2 class=\"text-xl font-semibold text-gray-900\">업로드 결과</h2>\n      <button\n        type=\"button\"\n        onclick={closeResultModal}\n        class=\"p-2 text-gray-400 hover:text-gray-600\"\n      >\n        <XCircleIcon size={20} />\n      </button>\n    </div>\n\n    {#if uploadResult}\n      <div class=\"space-y-6\">\n        <!-- 요약 정보 -->\n        <div class=\"grid grid-cols-3 gap-4\">\n          <div class=\"bg-green-50 border border-green-200 rounded-lg p-4 text-center\">\n            <CheckCircleIcon size={32} class=\"text-green-600 mx-auto mb-2\" />\n            <div class=\"text-2xl font-bold text-green-700\">{uploadResult.results.success}</div>\n            <div class=\"text-sm text-green-600\">성공</div>\n          </div>\n          <div class=\"bg-red-50 border border-red-200 rounded-lg p-4 text-center\">\n            <XCircleIcon size={32} class=\"text-red-600 mx-auto mb-2\" />\n            <div class=\"text-2xl font-bold text-red-700\">{uploadResult.results.failed}</div>\n            <div class=\"text-sm text-red-600\">실패</div>\n          </div>\n          <div class=\"bg-blue-50 border border-blue-200 rounded-lg p-4 text-center\">\n            <FileSpreadsheetIcon size={32} class=\"text-blue-600 mx-auto mb-2\" />\n            <div class=\"text-2xl font-bold text-blue-700\">\n              {uploadResult.results.success + uploadResult.results.failed}\n            </div>\n            <div class=\"text-sm text-blue-600\">총 처리</div>\n          </div>\n        </div>\n\n        <!-- 오류 목록 -->\n        {#if uploadResult.results.errors.length > 0}\n          <div class=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <h3 class=\"text-lg font-semibold text-red-800 mb-3\">오류 목록</h3>\n            <div class=\"max-h-40 overflow-y-auto\">\n              {#each uploadResult.results.errors as error, i (i)}\n                <div class=\"text-sm text-red-700 py-1\">{error}</div>\n              {/each}\n            </div>\n          </div>\n        {/if}\n\n        <!-- 상세 결과 -->\n        {#if uploadResult.results.details.length > 0}\n          <div class=\"bg-gray-50 border border-gray-200 rounded-lg p-4\">\n            <h3 class=\"text-lg font-semibold text-gray-800 mb-3\">상세 결과</h3>\n            <div class=\"max-h-60 overflow-y-auto\">\n              <table class=\"min-w-full text-sm\">\n                <thead class=\"bg-gray-100\">\n                  <tr>\n                    <th class=\"px-3 py-2 text-left\">행</th>\n                    <th class=\"px-3 py-2 text-left\">사번</th>\n                    <th class=\"px-3 py-2 text-left\">성명</th>\n                    <th class=\"px-3 py-2 text-left\">상태</th>\n                    <th class=\"px-3 py-2 text-left\">지급총액</th>\n                    <th class=\"px-3 py-2 text-left\">실지급액</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {#each uploadResult.results.details as detail, i (i)}\n                    <tr class=\"border-t\">\n                      <td class=\"px-3 py-2\">{detail.row}</td>\n                      <td class=\"px-3 py-2\">{detail.employeeId}</td>\n                      <td class=\"px-3 py-2\">{detail.name}</td>\n                      <td class=\"px-3 py-2\">\n                        {#if detail.status === 'success'}\n                          <span class=\"px-2 py-1 bg-green-100 text-green-800 rounded-full text-xs\"\n                          >성공</span\n                          >\n                        {:else}\n                          <span class=\"px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs\"\n                          >실패</span\n                          >\n                        {/if}\n                      </td>\n                      <td class=\"px-3 py-2\">\n                        {#if detail.totalPayments}\n                          {new Intl.NumberFormat('ko-KR').format(detail.totalPayments)}원\n                        {/if}\n                      </td>\n                      <td class=\"px-3 py-2\">\n                        {#if detail.netSalary}\n                          {new Intl.NumberFormat('ko-KR').format(detail.netSalary)}원\n                        {/if}\n                      </td>\n                    </tr>\n                  {/each}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        {/if}\n\n        <!-- 액션 버튼 -->\n        <div class=\"flex justify-end\">\n          <ThemeButton onclick={closeResultModal} class=\"bg-blue-600 hover:bg-blue-700\">\n            확인\n          </ThemeButton>\n        </div>\n      </div>\n    {/if}\n  </div>\n</ThemeModal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/SalaryContracts.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":105,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":105,"endColumn":21},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":126,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":126,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":126,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":126,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[3601,3601],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":283,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":283,"endColumn":19}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import ThemeBadge from '$lib/components/ui/ThemeBadge.svelte'\n  import ThemeSectionHeader from '$lib/components/ui/ThemeSectionHeader.svelte'\n  import { createContract, updateContract, deleteContract } from '$lib/stores/salary/contract-store'\n  import { formatCurrency, formatDate, formatDateForInput } from '$lib/utils/format'\n  import type { SalaryContract, CreateSalaryContractRequest } from '$lib/types/salary-contracts'\n  import {\n    PlusIcon,\n    SearchIcon,\n    FilterIcon,\n    PencilIcon,\n    TrashIcon,\n    CalendarIcon,\n    DollarSignIcon,\n    FileTextIcon,\n    UserIcon\n  } from '@lucide/svelte'\n\n  let mounted = $state(false)\n  let showCreateModal = $state(false)\n  let showEditModal = $state(false)\n  let showDeleteModal = $state(false)\n  let selectedContract: SalaryContract | null = $state(null)\n  let showFilters = $state(false)\n\n  // 폼 데이터\n  let formData: CreateSalaryContractRequest = $state({\n    employeeId: '',\n    startDate: new Date().toISOString().split('T')[0], // 오늘 날짜\n    endDate: '',\n    annualSalary: 0,\n    monthlySalary: 0,\n    contractType: 'full_time',\n    status: 'active',\n    notes: ''\n  })\n\n  // 직원 목록\n  let employees: any[] = $state([])\n\n  // 로컬 계약 데이터\n  let localContracts: any[] = $state([])\n  let localLoading = $state(false)\n  let localError: string | null = $state(null)\n\n  // 로컬 필터\n  let localFilter = $state({\n    status: '',\n    contractType: '',\n    employeeId: '',\n    department: '',\n    startDateFrom: ''\n  })\n\n  // 로컬 통계 계산 (localContracts가 변경될 때마다 자동 계산)\n  let localStats = $derived(\n    (() => {\n      if (localContracts.length > 0) {\n        const activeContracts = localContracts.filter(contract => contract.status === 'active')\n        const totalAnnualSalary = localContracts.reduce(\n          (sum, contract) => sum + (contract.annualSalary || 0),\n          0\n        )\n\n        return {\n          totalContracts: localContracts.length,\n          activeContracts: activeContracts.length,\n          totalAnnualSalary: totalAnnualSalary,\n          averageAnnualSalary:\n            localContracts.length > 0 ? Math.round(totalAnnualSalary / localContracts.length) : 0\n        }\n      }\n      return {\n        totalContracts: 0,\n        activeContracts: 0,\n        totalAnnualSalary: 0,\n        averageAnnualSalary: 0\n      }\n    })()\n  )\n\n  $effect(async () => {\n    if (!mounted) {\n      mounted = true\n\n      // 직접 API 호출로 데이터 로드\n      try {\n        localLoading = true\n        localError = null\n\n        // 직접 API 호출\n        const response = await fetch('/api/salary/contracts?page=1&limit=20')\n        const result = await response.json()\n\n        if (result.success && result.data) {\n          localContracts = result.data.data\n        } else {\n          localError = result.error || '급여 계약 목록을 불러오는데 실패했습니다.'\n        }\n\n        await loadEmployees()\n      } catch (error) {\n        localError = '알 수 없는 오류가 발생했습니다.'\n      } finally {\n        localLoading = false\n      }\n    }\n  })\n\n  // 직원 목록 로드\n  async function loadEmployees() {\n    try {\n      const response = await fetch('/api/employees')\n      const result = await response.json()\n      if (result.success) {\n        employees = result.data.map((emp: any) => ({\n          id: emp.id,\n          name: `${emp.last_name}${emp.first_name}`,\n          department: emp.department || '부서없음',\n          position: emp.position || '연구원'\n        }))\n      }\n    } catch (error) {}\n  }\n\n  // 계약 유형별 색상\n  function getContractTypeColor(type: string): string {\n    switch (type) {\n      case 'full_time':\n        return 'bg-blue-100 text-blue-800'\n      case 'part_time':\n        return 'bg-green-100 text-green-800'\n      case 'contract':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'intern':\n        return 'bg-purple-100 text-purple-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  // 계약 유형 표시명\n  function getContractTypeLabel(type: string): string {\n    switch (type) {\n      case 'full_time':\n        return '정규직'\n      case 'part_time':\n        return '파트타임'\n      case 'contract':\n        return '계약직'\n      case 'intern':\n        return '인턴'\n      default:\n        return type\n    }\n  }\n\n  // 상태별 색상\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-800'\n      case 'expired':\n        return 'bg-red-100 text-red-800'\n      case 'terminated':\n        return 'bg-gray-100 text-gray-800'\n      case 'draft':\n        return 'bg-yellow-100 text-yellow-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  // 상태 표시명\n  function getStatusLabel(status: string): string {\n    switch (status) {\n      case 'active':\n        return '진행중'\n      case 'expired':\n        return '만료됨'\n      case 'terminated':\n        return '종료됨'\n      case 'draft':\n        return '임시저장'\n      default:\n        return status\n    }\n  }\n\n  // 새 계약 생성 모달 열기\n  function openCreateModal() {\n    formData = {\n      employeeId: '',\n      startDate: '',\n      endDate: '',\n      annualSalary: 0,\n      monthlySalary: 0,\n      contractType: 'full_time',\n      status: 'active',\n      notes: ''\n    }\n    showCreateModal = true\n  }\n\n  // 계약 수정 모달 열기\n  function openEditModal(contract: SalaryContract) {\n    selectedContract = contract\n    formData = {\n      employeeId: contract.employeeId,\n      startDate: formatDateForInput(contract.startDate),\n      endDate: contract.endDate ? formatDateForInput(contract.endDate) : '',\n      annualSalary: contract.annualSalary,\n      monthlySalary: contract.monthlySalary,\n      contractType: contract.contractType,\n      status: contract.status,\n      notes: contract.notes || ''\n    }\n    showEditModal = true\n  }\n\n  // 계약 삭제 모달 열기\n  function openDeleteModal(contract: SalaryContract) {\n    selectedContract = contract\n    showDeleteModal = true\n  }\n\n  // 계약 생성/수정 저장\n  async function saveContract() {\n    if (\n      !formData.employeeId ||\n      !formData.startDate ||\n      !formData.annualSalary ||\n      !formData.monthlySalary\n    ) {\n      alert('필수 필드를 모두 입력해주세요.')\n      return\n    }\n\n    // endDate가 빈 문자열인 경우 null로 변환하고, 날짜를 한국시간으로 처리\n    const submitData = {\n      ...formData,\n      startDate: formData.startDate + 'T00:00:00+09:00',\n      endDate: formData.endDate === '' ? null : formData.endDate + 'T00:00:00+09:00'\n    }\n\n    let success = false\n    if (showCreateModal) {\n      success = await createContract(submitData)\n    } else if (showEditModal && selectedContract) {\n      success = await updateContract(selectedContract.id, submitData)\n    }\n\n    if (success) {\n      showCreateModal = false\n      showEditModal = false\n      selectedContract = null\n      // 로컬 상태 새로고침\n      await refreshLocalData()\n    }\n  }\n\n  // 로컬 데이터 새로고침\n  async function refreshLocalData() {\n    try {\n      // 계약 목록 새로고침\n      const response = await fetch('/api/salary/contracts?page=1&limit=20')\n      const result = await response.json()\n\n      if (result.success && result.data) {\n        localContracts = result.data.data\n      }\n\n      // 통계 새로고침\n      const statsResponse = await fetch('/api/salary/contracts/stats')\n      const statsResult = await statsResponse.json()\n\n      if (statsResult.success && statsResult.data) {\n        localStats = statsResult.data\n      }\n    } catch (error) {\n    // 에러는 조용히 처리\n    }\n  }\n\n  // 계약 삭제\n  async function confirmDelete() {\n    if (selectedContract) {\n      const success = await deleteContract(selectedContract.id)\n      if (success) {\n        showDeleteModal = false\n        selectedContract = null\n        await refreshLocalData()\n      }\n    }\n  }\n\n  // 필터 적용\n  function applyFilter() {\n  // 로컬 필터링 로직 (필요시 구현)\n  }\n\n  // 필터 초기화\n  function clearFilters() {\n    localFilter = {\n      status: '',\n      contractType: '',\n      employeeId: '',\n      department: '',\n      startDateFrom: ''\n    }\n  }\n\n  // 월급 자동 계산 (연봉 변경 시)\n  function calculateMonthlySalary() {\n    if (formData.annualSalary > 0) {\n      formData.monthlySalary = Math.round(formData.annualSalary / 12)\n    }\n  }\n\n  // 연봉 자동 계산 (월급 변경 시)\n  function calculateAnnualSalary() {\n    if (formData.monthlySalary > 0) {\n      formData.annualSalary = formData.monthlySalary * 12\n    }\n  }\n</script>\n\n<div class=\"space-y-6\">\n  <!-- 통계 카드들 -->\n  <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n    <ThemeCard class=\"p-6\">\n      <div class=\"flex items-center\">\n        <div class=\"p-3 bg-blue-100 rounded-full\">\n          <FileTextIcon size={24} class=\"text-blue-600\" />\n        </div>\n        <div class=\"ml-4\">\n          <p class=\"text-sm font-medium text-gray-600\">총 계약 수</p>\n          <p class=\"text-2xl font-bold text-gray-900\">{localStats.totalContracts}개</p>\n        </div>\n      </div>\n    </ThemeCard>\n\n    <ThemeCard class=\"p-6\">\n      <div class=\"flex items-center\">\n        <div class=\"p-3 bg-green-100 rounded-full\">\n          <UserIcon size={24} class=\"text-green-600\" />\n        </div>\n        <div class=\"ml-4\">\n          <p class=\"text-sm font-medium text-gray-600\">진행중 계약</p>\n          <p class=\"text-2xl font-bold text-gray-900\">{localStats.activeContracts}개</p>\n        </div>\n      </div>\n    </ThemeCard>\n\n    <ThemeCard class=\"p-6\">\n      <div class=\"flex items-center\">\n        <div class=\"p-3 bg-purple-100 rounded-full\">\n          <DollarSignIcon size={24} class=\"text-purple-600\" />\n        </div>\n        <div class=\"ml-4\">\n          <p class=\"text-sm font-medium text-gray-600\">평균 연봉</p>\n          <p class=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency(localStats.averageAnnualSalary)}\n          </p>\n        </div>\n      </div>\n    </ThemeCard>\n\n    <ThemeCard class=\"p-6\">\n      <div class=\"flex items-center\">\n        <div class=\"p-3 bg-yellow-100 rounded-full\">\n          <CalendarIcon size={24} class=\"text-yellow-600\" />\n        </div>\n        <div class=\"ml-4\">\n          <p class=\"text-sm font-medium text-gray-600\">총 급여</p>\n          <p class=\"text-2xl font-bold text-gray-900\">\n            {formatCurrency(localStats.totalAnnualSalary)}\n          </p>\n        </div>\n      </div>\n    </ThemeCard>\n  </div>\n\n  <!-- 필터 및 액션 바 -->\n  <ThemeCard class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-4\">\n      <ThemeSectionHeader title=\"급여 계약 목록\" />\n      <div class=\"flex items-center space-x-3\">\n        <ThemeButton variant=\"outline\" size=\"sm\" onclick={() => (showFilters = !showFilters)}>\n          <FilterIcon size={16} class=\"mr-2\" />\n          필터\n        </ThemeButton>\n        <ThemeButton variant=\"primary\" size=\"sm\" onclick={openCreateModal}>\n          <PlusIcon size={16} class=\"mr-2\" />\n          새 계약\n        </ThemeButton>\n      </div>\n    </div>\n\n    <!-- 필터 영역 -->\n    {#if showFilters}\n      <div class=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-4 p-4 bg-gray-50 rounded-lg\"\n      >\n        <div>\n          <label\n            for=\"employee-search\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >직원 검색</label\n          >\n          <input\n            id=\"employee-search\"\n            type=\"text\"\n            placeholder=\"직원명, 사번으로 검색\"\n            bind:value={localFilter.employeeId}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        <div>\n          <label\n            for=\"department-filter\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >부서</label\n          >\n          <select\n            id=\"department-filter\"\n            bind:value={localFilter.department}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">전체</option>\n            <option value=\"대표\">대표</option>\n            <option value=\"연구소\">연구소</option>\n            <option value=\"경영기획팀\">경영기획팀</option>\n            <option value=\"부서없음\">부서없음</option>\n          </select>\n        </div>\n        <div>\n          <label\n            for=\"contract-type-filter\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >계약 유형</label\n          >\n          <select\n            id=\"contract-type-filter\"\n            bind:value={localFilter.contractType}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">전체</option>\n            <option value=\"full_time\">정규직</option>\n            <option value=\"part_time\">파트타임</option>\n            <option value=\"contract\">계약직</option>\n            <option value=\"intern\">인턴</option>\n          </select>\n        </div>\n        <div>\n          <label\n            for=\"sc-status-filter\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >상태</label\n          >\n          <select\n            id=\"sc-status-filter\"\n            bind:value={localFilter.status}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">전체</option>\n            <option value=\"active\">진행중</option>\n            <option value=\"expired\">만료됨</option>\n            <option value=\"terminated\">종료됨</option>\n            <option value=\"draft\">임시저장</option>\n          </select>\n        </div>\n        <div>\n          <label\n            for=\"start-date-filter\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >시작일 (부터)</label\n          >\n          <input\n            id=\"start-date-filter\"\n            type=\"date\"\n            bind:value={localFilter.startDateFrom}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n        <div class=\"flex items-end space-x-2\">\n          <ThemeButton variant=\"primary\" size=\"sm\" onclick={applyFilter}>\n            <SearchIcon size={16} class=\"mr-1\" />\n            검색\n          </ThemeButton>\n          <ThemeButton variant=\"outline\" size=\"sm\" onclick={clearFilters}>초기화</ThemeButton>\n        </div>\n      </div>\n    {/if}\n\n    <!-- 계약 목록 테이블 -->\n    {#if localLoading && localContracts.length === 0}\n      <div class=\"flex items-center justify-center py-12\">\n        <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span class=\"ml-2 text-gray-600\">로딩 중...</span>\n      </div>\n    {:else if localError}\n      <div class=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n        <span class=\"text-red-800\">{localError}</span>\n      </div>\n    {:else if localContracts.length === 0}\n      <div class=\"text-center py-12\">\n        <FileTextIcon size={48} class=\"mx-auto text-gray-400 mb-4\" />\n        <p class=\"text-gray-500\">급여 계약이 없습니다.</p>\n      </div>\n    {:else}\n      <div class=\"overflow-x-auto\">\n        <table class=\"min-w-full divide-y divide-gray-200\">\n          <thead class=\"bg-gray-50\">\n            <tr>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >직원 정보</th\n              >\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >계약 기간</th\n              >\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >급여</th\n              >\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >계약 유형</th\n              >\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >상태</th\n              >\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >액션</th\n              >\n            </tr>\n          </thead>\n          <tbody class=\"bg-white divide-y divide-gray-200\">\n            {#each localContracts as contract, i (i)}\n              <tr class=\"hover:bg-gray-50\">\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <div>\n                    <div class=\"text-sm font-medium text-gray-900\">{contract.employeeName}</div>\n                    <div class=\"text-sm text-gray-500\">\n                      {contract.employeeIdNumber} • {contract.department}\n                    </div>\n                  </div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <div class=\"text-sm text-gray-900\">\n                    {formatDate(contract.startDate)} ~ {contract.endDate\n                      ? formatDate(contract.endDate)\n                      : '무기한'}\n                  </div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <div class=\"text-sm text-gray-900\">\n                    <div>연봉: {formatCurrency(contract.annualSalary)}</div>\n                    <div class=\"text-gray-500\">월급: {formatCurrency(contract.monthlySalary)}</div>\n                  </div>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <ThemeBadge class={getContractTypeColor(contract.contractType)}>\n                    {getContractTypeLabel(contract.contractType)}\n                  </ThemeBadge>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap\">\n                  <ThemeBadge class={getStatusColor(contract.status)}>\n                    {getStatusLabel(contract.status)}\n                  </ThemeBadge>\n                </td>\n                <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                  <div class=\"flex items-center space-x-2\">\n                    <button\n                      type=\"button\"\n                      onclick={() => {\n                        openEditModal(contract)\n                      }}\n                      class=\"text-blue-600 hover:text-blue-900\"\n                    >\n                      <PencilIcon size={16} />\n                    </button>\n                    <button\n                      type=\"button\"\n                      onclick={() => openDeleteModal(contract)}\n                      class=\"text-red-600 hover:text-red-900\"\n                    >\n                      <TrashIcon size={16} />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            {/each}\n          </tbody>\n        </table>\n      </div>\n    {/if}\n  </ThemeCard>\n</div>\n\n<!-- 새 계약 생성 모달 -->\n<ThemeModal open={showCreateModal} onclose={() => (showCreateModal = false)} title=\"새 급여 계약\">\n  <div class=\"space-y-4\">\n    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-employee\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >직원 선택 *</label\n        >\n        <select\n          id=\"create-employee\"\n          bind:value={formData.employeeId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">직원을 선택하세요</option>\n          {#each employees as employee, i (i)}\n            <option value={employee.id}>{employee.name} ({employee.department})</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-contractType\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >계약 유형 *</label\n        >\n        <select\n          id=\"create-contractType\"\n          bind:value={formData.contractType}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"full_time\">정규직</option>\n          <option value=\"part_time\">파트타임</option>\n          <option value=\"contract\">계약직</option>\n          <option value=\"intern\">인턴</option>\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-startDate\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >시작일 *</label\n        >\n        <input\n          id=\"create-startDate\"\n          type=\"date\"\n          bind:value={formData.startDate}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"create-endDate\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >종료일</label\n        >\n        <input\n          id=\"create-endDate\"\n          type=\"date\"\n          bind:value={formData.endDate}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"create-annualSalary\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >연봉 (원) *</label\n        >\n        <input\n          id=\"create-annualSalary\"\n          type=\"number\"\n          bind:value={formData.annualSalary}\n          oninput={calculateMonthlySalary}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"예: 50000000\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"create-monthlySalary\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >월급 (원) *</label\n        >\n        <input\n          id=\"create-monthlySalary\"\n          type=\"number\"\n          bind:value={formData.monthlySalary}\n          oninput={calculateAnnualSalary}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          placeholder=\"예: 4166667\"\n        />\n      </div>\n    </div>\n    <div>\n      <label for=\"create-notes\" class=\"block text-sm font-medium text-gray-700 mb-1\">비고</label>\n      <textarea\n        id=\"create-notes\"\n        bind:value={formData.notes}\n        rows=\"3\"\n        class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        placeholder=\"계약 관련 특이사항이나 메모\"\n      ></textarea>\n    </div>\n  </div>\n\n  <div class=\"flex justify-end space-x-3 mt-6\">\n    <ThemeButton variant=\"outline\" onclick={() => (showCreateModal = false)}>취소</ThemeButton>\n    <ThemeButton variant=\"primary\" onclick={saveContract}>생성</ThemeButton>\n  </div>\n</ThemeModal>\n\n<!-- 계약 수정 모달 -->\n<ThemeModal open={showEditModal} onclose={() => (showEditModal = false)} title=\"급여 계약 수정\">\n  <div class=\"space-y-4\">\n    <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"edit-contractType\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >계약 유형</label\n        >\n        <select\n          id=\"edit-contractType\"\n          bind:value={formData.contractType}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"full_time\">정규직</option>\n          <option value=\"part_time\">파트타임</option>\n          <option value=\"contract\">계약직</option>\n          <option value=\"intern\">인턴</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"edit-status\" class=\"block text-sm font-medium text-gray-700 mb-1\">상태</label>\n        <select\n          id=\"edit-status\"\n          bind:value={formData.status}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"active\">진행중</option>\n          <option value=\"expired\">만료됨</option>\n          <option value=\"terminated\">종료됨</option>\n          <option value=\"draft\">임시저장</option>\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"edit-startDate\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >시작일</label\n        >\n        <input\n          id=\"edit-startDate\"\n          type=\"date\"\n          bind:value={formData.startDate}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label for=\"edit-endDate\" class=\"block text-sm font-medium text-gray-700 mb-1\">종료일</label\n        >\n        <input\n          id=\"edit-endDate\"\n          type=\"date\"\n          bind:value={formData.endDate}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"edit-annualSalary\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >연봉 (원)</label\n        >\n        <input\n          id=\"edit-annualSalary\"\n          type=\"number\"\n          bind:value={formData.annualSalary}\n          oninput={calculateMonthlySalary}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"edit-monthlySalary\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >월급 (원)</label\n        >\n        <input\n          id=\"edit-monthlySalary\"\n          type=\"number\"\n          bind:value={formData.monthlySalary}\n          oninput={calculateAnnualSalary}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n    </div>\n    <div>\n      <label for=\"edit-notes\" class=\"block text-sm font-medium text-gray-700 mb-1\">비고</label>\n      <textarea\n        id=\"edit-notes\"\n        bind:value={formData.notes}\n        rows=\"3\"\n        class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      ></textarea>\n    </div>\n  </div>\n\n  <div class=\"flex justify-end space-x-3 mt-6\">\n    <ThemeButton variant=\"outline\" onclick={() => (showEditModal = false)}>취소</ThemeButton>\n    <ThemeButton variant=\"primary\" onclick={saveContract}>수정</ThemeButton>\n  </div>\n</ThemeModal>\n\n<!-- 계약 삭제 확인 모달 -->\n<ThemeModal open={showDeleteModal} onclose={() => (showDeleteModal = false)} title=\"급여 계약 삭제\">\n  <div class=\"space-y-4\">\n    <p class=\"text-gray-700\">정말로 이 급여 계약을 삭제하시겠습니까?</p>\n    {#if selectedContract}\n      <div class=\"bg-gray-50 p-4 rounded-lg\">\n        <p class=\"font-medium\">{selectedContract.employeeName}</p>\n        <p class=\"text-sm text-gray-600\">\n          {formatDate(selectedContract.startDate)} ~ {selectedContract.endDate\n            ? formatDate(selectedContract.endDate)\n            : '무기한'}\n        </p>\n        <p class=\"text-sm text-gray-600\">{formatCurrency(selectedContract.annualSalary)}</p>\n      </div>\n    {/if}\n    <p class=\"text-sm text-red-600\">이 작업은 되돌릴 수 없습니다.</p>\n  </div>\n\n  <div class=\"flex justify-end space-x-3 mt-6\">\n    <ThemeButton variant=\"outline\" onclick={() => (showDeleteModal = false)}>취소</ThemeButton>\n    <ThemeButton variant=\"danger\" onclick={confirmDelete}>삭제</ThemeButton>\n  </div>\n</ThemeModal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/SalaryDashboard.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getStatusIcon' is defined but never used.","line":39,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":39,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"getStatusIcon"},"fix":{"range":[914,1282],"text":""},"desc":"Remove unused variable 'getStatusIcon'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'calculateChangeRate' is defined but never used.","line":57,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":57,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"calculateChangeRate"},"fix":{"range":[1298,1479],"text":""},"desc":"Remove unused variable 'calculateChangeRate'."}]},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":84,"column":11,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":107,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import {\n    salaryStatistics,\n    departmentSalaryStats,\n    loadPayslips,\n    error\n  } from '$lib/stores/salary/salary-store'\n  import { formatCurrency, formatPercentage } from '$lib/utils/format'\n  import { AlertCircleIcon } from '@lucide/svelte'\n\n  let mounted = $state(false)\n\n  $effect(async () => {\n    if (!mounted) {\n      mounted = true\n      await loadPayslips()\n    }\n  })\n\n  // 상태별 색상 반환\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'draft':\n        return 'text-gray-600 bg-gray-100'\n      case 'calculated':\n        return 'text-blue-600 bg-blue-100'\n      case 'approved':\n        return 'text-green-600 bg-green-100'\n      case 'paid':\n        return 'text-purple-600 bg-purple-100'\n      case 'cancelled':\n        return 'text-red-600 bg-red-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  // 상태별 아이콘 반환\n  function getStatusIcon(status: string) {\n    switch (status) {\n      case 'draft':\n        return ClockIcon\n      case 'calculated':\n        return FileTextIcon\n      case 'approved':\n        return CheckCircleIcon\n      case 'paid':\n        return DollarSignIcon\n      case 'cancelled':\n        return AlertCircleIcon\n      default:\n        return ClockIcon\n    }\n  }\n\n  // 변화율 계산\n  function calculateChangeRate(current: number, previous: number): number {\n    if (previous === 0) return current > 0 ? 100 : 0\n    return ((current - previous) / previous) * 100\n  }\n</script>\n\n<div class=\"space-y-6\">\n  <!-- 로딩 및 에러 상태 -->\n  {#if !mounted}\n    <div class=\"flex items-center justify-center py-12\">\n      <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      <span class=\"ml-2 text-gray-600\">급여 데이터를 불러오는 중...</span>\n    </div>\n  {:else if $error}\n    <div class=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n      <div class=\"flex items-center\">\n        <AlertCircleIcon size={20} class=\"text-red-600 mr-2\" />\n        <span class=\"text-red-800\">{$error}</span>\n      </div>\n    </div>\n  {:else}\n    <!-- 부서별 급여 통계 -->\n    <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <!-- 부서별 급여 현황 -->\n      <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">부서별 급여 현황</h3>\n        <div class=\"space-y-4\">\n          {#each Object.entries($departmentSalaryStats) as [department, stats]}\n            <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div class=\"flex-1\">\n                <div class=\"flex items-center justify-between\">\n                  <h4 class=\"font-medium text-gray-900\">{department}</h4>\n                  <span class=\"text-sm text-gray-500\">{stats.employeeCount}명</span>\n                </div>\n                <div class=\"mt-1 grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span class=\"text-gray-500\">평균 급여:</span>\n                    <span class=\"font-medium text-gray-900 ml-1\">\n                      {formatCurrency(stats.averageGrossSalary)}\n                    </span>\n                  </div>\n                  <div>\n                    <span class=\"text-gray-500\">총 지급액:</span>\n                    <span class=\"font-medium text-gray-900 ml-1\">\n                      {formatCurrency(stats.totalGrossSalary)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          {/each}\n        </div>\n      </div>\n\n      <!-- 급여 구성 비율 -->\n      <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">급여 구성 비율</h3>\n        <div class=\"space-y-4\">\n          <div class=\"flex items-center justify-between\">\n            <span class=\"text-sm text-gray-600\">총 지급액</span>\n            <span class=\"font-medium text-gray-900\">\n              {formatCurrency($salaryStatistics.currentMonth.totalGrossSalary)}\n            </span>\n          </div>\n          <div class=\"flex items-center justify-between\">\n            <span class=\"text-sm text-gray-600\">총 공제액</span>\n            <span class=\"font-medium text-red-600\">\n              {formatCurrency($salaryStatistics.currentMonth.totalDeductions)}\n            </span>\n          </div>\n          <div class=\"flex items-center justify-between\">\n            <span class=\"text-sm text-gray-600\">실지급액</span>\n            <span class=\"font-medium text-green-600\">\n              {formatCurrency($salaryStatistics.currentMonth.totalNetSalary)}\n            </span>\n          </div>\n\n          <!-- 공제율 표시 -->\n          <div class=\"mt-4\">\n            <div class=\"flex items-center justify-between mb-2\">\n              <span class=\"text-sm text-gray-600\">공제율</span>\n              <span class=\"text-sm font-medium text-gray-900\">\n                {formatPercentage(\n                  $salaryStatistics.currentMonth.totalGrossSalary > 0\n                    ? ($salaryStatistics.currentMonth.totalDeductions /\n                      $salaryStatistics.currentMonth.totalGrossSalary) *\n                      100\n                    : 0\n                )}\n              </span>\n            </div>\n            <div class=\"w-full bg-gray-200 rounded-full h-2\">\n              <div\n                class=\"bg-red-500 h-2 rounded-full transition-all duration-300\"\n                style:width=\"{Math.min(\n                  $salaryStatistics.currentMonth.totalGrossSalary > 0\n                    ? ($salaryStatistics.currentMonth.totalDeductions /\n                      $salaryStatistics.currentMonth.totalGrossSalary) *\n                      100\n                    : 0,\n                  100\n                )}%\"\n              ></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 최근 급여 이력 -->\n    <div class=\"bg-white rounded-lg shadow-sm border border-gray-200 p-6\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h3 class=\"text-lg font-semibold text-gray-900\">최근 급여 이력</h3>\n        <button type=\"button\" class=\"text-sm text-blue-600 hover:text-blue-800 font-medium\">\n          전체 보기\n        </button>\n      </div>\n      <div class=\"overflow-x-auto\">\n        <table class=\"min-w-full divide-y divide-gray-200\">\n          <thead class=\"bg-gray-50\">\n            <tr>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                기간\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                직원 수\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                총 지급액\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                실지급액\n              </th>\n              <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                상태\n              </th>\n            </tr>\n          </thead>\n          <tbody class=\"bg-white divide-y divide-gray-200\">\n            <!-- 현재 기간 -->\n            <tr class=\"hover:bg-gray-50\">\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                {$salaryStatistics.currentPeriod}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {$salaryStatistics.currentMonth.totalEmployees}명\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {formatCurrency($salaryStatistics.currentMonth.totalGrossSalary)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {formatCurrency($salaryStatistics.currentMonth.totalNetSalary)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <span\n                  class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {getStatusColor(\n                    $salaryStatistics.currentMonth.status\n                  )}\"\n                >\n                  {#if $salaryStatistics.currentMonth.status === 'draft'}\n                    초안\n                  {:else if $salaryStatistics.currentMonth.status === 'calculated'}\n                    계산 완료\n                  {:else if $salaryStatistics.currentMonth.status === 'approved'}\n                    승인 완료\n                  {:else if $salaryStatistics.currentMonth.status === 'paid'}\n                    지급 완료\n                  {:else if $salaryStatistics.currentMonth.status === 'cancelled'}\n                    취소됨\n                  {:else}\n                    알 수 없음\n                  {/if}\n                </span>\n              </td>\n            </tr>\n            <!-- 이전 기간 -->\n            <tr class=\"hover:bg-gray-50\">\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                {$salaryStatistics.previousPeriod}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {$salaryStatistics.previousMonth.totalEmployees}명\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {formatCurrency($salaryStatistics.previousMonth.totalGrossSalary)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                {formatCurrency($salaryStatistics.previousMonth.totalNetSalary)}\n              </td>\n              <td class=\"px-6 py-4 whitespace-nowrap\">\n                <span\n                  class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium {getStatusColor(\n                    $salaryStatistics.previousMonth.status\n                  )}\"\n                >\n                  {#if $salaryStatistics.previousMonth.status === 'draft'}\n                    초안\n                  {:else if $salaryStatistics.previousMonth.status === 'calculated'}\n                    계산 완료\n                  {:else if $salaryStatistics.previousMonth.status === 'approved'}\n                    승인 완료\n                  {:else if $salaryStatistics.previousMonth.status === 'paid'}\n                    지급 완료\n                  {:else if $salaryStatistics.previousMonth.status === 'cancelled'}\n                    취소됨\n                  {:else}\n                    알 수 없음\n                  {/if}\n                </span>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  {/if}\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/salary/SalaryHistory.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":71,"column":14,"nodeType":"Identifier","messageId":"unusedVar","endLine":71,"endColumn":19},{"ruleId":"no-empty","severity":2,"message":"Empty block statement.","line":71,"column":21,"nodeType":"BlockStatement","messageId":"unexpected","endLine":71,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"type":"block"},"fix":{"range":[2080,2080],"text":" /* empty */ "},"desc":"Add comment inside empty block statement."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'applyFilter' is defined but never used.","line":201,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":201,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"applyFilter"},"fix":{"range":[5369,5431],"text":""},"desc":"Remove unused variable 'applyFilter'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeBadge from '$lib/components/ui/ThemeBadge.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeSectionHeader from '$lib/components/ui/ThemeSectionHeader.svelte'\n  import { error, isLoading, loadPayslips, payslips } from '$lib/stores/salary/salary-store'\n  import { formatCurrency, formatDate } from '$lib/utils/format'\n  import {\n    CalendarIcon,\n    ClockIcon,\n    FilterIcon,\n    MinusIcon,\n    TrendingDownIcon,\n    TrendingUpIcon,\n    UserIcon\n  } from '@lucide/svelte'\n\n  let mounted = $state(false)\n  let showFilters = $state(false)\n  let selectedEmployee = $state('')\n  let selectedDepartment = $state('')\n  let selectedContractType = $state('')\n  let selectedStatus = $state('')\n\n  // 직원 목록\n  let employees = $state<any[]>([])\n\n  // 월별 옵션 동적 생성 (최근 12개월)\n  function generateMonthOptions() {\n    const options = []\n    const now = new Date()\n\n    for (let i = 0; i < 12; i++) {\n      const date = new Date(now.getFullYear(), now.getMonth() - i)\n      const year = date.getFullYear()\n      const month = String(date.getMonth() + 1).padStart(2, '0')\n      const period = `${year}-${month}`\n      const label = `${year}년 ${month}월`\n      options.push({ value: period, label })\n    }\n\n    return options\n  }\n\n  const monthOptions = generateMonthOptions()\n\n  $effect(async () => {\n    if (!mounted) {\n      mounted = true\n      await loadPayslips() // 모든 급여명세서 데이터 로드\n      await loadEmployees()\n    }\n  })\n\n  // 직원 목록 로드\n  async function loadEmployees() {\n    try {\n      const response = await fetch('/api/employees')\n      const result = await response.json()\n      if (result.success) {\n        employees = [\n          { id: '', name: '전체 직원', department: '' },\n          ...result.data.map((emp: any) => ({\n            id: emp.id,\n            name: `${emp.last_name}${emp.first_name} (${emp.position})`,\n            department: emp.department || '부서없음',\n            position: emp.position\n          }))\n        ]\n      }\n    } catch (error) {}\n  }\n\n  // 필터링된 급여명세서 데이터 목록 (로컬 필터)\n  const localFilteredPayslips = $derived(() => {\n    let filtered = $payslips\n\n    // 직원 필터\n    if (selectedEmployee) {\n      filtered = filtered.filter(payroll => payroll.employeeId === selectedEmployee)\n    }\n\n    // 부서 필터\n    if (selectedDepartment) {\n      filtered = filtered.filter(payroll => payroll.department === selectedDepartment)\n    }\n\n    // 상태 필터\n    if (selectedStatus) {\n      filtered = filtered.filter(payroll => payroll.status === selectedStatus)\n    }\n\n    return filtered\n  })\n\n  // 직원별 급여 이력 그룹화\n  const salaryHistoryByEmployee = $derived(() => {\n    const historyMap: Record<string, any[]> = {}\n\n    localFilteredPayslips.forEach(payslip => {\n      if (!historyMap[payslip.employeeId]) {\n        historyMap[payslip.employeeId] = []\n      }\n      historyMap[payslip.employeeId].push(payslip)\n    })\n\n    // 각 직원별로 급여를 지급일 기준으로 정렬 (최신순)\n    Object.keys(historyMap).forEach(employeeId => {\n      historyMap[employeeId].sort(\n        (a, b) => new Date(b.payDate).getTime() - new Date(a.payDate).getTime()\n      )\n    })\n\n    return historyMap\n  })\n\n  // 선택된 직원의 급여 이력\n  const selectedEmployeeHistory = $derived(() => {\n    if (!selectedEmployee) {\n      // 직원이 선택되지 않았으면 모든 급여 이력을 평면화하여 반환\n      const result = localFilteredPayrolls.sort(\n        (a, b) => new Date(b.payDate).getTime() - new Date(a.payDate).getTime()\n      )\n      return result\n    }\n    const result = salaryHistoryByEmployee[selectedEmployee] || []\n    return result\n  })\n\n  // 필터 초기화\n  function clearFilters() {\n    selectedEmployee = ''\n    selectedDepartment = ''\n    selectedContractType = ''\n    selectedStatus = ''\n  }\n\n  // 급여 변화 계산\n  function calculateSalaryChange(\n    payslips: any[],\n    index: number\n  ): { change: number; percentage: number; direction: 'up' | 'down' | 'same' } {\n    if (index === 0) {\n      return { change: 0, percentage: 0, direction: 'same' }\n    }\n\n    const currentSalary = parseFloat(String(payslips[index].netSalary))\n    const previousSalary = parseFloat(String(payslips[index - 1].netSalary))\n    const change = currentSalary - previousSalary\n    const percentage = previousSalary > 0 ? (change / previousSalary) * 100 : 0\n\n    return {\n      change,\n      percentage: Math.abs(percentage),\n      direction: change > 0 ? 'up' : change < 0 ? 'down' : 'same'\n    }\n  }\n\n  // 상태별 색상\n  function getStatusColor(status: string): string {\n    switch (status) {\n      case 'calculated':\n        return 'bg-blue-100 text-blue-800'\n      case 'approved':\n        return 'bg-green-100 text-green-800'\n      case 'paid':\n        return 'bg-emerald-100 text-emerald-800'\n      case 'pending':\n        return 'bg-yellow-100 text-yellow-800'\n      case 'error':\n        return 'bg-red-100 text-red-800'\n      default:\n        return 'bg-gray-100 text-gray-800'\n    }\n  }\n\n  // 상태 표시명\n  function getStatusLabel(status: string): string {\n    switch (status) {\n      case 'calculated':\n        return '계산완료'\n      case 'approved':\n        return '승인완료'\n      case 'paid':\n        return '지급완료'\n      case 'pending':\n        return '대기중'\n      case 'error':\n        return '오류'\n      default:\n        return status\n    }\n  }\n\n  // 직원 선택\n  function selectEmployee(employeeId: string) {\n    selectedEmployee = employeeId\n  }\n\n  // 필터 적용\n  function applyFilter() {\n  // 필터가 변경되면 자동으로 반영됨 (reactive)\n  }\n</script>\n\n<div class=\"space-y-6\">\n  <!-- 헤더 및 필터 -->\n  <ThemeCard class=\"p-6\">\n    <div class=\"flex items-center justify-between mb-4\">\n      <ThemeSectionHeader title=\"급여 이력 추적\" />\n      <div class=\"flex items-center space-x-3\">\n        <ThemeButton variant=\"outline\" size=\"sm\" onclick={() => (showFilters = !showFilters)}>\n          <FilterIcon size={16} class=\"mr-2\" />\n          필터\n        </ThemeButton>\n      </div>\n    </div>\n\n    <!-- 직원 선택 -->\n    <div class=\"mb-4\">\n      <label class=\"block text-sm font-medium text-gray-700 mb-2\">직원 선택</label>\n      <div class=\"flex flex-wrap gap-2\">\n        {#each employees as employee, i (i)}\n          <button\n            type=\"button\"\n            onclick={() => selectEmployee(employee.id)}\n            class=\"px-4 py-2 rounded-lg border transition-colors {selectedEmployee === employee.id\n              ? 'bg-blue-100 border-blue-500 text-blue-700'\n              : 'bg-white border-gray-300 text-gray-700 hover:bg-gray-50'}\"\n          >\n            {employee.name}\n          </button>\n        {/each}\n      </div>\n    </div>\n\n    <!-- 필터 영역 -->\n    {#if showFilters}\n      <div class=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 mb-4 p-4 bg-gray-50 rounded-lg\"\n      >\n        <div>\n          <label\n            for=\"history-department\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >부서</label\n          >\n          <select\n            id=\"history-department\"\n            bind:value={selectedDepartment}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">전체</option>\n            <option value=\"대표\">대표</option>\n            <option value=\"연구소\">연구소</option>\n            <option value=\"전략기획실\">전략기획실</option>\n            <option value=\"경영기획팀\">경영기획팀</option>\n            <option value=\"GRIT팀\">GRIT팀</option>\n            <option value=\"PSR팀\">PSR팀</option>\n            <option value=\"개발팀\">개발팀</option>\n            <option value=\"경영지원팀\">경영지원팀</option>\n            <option value=\"부서없음\">부서없음</option>\n          </select>\n        </div>\n        <div>\n          <label\n            for=\"history-period\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >급여 기간</label\n          >\n          <select\n            id=\"history-period\"\n            bind:value={selectedContractType}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">전체</option>\n            {#each monthOptions as option, i (i)}\n              <option value={option.value}>{option.label}</option>\n            {/each}\n          </select>\n        </div>\n        <div>\n          <label\n            for=\"history-status\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >상태</label\n          >\n          <select\n            id=\"history-status\"\n            bind:value={selectedStatus}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">전체</option>\n            <option value=\"calculated\">계산완료</option>\n            <option value=\"approved\">승인완료</option>\n            <option value=\"paid\">지급완료</option>\n            <option value=\"pending\">대기중</option>\n          </select>\n        </div>\n        <div class=\"flex items-end space-x-2\">\n          <ThemeButton variant=\"outline\" size=\"sm\" onclick={clearFilters}>초기화</ThemeButton>\n        </div>\n      </div>\n    {/if}\n  </ThemeCard>\n\n  <!-- 급여 이력 목록 -->\n  {#if $isLoading}\n    <div class=\"flex items-center justify-center py-12\">\n      <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      <span class=\"ml-2 text-gray-600\">로딩 중...</span>\n    </div>\n  {:else if $error}\n    <div class=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n      <span class=\"text-red-800\">{$error}</span>\n    </div>\n  {:else if selectedEmployeeHistory.length === 0}\n    <div class=\"text-center py-12\">\n      <ClockIcon size={48} class=\"mx-auto text-gray-400 mb-4\" />\n      <p class=\"text-gray-500\">\n        {selectedEmployee ? '선택한 직원의 급여 이력이 없습니다.' : '급여 이력이 없습니다.'}\n      </p>\n    </div>\n  {:else}\n    <!-- 선택된 직원의 급여 이력 -->\n    {#each selectedEmployeeHistory as payroll, index (index)}\n      <ThemeCard class=\"p-6\">\n        <div class=\"flex items-start justify-between\">\n          <div class=\"flex-1\">\n            <div class=\"flex items-center space-x-4 mb-4\">\n              <div class=\"flex items-center space-x-2\">\n                <CalendarIcon size={20} class=\"text-gray-400\" />\n                <span class=\"text-lg font-semibold text-gray-900\">\n                  {formatDate(payroll.payDate)} 지급분\n                </span>\n              </div>\n              {#if !selectedEmployee}\n                <div class=\"flex items-center space-x-2\">\n                  <UserIcon size={16} class=\"text-gray-400\" />\n                  <span class=\"text-sm text-gray-600\"\n                  >{payroll.employeeName} ({payroll.department})</span\n                  >\n                </div>\n              {/if}\n              <ThemeBadge class={getStatusColor(payroll.status)}>\n                {getStatusLabel(payroll.status)}\n              </ThemeBadge>\n            </div>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <div class=\"space-y-2\">\n                <div class=\"text-sm text-gray-500\">기본급</div>\n                <div class=\"text-xl font-bold text-gray-900\">\n                  {formatCurrency(payroll.baseSalary)}\n                </div>\n              </div>\n              <div class=\"space-y-2\">\n                <div class=\"text-sm text-gray-500\">총 지급액</div>\n                <div class=\"text-xl font-semibold text-gray-900\">\n                  {formatCurrency(payroll.grossSalary)}\n                </div>\n              </div>\n              <div class=\"space-y-2\">\n                <div class=\"text-sm text-gray-500\">총 공제액</div>\n                <div class=\"text-lg font-semibold text-red-600\">\n                  {formatCurrency(payroll.totalDeductions)}\n                </div>\n              </div>\n              <div class=\"space-y-2\">\n                <div class=\"text-sm text-gray-500\">실지급액</div>\n                <div class=\"text-2xl font-bold text-green-600\">\n                  {formatCurrency(payroll.netSalary)}\n                </div>\n              </div>\n            </div>\n\n            <!-- 급여 변화 표시 -->\n            {#if index > 0}\n              {@const change = calculateSalaryChange(selectedEmployeeHistory, index)}\n              <div class=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                <div class=\"text-sm text-gray-500 mb-2\">이전 급여 대비 변화</div>\n                <div class=\"flex items-center space-x-2\">\n                  {#if change.direction === 'up'}\n                    <TrendingUpIcon size={20} class=\"text-green-500\" />\n                    <span class=\"text-green-600 font-semibold\">\n                      +{formatCurrency(change.change)} (+{change.percentage.toFixed(1)}%)\n                    </span>\n                  {:else if change.direction === 'down'}\n                    <TrendingDownIcon size={20} class=\"text-red-500\" />\n                    <span class=\"text-red-600 font-semibold\">\n                      -{formatCurrency(Math.abs(change.change))} (-{change.percentage.toFixed(1)}%)\n                    </span>\n                  {:else}\n                    <MinusIcon size={20} class=\"text-gray-500\" />\n                    <span class=\"text-gray-500 font-semibold\">변화 없음</span>\n                  {/if}\n                </div>\n              </div>\n            {/if}\n          </div>\n        </div>\n      </ThemeCard>\n    {/each}\n\n    <!-- 급여 변화 요약 -->\n    {#if selectedEmployeeHistory.length > 1}\n      {@const firstContract = selectedEmployeeHistory[0]}\n      {@const lastContract = selectedEmployeeHistory[selectedEmployeeHistory.length - 1]}\n      {@const totalChange = lastContract.annualSalary - firstContract.annualSalary}\n      {@const totalPercentage =\n        firstContract.annualSalary > 0 ? (totalChange / firstContract.annualSalary) * 100 : 0}\n      <ThemeCard class=\"p-6\">\n        <ThemeSectionHeader title=\"급여 변화 요약\" />\n        <div class=\"mt-4 space-y-4\">\n          <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div class=\"text-center p-4 bg-gray-50 rounded-lg\">\n              <div class=\"text-sm text-gray-600\">첫 계약 연봉</div>\n              <div class=\"text-xl font-bold text-gray-900\">\n                {formatCurrency(firstContract.annualSalary)}\n              </div>\n              <div class=\"text-xs text-gray-500\">{formatDate(firstContract.startDate)}</div>\n            </div>\n            <div class=\"text-center p-4 bg-gray-50 rounded-lg\">\n              <div class=\"text-sm text-gray-600\">현재 연봉</div>\n              <div class=\"text-xl font-bold text-gray-900\">\n                {formatCurrency(lastContract.annualSalary)}\n              </div>\n              <div class=\"text-xs text-gray-500\">{formatDate(lastContract.startDate)}</div>\n            </div>\n            <div class=\"text-center p-4 bg-gray-50 rounded-lg\">\n              <div class=\"text-sm text-gray-600\">총 변화</div>\n              <div class=\"flex items-center justify-center space-x-1\">\n                {#if totalChange > 0}\n                  <TrendingUpIcon size={20} class=\"text-green-500\" />\n                  <span class=\"text-xl font-bold text-green-600\">\n                    +{formatCurrency(totalChange)}\n                  </span>\n                {:else if totalChange < 0}\n                  <TrendingDownIcon size={20} class=\"text-red-500\" />\n                  <span class=\"text-xl font-bold text-red-600\">\n                    -{formatCurrency(Math.abs(totalChange))}\n                  </span>\n                {:else}\n                  <MinusIcon size={20} class=\"text-gray-500\" />\n                  <span class=\"text-xl font-bold text-gray-500\">변화 없음</span>\n                {/if}\n              </div>\n              <div class=\"text-xs text-gray-500\">\n                {totalChange > 0 ? '+' : ''}{totalPercentage.toFixed(1)}%\n              </div>\n            </div>\n          </div>\n        </div>\n      </ThemeCard>\n    {/if}\n  {/if}\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Badge.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/BudgetModal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Card.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/CompanyModal.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":23,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[460,478],"text":""},"desc":"Remove unused variable 'event'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { XIcon } from '@lucide/svelte'\n\n  interface Company {\n    id?: string\n    name: string\n    establishment_date?: string\n    ceo_name?: string\n    business_type?: string\n    address?: string\n    phone?: string\n    fax?: string\n    email?: string\n    website?: string\n    registration_number?: string\n  }\n\n  interface Props {\n    open: boolean\n    company?: Company | null\n    loading?: boolean\n    onclose?: () => void\n    onsave?: (event: CustomEvent) => void\n  }\n\n  let { open, company = null, loading = false, onclose, onsave }: Props = $props()\n\n  let formData = $state<Company>({\n    name: '',\n    establishment_date: '',\n    ceo_name: '',\n    business_type: '',\n    address: '',\n    phone: '',\n    fax: '',\n    email: '',\n    website: '',\n    registration_number: ''\n  })\n\n  // 회사 정보가 변경될 때 폼 데이터 업데이트\n  $effect(() => {\n    if (company) {\n      formData = {\n        name: company.name || '',\n        establishment_date: company.establishment_date || '',\n        ceo_name: company.ceo_name || '',\n        business_type: company.business_type || '',\n        address: company.address || '',\n        phone: company.phone || '',\n        fax: company.fax || '',\n        email: company.email || '',\n        website: company.website || '',\n        registration_number: company.registration_number || ''\n      }\n    } else {\n      formData = {\n        name: '',\n        establishment_date: '',\n        ceo_name: '',\n        business_type: '',\n        address: '',\n        phone: '',\n        fax: '',\n        email: '',\n        website: '',\n        registration_number: ''\n      }\n    }\n  })\n\n  // 저장 함수\n  async function handleSave() {\n    try {\n      const response = await fetch('/api/company', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        // 성공 이벤트 발생\n        if (onsave) {\n          onsave(new CustomEvent('save', { detail: { company: result.data } }))\n        }\n        if (onclose) {\n          onclose()\n        }\n      } else {\n        alert('오류: ' + result.error)\n      }\n    } catch (error) {\n      logger.error('Error saving company:', error)\n      alert('회사 정보 저장 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 모달 닫기\n  function handleClose() {\n    if (onclose) {\n      onclose()\n    }\n  }\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n{#if open}\n  <div class=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n    <div class=\"bg-white rounded-lg shadow-xl max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto\">\n      <!-- 헤더 -->\n      <div class=\"flex items-center justify-between p-6 border-b\">\n        <h2 class=\"text-xl font-semibold text-gray-900\">\n          {company ? '회사 정보 수정' : '회사 정보 등록'}\n        </h2>\n        <button\n          type=\"button\"\n          onclick={handleClose}\n          class=\"text-gray-400 hover:text-gray-600 transition-colors\"\n        >\n          <XIcon class=\"w-6 h-6\" />\n        </button>\n      </div>\n\n      <!-- 폼 -->\n      <div class=\"p-6 space-y-4\">\n        <!-- 회사명 -->\n        <div>\n          <label for=\"name\" class=\"block text-sm font-medium text-gray-700 mb-1\">회사명 *</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            bind:value={formData.name}\n            required\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"회사명을 입력하세요\"\n          />\n        </div>\n\n        <!-- 설립일 -->\n        <div>\n          <label\n            for=\"establishment_date\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >설립일</label\n          >\n          <input\n            type=\"date\"\n            id=\"establishment_date\"\n            bind:value={formData.establishment_date}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        <!-- 대표이사 -->\n        <div>\n          <label for=\"ceo_name\" class=\"block text-sm font-medium text-gray-700 mb-1\">대표이사</label\n          >\n          <input\n            type=\"text\"\n            id=\"ceo_name\"\n            bind:value={formData.ceo_name}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"대표이사명을 입력하세요\"\n          />\n        </div>\n\n        <!-- 업종 -->\n        <div>\n          <label\n            for=\"business_type\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >업종</label\n          >\n          <input\n            type=\"text\"\n            id=\"business_type\"\n            bind:value={formData.business_type}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"업종을 입력하세요\"\n          />\n        </div>\n\n        <!-- 주소 -->\n        <div>\n          <label for=\"address\" class=\"block text-sm font-medium text-gray-700 mb-1\">주소</label>\n          <textarea\n            id=\"address\"\n            bind:value={formData.address}\n            rows=\"2\"\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"주소를 입력하세요\"\n          ></textarea>\n        </div>\n\n        <!-- 전화번호 -->\n        <div>\n          <label for=\"phone\" class=\"block text-sm font-medium text-gray-700 mb-1\">전화번호</label>\n          <input\n            type=\"tel\"\n            id=\"phone\"\n            bind:value={formData.phone}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"전화번호를 입력하세요\"\n          />\n        </div>\n\n        <!-- 팩스번호 -->\n        <div>\n          <label for=\"fax\" class=\"block text-sm font-medium text-gray-700 mb-1\">팩스번호</label>\n          <input\n            type=\"tel\"\n            id=\"fax\"\n            bind:value={formData.fax}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"팩스번호를 입력하세요\"\n          />\n        </div>\n\n        <!-- 이메일 -->\n        <div>\n          <label for=\"email\" class=\"block text-sm font-medium text-gray-700 mb-1\">이메일</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            bind:value={formData.email}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"이메일을 입력하세요\"\n          />\n        </div>\n\n        <!-- 웹사이트 -->\n        <div>\n          <label for=\"website\" class=\"block text-sm font-medium text-gray-700 mb-1\">웹사이트</label>\n          <input\n            type=\"url\"\n            id=\"website\"\n            bind:value={formData.website}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"웹사이트 URL을 입력하세요\"\n          />\n        </div>\n\n        <!-- 사업자등록번호 -->\n        <div>\n          <label\n            for=\"registration_number\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >사업자등록번호</label\n          >\n          <input\n            type=\"text\"\n            id=\"registration_number\"\n            bind:value={formData.registration_number}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            placeholder=\"사업자등록번호를 입력하세요\"\n          />\n        </div>\n      </div>\n\n      <!-- 푸터 -->\n      <div class=\"flex items-center justify-end gap-3 p-6 border-t bg-gray-50\">\n        <button\n          type=\"button\"\n          onclick={handleClose}\n          class=\"px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 transition-colors\"\n        >\n          취소\n        </button>\n        <button\n          type=\"button\"\n          onclick={handleSave}\n          disabled={loading || !formData.name}\n          class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors\"\n        >\n          {loading ? '저장 중...' : company ? '수정' : '등록'}\n        </button>\n      </div>\n    </div>\n  </div>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/DeleteConfirmModal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/DepartmentModal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/EmployeeModal.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'departmentPositionMapping' is assigned a value but never used.","line":135,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":135,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { formatEmployeeName } from '$lib/utils/format'\n  import { splitKoreanName } from '$lib/utils/korean-name'\n  import { SaveIcon } from '@lucide/svelte'\n  import { createEventDispatcher } from 'svelte'\n  import ThemeModal from './ThemeModal.svelte'\n\n  interface Employee {\n    id?: string\n    employee_id?: string\n    first_name: string\n    last_name: string\n    email: string\n    phone: string\n    department: string\n    position: string\n    salary: number\n    hire_date: string\n    birth_date?: string\n    termination_date?: string\n    status: 'active' | 'inactive' | 'on-leave' | 'terminated'\n    employment_type: 'full-time' | 'part-time' | 'contract' | 'intern'\n    job_title_id?: string\n    job_title_name?: string\n    job_title_level?: number\n    job_title_category?: string\n  }\n\n  interface Props {\n    open: boolean\n    employee?: Employee | null\n    loading?: boolean\n    departments?: Array<{ id: string; name: string }>\n    positions?: Array<{ id: string; name: string; department: string }>\n    jobTitles?: Array<{ id: string; name: string; level: number; category: string }>\n  }\n\n  let {\n    open,\n    employee = null,\n    loading = false,\n    departments = [],\n    positions = [],\n    jobTitles = []\n  }: Props = $props()\n\n  const dispatch = createEventDispatcher<{\n    close: void\n    save: Employee\n  }>()\n\n  // 폼 데이터\n  let formData = $state<Employee>({\n    first_name: '',\n    last_name: '',\n    email: '',\n    phone: '',\n    department: '',\n    position: '',\n    salary: 0,\n    hire_date: new Date().toISOString().split('T')[0],\n    birth_date: '',\n    termination_date: '',\n    status: 'active',\n    employment_type: 'full-time',\n    job_title_id: ''\n  })\n\n  // 한국 이름 분리 함수 (통합된 유틸리티 사용)\n  // splitKoreanName은 korean-name.ts에서 import\n\n  // 전체 이름 입력 필드\n  let fullName = $state('')\n\n  // 전체 이름이 변경될 때 성/이름 자동 분리\n  $effect(() => {\n    if (fullName && !employee?.id) {\n      // 새 직원 추가 시에만 자동 분리\n      const { surname, givenName } = splitKoreanName(fullName)\n      formData.last_name = surname\n      formData.first_name = givenName\n    }\n  })\n\n  // 직원 데이터가 변경될 때 폼 데이터 업데이트\n  $effect(() => {\n    if (employee) {\n      logger.log('Employee data loaded:', employee)\n      logger.log('Available positions:', positions)\n\n      formData.first_name = String(employee.first_name || '')\n      formData.last_name = String(employee.last_name || '')\n      formData.email = String(employee.email || '')\n      formData.phone = String(employee.phone || '')\n      formData.department = String(employee.department || '')\n      formData.position = String(employee.position || '')\n      formData.salary = Number(employee.salary || 0)\n      formData.hire_date = employee.hire_date\n        ? new Date(employee.hire_date).toISOString().split('T')[0]\n        : new Date().toISOString().split('T')[0]\n      formData.birth_date = employee.birth_date\n        ? new Date(employee.birth_date).toISOString().split('T')[0]\n        : ''\n      formData.termination_date = employee.termination_date\n        ? new Date(employee.termination_date).toISOString().split('T')[0]\n        : ''\n      formData.status = employee.status || 'active'\n      formData.employment_type = employee.employment_type || 'full-time'\n      formData.job_title_id = employee.job_title_id || ''\n      // 수정 모드에서는 전체 이름을 조합해서 표시\n      fullName = formatEmployeeName(employee)\n\n      logger.log('Form data set:', formData)\n      logger.log('Filtered positions:', filteredPositions())\n    } else {\n      // 새 직원 추가 시 기본값으로 리셋\n      formData.first_name = ''\n      formData.last_name = ''\n      formData.email = ''\n      formData.phone = ''\n      formData.department = ''\n      formData.position = ''\n      formData.salary = 0\n      formData.hire_date = new Date().toISOString().split('T')[0]\n      formData.birth_date = ''\n      formData.termination_date = ''\n      formData.status = 'active'\n      formData.employment_type = 'full-time'\n      formData.job_title_id = ''\n      fullName = ''\n    }\n  })\n\n  // 부서별 직급 매핑\n  const departmentPositionMapping = {\n    개발팀: '연구개발',\n    PSR팀: '연구개발',\n    GRIT팀: '디자인',\n    경영지원팀: '행정',\n    경영기획팀: '연구개발'\n  }\n\n  // 모든 직급 표시 (임시로 필터링 제거)\n  let filteredPositions = $derived(() => {\n    logger.log('All positions:', positions)\n    return positions\n  })\n\n  // 상태 옵션\n  const statusOptions = [\n    { value: 'active', label: '활성' },\n    { value: 'inactive', label: '비활성' },\n    { value: 'on-leave', label: '휴직' },\n    { value: 'terminated', label: '퇴사' }\n  ]\n\n  // 고용 형태 옵션\n  const employmentTypeOptions = [\n    { value: 'full-time', label: '정규직' },\n    { value: 'part-time', label: '계약직' },\n    { value: 'contract', label: '프리랜서' },\n    { value: 'intern', label: '인턴' }\n  ]\n\n  function handleSave() {\n    // 필수 필드 검증\n    if (\n      !formData.first_name?.trim() ||\n      !formData.last_name?.trim() ||\n      !formData.email?.trim() ||\n      !formData.department?.trim() ||\n      !formData.position?.trim()\n    ) {\n      alert('성, 이름, 이메일, 부서, 직급은 필수 입력 항목입니다.')\n      return\n    }\n\n    // 이름 분리 검증 - 성과 이름이 명확히 분리되어야 함\n    if (formData.first_name.trim().length === 0 || formData.last_name.trim().length === 0) {\n      alert('성과 이름은 반드시 분리되어 입력되어야 합니다.')\n      return\n    }\n\n    // 이메일 형식 검증\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(formData.email)) {\n      alert('올바른 이메일 형식을 입력해주세요.')\n      return\n    }\n\n    // salary를 숫자로 변환\n    const dataToSave = {\n      ...formData,\n      salary: Number(formData.salary) || 0\n    }\n\n    // 수정 모드일 때는 id를 포함\n    if (employee?.id) {\n      dataToSave.id = employee.id\n    }\n\n    dispatch('save', dataToSave)\n  }\n\n  function handleClose() {\n    dispatch('close')\n  }\n\n  let isEdit = $derived(!!employee?.id)\n  let title = $derived(isEdit ? '직원 정보 수정' : '새 직원 추가')\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<ThemeModal {open} size=\"lg\" onclose={handleClose}>\n  <div class=\"p-6\">\n    <div class=\"mb-6\">\n      <h2 class=\"text-xl font-semibold\" style:color=\"var(--color-text)\">{title}</h2>\n    </div>\n\n    <form\n      onsubmit={e => {\n        e.preventDefault()\n        handleSave()\n      }}\n      class=\"space-y-4\"\n    >\n      <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <!-- 전체 이름 (새 직원 추가 시에만 표시) -->\n        {#if !employee?.id}\n          <div class=\"md:col-span-2\">\n            <label\n              for=\"full-name\"\n              class=\"block text-sm font-medium mb-2\"\n              style:color=\"var(--color-text)\">전체 이름 *</label\n            >\n            <input\n              id=\"full-name\"\n              type=\"text\"\n              bind:value={fullName}\n              placeholder=\"예: 김철수, John Smith\"\n              required\n              class=\"w-full px-3 py-2 border rounded-md text-sm\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n            />\n            <p class=\"text-xs mt-1\" style:color=\"var(--color-text-secondary)\">\n              한글 이름은 첫 글자가 성으로 자동 분리됩니다.\n            </p>\n          </div>\n        {/if}\n\n        <!-- 성 -->\n        <div>\n          <label\n            for=\"last-name\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">성 *</label\n          >\n          <input\n            id=\"last-name\"\n            type=\"text\"\n            bind:value={formData.last_name}\n            placeholder=\"성을 입력하세요\"\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 이름 -->\n        <div>\n          <label\n            for=\"first-name\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">이름 *</label\n          >\n          <input\n            id=\"first-name\"\n            type=\"text\"\n            bind:value={formData.first_name}\n            placeholder=\"이름을 입력하세요\"\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 이메일 -->\n        <div>\n          <label\n            for=\"email\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\"\n          >이메일 *</label\n          >\n          <input\n            id=\"email\"\n            type=\"email\"\n            bind:value={formData.email}\n            placeholder=\"이메일을 입력하세요\"\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 전화번호 -->\n        <div>\n          <label\n            for=\"phone\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\"\n          >전화번호</label\n          >\n          <input\n            id=\"phone\"\n            type=\"tel\"\n            bind:value={formData.phone}\n            placeholder=\"전화번호를 입력하세요\"\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 부서 -->\n        <div>\n          <label\n            for=\"department\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">부서 *</label\n          >\n          <select\n            id=\"department\"\n            bind:value={formData.department}\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          >\n            <option value=\"\">부서를 선택하세요</option>\n            <option value=\"대표\">대표</option>\n            <option value=\"전략기획실\">전략기획실</option>\n            <option value=\"연구소\">연구소</option>\n            {#each departments.filter(d => !['대표', '전략기획실', '연구소', '부서없음'].includes(d.name)) as dept, idx (idx)}\n              <!-- TODO: replace index key with a stable id when model provides one -->\n              <option value={dept.name}>{dept.name}</option>\n            {/each}\n            <option value=\"부서없음\">부서없음</option>\n          </select>\n        </div>\n\n        <!-- 직급 -->\n        <div>\n          <label\n            for=\"position\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">직급 *</label\n          >\n          <select\n            id=\"position\"\n            bind:value={formData.position}\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          >\n            <option value=\"\">직급을 선택하세요</option>\n            {#each filteredPositions() as pos, idx (idx)}\n              <!-- TODO: replace index key with a stable id when model provides one -->\n              <option value={pos.name}>{pos.name} ({pos.department})</option>\n            {/each}\n          </select>\n          <!-- 디버깅 정보 -->\n          {#if filteredPositions().length === 0}\n            <p class=\"text-xs text-red-500 mt-1\">\n              직급 데이터가 없습니다. positions: {positions.length}개\n            </p>\n          {:else}\n            <p class=\"text-xs text-green-500 mt-1\">직급 {filteredPositions().length}개 로드됨</p>\n          {/if}\n        </div>\n\n        <!-- 직책 (선택사항) -->\n        <div>\n          <label\n            for=\"job-title\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">직책</label\n          >\n          <select\n            id=\"job-title\"\n            bind:value={formData.job_title_id}\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          >\n            <option value=\"\">직책을 선택하세요 (선택사항)</option>\n            {#each jobTitles as jobTitle, i (i)}\n              <option value={jobTitle.id}>{jobTitle.name} ({jobTitle.category})</option>\n            {/each}\n          </select>\n          <p class=\"text-xs mt-1\" style:color=\"var(--color-text-secondary)\">\n            직책이 있으면 직급 대신 직책으로 표시됩니다.\n          </p>\n        </div>\n\n        <!-- 급여 -->\n        <div>\n          <label\n            for=\"salary\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\"\n          >급여 *</label\n          >\n          <input\n            id=\"salary\"\n            type=\"number\"\n            bind:value={formData.salary}\n            placeholder=\"급여를 입력하세요\"\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 입사일 -->\n        <div>\n          <label\n            for=\"hire-date\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">입사일 *</label\n          >\n          <input\n            id=\"hire-date\"\n            type=\"date\"\n            bind:value={formData.hire_date}\n            required\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 생일 -->\n        <div>\n          <label\n            for=\"birth-date\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">생일</label\n          >\n          <input\n            id=\"birth-date\"\n            type=\"date\"\n            bind:value={formData.birth_date}\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 퇴사일 -->\n        <div>\n          <label\n            for=\"termination-date\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">퇴사일</label\n          >\n          <input\n            id=\"termination-date\"\n            type=\"date\"\n            bind:value={formData.termination_date}\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          />\n        </div>\n\n        <!-- 상태 -->\n        <div>\n          <label\n            for=\"status\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\"\n          >상태</label\n          >\n          <select\n            id=\"status\"\n            bind:value={formData.status}\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          >\n            {#each statusOptions as option, i (i)}\n              <option value={option.value}>{option.label}</option>\n            {/each}\n          </select>\n        </div>\n\n        <!-- 고용 형태 -->\n        <div>\n          <label\n            for=\"employment-type\"\n            class=\"block text-sm font-medium mb-2\"\n            style:color=\"var(--color-text)\">고용 형태</label\n          >\n          <select\n            id=\"employment-type\"\n            bind:value={formData.employment_type}\n            class=\"w-full px-3 py-2 border rounded-md text-sm\"\n            style:background=\"var(--color-surface)\"\n            style:border-color=\"var(--color-border)\"\n            style:color=\"var(--color-text)\"\n          >\n            {#each employmentTypeOptions as option, i (i)}\n              <option value={option.value}>{option.label}</option>\n            {/each}\n          </select>\n        </div>\n      </div>\n\n      <div\n        class=\"flex items-center justify-end gap-3 pt-6 border-t\"\n        style:border-color=\"var(--color-border)\"\n      >\n        <button\n          type=\"button\"\n          onclick={handleClose}\n          disabled={loading}\n          class=\"px-4 py-2 text-sm font-medium rounded-md border transition-colors\"\n          style:border-color=\"var(--color-border)\"\n          style:color=\"var(--color-text)\"\n          style:background=\"var(--color-surface)\"\n        >\n          취소\n        </button>\n        <button\n          type=\"submit\"\n          disabled={loading}\n          class=\"px-4 py-2 text-sm font-medium rounded-md text-white transition-colors flex items-center gap-2\"\n          style:background=\"var(--color-primary)\"\n        >\n          {#if loading}\n            <div class=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"\n            ></div>\n          {:else}\n            <SaveIcon size={16} />\n          {/if}\n          {isEdit ? '수정' : '추가'}\n        </button>\n      </div>\n    </form>\n  </div>\n</ThemeModal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Modal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/OrganizationChart.svelte","messages":[{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":196,"column":7,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":241,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'execName' is defined but never used.","line":196,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":196,"endColumn":50,"suggestions":[{"messageId":"removeVar","data":{"varName":"execName"},"fix":{"range":[5134,5142],"text":""},"desc":"Remove unused variable 'execName'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { onMount } from 'svelte'\n  import { DownloadIcon, PrinterIcon } from '@lucide/svelte'\n\n  interface Employee {\n    name: string\n    position: string\n    email: string\n    salary?: number\n    job_title?: string\n    isTeamLead?: boolean\n  }\n\n  interface Department {\n    name: string\n    position: string\n    type?: string\n    children: Employee[]\n  }\n\n  interface Executive {\n    name: string\n    position: string\n    email: string\n    children: Department[]\n  }\n\n  interface OrgStructure {\n    [key: string]: Executive\n  }\n\n  let orgData = $state<OrgStructure>({})\n  let loading = $state(true)\n  let error = $state('')\n  let showPrintView = $state(false)\n  let companyName = $state('VIA WorkStream')\n\n  // 회사 정보 로드\n  async function loadCompanyInfo() {\n    try {\n      const response = await fetch('/api/company')\n      const result = await response.json()\n\n      if (result.success && result.data) {\n        companyName = result.data.name || 'VIA WorkStream'\n      }\n    } catch (err) {\n      logger.error('Error loading company info:', err)\n    // 기본값 유지\n    }\n  }\n\n  // 조직도 데이터 로드\n  async function loadOrgData() {\n    try {\n      loading = true\n      const response = await fetch('/api/organization/chart')\n      const result = await response.json()\n\n      if (result.success) {\n        orgData = result.data\n      } else {\n        error = result.error || '조직도 데이터를 불러올 수 없습니다.'\n      }\n    } catch (err) {\n      error = '조직도 데이터를 불러오는 중 오류가 발생했습니다.'\n      logger.error('Error loading org data:', err)\n    } finally {\n      loading = false\n    }\n  }\n\n  // CSV 다운로드\n  async function downloadCSV() {\n    try {\n      const response = await fetch('/api/organization/chart/download')\n      const blob = await response.blob()\n\n      const url = window.URL.createObjectURL(blob)\n      const a = document.createElement('a')\n      a.href = url\n      a.download = 'organization_chart.csv'\n      document.body.appendChild(a)\n      a.click()\n      window.URL.revokeObjectURL(url)\n      document.body.removeChild(a)\n    } catch (err) {\n      logger.error('Error downloading CSV:', err)\n      alert('다운로드 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 프린트 뷰 토글\n  function togglePrintView() {\n    showPrintView = !showPrintView\n    if (showPrintView) {\n      document.body.classList.add('print-mode')\n      setTimeout(() => {\n        window.print()\n        setTimeout(() => {\n          document.body.classList.remove('print-mode')\n          showPrintView = false\n        }, 1000)\n      }, 100)\n    }\n  }\n\n  // 팀 리더인지 확인\n  function isTeamLead(employee: Employee): boolean {\n    return (\n      employee.job_title === 'Team Lead' ||\n      employee.position === 'Team Lead' ||\n      (employee.isTeamLead ?? false)\n    )\n  }\n\n  // 직원을 정렬 (팀 리더 우선) - 원본 배열을 변경하지 않음\n  function sortEmployees(employees: Employee[]): Employee[] {\n    return [...employees].sort((a, b) => {\n      const aIsTeamLead = isTeamLead(a)\n      const bIsTeamLead = isTeamLead(b)\n\n      if (aIsTeamLead && !bIsTeamLead) return -1\n      if (!aIsTeamLead && bIsTeamLead) return 1\n\n      return a.name.localeCompare(b.name)\n    })\n  }\n\n  onMount(() => {\n    loadCompanyInfo()\n    loadOrgData()\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"org-chart-print\">\n  <!-- 헤더 -->\n  <div class=\"flex items-center justify-between print-hidden mb-4\">\n    <div>\n      <h2 class=\"text-xl font-bold\" style:color=\"var(--color-text)\">조직도</h2>\n      <p class=\"text-xs mt-1\" style:color=\"var(--color-text-secondary)\">\n        {companyName} 조직 구조\n      </p>\n    </div>\n    <div class=\"flex gap-2\">\n      <button\n        type=\"button\"\n        onclick={togglePrintView}\n        class=\"flex items-center gap-1 px-3 py-1 bg-gray-600 text-white rounded text-sm hover:bg-gray-700 transition-colors\"\n      >\n        <PrinterIcon class=\"w-3 h-3\" />\n        프린트\n      </button>\n      <button\n        type=\"button\"\n        onclick={downloadCSV}\n        class=\"flex items-center gap-1 px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors\"\n      >\n        <DownloadIcon class=\"w-3 h-3\" />\n        CSV\n      </button>\n    </div>\n  </div>\n\n  <!-- 프린트용 헤더 -->\n  <div class=\"print-visible hidden text-center mb-2\">\n    <h1 class=\"text-lg font-bold text-black mb-1\">{companyName} 조직도</h1>\n    <p class=\"text-xs text-gray-600\">생성일: {new Date().toLocaleDateString('ko-KR')}</p>\n  </div>\n\n  <!-- 로딩 상태 -->\n  {#if loading}\n    <div class=\"flex items-center justify-center py-8\">\n      <div class=\"text-center\">\n        <div class=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mx-auto mb-2\"\n        ></div>\n        <p class=\"text-xs\" style:color=\"var(--color-text-secondary)\">로딩 중...</p>\n      </div>\n    </div>\n  {:else if error}\n    <div class=\"text-center py-8\">\n      <p class=\"text-red-600 text-sm mb-2\">{error}</p>\n      <button\n        type=\"button\"\n        onclick={loadOrgData}\n        class=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 transition-colors\"\n      >\n        다시 시도\n      </button>\n    </div>\n  {:else}\n    <!-- 단순한 조직도 표시 -->\n    <div class=\"space-y-3\">\n      {#each Object.entries(orgData) as [execName, executive]}\n        <div class=\"border border-gray-300 bg-white\">\n          <!-- 임원 헤더 -->\n          <div class=\"bg-gray-100 border-b border-gray-300 px-3 py-2\">\n            <div class=\"flex items-center gap-2\">\n              <div class=\"w-4 h-4 bg-blue-600 rounded-sm flex items-center justify-center\">\n                <span class=\"text-white text-xs\">■</span>\n              </div>\n              <span class=\"font-semibold text-sm text-gray-800\">{executive.name}</span>\n              <span class=\"text-xs text-gray-600\">({executive.position})</span>\n            </div>\n          </div>\n\n          <!-- 부서들 -->\n          <div class=\"p-2\">\n            {#each executive.children as department, i (i)}\n              <div class=\"mb-2 last:mb-0\">\n                <!-- 부서명 -->\n                <div class=\"flex items-center gap-2 mb-1\">\n                  <div class=\"w-3 h-3 bg-green-600 rounded-sm flex items-center justify-center\">\n                    <span class=\"text-white text-xs\">●</span>\n                  </div>\n                  <span class=\"font-medium text-sm text-gray-700\">{department.name}</span>\n                </div>\n\n                <!-- 직원들 -->\n                <div class=\"ml-5 space-y-1\">\n                  {#each sortEmployees(department.children) as employee, idx (idx)}\n                    <!-- TODO: replace index key with a stable id when model provides one -->\n                    <div class=\"flex items-center gap-2 text-xs\">\n                      <div class=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n                      <span class=\"text-gray-800\">{employee.name}</span>\n                      <span class=\"text-gray-500\">({employee.position})</span>\n                      {#if isTeamLead(employee)}\n                        <span class=\"bg-yellow-200 text-yellow-800 px-1 py-0.5 rounded text-xs\"\n                        >TL</span\n                        >\n                      {/if}\n                    </div>\n                  {/each}\n                </div>\n              </div>\n            {/each}\n          </div>\n        </div>\n      {/each}\n    </div>\n  {/if}\n</div>\n\n<!-- 프린트 스타일 -->\n<style>\n  /* 프린트 모드에서 전체 페이지 숨기기 */\n  :global(body.print-mode *) {\n    visibility: hidden;\n  }\n\n  :global(body.print-mode .org-chart-print),\n  :global(body.print-mode .org-chart-print *) {\n    visibility: visible;\n  }\n\n  :global(body.print-mode .org-chart-print) {\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background: white;\n    z-index: 9999;\n  }\n\n  @media print {\n    @page {\n      size: A4 portrait;\n      margin: 10mm;\n    }\n\n    * {\n      visibility: hidden;\n    }\n\n    .org-chart-print,\n    .org-chart-print * {\n      visibility: visible;\n    }\n\n    .org-chart-print {\n      position: absolute;\n      left: 0;\n      top: 0;\n      width: 100%;\n      height: 100%;\n      background: white !important;\n      color: black !important;\n      font-family: 'Arial', 'Helvetica', sans-serif !important;\n      margin: 0;\n      padding: 5px;\n      box-sizing: border-box;\n    }\n\n    .print-hidden {\n      display: none !important;\n    }\n\n    .print-visible {\n      display: block !important;\n    }\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/PositionModal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/Progress.svelte","messages":[{"ruleId":"svelte/require-optimized-style-attribute","severity":1,"message":"It cannot be optimized because too complex.","line":13,"column":68,"nodeType":"SvelteAttribute","messageId":"complex","endLine":13,"endColumn":90}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  let { value = 0, class: className = '' } = $props<{ value?: number; class?: string }>()\n  const clamped = Math.max(0, Math.min(100, value))\n</script>\n\n<div\n  class={`h-2 w-full rounded-full bg-gray-200 overflow-hidden ${className}`}\n  role=\"progressbar\"\n  aria-valuemin=\"0\"\n  aria-valuemax=\"100\"\n  aria-valuenow={clamped}\n>\n  <div class=\"h-full bg-primary transition-all duration-300\" style={`width: ${clamped}%`}></div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/SimpleChart.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeActivityItem.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeAvatar.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeBadge.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeButton.svelte","messages":[{"ruleId":"svelte/no-at-html-tags","severity":1,"message":"`{@html}` can lead to XSS attack.","line":176,"column":7,"nodeType":"SvelteMustacheTag","messageId":"unexpected","endLine":176,"endColumn":34}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  // Props\n  interface Props {\n    variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'error' | 'info' | 'ghost'\n    size?:\n      | 'sm'\n      | 'md'\n      | 'lg'\n      | 'xl'\n      | '2xl'\n      | '3xl'\n      | '4xl'\n      | '5xl'\n      | '6xl'\n      | '7xl'\n      | '8xl'\n      | '9xl'\n      | '10xl'\n      | '11xl'\n      | '12xl'\n      | '13xl'\n      | '14xl'\n      | '15xl'\n      | '16xl'\n      | '17xl'\n      | '18xl'\n      | '19xl'\n      | '20xl'\n      | '21xl'\n      | '22xl'\n      | '23xl'\n      | '24xl'\n      | '25xl'\n      | '26xl'\n      | '27xl'\n      | '28xl'\n      | '29xl'\n      | '30xl'\n      | '31xl'\n      | '32xl'\n      | '33xl'\n      | '34xl'\n      | '35xl'\n      | '36xl'\n      | '37xl'\n      | '38xl'\n      | '39xl'\n      | '40xl'\n      | '41xl'\n      | '42xl'\n      | '43xl'\n      | '44xl'\n      | '45xl'\n      | '46xl'\n      | '47xl'\n      | '48xl'\n      | '49xl'\n      | '50xl'\n      | '51xl'\n      | '52xl'\n      | '53xl'\n      | '54xl'\n      | '55xl'\n      | '56xl'\n      | '57xl'\n      | '58xl'\n      | '59xl'\n      | '60xl'\n      | '61xl'\n      | '62xl'\n      | '63xl'\n      | '64xl'\n      | '65xl'\n      | '66xl'\n      | '67xl'\n      | '68xl'\n      | '69xl'\n      | '70xl'\n      | '71xl'\n      | '72xl'\n      | '73xl'\n      | '74xl'\n      | '75xl'\n      | '76xl'\n      | '77xl'\n      | '78xl'\n      | '79xl'\n      | '80xl'\n      | '81xl'\n      | '82xl'\n      | '83xl'\n      | '84xl'\n      | '85xl'\n      | '86xl'\n      | '87xl'\n      | '88xl'\n      | '89xl'\n      | '90xl'\n      | '91xl'\n      | '92xl'\n      | '93xl'\n      | '94xl'\n      | '95xl'\n      | '96xl'\n      | '97xl'\n      | '98xl'\n      | '99xl'\n      | '100xl'\n    disabled?: boolean\n    loading?: boolean\n    onclick?: () => void\n    class?: string\n    children?: any\n  }\n\n  let {\n    variant = 'primary',\n    size = 'md',\n    disabled = false,\n    loading = false,\n    onclick,\n    class: className = '',\n    children,\n    ...restProps\n  }: Props = $props()\n\n  // Get button classes\n  function getButtonClasses(): string {\n    const baseClasses = 'theme-button'\n    const variantClass = `theme-button-${variant}`\n    const sizeClass = `theme-button-${size}`\n    const stateClasses = [\n      disabled ? 'theme-button-disabled' : '',\n      loading ? 'theme-button-loading' : ''\n    ]\n      .filter(Boolean)\n      .join(' ')\n\n    return [baseClasses, variantClass, sizeClass, stateClasses, className].filter(Boolean).join(' ')\n  }\n\n  // Handle click\n  function handleClick(event: MouseEvent) {\n    if (disabled || loading) {\n      event.preventDefault()\n      return\n    }\n\n    if (onclick) {\n      onclick()\n    }\n  }\n\n  // Get loading spinner\n  function getLoadingSpinner(): string {\n    return `\n\t\t\t<svg class=\"theme-button-spinner\" viewBox=\"0 0 24 24\" fill=\"none\">\n\t\t\t\t<circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-dasharray=\"60\" stroke-dashoffset=\"60\">\n\t\t\t\t\t<animate attributeName=\"stroke-dasharray\" dur=\"1.5s\" values=\"0 60;60 0;0 60\" repeatCount=\"indefinite\"/>\n\t\t\t\t\t<animate attributeName=\"stroke-dashoffset\" dur=\"1.5s\" values=\"0;-60;-60\" repeatCount=\"indefinite\"/>\n\t\t\t\t</circle>\n\t\t\t</svg>\n\t\t`\n  }\n</script>\n\n<button\n  type=\"button\"\n  class={getButtonClasses()}\n  onclick={handleClick}\n  disabled={disabled || loading}\n  {...restProps}\n>\n  {#if loading}\n    <span class=\"theme-button-spinner-container\">\n      {@html getLoadingSpinner()}\n    </span>\n  {/if}\n\n  <span class=\"theme-button-content\">\n    {@render children?.()}\n  </span>\n</button>\n\n<style>\n  .theme-button {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n    border: none;\n    border-radius: 8px;\n    font-weight: 500;\n    cursor: pointer;\n    transition: all 0.2s ease;\n    position: relative;\n    overflow: hidden;\n  }\n\n  .theme-button:focus {\n    outline: none;\n    box-shadow: 0 0 0 2px var(--color-primary);\n  }\n\n  .theme-button:disabled {\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n\n  /* Variants */\n  .theme-button-primary {\n    background: var(--color-button-primary);\n    color: white;\n  }\n\n  .theme-button-primary:hover:not(:disabled) {\n    background: var(--color-button-primary-hover);\n  }\n\n  .theme-button-secondary {\n    background: var(--color-button-secondary);\n    color: white;\n  }\n\n  .theme-button-secondary:hover:not(:disabled) {\n    background: var(--color-button-secondary-hover);\n  }\n\n  .theme-button-success {\n    background: var(--color-button-success);\n    color: white;\n  }\n\n  .theme-button-success:hover:not(:disabled) {\n    background: var(--color-button-success-hover);\n  }\n\n  .theme-button-warning {\n    background: var(--color-button-warning);\n    color: #212529;\n  }\n\n  .theme-button-warning:hover:not(:disabled) {\n    background: var(--color-button-warning-hover);\n  }\n\n  .theme-button-error {\n    background: var(--color-button-error);\n    color: white;\n  }\n\n  .theme-button-error:hover:not(:disabled) {\n    background: var(--color-button-error-hover);\n  }\n\n  .theme-button-info {\n    background: var(--color-button-info);\n    color: white;\n  }\n\n  .theme-button-info:hover:not(:disabled) {\n    background: var(--color-button-info-hover);\n  }\n\n  .theme-button-ghost {\n    background: var(--color-button-ghost);\n    color: var(--color-button-ghost-text);\n    border: 1px solid var(--color-button-ghost-border);\n  }\n\n  .theme-button-ghost:hover:not(:disabled) {\n    background: var(--color-button-ghost-hover);\n    color: var(--color-button-ghost-text-hover);\n    border-color: var(--color-button-ghost-border-hover);\n  }\n\n  /* Sizes */\n  .theme-button-sm {\n    padding: 8px 12px;\n    font-size: 12px;\n    min-height: 32px;\n  }\n\n  .theme-button-md {\n    padding: 10px 16px;\n    font-size: 14px;\n    min-height: 40px;\n  }\n\n  .theme-button-lg {\n    padding: 12px 20px;\n    font-size: 16px;\n    min-height: 48px;\n  }\n\n  .theme-button-xl {\n    padding: 14px 24px;\n    font-size: 18px;\n    min-height: 56px;\n  }\n\n  .theme-button-2xl {\n    padding: 16px 28px;\n    font-size: 20px;\n    min-height: 64px;\n  }\n\n  .theme-button-3xl {\n    padding: 18px 32px;\n    font-size: 22px;\n    min-height: 72px;\n  }\n\n  .theme-button-4xl {\n    padding: 20px 36px;\n    font-size: 24px;\n    min-height: 80px;\n  }\n\n  .theme-button-5xl {\n    padding: 22px 40px;\n    font-size: 26px;\n    min-height: 88px;\n  }\n\n  .theme-button-6xl {\n    padding: 24px 44px;\n    font-size: 28px;\n    min-height: 96px;\n  }\n\n  .theme-button-7xl {\n    padding: 26px 48px;\n    font-size: 30px;\n    min-height: 104px;\n  }\n\n  .theme-button-8xl {\n    padding: 28px 52px;\n    font-size: 32px;\n    min-height: 112px;\n  }\n\n  .theme-button-9xl {\n    padding: 30px 56px;\n    font-size: 34px;\n    min-height: 120px;\n  }\n\n  .theme-button-10xl {\n    padding: 32px 60px;\n    font-size: 36px;\n    min-height: 128px;\n  }\n\n  .theme-button-11xl {\n    padding: 34px 64px;\n    font-size: 38px;\n    min-height: 136px;\n  }\n\n  .theme-button-12xl {\n    padding: 36px 68px;\n    font-size: 40px;\n    min-height: 144px;\n  }\n\n  .theme-button-13xl {\n    padding: 38px 72px;\n    font-size: 42px;\n    min-height: 152px;\n  }\n\n  .theme-button-14xl {\n    padding: 40px 76px;\n    font-size: 44px;\n    min-height: 160px;\n  }\n\n  .theme-button-15xl {\n    padding: 42px 80px;\n    font-size: 46px;\n    min-height: 168px;\n  }\n\n  .theme-button-16xl {\n    padding: 44px 84px;\n    font-size: 48px;\n    min-height: 176px;\n  }\n\n  .theme-button-17xl {\n    padding: 46px 88px;\n    font-size: 50px;\n    min-height: 184px;\n  }\n\n  .theme-button-18xl {\n    padding: 48px 92px;\n    font-size: 52px;\n    min-height: 192px;\n  }\n\n  .theme-button-19xl {\n    padding: 50px 96px;\n    font-size: 54px;\n    min-height: 200px;\n  }\n\n  .theme-button-20xl {\n    padding: 52px 100px;\n    font-size: 56px;\n    min-height: 208px;\n  }\n\n  .theme-button-21xl {\n    padding: 54px 104px;\n    font-size: 58px;\n    min-height: 216px;\n  }\n\n  .theme-button-22xl {\n    padding: 56px 108px;\n    font-size: 60px;\n    min-height: 224px;\n  }\n\n  .theme-button-23xl {\n    padding: 58px 112px;\n    font-size: 62px;\n    min-height: 232px;\n  }\n\n  .theme-button-24xl {\n    padding: 60px 116px;\n    font-size: 64px;\n    min-height: 240px;\n  }\n\n  .theme-button-25xl {\n    padding: 62px 120px;\n    font-size: 66px;\n    min-height: 248px;\n  }\n\n  .theme-button-26xl {\n    padding: 64px 124px;\n    font-size: 68px;\n    min-height: 256px;\n  }\n\n  .theme-button-27xl {\n    padding: 66px 128px;\n    font-size: 70px;\n    min-height: 264px;\n  }\n\n  .theme-button-28xl {\n    padding: 68px 132px;\n    font-size: 72px;\n    min-height: 272px;\n  }\n\n  .theme-button-29xl {\n    padding: 70px 136px;\n    font-size: 74px;\n    min-height: 280px;\n  }\n\n  .theme-button-30xl {\n    padding: 72px 140px;\n    font-size: 76px;\n    min-height: 288px;\n  }\n\n  .theme-button-31xl {\n    padding: 74px 144px;\n    font-size: 78px;\n    min-height: 296px;\n  }\n\n  .theme-button-32xl {\n    padding: 76px 148px;\n    font-size: 80px;\n    min-height: 304px;\n  }\n\n  .theme-button-33xl {\n    padding: 78px 152px;\n    font-size: 82px;\n    min-height: 312px;\n  }\n\n  .theme-button-34xl {\n    padding: 80px 156px;\n    font-size: 84px;\n    min-height: 320px;\n  }\n\n  .theme-button-35xl {\n    padding: 82px 160px;\n    font-size: 86px;\n    min-height: 328px;\n  }\n\n  .theme-button-36xl {\n    padding: 84px 164px;\n    font-size: 88px;\n    min-height: 336px;\n  }\n\n  .theme-button-37xl {\n    padding: 86px 168px;\n    font-size: 90px;\n    min-height: 344px;\n  }\n\n  .theme-button-38xl {\n    padding: 88px 172px;\n    font-size: 92px;\n    min-height: 352px;\n  }\n\n  .theme-button-39xl {\n    padding: 90px 176px;\n    font-size: 94px;\n    min-height: 360px;\n  }\n\n  .theme-button-40xl {\n    padding: 92px 180px;\n    font-size: 96px;\n    min-height: 368px;\n  }\n\n  .theme-button-41xl {\n    padding: 94px 184px;\n    font-size: 98px;\n    min-height: 376px;\n  }\n\n  .theme-button-42xl {\n    padding: 96px 188px;\n    font-size: 100px;\n    min-height: 384px;\n  }\n\n  .theme-button-43xl {\n    padding: 98px 192px;\n    font-size: 102px;\n    min-height: 392px;\n  }\n\n  .theme-button-44xl {\n    padding: 100px 196px;\n    font-size: 104px;\n    min-height: 400px;\n  }\n\n  .theme-button-45xl {\n    padding: 102px 200px;\n    font-size: 106px;\n    min-height: 408px;\n  }\n\n  .theme-button-46xl {\n    padding: 104px 204px;\n    font-size: 108px;\n    min-height: 416px;\n  }\n\n  .theme-button-47xl {\n    padding: 106px 208px;\n    font-size: 110px;\n    min-height: 424px;\n  }\n\n  .theme-button-48xl {\n    padding: 108px 212px;\n    font-size: 112px;\n    min-height: 432px;\n  }\n\n  .theme-button-49xl {\n    padding: 110px 216px;\n    font-size: 114px;\n    min-height: 440px;\n  }\n\n  .theme-button-50xl {\n    padding: 112px 220px;\n    font-size: 116px;\n    min-height: 448px;\n  }\n\n  .theme-button-51xl {\n    padding: 114px 224px;\n    font-size: 118px;\n    min-height: 456px;\n  }\n\n  .theme-button-52xl {\n    padding: 116px 228px;\n    font-size: 120px;\n    min-height: 464px;\n  }\n\n  .theme-button-53xl {\n    padding: 118px 232px;\n    font-size: 122px;\n    min-height: 472px;\n  }\n\n  .theme-button-54xl {\n    padding: 120px 236px;\n    font-size: 124px;\n    min-height: 480px;\n  }\n\n  .theme-button-55xl {\n    padding: 122px 240px;\n    font-size: 126px;\n    min-height: 488px;\n  }\n\n  .theme-button-56xl {\n    padding: 124px 244px;\n    font-size: 128px;\n    min-height: 496px;\n  }\n\n  .theme-button-57xl {\n    padding: 126px 248px;\n    font-size: 130px;\n    min-height: 504px;\n  }\n\n  .theme-button-58xl {\n    padding: 128px 252px;\n    font-size: 132px;\n    min-height: 512px;\n  }\n\n  .theme-button-59xl {\n    padding: 130px 256px;\n    font-size: 134px;\n    min-height: 520px;\n  }\n\n  .theme-button-60xl {\n    padding: 132px 260px;\n    font-size: 136px;\n    min-height: 528px;\n  }\n\n  .theme-button-61xl {\n    padding: 134px 264px;\n    font-size: 138px;\n    min-height: 536px;\n  }\n\n  .theme-button-62xl {\n    padding: 136px 268px;\n    font-size: 140px;\n    min-height: 544px;\n  }\n\n  .theme-button-63xl {\n    padding: 138px 272px;\n    font-size: 142px;\n    min-height: 552px;\n  }\n\n  .theme-button-64xl {\n    padding: 140px 276px;\n    font-size: 144px;\n    min-height: 560px;\n  }\n\n  .theme-button-65xl {\n    padding: 142px 280px;\n    font-size: 146px;\n    min-height: 568px;\n  }\n\n  .theme-button-66xl {\n    padding: 144px 284px;\n    font-size: 148px;\n    min-height: 576px;\n  }\n\n  .theme-button-67xl {\n    padding: 146px 288px;\n    font-size: 150px;\n    min-height: 584px;\n  }\n\n  .theme-button-68xl {\n    padding: 148px 292px;\n    font-size: 152px;\n    min-height: 592px;\n  }\n\n  .theme-button-69xl {\n    padding: 150px 296px;\n    font-size: 154px;\n    min-height: 600px;\n  }\n\n  .theme-button-70xl {\n    padding: 152px 300px;\n    font-size: 156px;\n    min-height: 608px;\n  }\n\n  .theme-button-71xl {\n    padding: 154px 304px;\n    font-size: 158px;\n    min-height: 616px;\n  }\n\n  .theme-button-72xl {\n    padding: 156px 308px;\n    font-size: 160px;\n    min-height: 624px;\n  }\n\n  .theme-button-73xl {\n    padding: 158px 312px;\n    font-size: 162px;\n    min-height: 632px;\n  }\n\n  .theme-button-74xl {\n    padding: 160px 316px;\n    font-size: 164px;\n    min-height: 640px;\n  }\n\n  .theme-button-75xl {\n    padding: 162px 320px;\n    font-size: 166px;\n    min-height: 648px;\n  }\n\n  .theme-button-76xl {\n    padding: 164px 324px;\n    font-size: 168px;\n    min-height: 656px;\n  }\n\n  .theme-button-77xl {\n    padding: 166px 328px;\n    font-size: 170px;\n    min-height: 664px;\n  }\n\n  .theme-button-78xl {\n    padding: 168px 332px;\n    font-size: 172px;\n    min-height: 672px;\n  }\n\n  .theme-button-79xl {\n    padding: 170px 336px;\n    font-size: 174px;\n    min-height: 680px;\n  }\n\n  .theme-button-80xl {\n    padding: 172px 340px;\n    font-size: 176px;\n    min-height: 688px;\n  }\n\n  .theme-button-81xl {\n    padding: 174px 344px;\n    font-size: 178px;\n    min-height: 696px;\n  }\n\n  .theme-button-82xl {\n    padding: 176px 348px;\n    font-size: 180px;\n    min-height: 704px;\n  }\n\n  .theme-button-83xl {\n    padding: 178px 352px;\n    font-size: 182px;\n    min-height: 712px;\n  }\n\n  .theme-button-84xl {\n    padding: 180px 356px;\n    font-size: 184px;\n    min-height: 720px;\n  }\n\n  .theme-button-85xl {\n    padding: 182px 360px;\n    font-size: 186px;\n    min-height: 728px;\n  }\n\n  .theme-button-86xl {\n    padding: 184px 364px;\n    font-size: 188px;\n    min-height: 736px;\n  }\n\n  .theme-button-87xl {\n    padding: 186px 368px;\n    font-size: 190px;\n    min-height: 744px;\n  }\n\n  .theme-button-88xl {\n    padding: 188px 372px;\n    font-size: 192px;\n    min-height: 752px;\n  }\n\n  .theme-button-89xl {\n    padding: 190px 376px;\n    font-size: 194px;\n    min-height: 760px;\n  }\n\n  .theme-button-90xl {\n    padding: 192px 380px;\n    font-size: 196px;\n    min-height: 768px;\n  }\n\n  .theme-button-91xl {\n    padding: 194px 384px;\n    font-size: 198px;\n    min-height: 776px;\n  }\n\n  .theme-button-92xl {\n    padding: 196px 388px;\n    font-size: 200px;\n    min-height: 784px;\n  }\n\n  .theme-button-93xl {\n    padding: 198px 392px;\n    font-size: 202px;\n    min-height: 792px;\n  }\n\n  .theme-button-94xl {\n    padding: 200px 396px;\n    font-size: 204px;\n    min-height: 800px;\n  }\n\n  .theme-button-95xl {\n    padding: 202px 400px;\n    font-size: 206px;\n    min-height: 808px;\n  }\n\n  .theme-button-96xl {\n    padding: 204px 404px;\n    font-size: 208px;\n    min-height: 816px;\n  }\n\n  .theme-button-97xl {\n    padding: 206px 408px;\n    font-size: 210px;\n    min-height: 824px;\n  }\n\n  .theme-button-98xl {\n    padding: 208px 412px;\n    font-size: 212px;\n    min-height: 832px;\n  }\n\n  .theme-button-99xl {\n    padding: 210px 416px;\n    font-size: 214px;\n    min-height: 840px;\n  }\n\n  .theme-button-100xl {\n    padding: 212px 420px;\n    font-size: 216px;\n    min-height: 848px;\n  }\n\n  /* Loading state */\n  .theme-button-loading {\n    cursor: wait;\n  }\n\n  .theme-button-spinner-container {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .theme-button-spinner {\n    width: 16px;\n    height: 16px;\n    animation: spin 1s linear infinite;\n  }\n\n  .theme-button-content {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n\n  @keyframes spin {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* Responsive design */\n  @media (max-width: 640px) {\n    .theme-button-sm {\n      padding: 6px 10px;\n      font-size: 11px;\n      min-height: 28px;\n    }\n\n    .theme-button-md {\n      padding: 8px 14px;\n      font-size: 13px;\n      min-height: 36px;\n    }\n\n    .theme-button-lg {\n      padding: 10px 18px;\n      font-size: 15px;\n      min-height: 44px;\n    }\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeCard.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeChartPlaceholder.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeDropdown.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'open' is defined but never used.","line":20,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":20,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[425,438],"text":""},"desc":"Remove unused variable 'open'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'open' is assigned a value but never used.","line":26,"column":5,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":9,"suggestions":[{"messageId":"removeVar","data":{"varName":"open"},"fix":{"range":[517,530],"text":""},"desc":"Remove unused variable 'open'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { onMount } from 'svelte'\n\n  // Props\n  interface Props {\n    open?: boolean\n    trigger?: 'hover' | 'click' | 'focus'\n    position?:\n      | 'bottom-left'\n      | 'bottom-right'\n      | 'top-left'\n      | 'top-right'\n      | 'left-top'\n      | 'left-bottom'\n      | 'right-top'\n      | 'right-bottom'\n    size?: 'sm' | 'md' | 'lg' | 'xl'\n    closable?: boolean\n    class?: string\n    onchange?: (open: boolean) => void\n    children?: any\n    triggerElement?: HTMLElement\n  }\n\n  let {\n    open = false,\n    trigger = 'click',\n    position = 'bottom-left',\n    size = 'md',\n    closable = true,\n    class: className = '',\n    onchange,\n    children,\n    triggerElement: externalTrigger,\n    ...restProps\n  }: Props = $props()\n\n  // State\n  let dropdownElement = $state<HTMLElement | undefined>(undefined)\n  let triggerElement = $state<HTMLElement>(externalTrigger || ({} as HTMLElement))\n  let isVisible = $state(false)\n\n  // Get dropdown classes\n  function getDropdownClasses(): string {\n    const baseClasses = 'theme-dropdown'\n    const positionClass = `theme-dropdown-${position}`\n    const sizeClass = `theme-dropdown-${size}`\n    const stateClass = isVisible ? 'theme-dropdown-open' : 'theme-dropdown-closed'\n\n    return [baseClasses, positionClass, sizeClass, stateClass, className].filter(Boolean).join(' ')\n  }\n\n  // Handle trigger click\n  function handleTriggerClick() {\n    if (trigger === 'click') {\n      toggleDropdown()\n    }\n  }\n\n  // Handle trigger hover\n  function handleTriggerHover() {\n    if (trigger === 'hover') {\n      showDropdown()\n    }\n  }\n\n  // Handle trigger leave\n  function handleTriggerLeave() {\n    if (trigger === 'hover') {\n      hideDropdown()\n    }\n  }\n\n  // Handle trigger focus\n  function handleTriggerFocus() {\n    if (trigger === 'focus') {\n      showDropdown()\n    }\n  }\n\n  // Handle trigger blur\n  function handleTriggerBlur() {\n    if (trigger === 'focus') {\n      hideDropdown()\n    }\n  }\n\n  // Toggle dropdown\n  function toggleDropdown() {\n    if (isVisible) {\n      hideDropdown()\n    } else {\n      showDropdown()\n    }\n  }\n\n  // Show dropdown\n  function showDropdown() {\n    isVisible = true\n    if (onchange) {\n      onchange(true)\n    }\n  }\n\n  // Hide dropdown\n  function hideDropdown() {\n    isVisible = false\n    if (onchange) {\n      onchange(false)\n    }\n  }\n\n  // Handle click outside\n  function handleClickOutside(event: MouseEvent) {\n    if (closable && !dropdownElement?.contains(event.target as Node)) {\n      hideDropdown()\n    }\n  }\n\n  // Handle escape key\n  function handleKeydown(event: KeyboardEvent) {\n    if (event.key === 'Escape' && closable) {\n      hideDropdown()\n    }\n  }\n\n  // Update dropdown position\n  function updatePosition() {\n    if (!dropdownElement || !triggerElement || !isVisible) return\n\n    const triggerRect = triggerElement.getBoundingClientRect()\n    const dropdownRect = dropdownElement.getBoundingClientRect()\n    const viewport = {\n      width: window.innerWidth,\n      height: window.innerHeight\n    }\n\n    let top = 0\n    let left = 0\n\n    switch (position) {\n      case 'bottom-left':\n        top = triggerRect.bottom + 8\n        left = triggerRect.left\n        break\n      case 'bottom-right':\n        top = triggerRect.bottom + 8\n        left = triggerRect.right - dropdownRect.width\n        break\n      case 'top-left':\n        top = triggerRect.top - dropdownRect.height - 8\n        left = triggerRect.left\n        break\n      case 'top-right':\n        top = triggerRect.top - dropdownRect.height - 8\n        left = triggerRect.right - dropdownRect.width\n        break\n      case 'left-top':\n        top = triggerRect.top\n        left = triggerRect.left - dropdownRect.width - 8\n        break\n      case 'left-bottom':\n        top = triggerRect.bottom - dropdownRect.height\n        left = triggerRect.left - dropdownRect.width - 8\n        break\n      case 'right-top':\n        top = triggerRect.top\n        left = triggerRect.right + 8\n        break\n      case 'right-bottom':\n        top = triggerRect.bottom - dropdownRect.height\n        left = triggerRect.right + 8\n        break\n    }\n\n    // Keep dropdown within viewport\n    if (left < 8) left = 8\n    if (left + dropdownRect.width > viewport.width - 8) {\n      left = viewport.width - dropdownRect.width - 8\n    }\n    if (top < 8) top = 8\n    if (top + dropdownRect.height > viewport.height - 8) {\n      top = viewport.height - dropdownRect.height - 8\n    }\n\n    dropdownElement.style.top = `${top}px`\n    dropdownElement.style.left = `${left}px`\n  }\n\n  // Update position when dropdown becomes visible\n  $effect(() => {\n    if (isVisible) {\n      updatePosition()\n    }\n  })\n\n  // Add event listeners\n  onMount(() => {\n    document.addEventListener('click', handleClickOutside)\n    document.addEventListener('keydown', handleKeydown)\n\n    return () => {\n      document.removeEventListener('click', handleClickOutside)\n      document.removeEventListener('keydown', handleKeydown)\n    }\n  })\n</script>\n\n{#if externalTrigger}\n  <!-- External trigger mode - just render the dropdown -->\n  {#if isVisible}\n    <div\n      class={getDropdownClasses()}\n      bind:this={dropdownElement}\n      role=\"menu\"\n      aria-hidden={!isVisible}\n    >\n      {@render children?.()}\n    </div>\n  {/if}\n{:else}\n  <!-- Internal trigger mode -->\n  <div class=\"theme-dropdown-container\" {...restProps}>\n    <div\n      class=\"theme-dropdown-trigger\"\n      bind:this={triggerElement}\n      onclick={handleTriggerClick}\n      onkeydown={e => {\n        if (e.key === 'Enter' || e.key === ' ') {\n          e.preventDefault()\n          handleTriggerClick()\n        }\n      }}\n      role=\"button\"\n      tabindex=\"0\"\n      onmouseenter={handleTriggerHover}\n      onmouseleave={handleTriggerLeave}\n      onfocus={handleTriggerFocus}\n      onblur={handleTriggerBlur}\n    >\n      {@render children?.()}\n    </div>\n\n    {#if isVisible}\n      <div\n        class={getDropdownClasses()}\n        bind:this={dropdownElement}\n        role=\"menu\"\n        aria-hidden={!isVisible}\n      >\n        {@render children?.()}\n      </div>\n    {/if}\n  </div>\n{/if}\n\n<style>\n  .theme-dropdown-container {\n    position: relative;\n    display: inline-block;\n  }\n\n  .theme-dropdown-trigger {\n    cursor: pointer;\n  }\n\n  .theme-dropdown {\n    position: fixed;\n    z-index: 1000;\n    background: var(--color-surface);\n    border: 1px solid var(--color-border);\n    border-radius: 12px;\n    box-shadow: 0 10px 25px var(--color-shadow);\n    opacity: 0;\n    visibility: hidden;\n    transform: scale(0.95);\n    transition: all 0.2s ease;\n    pointer-events: none;\n  }\n\n  .theme-dropdown-open {\n    opacity: 1;\n    visibility: visible;\n    transform: scale(1);\n    pointer-events: auto;\n  }\n\n  .theme-dropdown-closed {\n    opacity: 0;\n    visibility: hidden;\n    transform: scale(0.95);\n    pointer-events: none;\n  }\n\n  .theme-dropdown-content {\n    padding: 8px;\n    min-width: 120px;\n  }\n\n  /* Sizes */\n  .theme-dropdown-sm {\n    min-width: 100px;\n  }\n\n  .theme-dropdown-md {\n    min-width: 150px;\n  }\n\n  .theme-dropdown-lg {\n    min-width: 200px;\n  }\n\n  .theme-dropdown-xl {\n    min-width: 250px;\n  }\n\n  /* Responsive design */\n  @media (max-width: 640px) {\n    .theme-dropdown {\n      position: fixed;\n      top: 50% !important;\n      left: 50% !important;\n      transform: translate(-50%, -50%) scale(0.95);\n      width: 90vw;\n      max-width: 300px;\n    }\n\n    .theme-dropdown-open {\n      transform: translate(-50%, -50%) scale(1);\n    }\n\n    .theme-dropdown-closed {\n      transform: translate(-50%, -50%) scale(0.95);\n    }\n\n    .theme-dropdown-content {\n      padding: 12px;\n    }\n  }\n\n  /* Dark theme specific adjustments */\n  [data-theme='dark'] .theme-dropdown {\n    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeGrid.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeInput.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":22,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[574,586],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":23,"column":17,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[612,624],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":24,"column":16,"nodeType":"Identifier","messageId":"unusedVar","endLine":24,"endColumn":28,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[649,661],"text":""},"desc":"Remove unused variable 'event'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":25,"column":15,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[685,697],"text":""},"desc":"Remove unused variable 'event'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  // Props\n  interface Props {\n    type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search' | 'textarea'\n    variant?: 'default' | 'filled' | 'outlined' | 'underlined'\n    size?: 'sm' | 'md' | 'lg' | 'xl'\n    placeholder?: string\n    value?: string\n    disabled?: boolean\n    readonly?: boolean\n    required?: boolean\n    error?: boolean\n    success?: boolean\n    label?: string\n    helper?: string\n    errorMessage?: string\n    successMessage?: string\n    id?: string\n    class?: string\n    prefix?: any\n    suffix?: any\n    oninput?: (event: Event) => void\n    onchange?: (event: Event) => void\n    onfocus?: (event: Event) => void\n    onblur?: (event: Event) => void\n    children?: any\n  }\n\n  let {\n    type = 'text',\n    variant = 'default',\n    size = 'md',\n    placeholder = '',\n    value = $bindable(''),\n    disabled = false,\n    readonly = false,\n    required = false,\n    error = false,\n    success = false,\n    label = '',\n    helper = '',\n    errorMessage = '',\n    successMessage = '',\n    id = '',\n    class: className = '',\n    prefix,\n    suffix,\n    oninput,\n    onchange,\n    onfocus,\n    onblur,\n    children,\n    ...restProps\n  }: Props = $props()\n\n  // Get input classes\n  function getInputClasses(): string {\n    const baseClasses = 'theme-input'\n    const variantClass = `theme-input-${variant}`\n    const sizeClass = `theme-input-${size}`\n    const stateClasses = [\n      error ? 'theme-input-error' : '',\n      success ? 'theme-input-success' : '',\n      disabled ? 'theme-input-disabled' : '',\n      readonly ? 'theme-input-readonly' : ''\n    ]\n      .filter(Boolean)\n      .join(' ')\n    const prefixClass = prefix ? 'pl-10' : ''\n    const suffixClass = suffix ? 'pr-10' : ''\n\n    return [baseClasses, variantClass, sizeClass, stateClasses, prefixClass, suffixClass, className]\n      .filter(Boolean)\n      .join(' ')\n  }\n\n  // Get container classes\n  function getContainerClasses(): string {\n    const baseClasses = 'theme-input-container'\n    const stateClasses = [\n      error ? 'theme-input-container-error' : '',\n      success ? 'theme-input-container-success' : '',\n      disabled ? 'theme-input-container-disabled' : ''\n    ]\n      .filter(Boolean)\n      .join(' ')\n\n    return [baseClasses, ...stateClasses].filter(Boolean).join(' ')\n  }\n\n  // Get message classes\n  function getMessageClasses(): string {\n    const baseClasses = 'theme-input-message'\n    const stateClasses = [\n      error ? 'theme-input-message-error' : '',\n      success ? 'theme-input-message-success' : ''\n    ]\n      .filter(Boolean)\n      .join(' ')\n\n    return [baseClasses, ...stateClasses].filter(Boolean).join(' ')\n  }\n\n  // Get message text\n  function getMessageText(): string {\n    if (error && errorMessage) return errorMessage\n    if (success && successMessage) return successMessage\n    if (helper) return helper\n    return ''\n  }\n\n  // Get message icon\n  function getMessageIcon(): string {\n    if (error) return '⚠️'\n    if (success) return '✅'\n    return ''\n  }\n</script>\n\n<div class={getContainerClasses()}>\n  {#if label}\n    <label class=\"theme-input-label\" for={id}>\n      {label}\n      {#if required}\n        <span class=\"theme-input-required\">*</span>\n      {/if}\n    </label>\n  {/if}\n\n  <div class=\"theme-input-wrapper relative\">\n    {#if prefix}\n      <div class=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\n        {@render prefix()}\n      </div>\n    {/if}\n\n    {#if type === 'textarea'}\n      <textarea\n        {id}\n        class={getInputClasses()}\n        {placeholder}\n        {value}\n        {disabled}\n        {readonly}\n        {required}\n        {oninput}\n        {onchange}\n        {onfocus}\n        {onblur}\n        {...restProps}\n      ></textarea>\n    {:else}\n      <input\n        {id}\n        {type}\n        class={getInputClasses()}\n        {placeholder}\n        {value}\n        {disabled}\n        {readonly}\n        {required}\n        {oninput}\n        {onchange}\n        {onfocus}\n        {onblur}\n        {...restProps}\n      />\n    {/if}\n\n    {#if suffix}\n      <div class=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400\">\n        {@render suffix()}\n      </div>\n    {/if}\n\n    {#if children}\n      <div class=\"theme-input-children\">\n        {@render children?.()}\n      </div>\n    {/if}\n  </div>\n\n  {#if getMessageText()}\n    <div class={getMessageClasses()}>\n      {#if getMessageIcon()}\n        <span class=\"theme-input-message-icon\">{getMessageIcon()}</span>\n      {/if}\n      <span class=\"theme-input-message-text\">{getMessageText()}</span>\n    </div>\n  {/if}\n</div>\n\n<style>\n  .theme-input-container {\n    display: flex;\n    flex-direction: column;\n    gap: 8px;\n    width: 100%;\n  }\n\n  .theme-input-label {\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--color-text);\n    display: flex;\n    align-items: center;\n    gap: 4px;\n  }\n\n  .theme-input-required {\n    color: var(--color-error);\n    font-weight: 600;\n  }\n\n  .theme-input-wrapper {\n    position: relative;\n    display: flex;\n    align-items: center;\n  }\n\n  .theme-input {\n    width: 100%;\n    background: var(--color-input-background);\n    border: 1px solid var(--color-input-border);\n    border-radius: 8px;\n    font-size: 14px;\n    color: var(--color-text);\n    transition: all 0.2s ease;\n    font-family: inherit;\n  }\n\n  .theme-input:focus {\n    outline: none;\n    border-color: var(--color-input-focus);\n    box-shadow: 0 0 0 2px var(--color-primary-light);\n  }\n\n  .theme-input::placeholder {\n    color: var(--color-text-muted);\n  }\n\n  /* Variants */\n  .theme-input-default {\n    background: var(--color-input-background);\n    border: 1px solid var(--color-input-border);\n  }\n\n  .theme-input-filled {\n    background: var(--color-surface);\n    border: 1px solid var(--color-border);\n  }\n\n  .theme-input-outlined {\n    background: transparent;\n    border: 2px solid var(--color-input-border);\n  }\n\n  .theme-input-underlined {\n    background: transparent;\n    border: none;\n    border-bottom: 2px solid var(--color-input-border);\n    border-radius: 0;\n  }\n\n  /* Sizes */\n  .theme-input-sm {\n    padding: 8px 12px;\n    font-size: 12px;\n    min-height: 32px;\n  }\n\n  .theme-input-md {\n    padding: 10px 14px;\n    font-size: 14px;\n    min-height: 40px;\n  }\n\n  .theme-input-lg {\n    padding: 12px 16px;\n    font-size: 16px;\n    min-height: 48px;\n  }\n\n  .theme-input-xl {\n    padding: 14px 18px;\n    font-size: 18px;\n    min-height: 56px;\n  }\n\n  /* States */\n  .theme-input-error {\n    border-color: var(--color-error);\n  }\n\n  .theme-input-error:focus {\n    border-color: var(--color-error);\n    box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.2);\n  }\n\n  .theme-input-success {\n    border-color: var(--color-success);\n  }\n\n  .theme-input-success:focus {\n    border-color: var(--color-success);\n    box-shadow: 0 0 0 2px rgba(40, 167, 69, 0.2);\n  }\n\n  .theme-input-disabled {\n    background: var(--color-border-light);\n    color: var(--color-text-muted);\n    cursor: not-allowed;\n    opacity: 0.6;\n  }\n\n  .theme-input-readonly {\n    background: var(--color-border-light);\n    cursor: default;\n  }\n\n  /* Container states */\n  .theme-input-container-error .theme-input-label {\n    color: var(--color-error);\n  }\n\n  .theme-input-container-success .theme-input-label {\n    color: var(--color-success);\n  }\n\n  .theme-input-container-disabled .theme-input-label {\n    color: var(--color-text-muted);\n  }\n\n  /* Children (icons, buttons, etc.) */\n  .theme-input-children {\n    position: absolute;\n    right: 12px;\n    top: 50%;\n    transform: translateY(-50%);\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    pointer-events: none;\n  }\n\n  .theme-input-children :global(*) {\n    pointer-events: auto;\n  }\n\n  /* Message */\n  .theme-input-message {\n    display: flex;\n    align-items: center;\n    gap: 6px;\n    font-size: 12px;\n    margin-top: 4px;\n  }\n\n  .theme-input-message-error {\n    color: var(--color-error);\n  }\n\n  .theme-input-message-success {\n    color: var(--color-success);\n  }\n\n  .theme-input-message:not(.theme-input-message-error):not(.theme-input-message-success) {\n    color: var(--color-text-secondary);\n  }\n\n  .theme-input-message-icon {\n    font-size: 14px;\n    line-height: 1;\n  }\n\n  .theme-input-message-text {\n    flex: 1;\n  }\n\n  /* Textarea specific styles */\n  .theme-input[type='textarea'] {\n    resize: vertical;\n    min-height: 80px;\n    font-family: inherit;\n    line-height: 1.5;\n  }\n\n  /* Responsive design */\n  @media (max-width: 640px) {\n    .theme-input-sm {\n      padding: 6px 10px;\n      font-size: 11px;\n      min-height: 28px;\n    }\n\n    .theme-input-md {\n      padding: 8px 12px;\n      font-size: 13px;\n      min-height: 36px;\n    }\n\n    .theme-input-lg {\n      padding: 10px 14px;\n      font-size: 15px;\n      min-height: 44px;\n    }\n\n    .theme-input-xl {\n      padding: 12px 16px;\n      font-size: 17px;\n      min-height: 52px;\n    }\n\n    .theme-input-children {\n      right: 10px;\n    }\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeModal.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemePageHeader.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeSectionHeader.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeSpacer.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeStatCard.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/components/ui/ThemeTabs.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'tabId' is defined but never used.","line":22,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"tabId"},"fix":{"range":[519,532],"text":""},"desc":"Remove unused variable 'tabId'."}]},{"ruleId":"svelte/require-optimized-style-attribute","severity":1,"message":"It cannot be optimized because too complex.","line":195,"column":17,"nodeType":"SvelteAttribute","messageId":"complex","endLine":195,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { ChevronLeftIcon, ChevronRightIcon } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  interface Tab {\n    id: string\n    label: string\n    icon?: any\n    badge?: string | number\n    disabled?: boolean\n  }\n\n  interface Props {\n    tabs: Tab[]\n    activeTab?: string\n    children?: any\n    class?: string\n    orientation?: 'horizontal' | 'vertical'\n    size?: 'sm' | 'md' | 'lg'\n    variant?: 'default' | 'pills' | 'underline' | 'cards'\n    scrollable?: boolean\n    onTabChange?: (tabId: string) => void\n  }\n\n  let {\n    tabs,\n    activeTab = $bindable(tabs[0]?.id || ''),\n    children,\n    class: className = '',\n    orientation = 'horizontal',\n    size = 'md',\n    variant = 'default',\n    scrollable = false,\n    onTabChange,\n    ...restProps\n  }: Props = $props()\n\n  let currentTab = $state(activeTab)\n  let tabContainer: HTMLDivElement\n  let scrollPosition = $state(0)\n  let canScrollLeft = $state(false)\n  let canScrollRight = $state(false)\n\n  // 탭 변경 핸들러\n  function handleTabChange(tabId: string) {\n    if (tabs.find(tab => tab.id === tabId)?.disabled) return\n\n    currentTab = tabId\n    onTabChange?.(tabId)\n  }\n\n  // 스크롤 핸들러\n  function handleScroll() {\n    if (!tabContainer) return\n\n    scrollPosition = tabContainer.scrollLeft\n    canScrollLeft = scrollPosition > 0\n    canScrollRight = scrollPosition < tabContainer.scrollWidth - tabContainer.clientWidth\n  }\n\n  // 스크롤 버튼 핸들러\n  function scrollTabs(direction: 'left' | 'right') {\n    if (!tabContainer) return\n\n    const scrollAmount = 200\n    const newPosition =\n      direction === 'left'\n        ? Math.max(0, scrollPosition - scrollAmount)\n        : Math.min(\n          tabContainer.scrollWidth - tabContainer.clientWidth,\n          scrollPosition + scrollAmount\n        )\n\n    tabContainer.scrollTo({ left: newPosition, behavior: 'smooth' })\n  }\n\n  // 반응형 탭 크기 클래스\n  const getTabSizeClass = () => {\n    const sizeClasses = {\n      sm: 'px-3 py-1.5 text-sm',\n      md: 'px-4 py-2 text-sm',\n      lg: 'px-6 py-3 text-base'\n    }\n    return sizeClasses[size]\n  }\n\n  // 탭 스타일 클래스\n  const getTabClass = (tab: Tab) => {\n    const isActive = currentTab === tab.id\n    const baseClass = `flex items-center gap-2 transition-all duration-200 ${getTabSizeClass()}`\n\n    if (variant === 'pills') {\n      return `${baseClass} rounded-full ${isActive ? 'text-white shadow-sm' : 'hover:opacity-80'}`\n    }\n\n    if (variant === 'underline') {\n      return `${baseClass} border-b-2 ${\n        isActive ? 'border-blue-500 text-blue-600' : 'border-transparent hover:border-gray-300'\n      }`\n    }\n\n    if (variant === 'cards') {\n      return `${baseClass} rounded-lg border ${\n        isActive ? 'border-blue-500 shadow-sm' : 'border-gray-200 hover:border-gray-300'\n      }`\n    }\n\n    // default variant\n    return `${baseClass} ${isActive ? 'text-white' : 'hover:opacity-80'}`\n  }\n\n  // 탭 스타일\n  const getTabStyle = (tab: Tab) => {\n    const isActive = currentTab === tab.id\n\n    if (variant === 'pills') {\n      return isActive\n        ? 'background: var(--color-primary);'\n        : 'color: var(--color-text-secondary); background: transparent;'\n    }\n\n    if (variant === 'underline') {\n      return isActive ? 'color: var(--color-primary);' : 'color: var(--color-text-secondary);'\n    }\n\n    if (variant === 'cards') {\n      return isActive\n        ? 'background: var(--color-surface-elevated); border-color: var(--color-primary);'\n        : 'background: var(--color-surface); border-color: var(--color-border); color: var(--color-text-secondary);'\n    }\n\n    // default variant\n    return isActive\n      ? 'background: var(--color-primary);'\n      : 'color: var(--color-text-secondary); background: transparent;'\n  }\n\n  onMount(() => {\n    if (scrollable && tabContainer) {\n      handleScroll()\n      tabContainer.addEventListener('scroll', handleScroll)\n    }\n  })\n</script>\n\n<div class=\"theme-tabs {orientation === 'vertical' ? 'flex' : 'block'} {className}\" {...restProps}>\n  <!-- 탭 헤더 -->\n  <div class=\"relative {orientation === 'vertical' ? 'flex-shrink-0 w-48' : 'w-full'}\">\n    {#if scrollable && orientation === 'horizontal'}\n      <!-- 스크롤 버튼들 -->\n      {#if canScrollLeft}\n        <button\n          type=\"button\"\n          onclick={() => scrollTabs('left')}\n          class=\"absolute left-0 top-0 z-10 flex items-center justify-center w-8 h-full bg-white/80 hover:bg-white/90 transition-colors\"\n          style:background=\"var(--color-surface)\"\n        >\n          <ChevronLeftIcon size={16} style=\"color: var(--color-text-secondary);\" />\n        </button>\n      {/if}\n\n      {#if canScrollRight}\n        <button\n          type=\"button\"\n          onclick={() => scrollTabs('right')}\n          class=\"absolute right-0 top-0 z-10 flex items-center justify-center w-8 h-full bg-white/80 hover:bg-white/90 transition-colors\"\n          style:background=\"var(--color-surface)\"\n        >\n          <ChevronRightIcon size={16} style=\"color: var(--color-text-secondary);\" />\n        </button>\n      {/if}\n    {/if}\n\n    <!-- 탭 리스트 -->\n    <div\n      bind:this={tabContainer}\n      class=\"flex {orientation === 'vertical' ? 'flex-col' : 'flex-row'} {scrollable\n        ? 'overflow-x-auto scrollbar-hide'\n        : ''}\"\n      class:border-b={variant === 'default'}\n      style:border-color=\"var(--color-border)\"\n      role=\"tablist\"\n    >\n      {#each tabs as tab, i (i)}\n        <button\n          type=\"button\"\n          role=\"tab\"\n          aria-selected={currentTab === tab.id}\n          aria-controls=\"tabpanel-{tab.id}\"\n          disabled={tab.disabled}\n          onclick={() => handleTabChange(tab.id)}\n          class=\"{getTabClass(tab)} {tab.disabled\n            ? 'opacity-50 cursor-not-allowed'\n            : 'cursor-pointer'}\"\n          style={getTabStyle(tab)}\n          style:opacity={tab.disabled ? '0.5' : null}\n        >\n          {#if tab.icon}\n            <tab.icon size={size === 'sm' ? 16 : size === 'lg' ? 20 : 18} />\n          {/if}\n          <span>{tab.label}</span>\n          {#if tab.badge}\n            <span\n              class=\"inline-flex items-center justify-center px-2 py-0.5 text-xs font-medium rounded-full\"\n              style:background=\"var(--color-primary)\"\n              style:color=\"white\"\n            >\n              {tab.badge}\n            </span>\n          {/if}\n        </button>\n      {/each}\n    </div>\n  </div>\n\n  <!-- 탭 콘텐츠 -->\n  <div class=\"flex-1 {orientation === 'vertical' ? 'ml-6' : 'mt-4'}\">\n    {#each tabs as tab, i (i)}\n      <div\n        role=\"tabpanel\"\n        id=\"tabpanel-{tab.id}\"\n        aria-labelledby=\"tab-{tab.id}\"\n        class={currentTab === tab.id ? 'block' : 'hidden'}\n      >\n        {#if children && typeof children === 'function'}\n          {@render children(tab)}\n        {/if}\n      </div>\n    {/each}\n  </div>\n</div>\n\n<style>\n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n\n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n\n  .theme-tabs button[role='tab']:focus {\n    outline: 2px solid var(--color-primary);\n    outline-offset: 2px;\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/database/connection.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1808,1811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1808,1811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3097,3100],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3097,3100],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":117,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":117,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3133,3136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3133,3136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":202,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":202,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4635,4638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4635,4638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5465,5468],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5465,5468],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { config } from 'dotenv'\nimport type { PoolClient, QueryResult } from 'pg'\nimport { Pool } from 'pg'\nimport { logger } from '$lib/utils/logger'\n\n// Load environment variables\nconfig()\n\n// Database connection pool\nlet pool: Pool | null = null\n\n// Database configuration - AWS only\nconst getDbConfig = () => {\n  return {\n    host: process.env.AWS_DB_HOST || 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n    port: parseInt(process.env.AWS_DB_PORT || '5432'),\n    database: process.env.AWS_DB_NAME || 'postgres',\n    user: process.env.AWS_DB_USER || 'postgres',\n    password: process.env.AWS_DB_PASSWORD || 'viahubdev',\n    ssl: {\n      rejectUnauthorized: false\n    }\n  }\n}\n\nconst dbConfig = {\n  ...getDbConfig(),\n  max: 20, // Maximum number of clients in the pool\n  idleTimeoutMillis: 30000, // Close idle clients after 30 seconds\n  connectionTimeoutMillis: 10000, // Return an error after 10 seconds if connection could not be established\n  acquireTimeoutMillis: 10000 // Return an error after 10 seconds if client could not be acquired from pool\n}\n\n// Initialize database connection pool\nexport function initializeDatabase(): Pool {\n  if (!pool) {\n    pool = new Pool(dbConfig)\n\n    // Handle pool errors\n    pool.on('error', err => {\n      logger.error('Unexpected error on idle client', err)\n      process.exit(-1)\n    })\n\n    // Database connection pool initialized\n  }\n\n  return pool\n}\n\n// Get database connection\nexport async function getConnection(): Promise<PoolClient> {\n  if (!pool) {\n    try {\n      initializeDatabase()\n    } catch (error) {\n      logger.error('Failed to initialize database connection:', error)\n      throw error\n    }\n  }\n\n  return await pool!.connect()\n}\n\n// Execute a query with parameters\nexport async function query<T extends Record<string, unknown> = any>(\n  text: string,\n  params?: unknown[]\n): Promise<QueryResult<T>> {\n  const client = await getConnection()\n  try {\n    const result = await client.query<T>(text, params)\n    return result\n  } finally {\n    client.release()\n  }\n}\n\n// Execute a transaction\nexport async function transaction<T>(callback: (client: PoolClient) => Promise<T>): Promise<T> {\n  const client = await getConnection()\n  try {\n    await client.query('BEGIN')\n    const result = await callback(client)\n    await client.query('COMMIT')\n    return result\n  } catch (error) {\n    await client.query('ROLLBACK')\n    throw error\n  } finally {\n    client.release()\n  }\n}\n\n// Close database connection pool\nexport async function closeDatabase(): Promise<void> {\n  if (pool) {\n    await pool.end()\n    pool = null\n    // Database connection pool closed\n  }\n}\n\n// Database health check\nexport async function healthCheck(): Promise<boolean> {\n  try {\n    // Starting database health check\n    const result = await query('SELECT 1 as health')\n    const isHealthy = result.rows[0]?.health === 1\n\n    return isHealthy\n  } catch (error) {\n    logger.error('Database health check failed:', error)\n    logger.error('Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      code: (error as any)?.code,\n      detail: (error as any)?.detail\n    })\n    return false\n  }\n}\n\n// Database types\nexport interface DatabaseUser {\n  id: string\n  email: string\n  name: string\n  department?: string\n  position?: string\n  role: string\n  is_active: boolean\n  last_login?: Date\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseCompany {\n  id: string\n  name: string\n  type: string\n  industry?: string\n  status: string\n  contact_person?: string\n  email?: string\n  phone?: string\n  address?: string\n  website?: string\n  revenue?: number\n  employees?: number\n  notes?: string\n  tags: unknown[]\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseProject {\n  id: string\n  code: string\n  title: string\n  description?: string\n  sponsor?: string\n  sponsor_type?: string\n  start_date?: Date\n  end_date?: Date\n  manager_id?: string\n  status: string\n  budget_total?: number\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseExpenseItem {\n  id: string\n  project_id: string\n  category_code: string\n  requester_id: string\n  amount: number\n  currency: string\n  description?: string\n  status: string\n  dept_owner?: string\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseEmployee {\n  id: string\n  employee_id: string\n  user_id?: string\n  first_name: string\n  last_name: string\n  email: string\n  phone?: string\n  department?: string\n  position?: string\n  manager_id?: string\n  employment_type?: string\n  hire_date?: Date\n  salary?: number\n  status: string\n  address?: string\n  emergency_contact?: any\n  created_at: Date\n  updated_at: Date\n}\n\nexport interface DatabaseTransaction {\n  id: string\n  bank_account_id: string\n  category_id: string\n  amount: number\n  type: string\n  description?: string\n  reference?: string\n  date: Date\n  created_by: string\n  created_at: Date\n  updated_at: Date\n}\n\n// Utility functions for common database operations\nexport class DatabaseService {\n  // 쿼리 메서드\n  static async query(text: string, params?: unknown[]) {\n    return await query(text, params)\n  }\n\n  // User operations\n  static async createUser(userData: Partial<DatabaseUser>): Promise<DatabaseUser> {\n    const result = await query<DatabaseUser>(\n      `INSERT INTO users (email, password_hash, name, department, position, role)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6)\n\t\t\t RETURNING *`,\n      [\n        userData.email,\n        (userData as any).password_hash,\n        userData.name,\n        userData.department,\n        userData.position,\n        userData.role\n      ]\n    )\n    if (!result.rows[0]) {\n      throw new Error('사용자 생성에 실패했습니다.')\n    }\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getUserById(id: string): Promise<DatabaseUser | null> {\n    const result = await query<DatabaseUser>('SELECT * FROM users WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getUserByEmail(email: string): Promise<DatabaseUser | null> {\n    const result = await query<DatabaseUser>('SELECT * FROM users WHERE email = $1', [email])\n    return result.rows[0] || null\n  }\n\n  static async getUsers(filters?: {\n    department?: string\n    role?: string\n    is_active?: boolean\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseUser[]> {\n    let queryText = 'SELECT * FROM users WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.department) {\n      paramCount++\n      queryText += ` AND department = $${paramCount}`\n      params.push(filters.department)\n    }\n\n    if (filters?.role) {\n      paramCount++\n      queryText += ` AND role = $${paramCount}`\n      params.push(filters.role)\n    }\n\n    if (filters?.is_active !== undefined) {\n      paramCount++\n      queryText += ` AND is_active = $${paramCount}`\n      params.push(filters.is_active)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseUser>(queryText, params)\n    return result.rows\n  }\n\n  // Company operations\n  static async createCompany(companyData: Partial<DatabaseCompany>): Promise<DatabaseCompany> {\n    const result = await query<DatabaseCompany>(\n      `INSERT INTO companies (name, type, industry, status, contact_person, email, phone, address, website, revenue, employees, notes, tags)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)\n\t\t\t RETURNING *`,\n      [\n        companyData.name,\n        companyData.type,\n        companyData.industry,\n        companyData.status,\n        companyData.contact_person,\n        companyData.email,\n        companyData.phone,\n        companyData.address,\n        companyData.website,\n        companyData.revenue,\n        companyData.employees,\n        companyData.notes,\n        JSON.stringify(companyData.tags || [])\n      ]\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getCompanyById(id: string): Promise<DatabaseCompany | null> {\n    const result = await query<DatabaseCompany>('SELECT * FROM companies WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getCompanies(filters?: {\n    type?: string\n    status?: string\n    industry?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseCompany[]> {\n    let queryText = 'SELECT * FROM companies WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.type) {\n      paramCount++\n      queryText += ` AND type = $${paramCount}`\n      params.push(filters.type)\n    }\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    if (filters?.industry) {\n      paramCount++\n      queryText += ` AND industry = $${paramCount}`\n      params.push(filters.industry)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseCompany>(queryText, params)\n    return result.rows\n  }\n\n  // Project operations\n  static async createProject(projectData: Partial<DatabaseProject>): Promise<DatabaseProject> {\n    const result = await query<DatabaseProject>(\n      `INSERT INTO projects (code, title, description, sponsor, sponsor_type, start_date, end_date, manager_id, status, budget_total)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)\n\t\t\t RETURNING *`,\n      [\n        projectData.code,\n        projectData.title,\n        projectData.description,\n        projectData.sponsor,\n        projectData.sponsor_type,\n        projectData.start_date,\n        projectData.end_date,\n        projectData.manager_id,\n        projectData.status,\n        projectData.budget_total\n      ]\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getProjectById(id: string): Promise<DatabaseProject | null> {\n    const result = await query<DatabaseProject>('SELECT * FROM projects WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getProjects(filters?: {\n    status?: string\n    manager_id?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseProject[]> {\n    let queryText = 'SELECT * FROM projects WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    if (filters?.manager_id) {\n      paramCount++\n      queryText += ` AND manager_id = $${paramCount}`\n      params.push(filters.manager_id)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseProject>(queryText, params)\n    return result.rows\n  }\n\n  // Expense operations\n  static async createExpenseItem(\n    expenseData: Partial<DatabaseExpenseItem>\n  ): Promise<DatabaseExpenseItem> {\n    const result = await query<DatabaseExpenseItem>(\n      `INSERT INTO expense_items (project_id, category_code, requester_id, amount, currency, description, status, dept_owner)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n\t\t\t RETURNING *`,\n      [\n        expenseData.project_id,\n        expenseData.category_code,\n        expenseData.requester_id,\n        expenseData.amount,\n        expenseData.currency,\n        expenseData.description,\n        expenseData.status,\n        expenseData.dept_owner\n      ]\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getExpenseItemById(id: string): Promise<DatabaseExpenseItem | null> {\n    const result = await query<DatabaseExpenseItem>('SELECT * FROM expense_items WHERE id = $1', [\n      id\n    ])\n    return result.rows[0] || null\n  }\n\n  static async getExpenseItems(filters?: {\n    project_id?: string\n    status?: string\n    requester_id?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseExpenseItem[]> {\n    let queryText = 'SELECT * FROM expense_items WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.project_id) {\n      paramCount++\n      queryText += ` AND project_id = $${paramCount}`\n      params.push(filters.project_id)\n    }\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    if (filters?.requester_id) {\n      paramCount++\n      queryText += ` AND requester_id = $${paramCount}`\n      params.push(filters.requester_id)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseExpenseItem>(queryText, params)\n    return result.rows\n  }\n\n  // Employee operations\n  static async createEmployee(employeeData: Partial<DatabaseEmployee>): Promise<DatabaseEmployee> {\n    const result = await query<DatabaseEmployee>(\n      `INSERT INTO employees (employee_id, user_id, first_name, last_name, email, phone, department, position, manager_id, employment_type, hire_date, salary, status, address, emergency_contact)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15)\n\t\t\t RETURNING *`,\n      [\n        employeeData.employee_id,\n        employeeData.user_id,\n        employeeData.first_name,\n        employeeData.last_name,\n        employeeData.email,\n        employeeData.phone,\n        employeeData.department,\n        employeeData.position,\n        employeeData.manager_id,\n        employeeData.employment_type,\n        employeeData.hire_date,\n        employeeData.salary,\n        employeeData.status,\n        employeeData.address,\n        JSON.stringify(employeeData.emergency_contact || {})\n      ]\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getEmployeeById(id: string): Promise<DatabaseEmployee | null> {\n    const result = await query<DatabaseEmployee>('SELECT * FROM employees WHERE id = $1', [id])\n    return result.rows[0] || null\n  }\n\n  static async getEmployees(filters?: {\n    department?: string\n    status?: string\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseEmployee[]> {\n    let queryText = 'SELECT * FROM employees WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.department) {\n      paramCount++\n      queryText += ` AND department = $${paramCount}`\n      params.push(filters.department)\n    }\n\n    if (filters?.status) {\n      paramCount++\n      queryText += ` AND status = $${paramCount}`\n      params.push(filters.status)\n    }\n\n    queryText += ' ORDER BY created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseEmployee>(queryText, params)\n    return result.rows\n  }\n\n  // Transaction operations\n  static async createTransaction(\n    transactionData: Partial<DatabaseTransaction>\n  ): Promise<DatabaseTransaction> {\n    const result = await query<DatabaseTransaction>(\n      `INSERT INTO transactions (bank_account_id, category_id, amount, type, description, reference, date, created_by)\n\t\t\t VALUES ($1, $2, $3, $4, $5, $6, $7, $8)\n\t\t\t RETURNING *`,\n      [\n        transactionData.bank_account_id,\n        transactionData.category_id,\n        transactionData.amount,\n        transactionData.type,\n        transactionData.description,\n        transactionData.reference,\n        transactionData.date,\n        transactionData.created_by\n      ]\n    )\n    if (!result.rows[0]) {\n      throw new Error('데이터 생성에 실패했습니다.')\n    }\n    return result.rows[0]\n  }\n\n  static async getTransactionById(id: string): Promise<DatabaseTransaction | null> {\n    const result = await query<DatabaseTransaction>('SELECT * FROM transactions WHERE id = $1', [\n      id\n    ])\n    return result.rows[0] || null\n  }\n\n  static async getTransactions(filters?: {\n    bank_account_id?: string\n    category_id?: string\n    type?: string\n    date_from?: Date\n    date_to?: Date\n    limit?: number\n    offset?: number\n  }): Promise<DatabaseTransaction[]> {\n    let queryText = 'SELECT * FROM transactions WHERE 1=1'\n    const params: unknown[] = []\n    let paramCount = 0\n\n    if (filters?.bank_account_id) {\n      paramCount++\n      queryText += ` AND bank_account_id = $${paramCount}`\n      params.push(filters.bank_account_id)\n    }\n\n    if (filters?.category_id) {\n      paramCount++\n      queryText += ` AND category_id = $${paramCount}`\n      params.push(filters.category_id)\n    }\n\n    if (filters?.type) {\n      paramCount++\n      queryText += ` AND type = $${paramCount}`\n      params.push(filters.type)\n    }\n\n    if (filters?.date_from) {\n      paramCount++\n      queryText += ` AND date >= $${paramCount}`\n      params.push(filters.date_from)\n    }\n\n    if (filters?.date_to) {\n      paramCount++\n      queryText += ` AND date <= $${paramCount}`\n      params.push(filters.date_to)\n    }\n\n    queryText += ' ORDER BY date DESC, created_at DESC'\n\n    if (filters?.limit) {\n      paramCount++\n      queryText += ` LIMIT $${paramCount}`\n      params.push(filters.limit)\n    }\n\n    if (filters?.offset) {\n      paramCount++\n      queryText += ` OFFSET $${paramCount}`\n      params.push(filters.offset)\n    }\n\n    const result = await query<DatabaseTransaction>(queryText, params)\n    return result.rows\n  }\n}\n\n// Database will be initialized on first connection\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/attendance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6868,6871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6868,6871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\n\n// 근태 기록\nexport interface AttendanceRecord {\n  id: string\n  employeeId: string\n  date: string\n  checkIn?: string // HH:MM 형식\n  checkOut?: string // HH:MM 형식\n  workHours?: number // 실제 근무시간 (시간)\n  overtimeHours?: number // 연장근무시간 (시간)\n  status:\n    | 'present'\n    | 'absent'\n    | 'late'\n    | 'early-leave'\n    | 'half-day'\n    | 'vacation'\n    | 'sick-leave'\n    | 'business-trip'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 휴가 유형\nexport interface LeaveType {\n  id: string\n  name: string\n  code: string // 'annual', 'sick', 'personal', 'maternity', 'paternity', 'bereavement'\n  description: string\n  maxDaysPerYear?: number\n  requiresApproval: boolean\n  requiresDocument: boolean\n  canCarryOver: boolean\n  maxCarryOverDays?: number\n  isPaid: boolean\n  color: string // UI 표시용 색상\n  createdAt: string\n}\n\n// 휴가 신청\nexport interface LeaveRequest {\n  id: string\n  employeeId: string\n  leaveTypeId: string\n  startDate: string\n  endDate: string\n  days: number\n  reason: string\n  status: 'pending' | 'approved' | 'rejected' | 'cancelled'\n  requestedAt: string\n  approvedBy?: string\n  approvedAt?: string\n  rejectionReason?: string\n  documentUrl?: string\n  notes?: string\n}\n\n// 휴가 잔여일수\nexport interface LeaveBalance {\n  id: string\n  employeeId: string\n  year: number\n  leaveTypeId: string\n  totalDays: number // 총 부여일수\n  usedDays: number // 사용일수\n  remainingDays: number // 잔여일수\n  carriedOverDays: number // 이월일수\n  createdAt: string\n  updatedAt: string\n}\n\n// 교대/스케줄\nexport interface WorkSchedule {\n  id: string\n  employeeId: string\n  date: string\n  shiftType: 'day' | 'night' | 'evening' | 'flexible'\n  startTime: string // HH:MM\n  endTime: string // HH:MM\n  workHours: number\n  notes?: string\n  createdAt: string\n}\n\n// 초기 데이터\nconst initialLeaveTypes: LeaveType[] = [\n  {\n    id: 'leave-1',\n    name: '연차휴가',\n    code: 'annual',\n    description: '연간 유급휴가',\n    maxDaysPerYear: 15,\n    requiresApproval: true,\n    requiresDocument: false,\n    canCarryOver: true,\n    maxCarryOverDays: 5,\n    isPaid: true,\n    color: '#3B82F6',\n    createdAt: '2023-01-01T00:00:00Z'\n  },\n  {\n    id: 'leave-2',\n    name: '병가',\n    code: 'sick',\n    description: '질병으로 인한 휴가',\n    maxDaysPerYear: 10,\n    requiresApproval: true,\n    requiresDocument: true,\n    canCarryOver: false,\n    isPaid: true,\n    color: '#EF4444',\n    createdAt: '2023-01-01T00:00:00Z'\n  },\n  {\n    id: 'leave-3',\n    name: '개인사정휴가',\n    code: 'personal',\n    description: '개인적인 사정으로 인한 휴가',\n    maxDaysPerYear: 5,\n    requiresApproval: true,\n    requiresDocument: false,\n    canCarryOver: false,\n    isPaid: false,\n    color: '#F59E0B',\n    createdAt: '2023-01-01T00:00:00Z'\n  },\n  {\n    id: 'leave-4',\n    name: '출산휴가',\n    code: 'maternity',\n    description: '출산으로 인한 휴가',\n    maxDaysPerYear: 90,\n    requiresApproval: true,\n    requiresDocument: true,\n    canCarryOver: false,\n    isPaid: true,\n    color: '#EC4899',\n    createdAt: '2023-01-01T00:00:00Z'\n  },\n  {\n    id: 'leave-5',\n    name: '경조사휴가',\n    code: 'bereavement',\n    description: '경조사로 인한 휴가',\n    maxDaysPerYear: 3,\n    requiresApproval: true,\n    requiresDocument: false,\n    canCarryOver: false,\n    isPaid: true,\n    color: '#6B7280',\n    createdAt: '2023-01-01T00:00:00Z'\n  }\n]\n\nconst initialAttendanceRecords: AttendanceRecord[] = [\n  {\n    id: 'attendance-1',\n    employeeId: 'emp-1',\n    date: '2024-01-15',\n    checkIn: '09:00',\n    checkOut: '18:00',\n    workHours: 8,\n    overtimeHours: 0,\n    status: 'present',\n    createdAt: '2024-01-15T09:00:00Z',\n    updatedAt: '2024-01-15T18:00:00Z'\n  },\n  {\n    id: 'attendance-2',\n    employeeId: 'emp-1',\n    date: '2024-01-16',\n    checkIn: '09:15',\n    checkOut: '18:30',\n    workHours: 8.25,\n    overtimeHours: 0.25,\n    status: 'late',\n    notes: '지각 15분',\n    createdAt: '2024-01-16T09:15:00Z',\n    updatedAt: '2024-01-16T18:30:00Z'\n  },\n  {\n    id: 'attendance-3',\n    employeeId: 'emp-2',\n    date: '2024-01-15',\n    checkIn: '09:00',\n    checkOut: '17:30',\n    workHours: 7.5,\n    overtimeHours: 0,\n    status: 'early-leave',\n    notes: '조퇴 30분',\n    createdAt: '2024-01-15T09:00:00Z',\n    updatedAt: '2024-01-15T17:30:00Z'\n  }\n]\n\nconst initialLeaveRequests: LeaveRequest[] = [\n  {\n    id: 'leave-req-1',\n    employeeId: 'emp-1',\n    leaveTypeId: 'leave-1',\n    startDate: '2024-02-01',\n    endDate: '2024-02-03',\n    days: 3,\n    reason: '가족 여행',\n    status: 'approved',\n    requestedAt: '2024-01-20T10:00:00Z',\n    approvedBy: 'emp-3',\n    approvedAt: '2024-01-21T14:00:00Z'\n  },\n  {\n    id: 'leave-req-2',\n    employeeId: 'emp-2',\n    leaveTypeId: 'leave-2',\n    startDate: '2024-01-25',\n    endDate: '2024-01-25',\n    days: 1,\n    reason: '감기로 인한 휴가',\n    status: 'pending',\n    requestedAt: '2024-01-24T16:00:00Z'\n  }\n]\n\nconst initialLeaveBalances: LeaveBalance[] = [\n  {\n    id: 'balance-1',\n    employeeId: 'emp-1',\n    year: 2024,\n    leaveTypeId: 'leave-1',\n    totalDays: 15,\n    usedDays: 3,\n    remainingDays: 12,\n    carriedOverDays: 2,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-20T00:00:00Z'\n  },\n  {\n    id: 'balance-2',\n    employeeId: 'emp-2',\n    year: 2024,\n    leaveTypeId: 'leave-1',\n    totalDays: 15,\n    usedDays: 5,\n    remainingDays: 10,\n    carriedOverDays: 0,\n    createdAt: '2024-01-01T00:00:00Z',\n    updatedAt: '2024-01-15T00:00:00Z'\n  }\n]\n\nconst initialWorkSchedules: WorkSchedule[] = [\n  {\n    id: 'schedule-1',\n    employeeId: 'emp-1',\n    date: '2024-01-15',\n    shiftType: 'day',\n    startTime: '09:00',\n    endTime: '18:00',\n    workHours: 8,\n    createdAt: '2024-01-15T00:00:00Z'\n  }\n]\n\n// 스토어 생성\nexport const leaveTypes = writable<LeaveType[]>(initialLeaveTypes)\nexport const attendanceRecords = writable<AttendanceRecord[]>(initialAttendanceRecords)\nexport const leaveRequests = writable<LeaveRequest[]>(initialLeaveRequests)\nexport const leaveBalances = writable<LeaveBalance[]>(initialLeaveBalances)\nexport const workSchedules = writable<WorkSchedule[]>(initialWorkSchedules)\n\n// 근태 기록 관리 함수들\nexport function addAttendanceRecord(\n  record: Omit<AttendanceRecord, 'id' | 'createdAt' | 'updatedAt'>\n) {\n  const newRecord: AttendanceRecord = {\n    ...record,\n    id: `attendance-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n  attendanceRecords.update(current => [...current, newRecord])\n}\n\nexport function updateAttendanceRecord(id: string, updates: Partial<AttendanceRecord>) {\n  attendanceRecords.update(current =>\n    current.map(record =>\n      record.id === id ? { ...record, ...updates, updatedAt: new Date().toISOString() } : record\n    )\n  )\n}\n\nexport function checkIn(employeeId: string, time?: string) {\n  const now = time || new Date().toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' })\n  const today = new Date().toISOString().split('T')[0]\n\n  // 오늘의 근태 기록이 있는지 확인\n  let existingRecord: any = null\n  attendanceRecords.subscribe(records => {\n    existingRecord = records.find(\n      record => record.employeeId === employeeId && record.date === today\n    )\n  })\n\n  if (existingRecord) {\n    // 기존 기록 업데이트\n    attendanceRecords.update(current =>\n      current.map(record =>\n        record.employeeId === employeeId && record.date === today\n          ? { ...record, checkIn: now, status: 'present', updatedAt: new Date().toISOString() }\n          : record\n      )\n    )\n  } else {\n    // 새 기록 생성\n    addAttendanceRecord({\n      employeeId: employeeId || '',\n      date: today,\n      checkIn: now,\n      status: 'present'\n    })\n  }\n}\n\nexport function checkOut(employeeId: string, time?: string) {\n  const now = time || new Date().toLocaleTimeString('ko-KR', { hour: '2-digit', minute: '2-digit' })\n  const today = new Date().toISOString().split('T')[0]\n\n  attendanceRecords.update(current =>\n    current.map(record => {\n      if (record.employeeId === employeeId && record.date === today) {\n        const checkInTime = record.checkIn\n        if (checkInTime) {\n          const workHours = calculateWorkHours(checkInTime, now)\n          const overtimeHours = Math.max(0, workHours - 8)\n\n          return {\n            ...record,\n            checkOut: now,\n            workHours,\n            overtimeHours,\n            updatedAt: new Date().toISOString()\n          }\n        }\n      }\n      return record\n    })\n  )\n}\n\n// 휴가 유형 관리 함수들\nexport function addLeaveType(leaveType: Omit<LeaveType, 'id' | 'createdAt'>) {\n  const newLeaveType: LeaveType = {\n    ...leaveType,\n    id: `leave-${Date.now()}`,\n    createdAt: new Date().toISOString()\n  }\n  leaveTypes.update(current => [...current, newLeaveType])\n}\n\nexport function updateLeaveType(id: string, updates: Partial<LeaveType>) {\n  leaveTypes.update(current =>\n    current.map(leaveType => (leaveType.id === id ? { ...leaveType, ...updates } : leaveType))\n  )\n}\n\n// 휴가 신청 관리 함수들\nexport function requestLeave(request: Omit<LeaveRequest, 'id' | 'requestedAt'>) {\n  const newRequest: LeaveRequest = {\n    ...request,\n    id: `leave-req-${Date.now()}`,\n    requestedAt: new Date().toISOString()\n  }\n  leaveRequests.update(current => [...current, newRequest])\n}\n\nexport function approveLeaveRequest(id: string, approvedBy: string) {\n  leaveRequests.update(current =>\n    current.map(request =>\n      request.id === id\n        ? {\n            ...request,\n            status: 'approved',\n            approvedBy,\n            approvedAt: new Date().toISOString()\n          }\n        : request\n    )\n  )\n}\n\nexport function rejectLeaveRequest(id: string, rejectionReason: string) {\n  leaveRequests.update(current =>\n    current.map(request =>\n      request.id === id\n        ? {\n            ...request,\n            status: 'rejected',\n            rejectionReason\n          }\n        : request\n    )\n  )\n}\n\n// 휴가 잔여일수 관리 함수들\nexport function updateLeaveBalance(\n  employeeId: string,\n  leaveTypeId: string,\n  year: number,\n  usedDays: number\n) {\n  leaveBalances.update(current =>\n    current.map(balance => {\n      if (\n        balance.employeeId === employeeId &&\n        balance.leaveTypeId === leaveTypeId &&\n        balance.year === year\n      ) {\n        const newUsedDays = balance.usedDays + usedDays\n        const newRemainingDays = balance.totalDays - newUsedDays\n\n        return {\n          ...balance,\n          usedDays: newUsedDays,\n          remainingDays: newRemainingDays,\n          updatedAt: new Date().toISOString()\n        }\n      }\n      return balance\n    })\n  )\n}\n\nexport function initializeLeaveBalance(employeeId: string, year: number) {\n  const currentYear = new Date().getFullYear()\n  if (year !== currentYear) return\n\n  leaveTypes.subscribe(types => {\n    leaveBalances.update(current => {\n      const existingBalances = current.filter(\n        balance => balance.employeeId === employeeId && balance.year === year\n      )\n\n      const newBalances = types\n        .filter(type => !existingBalances.some(balance => balance.leaveTypeId === type.id))\n        .map(type => ({\n          id: `balance-${Date.now()}-${Math.random()}`,\n          employeeId,\n          year,\n          leaveTypeId: type.id,\n          totalDays: type.maxDaysPerYear || 0,\n          usedDays: 0,\n          remainingDays: type.maxDaysPerYear || 0,\n          carriedOverDays: 0,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        }))\n\n      return [...current, ...newBalances]\n    })\n  })\n}\n\n// 교대/스케줄 관리 함수들\nexport function addWorkSchedule(schedule: Omit<WorkSchedule, 'id' | 'createdAt'>) {\n  const newSchedule: WorkSchedule = {\n    ...schedule,\n    id: `schedule-${Date.now()}`,\n    createdAt: new Date().toISOString()\n  }\n  workSchedules.update(current => [...current, newSchedule])\n}\n\n// 유틸리티 함수들\nexport function calculateWorkHours(checkIn: string, checkOut: string): number {\n  const [checkInHour, checkInMinute] = checkIn.split(':').map(Number)\n  const [checkOutHour, checkOutMinute] = checkOut.split(':').map(Number)\n\n  const checkInMinutes = (checkInHour || 0) * 60 + (checkInMinute || 0)\n  const checkOutMinutes = (checkOutHour || 0) * 60 + (checkOutMinute || 0)\n\n  const workMinutes = checkOutMinutes - checkInMinutes\n  return Math.round((workMinutes / 60) * 100) / 100 // 소수점 둘째 자리까지\n}\n\nexport function getAttendanceByEmployee(\n  employeeId: string,\n  records: AttendanceRecord[]\n): AttendanceRecord[] {\n  return records.filter(record => record.employeeId === employeeId)\n}\n\nexport function getAttendanceByDateRange(\n  startDate: string,\n  endDate: string,\n  records: AttendanceRecord[]\n): AttendanceRecord[] {\n  return records.filter(record => record.date >= startDate && record.date <= endDate)\n}\n\nexport function getLeaveRequestsByEmployee(\n  employeeId: string,\n  requests: LeaveRequest[]\n): LeaveRequest[] {\n  return requests.filter(request => request.employeeId === employeeId)\n}\n\nexport function getLeaveBalanceByEmployee(\n  employeeId: string,\n  balances: LeaveBalance[]\n): LeaveBalance[] {\n  return balances.filter(balance => balance.employeeId === employeeId)\n}\n\nexport function calculateMonthlyAttendance(\n  employeeId: string,\n  year: number,\n  month: number,\n  records: AttendanceRecord[]\n): {\n  totalDays: number\n  presentDays: number\n  absentDays: number\n  lateDays: number\n  totalWorkHours: number\n  totalOvertimeHours: number\n} {\n  const monthRecords = records.filter(record => {\n    const recordDate = new Date(record.date)\n    return (\n      record.employeeId === employeeId &&\n      recordDate.getFullYear() === year &&\n      recordDate.getMonth() === month - 1\n    )\n  })\n\n  const totalDays = monthRecords.length\n  const presentDays = monthRecords.filter(record => record.status === 'present').length\n  const absentDays = monthRecords.filter(record => record.status === 'absent').length\n  const lateDays = monthRecords.filter(record => record.status === 'late').length\n  const totalWorkHours = monthRecords.reduce((sum, record) => sum + (record.workHours || 0), 0)\n  const totalOvertimeHours = monthRecords.reduce(\n    (sum, record) => sum + (record.overtimeHours || 0),\n    0\n  )\n\n  return {\n    totalDays,\n    presentDays,\n    absentDays,\n    lateDays,\n    totalWorkHours,\n    totalOvertimeHours\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/benefits.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/budget.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/funds.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/hr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/hr/employee-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/hr/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/notifications.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":161,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":161,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4184,4187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4184,4187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4245,4248],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4245,4248],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":164,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":164,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4354,4357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4354,4357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\n\nexport interface Notification {\n  id: string\n  type: 'success' | 'warning' | 'error' | 'info'\n  title: string\n  message: string\n  timestamp: string\n  read: boolean\n  actionUrl?: string\n  actionText?: string\n}\n\nexport interface NotificationSettings {\n  budgetOverage: boolean\n  goalDeadlines: boolean\n  lowBalance: boolean\n  dailyReminders: boolean\n  emailNotifications: boolean\n  pushNotifications: boolean\n}\n\n// 초기 알림 설정\nconst initialSettings: NotificationSettings = {\n  budgetOverage: true,\n  goalDeadlines: true,\n  lowBalance: true,\n  dailyReminders: true,\n  emailNotifications: false,\n  pushNotifications: true\n}\n\n// 초기 알림 데이터\nconst initialNotifications: Notification[] = [\n  {\n    id: '1',\n    type: 'warning',\n    title: '예산 초과 경고',\n    message: '인건비 예산을 80% 이상 사용했습니다.',\n    timestamp: new Date().toISOString(),\n    read: false,\n    actionUrl: '/finance',\n    actionText: '예산 확인'\n  },\n  {\n    id: '2',\n    type: 'info',\n    title: '자금 일보 입력 마감',\n    message: '오전 10시 30분까지 자금 일보 입력을 완료해주세요.',\n    timestamp: new Date(Date.now() - 3600000).toISOString(),\n    read: false,\n    actionUrl: '/finance',\n    actionText: '입력하기'\n  },\n  {\n    id: '3',\n    type: 'error',\n    title: '예산 초과',\n    message: '마케팅 예산을 100% 초과했습니다.',\n    timestamp: new Date(Date.now() - 7200000).toISOString(),\n    read: true,\n    actionUrl: '/finance',\n    actionText: '예산 조정'\n  }\n]\n\n// 스토어 생성\nexport const notifications = writable<Notification[]>(initialNotifications)\nexport const notificationSettings = writable<NotificationSettings>(initialSettings)\n\n// 알림 추가 함수\nexport function addNotification(notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) {\n  const newNotification: Notification = {\n    ...notification,\n    id: `notification-${Date.now()}`,\n    timestamp: new Date().toISOString(),\n    read: false\n  }\n\n  notifications.update(current => [newNotification, ...current])\n}\n\n// 알림 읽음 처리\nexport function markAsRead(notificationId: string) {\n  notifications.update(current =>\n    current.map(notification =>\n      notification.id === notificationId ? { ...notification, read: true } : notification\n    )\n  )\n}\n\n// 모든 알림 읽음 처리\nexport function markAllAsRead() {\n  notifications.update(current => current.map(notification => ({ ...notification, read: true })))\n}\n\n// 알림 삭제\nexport function deleteNotification(notificationId: string) {\n  notifications.update(current =>\n    current.filter(notification => notification.id !== notificationId)\n  )\n}\n\n// 알림 설정 업데이트\nexport function updateNotificationSettings(settings: NotificationSettings) {\n  notificationSettings.set(settings)\n}\n\n// 예산 초과 알림 체크\nexport function checkBudgetOverage(budgetCategories: unknown[]) {\n  budgetCategories.forEach(category => {\n    const usage = (category.spent / category.amount) * 100\n\n    if (usage >= 100) {\n      addNotification({\n        type: 'error',\n        title: '예산 초과',\n        message: `${category.name} 예산을 ${usage.toFixed(1)}% 초과했습니다.`,\n        actionUrl: '/finance',\n        actionText: '예산 확인'\n      })\n    } else if (usage >= 80) {\n      addNotification({\n        type: 'warning',\n        title: '예산 경고',\n        message: `${category.name} 예산을 ${usage.toFixed(1)}% 사용했습니다.`,\n        actionUrl: '/finance',\n        actionText: '예산 확인'\n      })\n    }\n  })\n}\n\n// 목표 마감일 알림 체크\nexport function checkGoalDeadlines(budgetGoals: unknown[]) {\n  const now = new Date()\n  const oneWeekFromNow = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000)\n\n  budgetGoals.forEach(goal => {\n    const deadline = new Date(goal.deadline)\n    const progress = (goal.currentAmount / goal.targetAmount) * 100\n\n    if (deadline <= oneWeekFromNow && deadline > now && progress < 100) {\n      const daysLeft = Math.ceil((deadline.getTime() - now.getTime()) / (24 * 60 * 60 * 1000))\n\n      addNotification({\n        type: 'warning',\n        title: '목표 마감일 임박',\n        message: `${goal.name} 목표 마감까지 ${daysLeft}일 남았습니다. (진행률: ${progress.toFixed(1)}%)`,\n        actionUrl: '/finance',\n        actionText: '목표 확인'\n      })\n    }\n  })\n}\n\n// 잔고 부족 알림 체크\nexport function checkLowBalance(bankAccounts: unknown[], transactions: unknown[]) {\n  const monthlyExpense =\n    transactions\n      .filter((t: any) => t.type === 'expense')\n      .reduce((sum: number, t: any) => sum + t.amount, 0) / 12 // 월평균 지출\n\n  const totalBalance = bankAccounts.reduce((sum: number, account: any) => sum + account.balance, 0)\n\n  if (totalBalance < monthlyExpense * 2) {\n    addNotification({\n      type: 'error',\n      title: '잔고 부족 경고',\n      message: `현재 잔고가 2개월 운영비보다 적습니다. (잔고: ${totalBalance.toLocaleString()}원)`,\n      actionUrl: '/finance',\n      actionText: '잔고 확인'\n    })\n  } else if (totalBalance < monthlyExpense * 3) {\n    addNotification({\n      type: 'warning',\n      title: '잔고 주의',\n      message: `현재 잔고가 3개월 운영비보다 적습니다. (잔고: ${totalBalance.toLocaleString()}원)`,\n      actionUrl: '/finance',\n      actionText: '잔고 확인'\n    })\n  }\n}\n\n// 자금 일보 입력 마감 알림\nexport function checkFundsReportDeadline() {\n  const now = new Date()\n  const deadline = new Date()\n  deadline.setHours(10, 30, 0, 0)\n\n  const timeUntilDeadline = deadline.getTime() - now.getTime()\n  const minutesUntilDeadline = Math.floor(timeUntilDeadline / (1000 * 60))\n\n  if (minutesUntilDeadline > 0 && minutesUntilDeadline <= 30) {\n    addNotification({\n      type: 'info',\n      title: '자금 일보 입력 마감',\n      message: `자금 일보 입력 마감까지 ${minutesUntilDeadline}분 남았습니다.`,\n      actionUrl: '/finance',\n      actionText: '입력하기'\n    })\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/onboarding.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6451,6454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6451,6454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\n\n// 온보딩 체크리스트 항목\nexport interface OnboardingChecklistItem {\n  id: string\n  title: string\n  description: string\n  category: 'equipment' | 'account' | 'training' | 'documentation' | 'orientation'\n  assignedTo: string // 담당자 ID\n  dueDate?: string\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled'\n  completedBy?: string\n  completedAt?: string\n  notes?: string\n  required: boolean\n}\n\n// 온보딩 프로세스\nexport interface OnboardingProcess {\n  id: string\n  employeeId: string\n  employeeName: string\n  startDate: string\n  expectedCompletionDate: string\n  actualCompletionDate?: string\n  status: 'not-started' | 'in-progress' | 'completed' | 'cancelled'\n  checklistItems: OnboardingChecklistItem[]\n  mentorId?: string\n  buddyId?: string\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 오프보딩 체크리스트 항목\nexport interface OffboardingChecklistItem {\n  id: string\n  title: string\n  description: string\n  category:\n    | 'equipment-return'\n    | 'account-cleanup'\n    | 'knowledge-transfer'\n    | 'documentation'\n    | 'exit-interview'\n  assignedTo: string\n  dueDate?: string\n  status: 'pending' | 'in-progress' | 'completed' | 'cancelled'\n  completedBy?: string\n  completedAt?: string\n  notes?: string\n  required: boolean\n}\n\n// 오프보딩 프로세스\nexport interface OffboardingProcess {\n  id: string\n  employeeId: string\n  employeeName: string\n  lastWorkingDate: string\n  startDate: string\n  expectedCompletionDate: string\n  actualCompletionDate?: string\n  status: 'not-started' | 'in-progress' | 'completed' | 'cancelled'\n  checklistItems: OffboardingChecklistItem[]\n  reason: 'resignation' | 'termination' | 'retirement' | 'contract-end'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 멘토/버디 프로그램\nexport interface MentorBuddy {\n  id: string\n  employeeId: string\n  mentorId?: string\n  buddyId?: string\n  startDate: string\n  endDate?: string\n  status: 'active' | 'completed' | 'cancelled'\n  notes?: string\n  createdAt: string\n}\n\n// 온보딩 템플릿\nexport interface OnboardingTemplate {\n  id: string\n  name: string\n  description: string\n  department?: string\n  position?: string\n  checklistItems: Omit<OnboardingChecklistItem, 'id' | 'status' | 'completedBy' | 'completedAt'>[]\n  createdAt: string\n  updatedAt: string\n}\n\n// 초기 데이터\nconst initialOnboardingTemplates: OnboardingTemplate[] = [\n  {\n    id: 'template-1',\n    name: '신입 개발자 온보딩',\n    description: '신입 개발자를 위한 표준 온보딩 프로세스',\n    department: '개발팀',\n    position: '개발자',\n    checklistItems: [\n      {\n        title: '노트북 및 장비 지급',\n        description: '개발용 노트북, 모니터, 키보드, 마우스 지급',\n        category: 'equipment',\n        assignedTo: 'IT팀',\n        dueDate: '1일차',\n        required: true\n      },\n      {\n        title: '회사 계정 생성',\n        description: '이메일, 슬랙, GitLab, Jira 계정 생성',\n        category: 'account',\n        assignedTo: 'IT팀',\n        dueDate: '1일차',\n        required: true\n      },\n      {\n        title: '개발 환경 설정',\n        description: '개발 도구 설치 및 환경 설정',\n        category: 'training',\n        assignedTo: '멘토',\n        dueDate: '2일차',\n        required: true\n      },\n      {\n        title: '회사 오리엔테이션',\n        description: '회사 소개, 조직도, 업무 프로세스 안내',\n        category: 'orientation',\n        assignedTo: 'HR팀',\n        dueDate: '1일차',\n        required: true\n      },\n      {\n        title: '보안 교육',\n        description: '정보보안 정책 및 보안 교육',\n        category: 'training',\n        assignedTo: '보안팀',\n        dueDate: '3일차',\n        required: true\n      }\n    ],\n    createdAt: '2023-01-01T00:00:00Z',\n    updatedAt: '2023-01-01T00:00:00Z'\n  }\n]\n\nconst initialOnboardingProcesses: OnboardingProcess[] = [\n  {\n    id: 'onboarding-1',\n    employeeId: 'emp-1',\n    employeeName: '김철수',\n    startDate: '2023-01-15',\n    expectedCompletionDate: '2023-01-22',\n    actualCompletionDate: '2023-01-20',\n    status: 'completed',\n    mentorId: 'emp-3',\n    buddyId: 'emp-2',\n    checklistItems: [\n      {\n        id: 'item-1',\n        title: '노트북 및 장비 지급',\n        description: '개발용 노트북, 모니터, 키보드, 마우스 지급',\n        category: 'equipment',\n        assignedTo: 'IT팀',\n        dueDate: '2023-01-15',\n        status: 'completed',\n        completedBy: 'IT팀',\n        completedAt: '2023-01-15T10:00:00Z',\n        required: true\n      },\n      {\n        id: 'item-2',\n        title: '회사 계정 생성',\n        description: '이메일, 슬랙, GitLab, Jira 계정 생성',\n        category: 'account',\n        assignedTo: 'IT팀',\n        dueDate: '2023-01-15',\n        status: 'completed',\n        completedBy: 'IT팀',\n        completedAt: '2023-01-15T11:00:00Z',\n        required: true\n      }\n    ],\n    createdAt: '2023-01-15T00:00:00Z',\n    updatedAt: '2023-01-20T00:00:00Z'\n  }\n]\n\nconst initialOffboardingProcesses: OffboardingProcess[] = []\n\nconst initialMentorBuddies: MentorBuddy[] = [\n  {\n    id: 'mentor-1',\n    employeeId: 'emp-1',\n    mentorId: 'emp-3',\n    buddyId: 'emp-2',\n    startDate: '2023-01-15',\n    status: 'active',\n    createdAt: '2023-01-15T00:00:00Z'\n  }\n]\n\n// 스토어 생성\nexport const onboardingTemplates = writable<OnboardingTemplate[]>(initialOnboardingTemplates)\nexport const onboardingProcesses = writable<OnboardingProcess[]>(initialOnboardingProcesses)\nexport const offboardingProcesses = writable<OffboardingProcess[]>(initialOffboardingProcesses)\nexport const mentorBuddies = writable<MentorBuddy[]>(initialMentorBuddies)\n\n// 온보딩 템플릿 관리 함수들\nexport function addOnboardingTemplate(\n  template: Omit<OnboardingTemplate, 'id' | 'createdAt' | 'updatedAt'>\n) {\n  const newTemplate: OnboardingTemplate = {\n    ...template,\n    id: `template-${Date.now()}`,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n  onboardingTemplates.update(current => [...current, newTemplate])\n}\n\nexport function updateOnboardingTemplate(id: string, updates: Partial<OnboardingTemplate>) {\n  onboardingTemplates.update(current =>\n    current.map(template =>\n      template.id === id\n        ? { ...template, ...updates, updatedAt: new Date().toISOString() }\n        : template\n    )\n  )\n}\n\n// 온보딩 프로세스 관리 함수들\nexport function createOnboardingProcess(\n  employeeId: string,\n  employeeName: string,\n  templateId?: string,\n  mentorId?: string,\n  buddyId?: string\n) {\n  let template: OnboardingTemplate | null = null\n  if (templateId) {\n    onboardingTemplates.subscribe(templates => {\n      template = templates.find(t => t.id === templateId) || null\n    })()\n  }\n\n  const checklistItems: OnboardingChecklistItem[] =\n    template?.checklistItems?.map((item: any) => ({\n      ...item,\n      id: `item-${Date.now()}-${Math.random()}`,\n      status: 'pending' as const\n    })) || []\n\n  const newProcess: OnboardingProcess = {\n    id: `onboarding-${Date.now()}`,\n    employeeId: employeeId || '',\n    employeeName: employeeName || '',\n    startDate: new Date().toISOString().split('T')[0] || '',\n    expectedCompletionDate:\n      new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] || '',\n    status: 'not-started',\n    checklistItems,\n    mentorId,\n    buddyId,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  onboardingProcesses.update(current => [...current, newProcess])\n  return newProcess.id\n}\n\nexport function updateOnboardingProcess(id: string, updates: Partial<OnboardingProcess>) {\n  onboardingProcesses.update(current =>\n    current.map(process =>\n      process.id === id ? { ...process, ...updates, updatedAt: new Date().toISOString() } : process\n    )\n  )\n}\n\nexport function completeOnboardingChecklistItem(\n  processId: string,\n  itemId: string,\n  completedBy: string,\n  notes?: string\n) {\n  onboardingProcesses.update(current =>\n    current.map(process => {\n      if (process.id === processId) {\n        const updatedItems = process.checklistItems.map(item => {\n          if (item.id === itemId) {\n            return {\n              ...item,\n              status: 'completed' as const,\n              completedBy,\n              completedAt: new Date().toISOString(),\n              notes\n            }\n          }\n          return item\n        })\n\n        // 모든 필수 항목이 완료되었는지 확인\n        const allRequiredCompleted = updatedItems\n          .filter(item => item.required)\n          .every(item => item.status === 'completed')\n\n        return {\n          ...process,\n          checklistItems: updatedItems,\n          status: allRequiredCompleted ? ('completed' as const) : ('in-progress' as const),\n          actualCompletionDate: allRequiredCompleted\n            ? new Date().toISOString().split('T')[0]\n            : undefined,\n          updatedAt: new Date().toISOString()\n        }\n      }\n      return process\n    })\n  )\n}\n\n// 오프보딩 프로세스 관리 함수들\nexport function createOffboardingProcess(\n  employeeId: string,\n  employeeName: string,\n  lastWorkingDate: string,\n  reason: OffboardingProcess['reason']\n) {\n  const checklistItems: OffboardingChecklistItem[] = [\n    {\n      id: `item-${Date.now()}-1`,\n      title: '장비 반납',\n      description: '노트북, 모니터, 키보드, 마우스 등 회사 장비 반납',\n      category: 'equipment-return',\n      assignedTo: 'IT팀',\n      status: 'pending',\n      required: true\n    },\n    {\n      id: `item-${Date.now()}-2`,\n      title: '계정 정리',\n      description: '이메일, 슬랙, GitLab, Jira 등 모든 계정 비활성화',\n      category: 'account-cleanup',\n      assignedTo: 'IT팀',\n      status: 'pending',\n      required: true\n    },\n    {\n      id: `item-${Date.now()}-3`,\n      title: '지식 전수',\n      description: '담당 업무 및 프로젝트 관련 지식 전수',\n      category: 'knowledge-transfer',\n      assignedTo: '직속상사',\n      status: 'pending',\n      required: true\n    },\n    {\n      id: `item-${Date.now()}-4`,\n      title: '퇴사 인터뷰',\n      description: '퇴사 사유 및 개선사항 인터뷰',\n      category: 'exit-interview',\n      assignedTo: 'HR팀',\n      status: 'pending',\n      required: true\n    }\n  ]\n\n  const newProcess: OffboardingProcess = {\n    id: `offboarding-${Date.now()}`,\n    employeeId,\n    employeeName,\n    lastWorkingDate: lastWorkingDate || '',\n    startDate: new Date().toISOString().split('T')[0] || '',\n    expectedCompletionDate:\n      new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0] || '',\n    status: 'not-started',\n    checklistItems,\n    reason,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  offboardingProcesses.update(current => [...current, newProcess])\n  return newProcess.id\n}\n\nexport function completeOffboardingChecklistItem(\n  processId: string,\n  itemId: string,\n  completedBy: string,\n  notes?: string\n) {\n  offboardingProcesses.update(current =>\n    current.map(process => {\n      if (process.id === processId) {\n        const updatedItems = process.checklistItems.map(item => {\n          if (item.id === itemId) {\n            return {\n              ...item,\n              status: 'completed' as const,\n              completedBy,\n              completedAt: new Date().toISOString(),\n              notes\n            }\n          }\n          return item\n        })\n\n        // 모든 필수 항목이 완료되었는지 확인\n        const allRequiredCompleted = updatedItems\n          .filter(item => item.required)\n          .every(item => item.status === 'completed')\n\n        return {\n          ...process,\n          checklistItems: updatedItems,\n          status: allRequiredCompleted ? ('completed' as const) : ('in-progress' as const),\n          actualCompletionDate: allRequiredCompleted\n            ? new Date().toISOString().split('T')[0]\n            : undefined,\n          updatedAt: new Date().toISOString()\n        }\n      }\n      return process\n    })\n  )\n}\n\n// 멘토/버디 관리 함수들\nexport function assignMentorBuddy(employeeId: string, mentorId?: string, buddyId?: string) {\n  const newMentorBuddy: MentorBuddy = {\n    id: `mentor-${Date.now()}`,\n    employeeId,\n    mentorId,\n    buddyId: buddyId || '',\n    startDate: new Date().toISOString().split('T')[0] || '',\n    status: 'active',\n    createdAt: new Date().toISOString()\n  }\n\n  mentorBuddies.update(current => [...current, newMentorBuddy])\n}\n\nexport function updateMentorBuddy(id: string, updates: Partial<MentorBuddy>) {\n  mentorBuddies.update(current =>\n    current.map(mentor => (mentor.id === id ? { ...mentor, ...updates } : mentor))\n  )\n}\n\n// 유틸리티 함수들\nexport function getOnboardingProcessByEmployee(\n  employeeId: string,\n  processList: OnboardingProcess[]\n): OnboardingProcess | undefined {\n  return processList.find(process => process.employeeId === employeeId)\n}\n\nexport function getOffboardingProcessByEmployee(\n  employeeId: string,\n  processList: OffboardingProcess[]\n): OffboardingProcess | undefined {\n  return processList.find(process => process.employeeId === employeeId)\n}\n\nexport function getMentorBuddyByEmployee(\n  employeeId: string,\n  mentorList: MentorBuddy[]\n): MentorBuddy | undefined {\n  return mentorList.find(mentor => mentor.employeeId === employeeId && mentor.status === 'active')\n}\n\nexport function getOnboardingProgress(process: OnboardingProcess): number {\n  if (process.checklistItems.length === 0) return 0\n  const completedItems = process.checklistItems.filter(item => item.status === 'completed').length\n  return Math.round((completedItems / process.checklistItems.length) * 100)\n}\n\nexport function getOffboardingProgress(process: OffboardingProcess): number {\n  if (process.checklistItems.length === 0) return 0\n  const completedItems = process.checklistItems.filter(item => item.status === 'completed').length\n  return Math.round((completedItems / process.checklistItems.length) * 100)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/performance.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/personnel.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/policies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/audit-security.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[462,465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[462,465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[478,481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[478,481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4758,4761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4758,4761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":242,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":242,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6531,6534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6531,6534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6889,6892],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6889,6892],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7210,7213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7210,7213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userId' is defined but never used. Allowed unused args must match /^_/u.","line":303,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":303,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":303,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8244,8247],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8244,8247],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9112,9115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9112,9115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":346,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9136,9139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9136,9139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":349,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":349,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9184,9187],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9184,9187],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":486,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12363,12366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12363,12366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":504,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12715,12718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12715,12718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":522,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":522,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13030,13033],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13030,13033],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { AuditLog, Person } from './types'\nimport { logger } from '$lib/utils/logger'\n\n// 감사 로그 관리\nexport const auditLogs = writable<AuditLog[]>([])\nexport const securityPolicies = writable<Record<string, unknown>>({})\nexport const accessControl = writable<Record<string, unknown>>({})\n\n// 감사 로그 생성\nexport function createAuditLog(\n  actorId: string,\n  action: string,\n  entity: string,\n  entityId: string,\n  oldData: any,\n  newData: any,\n  metadata?: Record<string, unknown>\n): string {\n  const auditLog: AuditLog = {\n    id: crypto.randomUUID(),\n    actorId,\n    action,\n    entity,\n    entityId,\n    diff: { old: oldData, new: newData },\n    at: new Date().toISOString()\n  }\n\n  // 메타데이터 추가\n  if (metadata) {\n    auditLog.metadata = metadata\n  }\n\n  auditLogs.update(logs => [...logs, auditLog])\n\n  return auditLog.id\n}\n\n// 감사 로그 조회\nexport function getAuditLogs(filters?: {\n  actorId?: string\n  entity?: string\n  entityId?: string\n  action?: string\n  startDate?: string\n  endDate?: string\n}): AuditLog[] {\n  let filteredLogs: AuditLog[] = []\n\n  auditLogs.subscribe(logs => {\n    filteredLogs = logs.filter(log => {\n      if (filters?.actorId && log.actorId !== filters.actorId) return false\n      if (filters?.entity && log.entity !== filters.entity) return false\n      if (filters?.entityId && log.entityId !== filters.entityId) return false\n      if (filters?.action && log.action !== filters.action) return false\n      if (filters?.startDate && log.at < filters.startDate) return false\n      if (filters?.endDate && log.at > filters.endDate) return false\n      return true\n    })\n  })()\n\n  return filteredLogs.sort((a, b) => new Date(b.at).getTime() - new Date(a.at).getTime())\n}\n\n// 엔티티별 감사 로그 조회\nexport function getEntityAuditTrail(entity: string, entityId: string): AuditLog[] {\n  return getAuditLogs({ entity, entityId })\n}\n\n// 사용자별 감사 로그 조회\nexport function getUserAuditTrail(actorId: string): AuditLog[] {\n  return getAuditLogs({ actorId })\n}\n\n// 보안 정책 정의\nexport function defineSecurityPolicies(): void {\n  const policies = {\n    password: {\n      minLength: 8,\n      requireUppercase: true,\n      requireLowercase: true,\n      requireNumbers: true,\n      requireSpecialChars: true,\n      maxAge: 90, // days\n      historyCount: 5\n    },\n    session: {\n      timeout: 30, // minutes\n      maxConcurrent: 3,\n      requireReauth: ['sensitive_operations']\n    },\n    access: {\n      ipWhitelist: [],\n      ipBlacklist: [],\n      requireMFA: ['admin_operations', 'financial_operations'],\n      auditLevel: 'detailed'\n    },\n    data: {\n      encryption: {\n        atRest: true,\n        inTransit: true,\n        algorithm: 'AES-256'\n      },\n      retention: {\n        auditLogs: 2555, // 7 years in days\n        documents: 1095, // 3 years in days\n        backups: 365 // 1 year in days\n      },\n      anonymization: {\n        enabled: true,\n        fields: ['ssn', 'personal_id', 'bank_account']\n      }\n    }\n  }\n\n  securityPolicies.set(policies)\n}\n\n// 접근 제어 정책 정의\nexport function defineAccessControlPolicies(): void {\n  const policies: Record<string, unknown> = {\n    roles: {\n      R1: {\n        // 연구원\n        permissions: ['read_own_data', 'create_research_notes', 'upload_documents'],\n        restrictions: ['financial_data', 'personnel_data', 'audit_logs']\n      },\n      R2: {\n        // PM\n        permissions: ['read_project_data', 'approve_expenses', 'manage_milestones'],\n        restrictions: ['financial_data', 'audit_logs']\n      },\n      R3: {\n        // 담당부서\n        permissions: ['read_department_data', 'process_expenses', 'manage_documents'],\n        restrictions: ['personnel_data', 'audit_logs']\n      },\n      R4: {\n        // 경영지원\n        permissions: ['read_financial_data', 'manage_budgets', 'create_bundles'],\n        restrictions: ['audit_logs']\n      },\n      R5: {\n        // 연구소장\n        permissions: ['read_all_data', 'approve_major_decisions', 'manage_personnel'],\n        restrictions: []\n      },\n      R6: {\n        // 경영진\n        permissions: ['read_all_data', 'manage_all_resources', 'view_audit_logs'],\n        restrictions: []\n      },\n      R7: {\n        // 감사\n        permissions: ['read_audit_logs', 'view_all_data', 'export_data'],\n        restrictions: ['modify_data']\n      }\n    },\n    dataClassification: {\n      public: ['project_titles', 'public_milestones'],\n      internal: ['project_details', 'budget_summaries', 'personnel_summaries'],\n      confidential: ['financial_details', 'personnel_details', 'research_data'],\n      restricted: ['audit_logs', 'security_data', 'personal_identifiers']\n    }\n  }\n\n  accessControl.set(policies)\n}\n\n// 접근 권한 검증\nexport function checkAccessPermission(\n  userId: string,\n  resource: string,\n  action: string,\n  context?: any\n): {\n  allowed: boolean\n  reason?: string\n  auditRequired: boolean\n} {\n  // 1. 사용자 역할 확인\n  const user = getUserById(userId)\n  if (!user) {\n    return { allowed: false, reason: 'User not found', auditRequired: true }\n  }\n\n  // 2. 역할별 권한 확인\n  const rolePermissions = getRolePermissions(user.roleSet)\n  if (!rolePermissions.includes(action)) {\n    return { allowed: false, reason: 'Insufficient permissions', auditRequired: true }\n  }\n\n  // 3. 데이터 분류 확인\n  const dataClassification = getDataClassification(resource)\n  if (\n    dataClassification === 'restricted' &&\n    !user.roleSet.includes('R6') &&\n    !user.roleSet.includes('R7')\n  ) {\n    return { allowed: false, reason: 'Restricted data access', auditRequired: true }\n  }\n\n  // 4. 컨텍스트 기반 검증\n  if (context) {\n    const contextCheck = validateContext(user, resource, action, context)\n    if (!contextCheck.allowed) {\n      return { allowed: false, reason: contextCheck.reason, auditRequired: true }\n    }\n  }\n\n  // 5. MFA 요구사항 확인\n  const mfaRequired = isMFARequired(action)\n  if (mfaRequired && !context?.mfaVerified) {\n    return { allowed: false, reason: 'MFA required', auditRequired: false }\n  }\n\n  return { allowed: true, auditRequired: true }\n}\n\n// 사용자 ID로 사용자 정보 가져오기\nfunction getUserById(userId: string): Person | null {\n  // 실제 구현에서는 사용자 스토어에서 가져옴\n  return {\n    id: userId,\n    name: 'Test User',\n    email: 'test@example.com',\n    department: 'Test Department',\n    roleSet: ['R1'],\n    active: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n}\n\n// 역할별 권한 가져오기\nfunction getRolePermissions(roleSet: string[]): string[] {\n  let permissions: string[] = []\n\n  accessControl.subscribe(policies => {\n    roleSet.forEach(role => {\n      const rolePolicy = (policies as any).roles?.[role]\n      if (rolePolicy) {\n        permissions = [...permissions, ...rolePolicy.permissions]\n      }\n    })\n  })()\n\n  return [...new Set(permissions)] // 중복 제거\n}\n\n// 데이터 분류 가져오기\nfunction getDataClassification(resource: string): string {\n  let classification = 'public'\n\n  accessControl.subscribe(policies => {\n    Object.entries((policies as any).dataClassification || {}).forEach(([level, resources]) => {\n      if (Array.isArray(resources) && resources.includes(resource)) {\n        classification = level\n      }\n    })\n  })()\n\n  return classification\n}\n\n// 컨텍스트 기반 검증\nfunction validateContext(\n  user: Person,\n  resource: string,\n  action: string,\n  context: any\n): { allowed: boolean; reason?: string } {\n  // 1. 소유권 확인\n  if (context.ownerId && context.ownerId !== user.id) {\n    // 소유자가 아닌 경우 추가 권한 확인\n    if (!user.roleSet.includes('R5') && !user.roleSet.includes('R6')) {\n      return { allowed: false, reason: 'Not owner and insufficient role' }\n    }\n  }\n\n  // 2. 프로젝트 접근 권한 확인\n  if (context.projectId) {\n    const hasProjectAccess = checkProjectAccess(user.id, context.projectId)\n    if (!hasProjectAccess) {\n      return { allowed: false, reason: 'No project access' }\n    }\n  }\n\n  // 3. 시간 기반 제한 확인\n  if (context.timeRestriction) {\n    const now = new Date()\n    const restriction = new Date(context.timeRestriction)\n    if (now > restriction) {\n      return { allowed: false, reason: 'Time restriction exceeded' }\n    }\n  }\n\n  return { allowed: true }\n}\n\n// 프로젝트 접근 권한 확인\nfunction checkProjectAccess(userId: string, projectId: string): boolean {\n  // 실제 구현에서는 프로젝트 참여자 목록을 확인\n  return true // 모의 구현\n}\n\n// MFA 요구사항 확인\nfunction isMFARequired(action: string): boolean {\n  let policies: any = {}\n\n  securityPolicies.subscribe(p => {\n    policies = p\n  })()\n\n  return policies.session?.requireReauth?.includes(action) || false\n}\n\n// 보안 이벤트 로깅\nexport function logSecurityEvent(\n  eventType: 'login' | 'logout' | 'access_denied' | 'data_export' | 'suspicious_activity',\n  userId: string,\n  details: Record<string, unknown>\n): void {\n  const securityLog = {\n    id: crypto.randomUUID(),\n    eventType,\n    userId,\n    details,\n    timestamp: new Date().toISOString(),\n    ipAddress: details.ipAddress || 'unknown',\n    userAgent: details.userAgent || 'unknown'\n  }\n\n  // 보안 로그는 별도 스토어에 저장 (실제 구현)\n  logger.log('Security Event:', securityLog)\n\n  // 감사 로그에도 기록\n  createAuditLog(userId, `security_${eventType}`, 'security', securityLog.id, {}, details, {\n    eventType,\n    ipAddress: details.ipAddress\n  })\n}\n\n// 데이터 마스킹\nexport function maskSensitiveData(data: any, userRole: string): any {\n  if (!data) return data\n\n  let policies: any = {}\n  securityPolicies.subscribe(p => {\n    policies = p\n  })()\n\n  const maskFields = policies.data?.anonymization?.fields || []\n\n  if (typeof data === 'object') {\n    const masked = { ...data }\n\n    maskFields.forEach(field => {\n      if (masked[field]) {\n        masked[field] = maskValue(masked[field], userRole)\n      }\n    })\n\n    return masked\n  }\n\n  return data\n}\n\n// 값 마스킹\nfunction maskValue(value: string, userRole: string): string {\n  // 감사 역할은 전체 값 표시\n  if (userRole === 'R7') {\n    return value\n  }\n\n  // 경영진은 부분 마스킹\n  if (userRole === 'R6') {\n    if (value.length > 4) {\n      return (\n        value.substring(0, 2) + '*'.repeat(value.length - 4) + value.substring(value.length - 2)\n      )\n    }\n    return '*'.repeat(value.length)\n  }\n\n  // 기타 역할은 완전 마스킹\n  return '*'.repeat(value.length)\n}\n\n// 감사 로그 내보내기\nexport function exportAuditLogs(\n  format: 'json' | 'csv' | 'excel',\n  filters?: {\n    startDate?: string\n    endDate?: string\n    entity?: string\n    action?: string\n  }\n): string {\n  const logs = getAuditLogs(filters)\n\n  if (format === 'json') {\n    return JSON.stringify(logs, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader = 'ID,Actor ID,Action,Entity,Entity ID,Timestamp,Details\\n'\n    const csvRows = logs\n      .map(\n        log =>\n          `${log.id},${log.actorId},${log.action},${log.entity},${log.entityId},${log.at},\"${JSON.stringify(log.diff).replace(/\"/g, '\"\"')}\"`\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(logs, null, 2)\n}\n\n// 보안 정책 위반 감지\nexport function detectSecurityViolations(): {\n  violations: Array<{\n    type: string\n    severity: 'low' | 'medium' | 'high' | 'critical'\n    description: string\n    recommendation: string\n  }>\n} {\n  const violations = []\n\n  // 1. 비정상적인 접근 패턴 감지\n  const suspiciousAccess = detectSuspiciousAccess()\n  if (suspiciousAccess.length > 0) {\n    violations.push({\n      type: 'suspicious_access',\n      severity: 'high',\n      description: `${suspiciousAccess.length}건의 비정상적인 접근이 감지되었습니다.`,\n      recommendation: '해당 사용자의 접근을 제한하고 추가 조사를 수행하세요.'\n    })\n  }\n\n  // 2. 권한 상승 시도 감지\n  const privilegeEscalation = detectPrivilegeEscalation()\n  if (privilegeEscalation.length > 0) {\n    violations.push({\n      type: 'privilege_escalation',\n      severity: 'critical',\n      description: `${privilegeEscalation.length}건의 권한 상승 시도가 감지되었습니다.`,\n      recommendation: '즉시 해당 계정을 비활성화하고 보안팀에 보고하세요.'\n    })\n  }\n\n  // 3. 대량 데이터 접근 감지\n  const bulkDataAccess = detectBulkDataAccess()\n  if (bulkDataAccess.length > 0) {\n    violations.push({\n      type: 'bulk_data_access',\n      severity: 'medium',\n      description: `${bulkDataAccess.length}건의 대량 데이터 접근이 감지되었습니다.`,\n      recommendation: '해당 접근의 정당성을 확인하고 필요시 접근을 제한하세요.'\n    })\n  }\n\n  return { violations }\n}\n\n// 비정상적인 접근 패턴 감지\nfunction detectSuspiciousAccess(): unknown[] {\n  // 실제 구현에서는 접근 로그를 분석\n  return []\n}\n\n// 권한 상승 시도 감지\nfunction detectPrivilegeEscalation(): unknown[] {\n  // 실제 구현에서는 권한 변경 로그를 분석\n  return []\n}\n\n// 대량 데이터 접근 감지\nfunction detectBulkDataAccess(): unknown[] {\n  // 실제 구현에서는 데이터 접근 로그를 분석\n  return []\n}\n\n// 보안 정책 업데이트\nexport function updateSecurityPolicy(policyType: string, policyData: any): void {\n  securityPolicies.update(policies => ({\n    ...policies,\n    [policyType]: policyData\n  }))\n\n  // 정책 변경 감사 로그\n  createAuditLog(\n    'current-user',\n    'update_security_policy',\n    'security_policy',\n    policyType,\n    {},\n    policyData\n  )\n}\n\n// 접근 제어 정책 업데이트\nexport function updateAccessControlPolicy(policyType: string, policyData: any): void {\n  accessControl.update(policies => ({\n    ...policies,\n    [policyType]: policyData\n  }))\n\n  // 정책 변경 감사 로그\n  createAuditLog(\n    'current-user',\n    'update_access_control',\n    'access_control',\n    policyType,\n    {},\n    policyData\n  )\n}\n\n// 보안 대시보드 데이터\nexport function getSecurityDashboardData(): any {\n  const recentLogs = getAuditLogs().slice(0, 10)\n  const violations = detectSecurityViolations()\n\n  return {\n    recentLogs,\n    violations: violations.violations,\n    totalLogs: getAuditLogs().length,\n    securityEvents: {\n      login: getAuditLogs({ action: 'security_login' }).length,\n      logout: getAuditLogs({ action: 'security_logout' }).length,\n      accessDenied: getAuditLogs({ action: 'security_access_denied' }).length,\n      dataExport: getAuditLogs({ action: 'security_data_export' }).length\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/budget-workflow.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5766,5769],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5766,5769],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'requiredDocs' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":227,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8820,8823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8820,8823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":351,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":351,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9462,9465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9462,9465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9481,9484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9481,9484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { BudgetCategoryMaster, ExpenseItem, Approval } from './types'\n\n// 예산 카테고리 마스터 데이터\nexport const budgetCategoryMaster = writable<BudgetCategoryMaster[]>([\n  {\n    categoryCode: 'PERSONNEL_CASH',\n    nameKo: '인건비(현금)',\n    requiredDocs: [\n      { type: 'participation_assignment', required: true, templateId: 'TMP-PA-001' },\n      { type: 'salary_statement', required: true, templateId: 'TMP-SS-001' },\n      { type: 'insurance_tax', required: true, templateId: 'TMP-IT-001' },\n      { type: 'salary_allocation', required: true, templateId: 'TMP-SA-001' }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R4',\n      secondary: 'R2'\n    }\n  },\n  {\n    categoryCode: 'PERSONNEL_IN_KIND',\n    nameKo: '인건비(현물)',\n    requiredDocs: [\n      { type: 'participation_assignment', required: true, templateId: 'TMP-PA-001' },\n      { type: 'salary_statement', required: true, templateId: 'TMP-SS-001' },\n      { type: 'insurance_tax', required: true, templateId: 'TMP-IT-001' },\n      { type: 'salary_allocation', required: true, templateId: 'TMP-SA-001' }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R4',\n      secondary: 'R2'\n    }\n  },\n  {\n    categoryCode: 'MATERIAL',\n    nameKo: '재료비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'quote', required: true, templateId: 'TMP-QTE-001' },\n      { type: 'purchase_order', required: true, templateId: 'TMP-PO-001' },\n      { type: 'tax_invoice', required: true },\n      { type: 'delivery_note', required: true },\n      { type: 'inspection_report', required: true, templateId: 'TMP-INS-001' }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 10\n    },\n    defaultSlaDays: 10,\n    defaultOwners: {\n      primary: 'R3',\n      secondary: 'R4'\n    }\n  },\n  {\n    categoryCode: 'RESEARCH_ACTIVITY',\n    nameKo: '연구활동비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'activity_plan', required: true, templateId: 'TMP-AP-001' },\n      { type: 'activity_report', required: true, templateId: 'TMP-AR-001' },\n      { type: 'receipt', required: true }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R2',\n      secondary: 'R4'\n    }\n  },\n  {\n    categoryCode: 'TRAVEL',\n    nameKo: '출장비',\n    requiredDocs: [\n      { type: 'travel_plan', required: true, templateId: 'TMP-TP-001' },\n      { type: 'transport_receipt', required: true },\n      { type: 'accommodation_receipt', required: true },\n      { type: 'travel_report', required: true, templateId: 'TMP-TR-001' }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 3\n    },\n    defaultSlaDays: 3,\n    defaultOwners: {\n      primary: 'R2',\n      secondary: 'R4'\n    }\n  },\n  {\n    categoryCode: 'MEETING',\n    nameKo: '회의비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'attendee_list', required: true, templateId: 'TMP-AL-001' },\n      { type: 'receipt', required: true },\n      { type: 'meeting_minutes', required: true, templateId: 'TMP-MM-001' }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 3\n    },\n    defaultSlaDays: 3,\n    defaultOwners: {\n      primary: 'R3',\n      secondary: 'R4'\n    }\n  },\n  {\n    categoryCode: 'PATENT',\n    nameKo: '특허출원비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'patent_specification', required: true, templateId: 'TMP-PS-001' },\n      { type: 'power_of_attorney', required: true, templateId: 'TMP-POA-001' },\n      { type: 'fee_receipt', required: true }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'LAB_HEAD_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5\n    },\n    defaultSlaDays: 5,\n    defaultOwners: {\n      primary: 'R3',\n      secondary: 'R4'\n    }\n  },\n  {\n    categoryCode: 'OFFICE_SUPPLIES',\n    nameKo: '사무용품비',\n    requiredDocs: [\n      { type: 'requisition', required: true, templateId: 'TMP-REQ-001' },\n      { type: 'quote', required: true, templateId: 'TMP-QTE-001' },\n      { type: 'receipt', required: true },\n      { type: 'receipt_confirmation', required: true, templateId: 'TMP-RC-001' }\n    ],\n    defaultWorkflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 3\n    },\n    defaultSlaDays: 3,\n    defaultOwners: {\n      primary: 'R4',\n      secondary: 'R4'\n    }\n  }\n])\n\n// 워크플로우 상태\nexport const workflowStates = writable<Record<string, unknown>>({})\n\n// 카테고리별 필수 문서 체크리스트 생성\nexport function generateDocumentChecklist(\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[]\n): Array<{\n  type: string\n  required: boolean\n  templateId?: string\n  status: 'pending' | 'uploaded' | 'verified'\n  uploadedAt?: string\n  verifiedBy?: string\n}> {\n  const category = categoryMaster.find(c => c.categoryCode === categoryCode)\n  if (!category) return []\n\n  return category.requiredDocs.map(doc => ({\n    type: doc.type,\n    required: doc.required,\n    templateId: doc.templateId,\n    status: 'pending' as const\n  }))\n}\n\n// 문서 업로드 상태 업데이트\nexport function updateDocumentStatus(\n  expenseId: string,\n  documentType: string,\n  status: 'uploaded' | 'verified',\n  verifiedBy?: string\n): void {\n  workflowStates.update(states => {\n    const expenseState = states[expenseId] || { documents: [] }\n    const docIndex = expenseState.documents.findIndex((doc: any) => doc.type === documentType)\n\n    if (docIndex !== -1) {\n      expenseState.documents[docIndex] = {\n        ...expenseState.documents[docIndex],\n        status,\n        uploadedAt:\n          status === 'uploaded'\n            ? new Date().toISOString()\n            : expenseState.documents[docIndex].uploadedAt,\n        verifiedBy: status === 'verified' ? verifiedBy : expenseState.documents[docIndex].verifiedBy\n      }\n    }\n\n    return {\n      ...states,\n      [expenseId]: expenseState\n    }\n  })\n}\n\n// 필수 문서 완료 여부 체크\nexport function isDocumentChecklistComplete(\n  expenseId: string,\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[]\n): boolean {\n  const category = categoryMaster.find(c => c.categoryCode === categoryCode)\n  if (!category) return false\n\n  const requiredDocs = category.requiredDocs.filter(doc => doc.required)\n\n  // 실제 구현에서는 documents 스토어에서 확인\n  // 여기서는 간단히 true 반환\n  return true\n}\n\n// 워크플로우 단계별 승인자 결정\nexport function getApproversForStep(\n  categoryCode: string,\n  step: string,\n  categoryMaster: BudgetCategoryMaster[]\n): string[] {\n  const category = categoryMaster.find(c => c.categoryCode === categoryCode)\n  if (!category) return []\n\n  switch (step) {\n    case 'PM_APPROVAL':\n      return ['R2'] // PM\n    case 'LAB_HEAD_APPROVAL':\n      return ['R5'] // 연구소장\n    case 'SUPPORT_REVIEW':\n      return ['R4'] // 경영지원\n    default:\n      return []\n  }\n}\n\n// SLA 기반 마감일 계산\nexport function calculateSlaDeadline(\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[]\n): Date {\n  const category = categoryMaster.find(c => c.categoryCode === categoryCode)\n  if (!category) return new Date()\n\n  const deadline = new Date()\n  deadline.setDate(deadline.getDate() + category.defaultSlaDays)\n  return deadline\n}\n\n// 지출 항목 상태 업데이트\nexport function updateExpenseStatus(\n  expenseId: string,\n  status: ExpenseItem['status'],\n  comment?: string\n): void {\n  workflowStates.update(states => {\n    return {\n      ...states,\n      [expenseId]: {\n        ...states[expenseId],\n        status,\n        statusUpdatedAt: new Date().toISOString(),\n        statusComment: comment\n      }\n    }\n  })\n}\n\n// 결재 워크플로우 진행\nexport function processApprovalWorkflow(\n  expenseId: string,\n  approverId: string,\n  decision: Approval['decision'],\n  comment?: string\n): void {\n  workflowStates.update(states => {\n    const expenseState = states[expenseId] || { approvals: [] }\n\n    // 새로운 승인 추가\n    expenseState.approvals = [\n      ...expenseState.approvals,\n      {\n        approverId,\n        decision,\n        comment,\n        decidedAt: new Date().toISOString()\n      }\n    ]\n\n    // 상태 업데이트\n    if (decision === 'approved') {\n      expenseState.currentStep = getNextStep(expenseState.currentStep, expenseState.workflow)\n    } else if (decision === 'rejected') {\n      expenseState.status = 'rejected'\n    } else if (decision === 'returned') {\n      expenseState.status = 'draft'\n    }\n\n    return {\n      ...states,\n      [expenseId]: expenseState\n    }\n  })\n}\n\n// 다음 워크플로우 단계 결정\nfunction getNextStep(currentStep: string, workflow: any): string {\n  const steps = workflow?.steps || []\n  const currentIndex = steps.indexOf(currentStep)\n\n  if (currentIndex === -1 || currentIndex >= steps.length - 1) {\n    return 'completed'\n  }\n\n  return steps[currentIndex + 1]\n}\n\n// 카테고리별 기본 소유자 가져오기\nexport function getDefaultOwners(\n  categoryCode: string,\n  categoryMaster: BudgetCategoryMaster[]\n): {\n  primary: string\n  secondary: string\n} {\n  const category = categoryMaster.find(c => c.categoryCode === categoryCode)\n  if (!category) return { primary: 'R4', secondary: 'R2' }\n\n  return category.defaultOwners\n}\n\n// 워크플로우 상태 가져오기\nexport function getWorkflowState(expenseId: string): any {\n  let state: any = null\n  workflowStates.subscribe(states => {\n    state = states[expenseId]\n  })()\n  return state\n}\n\n// 지출 항목별 문서 체크리스트 가져오기\nexport function getExpenseDocumentChecklist(expenseId: string): unknown[] {\n  const state = getWorkflowState(expenseId)\n  return state?.documents || []\n}\n\n// 지출 항목별 승인 이력 가져오기\nexport function getExpenseApprovalHistory(expenseId: string): unknown[] {\n  const state = getWorkflowState(expenseId)\n  return state?.approvals || []\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/core.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8018,8021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8018,8021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8034,8037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8034,8037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type {\n  Person,\n  Employment,\n  SalaryHistory,\n  Project,\n  ProjectBudgetCategory,\n  Milestone,\n  ParticipationAssignment,\n  ExpenseItem,\n  Document,\n  Approval,\n  ResearchNote,\n  Report,\n  SubmissionBundle,\n  AuditLog,\n  BudgetCategoryMaster,\n  HealthIndicator,\n  Notification,\n  SLAAlert,\n  ReplacementRecommendation\n} from './types'\n\n// 핵심 엔티티 스토어\nexport const persons = writable<Person[]>([])\nexport const employments = writable<Employment[]>([])\nexport const salaryHistory = writable<SalaryHistory[]>([])\nexport const projects = writable<Project[]>([])\nexport const projectBudgetCategories = writable<ProjectBudgetCategory[]>([])\nexport const milestones = writable<Milestone[]>([])\nexport const participationAssignments = writable<ParticipationAssignment[]>([])\nexport const expenseItems = writable<ExpenseItem[]>([])\nexport const documents = writable<Document[]>([])\nexport const approvals = writable<Approval[]>([])\nexport const researchNotes = writable<ResearchNote[]>([])\nexport const reports = writable<Report[]>([])\nexport const submissionBundles = writable<SubmissionBundle[]>([])\nexport const auditLogs = writable<AuditLog[]>([])\nexport const budgetCategoryMaster = writable<BudgetCategoryMaster[]>([])\nexport const healthIndicators = writable<HealthIndicator[]>([])\nexport const notifications = writable<Notification[]>([])\nexport const slaAlerts = writable<SLAAlert[]>([])\nexport const replacementRecommendations = writable<ReplacementRecommendation[]>([])\n\n// CRUD 함수들\nexport function addPerson(person: Omit<Person, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newPerson: Person = {\n    ...person,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  persons.update(list => [...list, newPerson])\n  logAudit('create', 'person', id, {}, newPerson)\n  return id\n}\n\nexport function updatePerson(id: string, updates: Partial<Person>): void {\n  persons.update(list => {\n    const index = list.findIndex(p => p.id === id)\n    if (index === -1) return list\n\n    const oldPerson = list[index]\n    const updatedPerson = { ...oldPerson, ...updates, updatedAt: new Date().toISOString() }\n    const newList = [...list]\n    newList[index] = updatedPerson\n\n    logAudit('update', 'person', id, oldPerson, updatedPerson)\n    return newList\n  })\n}\n\nexport function deletePerson(id: string): void {\n  persons.update(list => {\n    const person = list.find(p => p.id === id)\n    if (person) {\n      logAudit('delete', 'person', id, person, {})\n    }\n    return list.filter(p => p.id !== id)\n  })\n}\n\nexport function addProject(project: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newProject: Project = {\n    ...project,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  projects.update(list => [...list, newProject])\n  logAudit('create', 'project', id, {}, newProject)\n  return id\n}\n\nexport function updateProject(id: string, updates: Partial<Project>): void {\n  projects.update(list => {\n    const index = list.findIndex(p => p.id === id)\n    if (index === -1) return list\n\n    const oldProject = list[index]\n    const updatedProject = { ...oldProject, ...updates, updatedAt: new Date().toISOString() }\n    const newList = [...list]\n    newList[index] = updatedProject\n\n    logAudit('update', 'project', id, oldProject, updatedProject)\n    return newList\n  })\n}\n\nexport function addExpenseItem(\n  expense: Omit<ExpenseItem, 'id' | 'createdAt' | 'updatedAt'>\n): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newExpense: ExpenseItem = {\n    ...expense,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  expenseItems.update(list => [...list, newExpense])\n  logAudit('create', 'expense', id, {}, newExpense)\n  return id\n}\n\nexport function updateExpenseItem(id: string, updates: Partial<ExpenseItem>): void {\n  expenseItems.update(list => {\n    const index = list.findIndex(e => e.id === id)\n    if (index === -1) return list\n\n    const oldExpense = list[index]\n    const updatedExpense = { ...oldExpense, ...updates, updatedAt: new Date().toISOString() }\n    const newList = [...list]\n    newList[index] = updatedExpense\n\n    logAudit('update', 'expense', id, oldExpense, updatedExpense)\n    return newList\n  })\n}\n\nexport function addDocument(document: Omit<Document, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newDocument: Document = {\n    ...document,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  documents.update(list => [...list, newDocument])\n  logAudit('create', 'document', id, {}, newDocument)\n  return id\n}\n\nexport function addApproval(approval: Omit<Approval, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newApproval: Approval = {\n    ...approval,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  approvals.update(list => [...list, newApproval])\n  logAudit('create', 'approval', id, {}, newApproval)\n  return id\n}\n\nexport function updateApproval(id: string, updates: Partial<Approval>): void {\n  approvals.update(list => {\n    const index = list.findIndex(a => a.id === id)\n    if (index === -1) return list\n\n    const oldApproval = list[index]\n    const updatedApproval = { ...oldApproval, ...updates, updatedAt: new Date().toISOString() }\n    const newList = [...list]\n    newList[index] = updatedApproval\n\n    logAudit('update', 'approval', id, oldApproval, updatedApproval)\n    return newList\n  })\n}\n\nexport function addMilestone(milestone: Omit<Milestone, 'id' | 'createdAt' | 'updatedAt'>): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newMilestone: Milestone = {\n    ...milestone,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  milestones.update(list => [...list, newMilestone])\n  logAudit('create', 'milestone', id, {}, newMilestone)\n  return id\n}\n\nexport function updateMilestone(id: string, updates: Partial<Milestone>): void {\n  milestones.update(list => {\n    const index = list.findIndex(m => m.id === id)\n    if (index === -1) return list\n\n    const oldMilestone = list[index]\n    const updatedMilestone = { ...oldMilestone, ...updates, updatedAt: new Date().toISOString() }\n    const newList = [...list]\n    newList[index] = updatedMilestone\n\n    logAudit('update', 'milestone', id, oldMilestone, updatedMilestone)\n    return newList\n  })\n}\n\nexport function addParticipationAssignment(\n  assignment: Omit<ParticipationAssignment, 'id' | 'createdAt' | 'updatedAt'>\n): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newAssignment: ParticipationAssignment = {\n    ...assignment,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  participationAssignments.update(list => [...list, newAssignment])\n  logAudit('create', 'participation', id, {}, newAssignment)\n  return id\n}\n\nexport function addResearchNote(\n  note: Omit<ResearchNote, 'id' | 'createdAt' | 'updatedAt'>\n): string {\n  const id = crypto.randomUUID()\n  const now = new Date().toISOString()\n  const newNote: ResearchNote = {\n    ...note,\n    id,\n    createdAt: now,\n    updatedAt: now\n  }\n\n  researchNotes.update(list => [...list, newNote])\n  logAudit('create', 'research_note', id, {}, newNote)\n  return id\n}\n\nexport function updateResearchNote(id: string, updates: Partial<ResearchNote>): void {\n  researchNotes.update(list => {\n    const index = list.findIndex(n => n.id === id)\n    if (index === -1) return list\n\n    const oldNote = list[index]\n    const updatedNote = { ...oldNote, ...updates, updatedAt: new Date().toISOString() }\n    const newList = [...list]\n    newList[index] = updatedNote\n\n    logAudit('update', 'research_note', id, oldNote, updatedNote)\n    return newList\n  })\n}\n\n// 감사 로그 함수\nexport function logAudit(\n  action: string,\n  entity: string,\n  entityId: string,\n  oldData: any,\n  newData: any\n): void {\n  const auditLog: AuditLog = {\n    id: crypto.randomUUID(),\n    actorId: 'current-user', // 실제로는 현재 사용자 ID\n    action,\n    entity,\n    entityId,\n    diff: { old: oldData, new: newData },\n    at: new Date().toISOString()\n  }\n\n  auditLogs.update(list => [...list, auditLog])\n}\n\n// 유틸리티 함수들\nexport function getPersonById(id: string, personList: Person[]): Person | undefined {\n  return personList.find(p => p.id === id)\n}\n\nexport function getProjectById(id: string, projectList: Project[]): Project | undefined {\n  return projectList.find(p => p.id === id)\n}\n\nexport function getExpenseItemsByProject(\n  projectId: string,\n  expenseList: ExpenseItem[]\n): ExpenseItem[] {\n  return expenseList.filter(e => e.projectId === projectId)\n}\n\nexport function getMilestonesByProject(projectId: string, milestoneList: Milestone[]): Milestone[] {\n  return milestoneList.filter(m => m.projectId === projectId)\n}\n\nexport function getParticipationAssignmentsByProject(\n  projectId: string,\n  assignmentList: ParticipationAssignment[]\n): ParticipationAssignment[] {\n  return assignmentList.filter(a => a.projectId === projectId)\n}\n\nexport function getParticipationAssignmentsByPerson(\n  personId: string,\n  assignmentList: ParticipationAssignment[]\n): ParticipationAssignment[] {\n  return assignmentList.filter(a => a.personId === personId)\n}\n\nexport function getDocumentsByExpense(expenseId: string, documentList: Document[]): Document[] {\n  return documentList.filter(d => d.expenseId === expenseId)\n}\n\nexport function getApprovalsBySubject(\n  subjectType: string,\n  subjectId: string,\n  approvalList: Approval[]\n): Approval[] {\n  return approvalList.filter(a => a.subjectType === subjectType && a.subjectId === subjectId)\n}\n\nexport function getResearchNotesByProject(\n  projectId: string,\n  noteList: ResearchNote[]\n): ResearchNote[] {\n  return noteList.filter(n => n.projectId === projectId)\n}\n\nexport function getActiveProjects(projectList: Project[]): Project[] {\n  return projectList.filter(p => p.status === 'active')\n}\n\nexport function getActivePersons(personList: Person[]): Person[] {\n  return personList.filter(p => p.active)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/expense-workflow.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3500,3503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3500,3503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6427,6430],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6427,6430],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":256,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":256,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6449,6452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6449,6452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":402,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":402,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10572,10575],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10572,10575],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { ExpenseItem, Approval, SLAAlert, Notification } from './types'\nimport { logAudit } from './core'\n\n// 지출 워크플로우 상태\nexport const expenseWorkflows = writable<Record<string, unknown>>({})\n\n// SLA 알림\nexport const slaAlerts = writable<SLAAlert[]>([])\n\n// 알림\nexport const notifications = writable<Notification[]>([])\n\n// 지출 워크플로우 단계\nexport const EXPENSE_WORKFLOW_STEPS = {\n  DRAFT: 'draft',\n  PENDING_APPROVAL: 'pending-approval',\n  APPROVED: 'approved',\n  EXECUTED: 'executed',\n  COMPLETED: 'completed',\n  REJECTED: 'rejected',\n  RETURNED: 'returned'\n} as const\n\n// 지출 워크플로우 시작\nexport function startExpenseWorkflow(\n  expenseId: string,\n  categoryCode: string,\n  requesterId: string,\n  amount: number,\n  description?: string\n): void {\n  const workflow = {\n    expenseId,\n    categoryCode,\n    requesterId,\n    amount,\n    description,\n    status: EXPENSE_WORKFLOW_STEPS.DRAFT,\n    currentStep: 'PM_APPROVAL',\n    workflow: {\n      steps: ['PM_APPROVAL', 'SUPPORT_REVIEW'],\n      sla: 5\n    },\n    documents: [],\n    approvals: [],\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n    slaDeadline: calculateSlaDeadline(categoryCode)\n  }\n\n  expenseWorkflows.update(workflows => ({\n    ...workflows,\n    [expenseId]: workflow\n  }))\n\n  logAudit('create', 'expense_workflow', expenseId, {}, workflow)\n}\n\n// 문서 업로드\nexport function uploadDocument(\n  expenseId: string,\n  documentType: string,\n  filename: string,\n  storageUrl: string,\n  sha256: string\n): void {\n  const document = {\n    id: crypto.randomUUID(),\n    type: documentType,\n    filename,\n    storageUrl,\n    sha256,\n    version: 1,\n    uploadedAt: new Date().toISOString(),\n    uploadedBy: 'current-user'\n  }\n\n  expenseWorkflows.update(workflows => {\n    const workflow = workflows[expenseId]\n    if (!workflow) return workflows\n\n    const updatedWorkflow = {\n      ...workflow,\n      documents: [...workflow.documents, document],\n      updatedAt: new Date().toISOString()\n    }\n\n    return {\n      ...workflows,\n      [expenseId]: updatedWorkflow\n    }\n  })\n\n  logAudit('upload', 'document', document.id, {}, document)\n}\n\n// 결재 진행\nexport function processApproval(\n  expenseId: string,\n  approverId: string,\n  decision: Approval['decision'],\n  comment?: string\n): void {\n  const approval = {\n    id: crypto.randomUUID(),\n    approverId,\n    decision,\n    comment,\n    decidedAt: new Date().toISOString()\n  }\n\n  expenseWorkflows.update(workflows => {\n    const workflow = workflows[expenseId]\n    if (!workflow) return workflows\n\n    const updatedWorkflow = {\n      ...workflow,\n      approvals: [...workflow.approvals, approval],\n      updatedAt: new Date().toISOString()\n    }\n\n    // 다음 단계 결정\n    if (decision === 'approved') {\n      updatedWorkflow.currentStep = getNextStep(workflow.currentStep, workflow.workflow)\n      updatedWorkflow.status = getStatusFromStep(updatedWorkflow.currentStep)\n    } else if (decision === 'rejected') {\n      updatedWorkflow.status = EXPENSE_WORKFLOW_STEPS.REJECTED\n    } else if (decision === 'returned') {\n      updatedWorkflow.status = EXPENSE_WORKFLOW_STEPS.RETURNED\n      updatedWorkflow.currentStep = 'PM_APPROVAL'\n    }\n\n    return {\n      ...workflows,\n      [expenseId]: updatedWorkflow\n    }\n  })\n\n  logAudit('approve', 'expense', expenseId, { decision, comment }, approval)\n\n  // 알림 생성\n  createApprovalNotification(expenseId, decision, comment)\n}\n\n// 다음 워크플로우 단계 결정\nfunction getNextStep(currentStep: string, workflow: any): string {\n  const steps = workflow?.steps || []\n  const currentIndex = steps.indexOf(currentStep)\n\n  if (currentIndex === -1 || currentIndex >= steps.length - 1) {\n    return 'completed'\n  }\n\n  return steps[currentIndex + 1]\n}\n\n// 단계에서 상태 결정\nfunction getStatusFromStep(step: string): string {\n  switch (step) {\n    case 'PM_APPROVAL':\n      return EXPENSE_WORKFLOW_STEPS.PENDING_APPROVAL\n    case 'SUPPORT_REVIEW':\n      return EXPENSE_WORKFLOW_STEPS.APPROVED\n    case 'completed':\n      return EXPENSE_WORKFLOW_STEPS.COMPLETED\n    default:\n      return EXPENSE_WORKFLOW_STEPS.DRAFT\n  }\n}\n\n// SLA 마감일 계산\nfunction calculateSlaDeadline(categoryCode: string): string {\n  const slaDays = getSlaDaysForCategory(categoryCode)\n  const deadline = new Date()\n  deadline.setDate(deadline.getDate() + slaDays)\n  return deadline.toISOString()\n}\n\n// 카테고리별 SLA 일수\nfunction getSlaDaysForCategory(categoryCode: string): number {\n  const slaMap: Record<string, number> = {\n    PERSONNEL_CASH: 5,\n    PERSONNEL_IN_KIND: 5,\n    MATERIAL: 10,\n    RESEARCH_ACTIVITY: 5,\n    TRAVEL: 3,\n    MEETING: 3,\n    PATENT: 5,\n    OFFICE_SUPPLIES: 3\n  }\n\n  return slaMap[categoryCode] || 5\n}\n\n// SLA 알림 생성\nexport function createSlaAlert(\n  expenseId: string,\n  alertType: 'sla-warning' | 'sla-breach' | 'escalation',\n  message: string,\n  severity: 'low' | 'medium' | 'high' | 'critical'\n): void {\n  const alert: SLAAlert = {\n    id: crypto.randomUUID(),\n    entityType: 'expense',\n    entityId: expenseId,\n    alertType,\n    message,\n    severity,\n    assignedTo: getAssignedUsersForAlert(expenseId, alertType),\n    status: 'active',\n    createdAt: new Date().toISOString()\n  }\n\n  slaAlerts.update(alerts => [...alerts, alert])\n}\n\n// 알림 생성\nfunction createApprovalNotification(\n  expenseId: string,\n  decision: Approval['decision'],\n  comment?: string\n): void {\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user', // 실제로는 관련자 ID\n    title: `지출 승인 ${decision === 'approved' ? '완료' : decision === 'rejected' ? '거부' : '반려'}`,\n    message: `지출 항목 ${expenseId}이 ${decision === 'approved' ? '승인' : decision === 'rejected' ? '거부' : '반려'}되었습니다.${comment ? ` 코멘트: ${comment}` : ''}`,\n    type: decision === 'approved' ? 'success' : 'warning',\n    priority: 'medium',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString()\n  }\n\n  notifications.update(notifications => [...notifications, notification])\n}\n\n// 알림 대상자 결정\nfunction getAssignedUsersForAlert(expenseId: string, alertType: string): string[] {\n  // 실제 구현에서는 워크플로우 상태를 확인하여 관련자 결정\n  switch (alertType) {\n    case 'sla-warning':\n      return ['PM', 'SUPPORT']\n    case 'sla-breach':\n      return ['PM', 'SUPPORT', 'LAB_HEAD']\n    case 'escalation':\n      return ['LAB_HEAD', 'EXECUTIVE']\n    default:\n      return ['PM']\n  }\n}\n\n// 지출 워크플로우 상태 가져오기\nexport function getExpenseWorkflow(expenseId: string): any {\n  let workflow: any = null\n  expenseWorkflows.subscribe(workflows => {\n    workflow = workflows[expenseId]\n  })()\n  return workflow\n}\n\n// 지출 항목별 문서 목록 가져오기\nexport function getExpenseDocuments(expenseId: string): unknown[] {\n  const workflow = getExpenseWorkflow(expenseId)\n  return workflow?.documents || []\n}\n\n// 지출 항목별 승인 이력 가져오기\nexport function getExpenseApprovals(expenseId: string): unknown[] {\n  const workflow = getExpenseWorkflow(expenseId)\n  return workflow?.approvals || []\n}\n\n// SLA 상태 체크\nexport function checkSlaStatus(expenseId: string): {\n  status: 'on-time' | 'warning' | 'breach'\n  daysRemaining: number\n  deadline: string\n} {\n  const workflow = getExpenseWorkflow(expenseId)\n  if (!workflow) {\n    return { status: 'on-time', daysRemaining: 0, deadline: '' }\n  }\n\n  const now = new Date()\n  const deadline = new Date(workflow.slaDeadline)\n  const daysRemaining = Math.ceil((deadline.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n\n  if (daysRemaining < 0) {\n    return { status: 'breach', daysRemaining, deadline: workflow.slaDeadline }\n  } else if (daysRemaining <= 1) {\n    return { status: 'warning', daysRemaining, deadline: workflow.slaDeadline }\n  } else {\n    return { status: 'on-time', daysRemaining, deadline: workflow.slaDeadline }\n  }\n}\n\n// 지출 항목 상태 업데이트\nexport function updateExpenseStatus(\n  expenseId: string,\n  status: ExpenseItem['status'],\n  comment?: string\n): void {\n  expenseWorkflows.update(workflows => {\n    const workflow = workflows[expenseId]\n    if (!workflow) return workflows\n\n    const updatedWorkflow = {\n      ...workflow,\n      status,\n      statusUpdatedAt: new Date().toISOString(),\n      statusComment: comment,\n      updatedAt: new Date().toISOString()\n    }\n\n    return {\n      ...workflows,\n      [expenseId]: updatedWorkflow\n    }\n  })\n\n  logAudit('update', 'expense_status', expenseId, { status, comment }, {})\n}\n\n// 지출 항목 완료 처리\nexport function completeExpense(expenseId: string, comment?: string): void {\n  updateExpenseStatus(expenseId, EXPENSE_WORKFLOW_STEPS.COMPLETED, comment)\n\n  // 완료 알림 생성\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user',\n    title: '지출 항목 완료',\n    message: `지출 항목 ${expenseId}이 완료되었습니다.`,\n    type: 'success',\n    priority: 'low',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString()\n  }\n\n  notifications.update(notifications => [...notifications, notification])\n}\n\n// 지출 항목 거부 처리\nexport function rejectExpense(expenseId: string, reason: string): void {\n  updateExpenseStatus(expenseId, EXPENSE_WORKFLOW_STEPS.REJECTED, reason)\n\n  // 거부 알림 생성\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user',\n    title: '지출 항목 거부',\n    message: `지출 항목 ${expenseId}이 거부되었습니다. 사유: ${reason}`,\n    type: 'error',\n    priority: 'high',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString()\n  }\n\n  notifications.update(notifications => [...notifications, notification])\n}\n\n// 지출 항목 반려 처리\nexport function returnExpense(expenseId: string, reason: string): void {\n  updateExpenseStatus(expenseId, EXPENSE_WORKFLOW_STEPS.RETURNED, reason)\n\n  // 반려 알림 생성\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user',\n    title: '지출 항목 반려',\n    message: `지출 항목 ${expenseId}이 반려되었습니다. 사유: ${reason}`,\n    type: 'warning',\n    priority: 'medium',\n    read: false,\n    actionUrl: `/project-management/expenses/${expenseId}`,\n    createdAt: new Date().toISOString()\n  }\n\n  notifications.update(notifications => [...notifications, notification])\n}\n\n// 지출 항목별 필수 문서 체크\nexport function checkRequiredDocuments(\n  expenseId: string,\n  categoryCode: string\n): {\n  complete: boolean\n  missing: string[]\n  uploaded: string[]\n} {\n  const workflow = getExpenseWorkflow(expenseId)\n  if (!workflow) {\n    return { complete: false, missing: [], uploaded: [] }\n  }\n\n  // 카테고리별 필수 문서 목록 (실제로는 budgetCategoryMaster에서 가져옴)\n  const requiredDocs = getRequiredDocumentsForCategory(categoryCode)\n  const uploadedDocs = workflow.documents.map((doc: any) => doc.type)\n\n  const missing = requiredDocs.filter(doc => !uploadedDocs.includes(doc))\n  const complete = missing.length === 0\n\n  return { complete, missing, uploaded: uploadedDocs }\n}\n\n// 카테고리별 필수 문서 목록\nfunction getRequiredDocumentsForCategory(categoryCode: string): string[] {\n  const docMap: Record<string, string[]> = {\n    PERSONNEL_CASH: [\n      'participation_assignment',\n      'salary_statement',\n      'insurance_tax',\n      'salary_allocation'\n    ],\n    PERSONNEL_IN_KIND: [\n      'participation_assignment',\n      'salary_statement',\n      'insurance_tax',\n      'salary_allocation'\n    ],\n    MATERIAL: [\n      'requisition',\n      'quote',\n      'purchase_order',\n      'tax_invoice',\n      'delivery_note',\n      'inspection_report'\n    ],\n    RESEARCH_ACTIVITY: ['requisition', 'activity_plan', 'activity_report', 'receipt'],\n    TRAVEL: ['travel_plan', 'transport_receipt', 'accommodation_receipt', 'travel_report'],\n    MEETING: ['requisition', 'attendee_list', 'receipt', 'meeting_minutes'],\n    PATENT: ['requisition', 'patent_specification', 'power_of_attorney', 'fee_receipt'],\n    OFFICE_SUPPLIES: ['requisition', 'quote', 'receipt', 'receipt_confirmation']\n  }\n\n  return docMap[categoryCode] || []\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/global-factors.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/health-indicators.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":63,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":83,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":141,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":156,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":156,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":166,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":202,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":231,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":231,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":248,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":248,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":295,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":295,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":315,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":315,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":332,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":351,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":351,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":404,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":404,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13270,13273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13270,13273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":480,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":480,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15423,15426],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15423,15426],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":13,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { HealthIndicator } from './types'\nimport { logAudit } from './core'\nimport { logger } from '$lib/utils/logger'\n\n// 헬스 인디케이터 관리\nexport const healthIndicators = writable<HealthIndicator[]>([])\nexport const healthRules = writable<Record<string, unknown>>({})\n\n// 헬스 인디케이터 계산\nexport function calculateHealthIndicator(projectId: string): HealthIndicator {\n  const scheduleScore = calculateScheduleHealth(projectId)\n  const budgetScore = calculateBudgetHealth(projectId)\n  const peopleScore = calculatePeopleHealth(projectId)\n  const riskScore = calculateRiskHealth(projectId)\n\n  const overallScore = (scheduleScore + budgetScore + peopleScore + riskScore) / 4\n  const overallStatus = determineOverallStatus(overallScore)\n\n  const indicator: HealthIndicator = {\n    projectId,\n    schedule: scheduleScore,\n    budget: budgetScore,\n    people: peopleScore,\n    risk: riskScore,\n    overall: overallStatus,\n    lastUpdated: new Date().toISOString()\n  }\n\n  // 기존 인디케이터 업데이트 또는 새로 생성\n  healthIndicators.update(list => {\n    const index = list.findIndex(h => h.projectId === projectId)\n    if (index !== -1) {\n      const newList = [...list]\n      newList[index] = indicator\n      return newList\n    } else {\n      return [...list, indicator]\n    }\n  })\n\n  logAudit('calculate', 'health_indicator', projectId, {}, indicator)\n\n  return indicator\n}\n\n// 일정 헬스 계산\nfunction calculateScheduleHealth(projectId: string): number {\n  // 1. 마일스톤 달성률 (40%)\n  const milestoneScore = calculateMilestoneHealth(projectId)\n\n  // 2. 산출물 제출률 (30%)\n  const deliverableScore = calculateDeliverableHealth(projectId)\n\n  // 3. 일정 준수율 (30%)\n  const scheduleComplianceScore = calculateScheduleCompliance(projectId)\n\n  const totalScore = milestoneScore * 0.4 + deliverableScore * 0.3 + scheduleComplianceScore * 0.3\n  return Math.round(totalScore)\n}\n\n// 마일스톤 헬스 계산\nfunction calculateMilestoneHealth(projectId: string): number {\n  // 실제 구현에서는 milestones 스토어에서 데이터 가져오기\n  const mockMilestones = [\n    { status: 'completed', dueDate: '2024-01-15', completedDate: '2024-01-14' },\n    { status: 'in-progress', dueDate: '2024-01-30', completedDate: null },\n    { status: 'not-started', dueDate: '2024-02-15', completedDate: null },\n    { status: 'delayed', dueDate: '2024-01-20', completedDate: null }\n  ]\n\n  const totalMilestones = mockMilestones.length\n  const completedMilestones = mockMilestones.filter(m => m.status === 'completed').length\n  const delayedMilestones = mockMilestones.filter(m => m.status === 'delayed').length\n\n  const completionRate = (completedMilestones / totalMilestones) * 100\n  const delayPenalty = delayedMilestones * 10 // 지연당 10점 감점\n\n  return Math.max(0, completionRate - delayPenalty)\n}\n\n// 산출물 헬스 계산\nfunction calculateDeliverableHealth(projectId: string): number {\n  // 실제 구현에서는 deliverables 데이터를 분석\n  const mockDeliverables = [\n    { status: 'delivered', dueDate: '2024-01-15', deliveredDate: '2024-01-14' },\n    { status: 'delivered', dueDate: '2024-01-20', deliveredDate: '2024-01-18' },\n    { status: 'pending', dueDate: '2024-01-25', deliveredDate: null },\n    { status: 'overdue', dueDate: '2024-01-10', deliveredDate: null }\n  ]\n\n  const totalDeliverables = mockDeliverables.length\n  const deliveredDeliverables = mockDeliverables.filter(d => d.status === 'delivered').length\n  const overdueDeliverables = mockDeliverables.filter(d => d.status === 'overdue').length\n\n  const deliveryRate = (deliveredDeliverables / totalDeliverables) * 100\n  const overduePenalty = overdueDeliverables * 15 // 연체당 15점 감점\n\n  return Math.max(0, deliveryRate - overduePenalty)\n}\n\n// 일정 준수율 계산\nfunction calculateScheduleCompliance(projectId: string): number {\n  // 실제 구현에서는 프로젝트 일정과 실제 진행률을 비교\n  const projectStart = new Date('2024-01-01')\n  const projectEnd = new Date('2024-12-31')\n  const currentDate = new Date()\n\n  const totalDuration = projectEnd.getTime() - projectStart.getTime()\n  const elapsedDuration = currentDate.getTime() - projectStart.getTime()\n  const expectedProgress = (elapsedDuration / totalDuration) * 100\n\n  // 실제 진행률 (마일스톤 기반)\n  const actualProgress = 65 // 실제 구현에서는 계산\n\n  const complianceRate = Math.min(100, (actualProgress / expectedProgress) * 100)\n\n  if (complianceRate >= 100) return 100\n  if (complianceRate >= 90) return 90\n  if (complianceRate >= 80) return 80\n  if (complianceRate >= 70) return 70\n  return Math.max(0, complianceRate)\n}\n\n// 예산 헬스 계산\nfunction calculateBudgetHealth(projectId: string): number {\n  // 1. 예산 집행률 (40%)\n  const executionScore = calculateBudgetExecutionScore(projectId)\n\n  // 2. 예산 효율성 (30%)\n  const efficiencyScore = calculateBudgetEfficiencyScore(projectId)\n\n  // 3. 예산 편차 (30%)\n  const varianceScore = calculateBudgetVarianceScore(projectId)\n\n  const totalScore = executionScore * 0.4 + efficiencyScore * 0.3 + varianceScore * 0.3\n  return Math.round(totalScore)\n}\n\n// 예산 집행률 점수 계산\nfunction calculateBudgetExecutionScore(projectId: string): number {\n  // 실제 구현에서는 예산 데이터를 분석\n  const totalBudget = 100000000\n  const executedAmount = 60000000\n  const executionRate = (executedAmount / totalBudget) * 100\n\n  // 이상적인 집행률은 70-90%\n  if (executionRate >= 70 && executionRate <= 90) return 100\n  if (executionRate >= 60 && executionRate < 70) return 80\n  if (executionRate > 90 && executionRate <= 100) return 70\n  if (executionRate >= 50 && executionRate < 60) return 60\n  return Math.max(0, executionRate)\n}\n\n// 예산 효율성 점수 계산\nfunction calculateBudgetEfficiencyScore(projectId: string): number {\n  // 실제 구현에서는 ROI, 비용 대비 성과 등을 분석\n  const plannedROI = 150 // 계획된 ROI (%)\n  const actualROI = 120 // 실제 ROI (%)\n\n  const efficiencyRate = (actualROI / plannedROI) * 100\n  return Math.min(100, efficiencyRate)\n}\n\n// 예산 편차 점수 계산\nfunction calculateBudgetVarianceScore(projectId: string): number {\n  // 실제 구현에서는 카테고리별 예산 편차를 분석\n  const categoryVariances = [\n    { category: 'PERSONNEL_CASH', variance: 5 }, // 5% 편차\n    { category: 'MATERIAL', variance: -10 }, // 10% 절약\n    { category: 'RESEARCH_ACTIVITY', variance: 15 } // 15% 초과\n  ]\n\n  const averageVariance =\n    categoryVariances.reduce((sum, cat) => sum + Math.abs(cat.variance), 0) /\n    categoryVariances.length\n\n  // 편차가 적을수록 높은 점수\n  if (averageVariance <= 5) return 100\n  if (averageVariance <= 10) return 80\n  if (averageVariance <= 15) return 60\n  if (averageVariance <= 20) return 40\n  return Math.max(0, 100 - averageVariance)\n}\n\n// 인력 헬스 계산\nfunction calculatePeopleHealth(projectId: string): number {\n  // 1. 참여율 충족도 (40%)\n  const participationScore = calculateParticipationHealth(projectId)\n\n  // 2. 인력 안정성 (30%)\n  const stabilityScore = calculateStabilityHealth(projectId)\n\n  // 3. 성과 수준 (30%)\n  const performanceScore = calculatePerformanceHealth(projectId)\n\n  const totalScore = participationScore * 0.4 + stabilityScore * 0.3 + performanceScore * 0.3\n  return Math.round(totalScore)\n}\n\n// 참여율 헬스 계산\nfunction calculateParticipationHealth(projectId: string): number {\n  // 실제 구현에서는 participationAssignments 데이터를 분석\n  const mockParticipants = [\n    { personId: 'person-1', assignedRate: 100, actualRate: 95 },\n    { personId: 'person-2', assignedRate: 80, actualRate: 85 },\n    { personId: 'person-3', assignedRate: 60, actualRate: 55 },\n    { personId: 'person-4', assignedRate: 100, actualRate: 100 }\n  ]\n\n  const totalParticipants = mockParticipants.length\n  let totalScore = 0\n\n  mockParticipants.forEach(participant => {\n    const rate = participant.actualRate / participant.assignedRate\n    if (rate >= 0.9 && rate <= 1.1) {\n      totalScore += 100 // 이상적인 참여율\n    } else if (rate >= 0.8 && rate < 0.9) {\n      totalScore += 80 // 약간 부족\n    } else if (rate > 1.1 && rate <= 1.2) {\n      totalScore += 70 // 약간 초과\n    } else {\n      totalScore += Math.max(0, rate * 100) // 비례 점수\n    }\n  })\n\n  return totalScore / totalParticipants\n}\n\n// 인력 안정성 헬스 계산\nfunction calculateStabilityHealth(projectId: string): number {\n  // 실제 구현에서는 인력 이탈률, 교체 빈도 등을 분석\n  const mockStabilityData = {\n    totalParticipants: 8,\n    departures: 1,\n    replacements: 1,\n    averageTenure: 18, // months\n    turnoverRate: 12.5 // %\n  }\n\n  const turnoverScore = Math.max(0, 100 - mockStabilityData.turnoverRate * 2)\n  const tenureScore = Math.min(100, mockStabilityData.averageTenure * 5)\n\n  return (turnoverScore + tenureScore) / 2\n}\n\n// 성과 수준 헬스 계산\nfunction calculatePerformanceHealth(projectId: string): number {\n  // 실제 구현에서는 성과 평가 데이터를 분석\n  const mockPerformanceData = {\n    excellent: 3,\n    good: 4,\n    average: 1,\n    belowAverage: 0,\n    poor: 0\n  }\n\n  const totalParticipants = Object.values(mockPerformanceData).reduce(\n    (sum, count) => sum + count,\n    0\n  )\n  const weightedScore =\n    mockPerformanceData.excellent * 100 +\n    mockPerformanceData.good * 80 +\n    mockPerformanceData.average * 60 +\n    mockPerformanceData.belowAverage * 40 +\n    mockPerformanceData.poor * 20\n\n  return weightedScore / totalParticipants\n}\n\n// 리스크 헬스 계산\nfunction calculateRiskHealth(projectId: string): number {\n  // 1. 기술적 리스크 (30%)\n  const technicalRiskScore = calculateTechnicalRiskScore(projectId)\n\n  // 2. 일정 리스크 (25%)\n  const scheduleRiskScore = calculateScheduleRiskScore(projectId)\n\n  // 3. 예산 리스크 (25%)\n  const budgetRiskScore = calculateBudgetRiskScore(projectId)\n\n  // 4. 인력 리스크 (20%)\n  const peopleRiskScore = calculatePeopleRiskScore(projectId)\n\n  const totalScore =\n    technicalRiskScore * 0.3 +\n    scheduleRiskScore * 0.25 +\n    budgetRiskScore * 0.25 +\n    peopleRiskScore * 0.2\n  return Math.round(totalScore)\n}\n\n// 기술적 리스크 점수 계산\nfunction calculateTechnicalRiskScore(projectId: string): number {\n  // 실제 구현에서는 기술적 이슈, 복잡도 등을 분석\n  const mockTechnicalRisks = [\n    { type: 'complexity', level: 'medium', impact: 'high' },\n    { type: 'dependency', level: 'high', impact: 'medium' },\n    { type: 'innovation', level: 'high', impact: 'high' }\n  ]\n\n  let totalRiskScore = 0\n  mockTechnicalRisks.forEach(risk => {\n    const levelScore = risk.level === 'low' ? 20 : risk.level === 'medium' ? 50 : 80\n    const impactScore = risk.impact === 'low' ? 20 : risk.impact === 'medium' ? 50 : 80\n    totalRiskScore += (levelScore + impactScore) / 2\n  })\n\n  const averageRiskScore = totalRiskScore / mockTechnicalRisks.length\n  return Math.max(0, 100 - averageRiskScore)\n}\n\n// 일정 리스크 점수 계산\nfunction calculateScheduleRiskScore(projectId: string): number {\n  // 실제 구현에서는 일정 지연 위험을 분석\n  const mockScheduleRisks = {\n    delayedMilestones: 2,\n    totalMilestones: 8,\n    criticalPathDelays: 1,\n    bufferConsumption: 60 // %\n  }\n\n  const delayRate = (mockScheduleRisks.delayedMilestones / mockScheduleRisks.totalMilestones) * 100\n  const bufferScore = Math.max(0, 100 - mockScheduleRisks.bufferConsumption)\n  const criticalPathScore = mockScheduleRisks.criticalPathDelays > 0 ? 50 : 100\n\n  return (delayRate + bufferScore + criticalPathScore) / 3\n}\n\n// 예산 리스크 점수 계산\nfunction calculateBudgetRiskScore(projectId: string): number {\n  // 실제 구현에서는 예산 초과 위험을 분석\n  const mockBudgetRisks = {\n    overrunCategories: 1,\n    totalCategories: 5,\n    remainingBudget: 40000000,\n    estimatedRemainingCost: 50000000,\n    contingencyUsed: 20 // %\n  }\n\n  const overrunRate = (mockBudgetRisks.overrunCategories / mockBudgetRisks.totalCategories) * 100\n  const budgetAdequacy =\n    (mockBudgetRisks.remainingBudget / mockBudgetRisks.estimatedRemainingCost) * 100\n  const contingencyScore = Math.max(0, 100 - mockBudgetRisks.contingencyUsed)\n\n  return (overrunRate + budgetAdequacy + contingencyScore) / 3\n}\n\n// 인력 리스크 점수 계산\nfunction calculatePeopleRiskScore(projectId: string): number {\n  // 실제 구현에서는 인력 이탈 위험을 분석\n  const mockPeopleRisks = {\n    keyPersonnelAtRisk: 1,\n    totalKeyPersonnel: 3,\n    skillGaps: 2,\n    workloadImbalance: 30 // %\n  }\n\n  const keyPersonnelRisk =\n    (mockPeopleRisks.keyPersonnelAtRisk / mockPeopleRisks.totalKeyPersonnel) * 100\n  const skillGapScore = Math.max(0, 100 - mockPeopleRisks.skillGaps * 20)\n  const workloadScore = Math.max(0, 100 - mockPeopleRisks.workloadImbalance)\n\n  return (keyPersonnelRisk + skillGapScore + workloadScore) / 3\n}\n\n// 전체 상태 결정\nfunction determineOverallStatus(overallScore: number): 'green' | 'amber' | 'red' {\n  if (overallScore >= 80) return 'green'\n  if (overallScore >= 60) return 'amber'\n  return 'red'\n}\n\n// 헬스 인디케이터 규칙 정의\nexport function defineHealthRules(): void {\n  const rules = {\n    schedule: {\n      green: { min: 80, max: 100, description: '일정이 계획대로 진행되고 있음' },\n      amber: { min: 60, max: 79, description: '일정에 약간의 지연이 있음' },\n      red: { min: 0, max: 59, description: '일정에 심각한 지연이 있음' }\n    },\n    budget: {\n      green: { min: 80, max: 100, description: '예산이 효율적으로 집행되고 있음' },\n      amber: { min: 60, max: 79, description: '예산 집행에 주의가 필요함' },\n      red: { min: 0, max: 59, description: '예산 집행에 심각한 문제가 있음' }\n    },\n    people: {\n      green: { min: 80, max: 100, description: '인력이 안정적으로 운영되고 있음' },\n      amber: { min: 60, max: 79, description: '인력 관리에 주의가 필요함' },\n      red: { min: 0, max: 59, description: '인력에 심각한 문제가 있음' }\n    },\n    risk: {\n      green: { min: 80, max: 100, description: '리스크가 잘 관리되고 있음' },\n      amber: { min: 60, max: 79, description: '리스크 관리에 주의가 필요함' },\n      red: { min: 0, max: 59, description: '심각한 리스크가 존재함' }\n    }\n  }\n\n  healthRules.set(rules)\n}\n\n// 헬스 인디케이터 트렌드 분석\nexport function analyzeHealthTrend(projectId: string, period: 'week' | 'month' | 'quarter'): any {\n  // 실제 구현에서는 과거 헬스 인디케이터 데이터를 분석\n  const mockTrendData = {\n    week: [\n      { date: '2024-01-01', overall: 85, schedule: 80, budget: 90, people: 85, risk: 85 },\n      { date: '2024-01-08', overall: 82, schedule: 78, budget: 88, people: 83, risk: 82 },\n      { date: '2024-01-15', overall: 80, schedule: 75, budget: 85, people: 80, risk: 80 },\n      { date: '2024-01-22', overall: 78, schedule: 72, budget: 82, people: 78, risk: 78 }\n    ],\n    month: [\n      { month: '2024-01', overall: 85, schedule: 80, budget: 90, people: 85, risk: 85 },\n      { month: '2024-02', overall: 82, schedule: 78, budget: 88, people: 83, risk: 82 },\n      { month: '2024-03', overall: 80, schedule: 75, budget: 85, people: 80, risk: 80 }\n    ],\n    quarter: [\n      { quarter: 'Q1-2024', overall: 85, schedule: 80, budget: 90, people: 85, risk: 85 },\n      { quarter: 'Q2-2024', overall: 82, schedule: 78, budget: 88, people: 83, risk: 82 }\n    ]\n  }\n\n  return mockTrendData[period]\n}\n\n// 헬스 인디케이터 알림 생성\nexport function createHealthAlert(projectId: string, indicator: HealthIndicator): void {\n  const alerts = []\n\n  // 각 영역별 알림 생성\n  if (indicator.schedule < 60) {\n    alerts.push({\n      type: 'schedule',\n      severity: 'high',\n      message: `일정 헬스 점수가 ${indicator.schedule}점으로 낮습니다.`\n    })\n  }\n\n  if (indicator.budget < 60) {\n    alerts.push({\n      type: 'budget',\n      severity: 'high',\n      message: `예산 헬스 점수가 ${indicator.budget}점으로 낮습니다.`\n    })\n  }\n\n  if (indicator.people < 60) {\n    alerts.push({\n      type: 'people',\n      severity: 'high',\n      message: `인력 헬스 점수가 ${indicator.people}점으로 낮습니다.`\n    })\n  }\n\n  if (indicator.risk < 60) {\n    alerts.push({\n      type: 'risk',\n      severity: 'high',\n      message: `리스크 헬스 점수가 ${indicator.risk}점으로 낮습니다.`\n    })\n  }\n\n  // 전체 상태가 Red인 경우\n  if (indicator.overall === 'red') {\n    alerts.push({\n      type: 'overall',\n      severity: 'critical',\n      message: `프로젝트 전체 헬스 상태가 Red입니다. 즉시 조치가 필요합니다.`\n    })\n  }\n\n  // 알림 발송 (실제 구현에서는 알림 시스템에 전송)\n  alerts.forEach(alert => {\n    logger.log(`Health Alert for ${projectId}:`, alert)\n  })\n}\n\n// 헬스 인디케이터 대시보드 데이터\nexport function getHealthDashboardData(): any {\n  let allIndicators: HealthIndicator[] = []\n\n  healthIndicators.subscribe(list => {\n    allIndicators = list\n  })()\n\n  const greenCount = allIndicators.filter(h => h.overall === 'green').length\n  const amberCount = allIndicators.filter(h => h.overall === 'amber').length\n  const redCount = allIndicators.filter(h => h.overall === 'red').length\n\n  const averageSchedule =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.schedule, 0) / allIndicators.length\n      : 0\n  const averageBudget =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.budget, 0) / allIndicators.length\n      : 0\n  const averagePeople =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.people, 0) / allIndicators.length\n      : 0\n  const averageRisk =\n    allIndicators.length > 0\n      ? allIndicators.reduce((sum, h) => sum + h.risk, 0) / allIndicators.length\n      : 0\n\n  return {\n    totalProjects: allIndicators.length,\n    greenCount,\n    amberCount,\n    redCount,\n    averageScores: {\n      schedule: Math.round(averageSchedule),\n      budget: Math.round(averageBudget),\n      people: Math.round(averagePeople),\n      risk: Math.round(averageRisk)\n    },\n    recentIndicators: allIndicators\n      .sort((a, b) => new Date(b.lastUpdated).getTime() - new Date(a.lastUpdated).getTime())\n      .slice(0, 10)\n  }\n}\n\n// 헬스 인디케이터 자동 업데이트\nexport function scheduleHealthIndicatorUpdates(): void {\n  // 실제 구현에서는 주기적으로 헬스 인디케이터를 업데이트\n  setInterval(\n    () => {\n      // 모든 활성 프로젝트에 대해 헬스 인디케이터 계산\n      logger.log('Updating health indicators...')\n    },\n    24 * 60 * 60 * 1000\n  ) // 24시간마다\n}\n\n// 헬스 인디케이터 내보내기\nexport function exportHealthIndicators(format: 'json' | 'csv' | 'excel'): string {\n  let allIndicators: HealthIndicator[] = []\n\n  healthIndicators.subscribe(list => {\n    allIndicators = list\n  })()\n\n  if (format === 'json') {\n    return JSON.stringify(allIndicators, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader = 'Project ID,Schedule,Budget,People,Risk,Overall,Last Updated\\n'\n    const csvRows = allIndicators\n      .map(\n        h =>\n          `${h.projectId},${h.schedule},${h.budget},${h.people},${h.risk},${h.overall},${h.lastUpdated}`\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(allIndicators, null, 2)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/milestone-management.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3957,3960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3957,3960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12412,12415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12412,12415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12496,12499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12496,12499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { Milestone, Approval } from './types'\nimport { logAudit } from './core'\n\n// 마일스톤 관리\nexport const milestones = writable<Milestone[]>([])\nexport const milestoneDeliverables = writable<Record<string, unknown[]>>({})\n\n// 분기 목표/산출물 생성\nexport function createMilestone(\n  projectId: string,\n  quarter: number,\n  title: string,\n  kpis: Record<string, unknown>,\n  dueDate: string,\n  ownerId: string,\n  deliverables: string[] = []\n): string {\n  const milestone: Milestone = {\n    id: crypto.randomUUID(),\n    projectId,\n    quarter,\n    title,\n    kpis,\n    dueDate,\n    ownerId,\n    status: 'not-started',\n    deliverables,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  milestones.update(list => [...list, milestone])\n  logAudit('create', 'milestone', milestone.id, {}, milestone)\n\n  return milestone.id\n}\n\n// 마일스톤 수정\nexport function updateMilestone(milestoneId: string, updates: Partial<Milestone>): void {\n  milestones.update(list => {\n    const index = list.findIndex(m => m.id === milestoneId)\n    if (index === -1) return list\n\n    const oldMilestone = list[index]\n    const updatedMilestone = {\n      ...oldMilestone,\n      ...updates,\n      updatedAt: new Date().toISOString()\n    }\n\n    const newList = [...list]\n    newList[index] = updatedMilestone\n\n    logAudit('update', 'milestone', milestoneId, oldMilestone, updatedMilestone)\n    return newList\n  })\n}\n\n// 마일스톤 상태 업데이트\nexport function updateMilestoneStatus(\n  milestoneId: string,\n  status: Milestone['status'],\n  comment?: string\n): void {\n  updateMilestone(milestoneId, { status })\n\n  if (comment) {\n    logAudit('status_change', 'milestone', milestoneId, { status, comment }, {})\n  }\n}\n\n// 산출물 업로드\nexport function uploadDeliverable(\n  milestoneId: string,\n  deliverableName: string,\n  filename: string,\n  storageUrl: string,\n  sha256: string,\n  description?: string\n): string {\n  const deliverable = {\n    id: crypto.randomUUID(),\n    milestoneId,\n    name: deliverableName,\n    filename,\n    storageUrl,\n    sha256,\n    description,\n    uploadedAt: new Date().toISOString(),\n    uploadedBy: 'current-user',\n    version: 1,\n    status: 'uploaded'\n  }\n\n  milestoneDeliverables.update(deliverables => {\n    const milestoneDeliverables = deliverables[milestoneId] || []\n    return {\n      ...deliverables,\n      [milestoneId]: [...milestoneDeliverables, deliverable]\n    }\n  })\n\n  logAudit('upload', 'deliverable', deliverable.id, {}, deliverable)\n\n  // 마일스톤 상태 자동 업데이트\n  checkMilestoneCompletion(milestoneId)\n\n  return deliverable.id\n}\n\n// 마일스톤 완료 여부 체크\nfunction checkMilestoneCompletion(milestoneId: string): void {\n  milestones.update(list => {\n    const milestone = list.find(m => m.id === milestoneId)\n    if (!milestone) return list\n\n    milestoneDeliverables.update(deliverables => {\n      const milestoneDeliverables = deliverables[milestoneId] || []\n      const requiredDeliverables = milestone.deliverables\n      const uploadedDeliverables = milestoneDeliverables.filter(d => d.status === 'uploaded')\n\n      // 모든 필수 산출물이 업로드되었는지 확인\n      const allDeliverablesUploaded = requiredDeliverables.every(required =>\n        uploadedDeliverables.some(uploaded => uploaded.name === required)\n      )\n\n      // 마일스톤 상태 업데이트\n      if (allDeliverablesUploaded && milestone.status !== 'completed') {\n        const updatedMilestone = {\n          ...milestone,\n          status: 'completed' as const,\n          updatedAt: new Date().toISOString()\n        }\n\n        const index = list.findIndex(m => m.id === milestoneId)\n        if (index !== -1) {\n          const newList = [...list]\n          newList[index] = updatedMilestone\n\n          logAudit('complete', 'milestone', milestoneId, milestone, updatedMilestone)\n          return newList\n        }\n      }\n\n      return list\n    })\n\n    return list\n  })\n}\n\n// KPI 업데이트\nexport function updateMilestoneKPI(\n  milestoneId: string,\n  kpiName: string,\n  value: any,\n  comment?: string\n): void {\n  milestones.update(list => {\n    const index = list.findIndex(m => m.id === milestoneId)\n    if (index === -1) return list\n\n    const milestone = list[index]\n    const updatedKpis = {\n      ...milestone.kpis,\n      [kpiName]: {\n        value,\n        updatedAt: new Date().toISOString(),\n        comment\n      }\n    }\n\n    const updatedMilestone = {\n      ...milestone,\n      kpis: updatedKpis,\n      updatedAt: new Date().toISOString()\n    }\n\n    const newList = [...list]\n    newList[index] = updatedMilestone\n\n    logAudit('update_kpi', 'milestone', milestoneId, { kpiName, value, comment }, updatedKpis)\n    return newList\n  })\n}\n\n// 프로젝트별 마일스톤 목록\nexport function getMilestonesByProject(projectId: string): Milestone[] {\n  let projectMilestones: Milestone[] = []\n\n  milestones.subscribe(list => {\n    projectMilestones = list\n      .filter(m => m.projectId === projectId)\n      .sort((a, b) => a.quarter - b.quarter)\n  })()\n\n  return projectMilestones\n}\n\n// 분기별 마일스톤 목록\nexport function getMilestonesByQuarter(projectId: string, quarter: number): Milestone[] {\n  let quarterMilestones: Milestone[] = []\n\n  milestones.subscribe(list => {\n    quarterMilestones = list\n      .filter(m => m.projectId === projectId && m.quarter === quarter)\n      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n  })()\n\n  return quarterMilestones\n}\n\n// 마일스톤별 산출물 목록\nexport function getMilestoneDeliverables(milestoneId: string): unknown[] {\n  let deliverables: unknown[] = []\n\n  milestoneDeliverables.subscribe(deliverableMap => {\n    deliverables = deliverableMap[milestoneId] || []\n  })()\n\n  return deliverables\n}\n\n// 마일스톤 달성률 계산\nexport function calculateMilestoneProgress(milestoneId: string): {\n  progress: number\n  completedDeliverables: number\n  totalDeliverables: number\n  status: 'on-track' | 'at-risk' | 'delayed'\n} {\n  let milestone: Milestone | undefined\n  let deliverables: unknown[] = []\n\n  milestones.subscribe(list => {\n    milestone = list.find(m => m.id === milestoneId)\n  })()\n\n  milestoneDeliverables.subscribe(deliverableMap => {\n    deliverables = deliverableMap[milestoneId] || []\n  })()\n\n  if (!milestone) {\n    return { progress: 0, completedDeliverables: 0, totalDeliverables: 0, status: 'delayed' }\n  }\n\n  const totalDeliverables = milestone.deliverables.length\n  const completedDeliverables = deliverables.filter(d => d.status === 'uploaded').length\n  const progress = totalDeliverables > 0 ? (completedDeliverables / totalDeliverables) * 100 : 0\n\n  // 상태 결정\n  let status: 'on-track' | 'at-risk' | 'delayed' = 'on-track'\n  const now = new Date()\n  const dueDate = new Date(milestone.dueDate)\n  const daysUntilDue = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24))\n\n  if (daysUntilDue < 0) {\n    status = 'delayed'\n  } else if (daysUntilDue <= 7 && progress < 80) {\n    status = 'at-risk'\n  }\n\n  return { progress, completedDeliverables, totalDeliverables, status }\n}\n\n// 프로젝트 전체 진행률 계산\nexport function calculateProjectProgress(projectId: string): {\n  overallProgress: number\n  quarterProgress: Record<number, number>\n  milestoneStatus: Record<string, unknown>\n} {\n  const projectMilestones = getMilestonesByProject(projectId)\n  const quarterProgress: Record<number, number> = {}\n  const milestoneStatus: Record<string, unknown> = {}\n\n  let totalProgress = 0\n  let totalMilestones = 0\n\n  projectMilestones.forEach(milestone => {\n    const progress = calculateMilestoneProgress(milestone.id)\n    milestoneStatus[milestone.id] = progress\n\n    totalProgress += progress.progress\n    totalMilestones++\n\n    if (!quarterProgress[milestone.quarter]) {\n      quarterProgress[milestone.quarter] = 0\n    }\n    quarterProgress[milestone.quarter] += progress.progress\n  })\n\n  // 분기별 평균 계산\n  Object.keys(quarterProgress).forEach(quarter => {\n    const quarterMilestones = projectMilestones.filter(m => m.quarter === parseInt(quarter))\n    quarterProgress[parseInt(quarter)] =\n      quarterProgress[parseInt(quarter)] / quarterMilestones.length\n  })\n\n  const overallProgress = totalMilestones > 0 ? totalProgress / totalMilestones : 0\n\n  return { overallProgress, quarterProgress, milestoneStatus }\n}\n\n// 지연된 마일스톤 목록\nexport function getDelayedMilestones(): Milestone[] {\n  let delayedMilestones: Milestone[] = []\n\n  milestones.subscribe(list => {\n    const now = new Date()\n    delayedMilestones = list.filter(milestone => {\n      const dueDate = new Date(milestone.dueDate)\n      const isOverdue = dueDate < now\n      const isNotCompleted = milestone.status !== 'completed'\n      return isOverdue && isNotCompleted\n    })\n  })()\n\n  return delayedMilestones\n}\n\n// 위험 상태 마일스톤 목록\nexport function getAtRiskMilestones(): Milestone[] {\n  let atRiskMilestones: Milestone[] = []\n\n  milestones.subscribe(list => {\n    atRiskMilestones = list.filter(milestone => {\n      const progress = calculateMilestoneProgress(milestone.id)\n      return progress.status === 'at-risk'\n    })\n  })()\n\n  return atRiskMilestones\n}\n\n// 마일스톤 승인 요청\nexport function requestMilestoneApproval(\n  milestoneId: string,\n  approverId: string,\n  comment?: string\n): string {\n  const approval: Approval = {\n    id: crypto.randomUUID(),\n    subjectType: 'milestone',\n    subjectId: milestoneId,\n    stepNo: 1,\n    approverId,\n    decision: 'pending',\n    comment,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  logAudit('approval_request', 'milestone', milestoneId, { approverId, comment }, approval)\n\n  return approval.id\n}\n\n// 마일스톤 승인 처리\nexport function approveMilestone(\n  milestoneId: string,\n  approverId: string,\n  decision: 'approved' | 'rejected',\n  comment?: string\n): void {\n  updateMilestoneStatus(milestoneId, decision === 'approved' ? 'completed' : 'not-started', comment)\n\n  logAudit('approval_decision', 'milestone', milestoneId, { approverId, decision, comment }, {})\n}\n\n// 분기별 목표 설정 템플릿\nexport function createQuarterlyMilestoneTemplate(\n  projectId: string,\n  quarter: number,\n  templateType: 'research' | 'development' | 'commercialization'\n): Milestone[] {\n  const templates = {\n    research: [\n      {\n        title: '문헌 조사 및 기술 분석',\n        kpis: { literature_review: 0, technical_analysis: 0 },\n        deliverables: ['문헌조사보고서', '기술분석보고서']\n      },\n      {\n        title: '실험 설계 및 초기 실험',\n        kpis: { experiment_design: 0, initial_experiments: 0 },\n        deliverables: ['실험설계서', '초기실험결과']\n      },\n      {\n        title: '중간 결과 분석 및 보고',\n        kpis: { data_analysis: 0, interim_report: 0 },\n        deliverables: ['중간보고서', '데이터분석결과']\n      }\n    ],\n    development: [\n      {\n        title: '요구사항 분석 및 설계',\n        kpis: { requirements_analysis: 0, system_design: 0 },\n        deliverables: ['요구사항명세서', '시스템설계서']\n      },\n      {\n        title: '프로토타입 개발',\n        kpis: { prototype_development: 0, testing: 0 },\n        deliverables: ['프로토타입', '테스트결과']\n      },\n      {\n        title: '성능 최적화 및 검증',\n        kpis: { optimization: 0, validation: 0 },\n        deliverables: ['최적화결과', '검증보고서']\n      }\n    ],\n    commercialization: [\n      {\n        title: '시장 분석 및 사업화 계획',\n        kpis: { market_analysis: 0, business_plan: 0 },\n        deliverables: ['시장분석보고서', '사업화계획서']\n      },\n      {\n        title: '파일럿 테스트 및 검증',\n        kpis: { pilot_test: 0, validation: 0 },\n        deliverables: ['파일럿테스트결과', '검증보고서']\n      },\n      {\n        title: '사업화 준비 및 실행',\n        kpis: { commercialization_prep: 0, execution: 0 },\n        deliverables: ['사업화준비보고서', '실행계획서']\n      }\n    ]\n  }\n\n  const template = templates[templateType]\n  const createdMilestones: Milestone[] = []\n\n  template.forEach((item, index) => {\n    const dueDate = new Date()\n    dueDate.setMonth(dueDate.getMonth() + (index + 1) * 4) // 분기별로 4개월씩\n\n    const milestoneId = createMilestone(\n      projectId,\n      quarter,\n      item.title,\n      item.kpis,\n      dueDate.toISOString().split('T')[0],\n      'current-user',\n      item.deliverables\n    )\n\n    createdMilestones.push({\n      id: milestoneId,\n      projectId,\n      quarter,\n      title: item.title,\n      kpis: item.kpis,\n      dueDate: dueDate.toISOString().split('T')[0],\n      ownerId: 'current-user',\n      status: 'not-started',\n      deliverables: item.deliverables,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    })\n  })\n\n  return createdMilestones\n}\n\n// 마일스톤 리포트 생성\nexport function generateMilestoneReport(\n  projectId: string,\n  quarter?: number\n): {\n  summary: any\n  milestones: Milestone[]\n  deliverables: Record<string, unknown[]>\n  progress: any\n} {\n  const projectMilestones = quarter\n    ? getMilestonesByQuarter(projectId, quarter)\n    : getMilestonesByProject(projectId)\n\n  const deliverables: Record<string, unknown[]> = {}\n  const progress = calculateProjectProgress(projectId)\n\n  projectMilestones.forEach(milestone => {\n    deliverables[milestone.id] = getMilestoneDeliverables(milestone.id)\n  })\n\n  const summary = {\n    totalMilestones: projectMilestones.length,\n    completedMilestones: projectMilestones.filter(m => m.status === 'completed').length,\n    delayedMilestones: getDelayedMilestones().filter(m => m.projectId === projectId).length,\n    atRiskMilestones: getAtRiskMilestones().filter(m => m.projectId === projectId).length,\n    overallProgress: progress.overallProgress\n  }\n\n  return { summary, milestones: projectMilestones, deliverables, progress }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/participation-salary.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'allocations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":97,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":97,"endColumn":20}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { ParticipationAssignment, SalaryHistory } from './types'\nimport { logAudit } from './core'\n\n// 참여율 및 급여 변동 관리\nexport const participationAssignments = writable<ParticipationAssignment[]>([])\nexport const salaryHistory = writable<SalaryHistory[]>([])\n\n// 월별 인건비 배분표\nexport const monthlySalaryAllocations = writable<Record<string, unknown[]>>({})\n\n// 참여율 배정\nexport function assignParticipation(\n  projectId: string,\n  personId: string,\n  dateFrom: string,\n  dateTo: string,\n  ratePct: number\n): string {\n  const assignment: ParticipationAssignment = {\n    id: crypto.randomUUID(),\n    projectId,\n    personId,\n    dateFrom,\n    dateTo,\n    ratePct,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  participationAssignments.update(assignments => [...assignments, assignment])\n  logAudit('create', 'participation_assignment', assignment.id, {}, assignment)\n\n  // 월별 배분표 재계산\n  recalculateMonthlyAllocations()\n\n  return assignment.id\n}\n\n// 참여율 수정\nexport function updateParticipation(\n  assignmentId: string,\n  updates: Partial<ParticipationAssignment>\n): void {\n  participationAssignments.update(assignments => {\n    const index = assignments.findIndex(a => a.id === assignmentId)\n    if (index === -1) return assignments\n\n    const oldAssignment = assignments[index]\n    const updatedAssignment = {\n      ...oldAssignment,\n      ...updates,\n      updatedAt: new Date().toISOString()\n    }\n\n    const newAssignments = [...assignments]\n    newAssignments[index] = updatedAssignment\n\n    logAudit('update', 'participation_assignment', assignmentId, oldAssignment, updatedAssignment)\n\n    // 월별 배분표 재계산\n    recalculateMonthlyAllocations()\n\n    return newAssignments\n  })\n}\n\n// 급여 변동 등록\nexport function addSalaryChange(\n  personId: string,\n  effectiveFrom: string,\n  baseSalary: number,\n  currency: string = 'KRW'\n): string {\n  const salaryRecord: SalaryHistory = {\n    id: crypto.randomUUID(),\n    personId,\n    effectiveFrom,\n    baseSalary,\n    currency,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  salaryHistory.update(history => [...history, salaryRecord])\n  logAudit('create', 'salary_history', salaryRecord.id, {}, salaryRecord)\n\n  // 월별 배분표 재계산\n  recalculateMonthlyAllocations()\n\n  return salaryRecord.id\n}\n\n// 월별 인건비 배분표 계산\nexport function recalculateMonthlyAllocations(): void {\n  // 모든 프로젝트와 참여 배정을 가져와서 월별로 계산\n  const allocations: Record<string, unknown[]> = {}\n\n  participationAssignments.subscribe(assignments => {\n    salaryHistory.subscribe(salaries => {\n      projects.subscribe(projectList => {\n        persons.subscribe(personList => {\n          // 월별로 그룹화하여 계산\n          const monthlyData: Record<string, unknown[]> = {}\n\n          assignments.forEach(assignment => {\n            const project = projectList.find(p => p.id === assignment.projectId)\n            const person = personList.find(p => p.id === assignment.personId)\n\n            if (!project || !person) return\n\n            // 배정 기간의 각 월에 대해 계산\n            const startDate = new Date(assignment.dateFrom)\n            const endDate = new Date(assignment.dateTo)\n\n            const currentDate = new Date(startDate.getFullYear(), startDate.getMonth(), 1)\n            const endMonth = new Date(endDate.getFullYear(), endDate.getMonth(), 1)\n\n            while (currentDate <= endMonth) {\n              const monthKey = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`\n\n              if (!monthlyData[monthKey]) {\n                monthlyData[monthKey] = []\n              }\n\n              // 해당 월의 급여 정보 가져오기\n              const monthlySalary = getSalaryForMonth(person.id, currentDate, salaries)\n\n              // 해당 월의 근무일 수 계산\n              const workingDays = getWorkingDaysInMonth(currentDate, startDate, endDate)\n              const totalDays = getDaysInMonth(currentDate)\n              const workingRatio = workingDays / totalDays\n\n              // 인건비 계산\n              const monthlyAllocation = {\n                projectId: project.id,\n                projectCode: project.code,\n                projectTitle: project.title,\n                personId: person.id,\n                personName: person.name,\n                participationRate: assignment.ratePct,\n                baseSalary: monthlySalary,\n                workingRatio,\n                allocatedAmount: monthlySalary * (assignment.ratePct / 100) * workingRatio,\n                currency: 'KRW',\n                month: monthKey\n              }\n\n              monthlyData[monthKey].push(monthlyAllocation)\n\n              // 다음 달로 이동\n              currentDate.setMonth(currentDate.getMonth() + 1)\n            }\n          })\n\n          monthlySalaryAllocations.set(monthlyData)\n        })()\n      })()\n    })()\n  })()\n}\n\n// 특정 월의 급여 정보 가져오기\nfunction getSalaryForMonth(personId: string, month: Date, salaries: SalaryHistory[]): number {\n  // 해당 월에 유효한 급여 정보 찾기\n  const validSalaries = salaries\n    .filter(s => s.personId === personId)\n    .filter(s => new Date(s.effectiveFrom) <= month)\n    .sort((a, b) => new Date(b.effectiveFrom).getTime() - new Date(a.effectiveFrom).getTime())\n\n  return validSalaries.length > 0 ? validSalaries[0].baseSalary : 0\n}\n\n// 특정 월의 근무일 수 계산\nfunction getWorkingDaysInMonth(month: Date, startDate: Date, endDate: Date): number {\n  const monthStart = new Date(month.getFullYear(), month.getMonth(), 1)\n  const monthEnd = new Date(month.getFullYear(), month.getMonth() + 1, 0)\n\n  const effectiveStart = startDate > monthStart ? startDate : monthStart\n  const effectiveEnd = endDate < monthEnd ? endDate : monthEnd\n\n  if (effectiveStart > effectiveEnd) return 0\n\n  return Math.ceil((effectiveEnd.getTime() - effectiveStart.getTime()) / (1000 * 60 * 60 * 24)) + 1\n}\n\n// 특정 월의 총 일수\nfunction getDaysInMonth(month: Date): number {\n  return new Date(month.getFullYear(), month.getMonth() + 1, 0).getDate()\n}\n\n// 프로젝트별 월별 인건비 집계\nexport function getProjectMonthlyAllocations(projectId: string, month: string): unknown[] {\n  let allocations: unknown[] = []\n\n  monthlySalaryAllocations.subscribe(monthlyData => {\n    allocations = monthlyData[month]?.filter(a => a.projectId === projectId) || []\n  })()\n\n  return allocations\n}\n\n// 프로젝트별 총 인건비 계산\nexport function getProjectTotalPersonnelCost(\n  projectId: string,\n  startMonth: string,\n  endMonth: string\n): number {\n  let totalCost = 0\n\n  monthlySalaryAllocations.subscribe(monthlyData => {\n    const startDate = new Date(startMonth + '-01')\n    const endDate = new Date(endMonth + '-01')\n\n    const currentDate = new Date(startDate)\n    while (currentDate <= endDate) {\n      const monthKey = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}`\n      const monthAllocations = monthlyData[monthKey] || []\n\n      const projectAllocations = monthAllocations.filter(a => a.projectId === projectId)\n      const monthTotal = projectAllocations.reduce((sum, a) => sum + a.allocatedAmount, 0)\n\n      totalCost += monthTotal\n\n      currentDate.setMonth(currentDate.getMonth() + 1)\n    }\n  })()\n\n  return totalCost\n}\n\n// 개인별 월별 참여 현황\nexport function getPersonMonthlyParticipation(personId: string, month: string): unknown[] {\n  let participations: unknown[] = []\n\n  monthlySalaryAllocations.subscribe(monthlyData => {\n    participations = monthlyData[month]?.filter(a => a.personId === personId) || []\n  })()\n\n  return participations\n}\n\n// 개인별 총 참여율 계산 (특정 월)\nexport function getPersonTotalParticipationRate(personId: string, month: string): number {\n  const participations = getPersonMonthlyParticipation(personId, month)\n  return participations.reduce((sum, p) => sum + p.participationRate, 0)\n}\n\n// 참여율 초과 경고 체크\nexport function checkParticipationOverload(\n  personId: string,\n  month: string\n): {\n  overloaded: boolean\n  totalRate: number\n  threshold: number\n} {\n  const totalRate = getPersonTotalParticipationRate(personId, month)\n  const threshold = 100 // 100% 초과 시 경고\n\n  return {\n    overloaded: totalRate > threshold,\n    totalRate,\n    threshold\n  }\n}\n\n// 급여 변동 이력 가져오기\nexport function getSalaryHistory(personId: string): SalaryHistory[] {\n  let history: SalaryHistory[] = []\n\n  salaryHistory.subscribe(salaries => {\n    history = salaries\n      .filter(s => s.personId === personId)\n      .sort((a, b) => new Date(b.effectiveFrom).getTime() - new Date(a.effectiveFrom).getTime())\n  })()\n\n  return history\n}\n\n// 현재 유효한 급여 정보 가져오기\nexport function getCurrentSalary(personId: string): SalaryHistory | null {\n  const history = getSalaryHistory(personId)\n  return history.length > 0 ? history[0] : null\n}\n\n// 참여 배정 이력 가져오기\nexport function getParticipationHistory(personId: string): ParticipationAssignment[] {\n  let history: ParticipationAssignment[] = []\n\n  participationAssignments.subscribe(assignments => {\n    history = assignments\n      .filter(a => a.personId === personId)\n      .sort((a, b) => new Date(b.dateFrom).getTime() - new Date(a.dateFrom).getTime())\n  })()\n\n  return history\n}\n\n// 프로젝트별 참여자 목록\nexport function getProjectParticipants(projectId: string): ParticipationAssignment[] {\n  let participants: ParticipationAssignment[] = []\n\n  participationAssignments.subscribe(assignments => {\n    participants = assignments\n      .filter(a => a.projectId === projectId)\n      .sort((a, b) => new Date(a.dateFrom).getTime() - new Date(b.dateFrom).getTime())\n  })()\n\n  return participants\n}\n\n// 월별 인건비 배분표 생성 (CSV 형식)\nexport function generateMonthlyAllocationReport(month: string): string {\n  let report = '프로젝트코드,프로젝트명,직원명,참여율,기본급여,근무비율,배분금액,통화\\n'\n\n  monthlySalaryAllocations.subscribe(monthlyData => {\n    const monthData = monthlyData[month] || []\n    monthData.forEach(allocation => {\n      report += `${allocation.projectCode},${allocation.projectTitle},${allocation.personName},${allocation.participationRate}%,${allocation.baseSalary.toLocaleString()},${(allocation.workingRatio * 100).toFixed(1)}%,${allocation.allocatedAmount.toLocaleString()},${allocation.currency}\\n`\n    })\n  })()\n\n  return report\n}\n\n// 급여 변동 반영 (중도 인상/감봉)\nexport function applySalaryChange(\n  personId: string,\n  effectiveFrom: string,\n  newSalary: number,\n  reason: string\n): void {\n  // 기존 급여 정보의 종료일 설정\n  salaryHistory.update(history => {\n    return history.map(salary => {\n      if (salary.personId === personId && !salary.updatedAt.includes('ended')) {\n        return {\n          ...salary,\n          updatedAt: new Date().toISOString() + ' (ended)'\n        }\n      }\n      return salary\n    })\n  })\n\n  // 새로운 급여 정보 추가\n  addSalaryChange(personId, effectiveFrom, newSalary)\n\n  logAudit('salary_change', 'person', personId, { reason, newSalary, effectiveFrom }, {})\n}\n\n// 휴가/병가 반영 (참여율 조정)\nexport function applyLeaveAdjustment(\n  personId: string,\n  projectId: string,\n  leaveStart: string,\n  leaveEnd: string,\n  leaveType: 'annual' | 'sick' | 'personal'\n): void {\n  // 휴가 기간 동안의 참여율을 0%로 조정\n  const adjustment = {\n    projectId,\n    personId,\n    dateFrom: leaveStart,\n    dateTo: leaveEnd,\n    ratePct: 0,\n    leaveType,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  // 기존 배정과 겹치는 부분 조정\n  participationAssignments.update(assignments => {\n    return assignments.map(assignment => {\n      if (assignment.personId === personId && assignment.projectId === projectId) {\n        // 휴가 기간과 겹치는 부분이 있는지 확인\n        const assignmentStart = new Date(assignment.dateFrom)\n        const assignmentEnd = new Date(assignment.dateTo)\n        const leaveStartDate = new Date(leaveStart)\n        const leaveEndDate = new Date(leaveEnd)\n\n        if (leaveStartDate <= assignmentEnd && leaveEndDate >= assignmentStart) {\n          // 겹치는 기간이 있으면 조정 필요\n          // 실제 구현에서는 더 복잡한 로직이 필요\n          return assignment\n        }\n      }\n      return assignment\n    })\n  })\n\n  logAudit(\n    'leave_adjustment',\n    'participation',\n    personId,\n    { leaveType, leaveStart, leaveEnd },\n    adjustment\n  )\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/project-store.ts","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier expected.","line":6,"column":0}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Project Management Store\n// 프로젝트 관리 시스템의 메인 스토어\n\nimport { derived, writable } from 'svelte/store'\nimport type {\nimport { logger } from '$lib/utils/logger';\n  BudgetAlert,\n  BudgetSummaryByYear,\n  EmployeeParticipationSummary,\n  ParticipationRate,\n  ParticipationRateAlert,\n  ParticipationRateFilters,\n  ParticipationRateHistory,\n  ParticipationRateStats,\n  Project,\n  ProjectBudget,\n  ProjectFilters,\n  ProjectMember,\n  ProjectStatusStats,\n  ProjectSummary\n} from './types'\n\n// 기본 상태\nconst initialState = {\n  projects: [] as Project[],\n  projectMembers: [] as ProjectMember[],\n  projectBudgets: [] as ProjectBudget[],\n  participationRates: [] as ParticipationRate[],\n  participationRateHistory: [] as ParticipationRateHistory[],\n  summary: null as ProjectSummary | null,\n  employeeParticipationSummary: [] as EmployeeParticipationSummary[],\n  budgetSummaryByYear: [] as BudgetSummaryByYear[],\n  alerts: [] as (ParticipationRateAlert | BudgetAlert)[],\n  loading: false,\n  error: null as string | null\n}\n\n// 메인 스토어\nexport const projectStore = writable(initialState)\n\n// 프로젝트 관련 액션들\nexport const projectActions = {\n  // 프로젝트 목록 로드\n  async loadProjects(filters?: ProjectFilters) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const params = new URLSearchParams()\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value) params.append(key, value)\n        })\n      }\n\n      const response = await fetch(`/api/project-management/projects?${params}`)\n      if (!response.ok) throw new Error('프로젝트 목록을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projects: data.data || [],\n        loading: false\n      }))\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n    }\n  },\n\n  // 프로젝트 생성\n  async createProject(projectData: any) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      logger.log('프로젝트 생성 요청 데이터:', projectData)\n\n      const response = await fetch('/api/project-management/projects', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(projectData)\n      })\n\n      logger.log('프로젝트 생성 응답 상태:', response.status)\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        logger.error('프로젝트 생성 API 에러 응답:', errorData)\n        throw new Error(errorData.message || '프로젝트 생성에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      logger.log('프로젝트 생성 성공 응답:', data)\n\n      projectStore.update(state => ({\n        ...state,\n        projects: [...state.projects, data.data],\n        loading: false\n      }))\n\n      return data.data\n    } catch (error) {\n      logger.error('프로젝트 생성 API 호출 실패:', error)\n      logger.error('요청 데이터:', projectData)\n\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 수정\n  async updateProject(id: string, projectData: any) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/projects/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(projectData)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 수정에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projects: state.projects.map(p => (p.id === id ? data.data : p)),\n        loading: false\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 삭제\n  async deleteProject(id: string) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/projects/${id}`, {\n        method: 'DELETE'\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 삭제에 실패했습니다.')\n      }\n\n      projectStore.update(state => ({\n        ...state,\n        projects: state.projects.filter(p => p.id !== id),\n        loading: false\n      }))\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 요약 정보 로드\n  async loadProjectSummary() {\n    try {\n      const response = await fetch('/api/project-management/summary')\n      if (!response.ok) throw new Error('프로젝트 요약 정보를 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        summary: data.data\n      }))\n    } catch (error) {\n      logger.error('프로젝트 요약 정보 로드 실패:', error)\n    }\n  }\n}\n\n// 프로젝트 멤버 관련 액션들\nexport const projectMemberActions = {\n  // 프로젝트 멤버 목록 로드\n  async loadProjectMembers(projectId: string) {\n    try {\n      const response = await fetch(`/api/project-management/projects/${projectId}/members`)\n      if (!response.ok) throw new Error('프로젝트 멤버 목록을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projectMembers: data.data || []\n      }))\n    } catch (error) {\n      logger.error('프로젝트 멤버 목록 로드 실패:', error)\n    }\n  },\n\n  // 프로젝트 멤버 추가\n  async addProjectMember(memberData: any) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch('/api/project-management/project-members', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(memberData)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 멤버 추가에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projectMembers: [...state.projectMembers, data.data],\n        loading: false\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 멤버 수정\n  async updateProjectMember(id: string, memberData: any) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/project-members/${id}`, {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(memberData)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 멤버 수정에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projectMembers: state.projectMembers.map(m => (m.id === id ? data.data : m)),\n        loading: false\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  },\n\n  // 프로젝트 멤버 삭제\n  async deleteProjectMember(id: string) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch(`/api/project-management/project-members/${id}`, {\n        method: 'DELETE'\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '프로젝트 멤버 삭제에 실패했습니다.')\n      }\n\n      projectStore.update(state => ({\n        ...state,\n        projectMembers: state.projectMembers.filter(m => m.id !== id),\n        loading: false\n      }))\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  }\n}\n\n// 참여율 관리 관련 액션들\nexport const participationRateActions = {\n  // 참여율 현황 로드\n  async loadParticipationRates(filters?: ParticipationRateFilters) {\n    try {\n      const params = new URLSearchParams()\n      if (filters) {\n        Object.entries(filters).forEach(([key, value]) => {\n          if (value) params.append(key, value)\n        })\n      }\n\n      const response = await fetch(`/api/project-management/participation-rates?${params}`)\n      if (!response.ok) throw new Error('참여율 현황을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        participationRates: data.data || []\n      }))\n    } catch (error) {\n      logger.error('참여율 현황 로드 실패:', error)\n    }\n  },\n\n  // 개인별 참여율 요약 로드\n  async loadEmployeeParticipationSummary() {\n    try {\n      const response = await fetch('/api/project-management/participation-rates/summary')\n      if (!response.ok) throw new Error('개인별 참여율 요약을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        employeeParticipationSummary: data.data || []\n      }))\n    } catch (error) {\n      logger.error('개인별 참여율 요약 로드 실패:', error)\n    }\n  },\n\n  // 참여율 업데이트\n  async updateParticipationRate(rateData: any) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const response = await fetch('/api/project-management/participation-rates', {\n        method: 'PUT',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(rateData)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '참여율 업데이트에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        participationRates: state.participationRates.map(r =>\n          r.employeeId === rateData.employeeId && r.projectId === rateData.projectId\n            ? { ...r, participationRate: rateData.participationRate }\n            : r\n        ),\n        loading: false\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  },\n\n  // 참여율 변경 이력 로드\n  async loadParticipationRateHistory(employeeId?: string, projectId?: string) {\n    try {\n      const params = new URLSearchParams()\n      if (employeeId) params.append('employeeId', employeeId)\n      if (projectId) params.append('projectId', projectId)\n\n      const response = await fetch(`/api/project-management/participation-rates/history?${params}`)\n      if (!response.ok) throw new Error('참여율 변경 이력을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        participationRateHistory: data.data || []\n      }))\n    } catch (error) {\n      logger.error('참여율 변경 이력 로드 실패:', error)\n    }\n  }\n}\n\n// 사업비 관리 관련 액션들\nexport const budgetActions = {\n  // 프로젝트 사업비 로드\n  async loadProjectBudgets(projectId: string) {\n    try {\n      const response = await fetch(`/api/project-management/projects/${projectId}/budgets`)\n      if (!response.ok) throw new Error('프로젝트 사업비를 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projectBudgets: data.data || []\n      }))\n    } catch (error) {\n      logger.error('프로젝트 사업비 로드 실패:', error)\n    }\n  },\n\n  // 연차별 사업비 요약 로드\n  async loadBudgetSummaryByYear() {\n    try {\n      const response = await fetch('/api/project-management/budgets/summary-by-year')\n      if (!response.ok) throw new Error('연차별 사업비 요약을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        budgetSummaryByYear: data.data || []\n      }))\n    } catch (error) {\n      logger.error('연차별 사업비 요약 로드 실패:', error)\n    }\n  },\n\n  // 사업비 생성/수정\n  async saveProjectBudget(budgetData: any) {\n    projectStore.update(state => ({ ...state, loading: true, error: null }))\n\n    try {\n      const isUpdate = budgetData.id\n      const url = isUpdate\n        ? `/api/project-management/project-budgets/${budgetData.id}`\n        : '/api/project-management/project-budgets'\n      const method = isUpdate ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(budgetData)\n      })\n\n      if (!response.ok) {\n        const errorData = await response.json()\n        throw new Error(errorData.message || '사업비 저장에 실패했습니다.')\n      }\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        projectBudgets: isUpdate\n          ? state.projectBudgets.map(b => (b.id === budgetData.id ? data.data : b))\n          : [...state.projectBudgets, data.data],\n        loading: false\n      }))\n\n      return data.data\n    } catch (error) {\n      projectStore.update(state => ({\n        ...state,\n        loading: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류가 발생했습니다.'\n      }))\n      throw error\n    }\n  }\n}\n\n// 알림 관련 액션들\nexport const alertActions = {\n  // 알림 로드\n  async loadAlerts() {\n    try {\n      const response = await fetch('/api/project-management/alerts')\n      if (!response.ok) throw new Error('알림을 불러오는데 실패했습니다.')\n\n      const data = await response.json()\n      projectStore.update(state => ({\n        ...state,\n        alerts: data.data || []\n      }))\n    } catch (error) {\n      logger.error('알림 로드 실패:', error)\n    }\n  }\n}\n\n// Derived stores\nexport const activeProjects = derived(projectStore, $store =>\n  $store.projects.filter(p => p.status === 'active')\n)\n\nexport const projectStatusStats = derived(projectStore, $store => {\n  const stats: ProjectStatusStats = {\n    planning: 0,\n    active: 0,\n    completed: 0,\n    cancelled: 0,\n    suspended: 0\n  }\n\n  $store.projects.forEach(project => {\n    stats[project.status] = (stats[project.status] || 0) + 1\n  })\n\n  return stats\n})\n\nexport const overParticipationEmployees = derived(projectStore, $store =>\n  $store.employeeParticipationSummary.filter(emp => emp.participationStatus === 'OVER_LIMIT')\n)\n\nexport const participationRateStats = derived(projectStore, $store => {\n  const summary = $store.employeeParticipationSummary\n  const stats: ParticipationRateStats = {\n    overLimit: summary.filter(emp => emp.participationStatus === 'OVER_LIMIT').length,\n    full: summary.filter(emp => emp.participationStatus === 'FULL').length,\n    available: summary.filter(emp => emp.participationStatus === 'AVAILABLE').length,\n    averageRate:\n      summary.length > 0\n        ? summary.reduce((sum, emp) => sum + emp.totalParticipationRate, 0) / summary.length\n        : 0\n  }\n\n  return stats\n})\n\n// 초기 데이터 로드\nexport const initializeProjectManagement = async () => {\n  await Promise.all([\n    projectActions.loadProjectSummary(),\n    participationRateActions.loadEmployeeParticipationSummary(),\n    budgetActions.loadBudgetSummaryByYear(),\n    alertActions.loadAlerts()\n  ])\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/rbac.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":170,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":170,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":177,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'expenseId' is defined but never used. Allowed unused args must match /^_/u.","line":185,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":185,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'expenseId' is defined but never used. Allowed unused args must match /^_/u.","line":192,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":192,"endColumn":64},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'documentId' is defined but never used. Allowed unused args must match /^_/u.","line":200,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'documentId' is defined but never used. Allowed unused args must match /^_/u.","line":207,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":207,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'noteId' is defined but never used. Allowed unused args must match /^_/u.","line":215,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":215,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'noteId' is defined but never used. Allowed unused args must match /^_/u.","line":222,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":222,"endColumn":66}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { Person } from './types'\n\n// RBAC 권한 정의\nexport const ROLES = {\n  R1: '연구원',\n  R2: 'PM(과제책임자)',\n  R3: '담당부서(구매·기술 등)',\n  R4: '경영지원(회계·총무)',\n  R5: '연구소장',\n  R6: '경영진',\n  R7: '감사/외부평가'\n} as const\n\nexport type Role = keyof typeof ROLES\n\n// 권한 매트릭스\nexport const PERMISSIONS = {\n  // Project 권한\n  PROJECT_READ: ['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7'],\n  PROJECT_CREATE: ['R4'],\n  PROJECT_UPDATE: ['R2', 'R4'],\n  PROJECT_APPROVE: ['R6'],\n  PROJECT_LOCK: ['R7'],\n\n  // ExpenseItem 권한\n  EXPENSE_READ: ['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7'],\n  EXPENSE_CREATE: ['R1', 'R2'],\n  EXPENSE_UPDATE: ['R3', 'R4'],\n  EXPENSE_APPROVE: ['R2', 'R4', 'R5'],\n  EXPENSE_LOCK: ['R4'],\n\n  // Document 권한\n  DOCUMENT_READ: ['R1', 'R2', 'R3', 'R4', 'R5', 'R6', 'R7'],\n  DOCUMENT_CREATE: ['R1', 'R2', 'R3'],\n  DOCUMENT_UPDATE: ['R4'],\n  DOCUMENT_LOCK: ['R4'],\n\n  // ResearchNote 권한\n  RESEARCH_NOTE_READ: ['R1', 'R2', 'R5'],\n  RESEARCH_NOTE_CREATE: ['R1'],\n  RESEARCH_NOTE_UPDATE: ['R1'],\n  RESEARCH_NOTE_APPROVE: ['R2'],\n\n  // SubmissionBundle 권한\n  BUNDLE_READ: ['R4', 'R6', 'R7'],\n  BUNDLE_CREATE: ['R4'],\n  BUNDLE_APPROVE: ['R4'],\n  BUNDLE_LOCK: ['R7']\n} as const\n\nexport type Permission = keyof typeof PERMISSIONS\n\n// 현재 사용자 정보\nexport const currentUser = writable<Person | null>(null)\n\n// 권한 체크 함수들\nexport function hasRole(user: Person | null, role: Role): boolean {\n  if (!user) return false\n  return user.roleSet.includes(role)\n}\n\nexport function hasPermission(user: Person | null, permission: Permission): boolean {\n  if (!user) return false\n  const allowedRoles = PERMISSIONS[permission]\n  return user.roleSet.some(role => allowedRoles.includes(role as Role))\n}\n\nexport function hasAnyRole(user: Person | null, roles: Role[]): boolean {\n  if (!user) return false\n  return roles.some(role => user.roleSet.includes(role))\n}\n\nexport function hasAllRoles(user: Person | null, roles: Role[]): boolean {\n  if (!user) return false\n  return roles.every(role => user.roleSet.includes(role))\n}\n\n// 역할별 권한 체크 함수들\nexport function canReadProject(user: Person | null): boolean {\n  return hasPermission(user, 'PROJECT_READ')\n}\n\nexport function canCreateProject(user: Person | null): boolean {\n  return hasPermission(user, 'PROJECT_CREATE')\n}\n\nexport function canUpdateProject(user: Person | null): boolean {\n  return hasPermission(user, 'PROJECT_UPDATE')\n}\n\nexport function canApproveProject(user: Person | null): boolean {\n  return hasPermission(user, 'PROJECT_APPROVE')\n}\n\nexport function canReadExpense(user: Person | null): boolean {\n  return hasPermission(user, 'EXPENSE_READ')\n}\n\nexport function canCreateExpense(user: Person | null): boolean {\n  return hasPermission(user, 'EXPENSE_CREATE')\n}\n\nexport function canUpdateExpense(user: Person | null): boolean {\n  return hasPermission(user, 'EXPENSE_UPDATE')\n}\n\nexport function canApproveExpense(user: Person | null): boolean {\n  return hasPermission(user, 'EXPENSE_APPROVE')\n}\n\nexport function canReadDocument(user: Person | null): boolean {\n  return hasPermission(user, 'DOCUMENT_READ')\n}\n\nexport function canCreateDocument(user: Person | null): boolean {\n  return hasPermission(user, 'DOCUMENT_CREATE')\n}\n\nexport function canUpdateDocument(user: Person | null): boolean {\n  return hasPermission(user, 'DOCUMENT_UPDATE')\n}\n\nexport function canReadResearchNote(user: Person | null): boolean {\n  return hasPermission(user, 'RESEARCH_NOTE_READ')\n}\n\nexport function canCreateResearchNote(user: Person | null): boolean {\n  return hasPermission(user, 'RESEARCH_NOTE_CREATE')\n}\n\nexport function canUpdateResearchNote(user: Person | null): boolean {\n  return hasPermission(user, 'RESEARCH_NOTE_UPDATE')\n}\n\nexport function canApproveResearchNote(user: Person | null): boolean {\n  return hasPermission(user, 'RESEARCH_NOTE_APPROVE')\n}\n\nexport function canReadBundle(user: Person | null): boolean {\n  return hasPermission(user, 'BUNDLE_READ')\n}\n\nexport function canCreateBundle(user: Person | null): boolean {\n  return hasPermission(user, 'BUNDLE_CREATE')\n}\n\n// 역할별 대시보드 접근 권한\nexport function canAccessExecutiveDashboard(user: Person | null): boolean {\n  return hasAnyRole(user, ['R6'])\n}\n\nexport function canAccessLabHeadDashboard(user: Person | null): boolean {\n  return hasAnyRole(user, ['R5', 'R6'])\n}\n\nexport function canAccessPMDashboard(user: Person | null): boolean {\n  return hasAnyRole(user, ['R2', 'R5', 'R6'])\n}\n\nexport function canAccessSupportDashboard(user: Person | null): boolean {\n  return hasAnyRole(user, ['R4', 'R5', 'R6'])\n}\n\nexport function canAccessResearcherDashboard(user: Person | null): boolean {\n  return hasAnyRole(user, ['R1', 'R2', 'R5', 'R6'])\n}\n\n// 프로젝트별 권한 체크\nexport function canAccessProject(user: Person | null, projectId: string): boolean {\n  if (!user) return false\n\n  // 모든 역할이 프로젝트를 읽을 수 있음\n  return canReadProject(user)\n}\n\nexport function canManageProject(user: Person | null, projectId: string): boolean {\n  if (!user) return false\n\n  // PM, 경영지원, 연구소장, 경영진만 프로젝트 관리 가능\n  return hasAnyRole(user, ['R2', 'R4', 'R5', 'R6'])\n}\n\n// 지출 항목별 권한 체크\nexport function canAccessExpense(user: Person | null, expenseId: string): boolean {\n  if (!user) return false\n\n  // 모든 역할이 지출 항목을 읽을 수 있음\n  return canReadExpense(user)\n}\n\nexport function canManageExpense(user: Person | null, expenseId: string): boolean {\n  if (!user) return false\n\n  // 요청자, PM, 담당부서, 경영지원만 지출 관리 가능\n  return hasAnyRole(user, ['R1', 'R2', 'R3', 'R4'])\n}\n\n// 문서별 권한 체크\nexport function canAccessDocument(user: Person | null, documentId: string): boolean {\n  if (!user) return false\n\n  // 모든 역할이 문서를 읽을 수 있음\n  return canReadDocument(user)\n}\n\nexport function canManageDocument(user: Person | null, documentId: string): boolean {\n  if (!user) return false\n\n  // 관련자, 경영지원만 문서 관리 가능\n  return hasAnyRole(user, ['R1', 'R2', 'R3', 'R4'])\n}\n\n// 연구노트별 권한 체크\nexport function canAccessResearchNote(user: Person | null, noteId: string): boolean {\n  if (!user) return false\n\n  // 연구원, PM, 연구소장만 연구노트 접근 가능\n  return hasAnyRole(user, ['R1', 'R2', 'R5'])\n}\n\nexport function canManageResearchNote(user: Person | null, noteId: string): boolean {\n  if (!user) return false\n\n  // 연구원만 연구노트 작성/수정 가능\n  return hasRole(user, 'R1')\n}\n\n// 사용자 역할 정보 가져오기\nexport function getUserRoles(user: Person | null): string[] {\n  if (!user) return []\n  return user.roleSet.map(role => ROLES[role as Role])\n}\n\nexport function getUserRoleNames(user: Person | null): string[] {\n  if (!user) return []\n  return user.roleSet.map(role => ROLES[role as Role])\n}\n\n// 역할별 색상\nexport const ROLE_COLORS = {\n  R1: '#3B82F6', // 파란색\n  R2: '#10B981', // 초록색\n  R3: '#F59E0B', // 노란색\n  R4: '#EF4444', // 빨간색\n  R5: '#8B5CF6', // 보라색\n  R6: '#EC4899', // 핑크색\n  R7: '#6B7280' // 회색\n} as const\n\nexport function getRoleColor(role: Role): string {\n  return ROLE_COLORS[role] || '#6B7280'\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/replacement-system.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":79,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2023,2026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2023,2026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'personId' is defined but never used. Allowed unused args must match /^_/u.","line":93,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2362,2365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2362,2365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2702,2705],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2702,2705],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2733,2736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2733,2736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":175,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":175,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4232,4235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4232,4235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":176,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":176,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4260,4263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4260,4263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4291,4294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4291,4294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":405,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":405,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9731,9734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9731,9734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":451,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":451,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10720,10723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10720,10723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":502,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":502,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12364,12367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12364,12367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":528,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":528,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12965,12968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12965,12968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { ReplacementRecommendation } from './types'\nimport { logAudit } from './core'\nimport { logger } from '$lib/utils/logger'\n\n// 대체 추천 시스템\nexport const replacementRecommendations = writable<ReplacementRecommendation[]>([])\nexport const skillMatrix = writable<Record<string, unknown[]>>({})\nexport const availabilityMatrix = writable<Record<string, unknown>>({})\n\n// 인력 이탈 시 대체 추천 생성\nexport function generateReplacementRecommendation(\n  projectId: string,\n  departingPersonId: string,\n  reason: 'resignation' | 'transfer' | 'medical' | 'other',\n  effectiveDate: string,\n  urgency: 'low' | 'medium' | 'high' | 'critical'\n): string {\n  const recommendationId = crypto.randomUUID()\n\n  // 대체자 추천 로직 실행\n  const recommendedPersons = findReplacementCandidates(projectId, departingPersonId, urgency)\n\n  const recommendation: ReplacementRecommendation = {\n    id: recommendationId,\n    projectId,\n    departingPersonId,\n    recommendedPersons,\n    status: 'pending',\n    createdAt: new Date().toISOString()\n  }\n\n  replacementRecommendations.update(list => [...list, recommendation])\n  logAudit(\n    'create',\n    'replacement_recommendation',\n    recommendationId,\n    {\n      projectId,\n      departingPersonId,\n      reason,\n      urgency\n    },\n    recommendation\n  )\n\n  return recommendationId\n}\n\n// 대체자 후보 찾기\nfunction findReplacementCandidates(\n  projectId: string,\n  departingPersonId: string,\n  urgency: 'low' | 'medium' | 'high' | 'critical'\n): Array<{\n  personId: string\n  score: number\n  reason: string\n  availability: number\n}> {\n  // 1. 프로젝트 요구사항 분석\n  const projectRequirements = analyzeProjectRequirements(projectId)\n\n  // 2. 이탈자 프로필 분석\n  const departingPersonProfile = analyzePersonProfile(departingPersonId)\n\n  // 3. 후보자 스코어링\n  const candidates = scoreReplacementCandidates(\n    projectRequirements,\n    departingPersonProfile,\n    urgency\n  )\n\n  // 4. 상위 3명 반환\n  return candidates.slice(0, 3)\n}\n\n// 프로젝트 요구사항 분석\nfunction analyzeProjectRequirements(projectId: string): any {\n  // 실제 구현에서는 프로젝트 데이터를 분석\n  return {\n    requiredSkills: ['JavaScript', 'React', 'Node.js', 'Database'],\n    experienceLevel: 'senior',\n    department: '개발팀',\n    participationRate: 80,\n    startDate: '2024-02-01',\n    duration: 6, // months\n    budget: 50000000\n  }\n}\n\n// 개인 프로필 분석\nfunction analyzePersonProfile(personId: string): any {\n  // 실제 구현에서는 개인 데이터를 분석\n  return {\n    skills: ['JavaScript', 'React', 'Node.js', 'MongoDB'],\n    experienceLevel: 'senior',\n    department: '개발팀',\n    currentParticipation: 100,\n    salary: 6000000,\n    performance: 'excellent',\n    availability: 80\n  }\n}\n\n// 대체자 후보 스코어링\nfunction scoreReplacementCandidates(\n  projectRequirements: any,\n  departingPersonProfile: any,\n  urgency: string\n): Array<{\n  personId: string\n  score: number\n  reason: string\n  availability: number\n}> {\n  // 실제 구현에서는 모든 직원을 대상으로 스코어링\n  const candidates = [\n    {\n      personId: 'person-1',\n      name: '김대체',\n      skills: ['JavaScript', 'React', 'Node.js', 'PostgreSQL'],\n      experienceLevel: 'senior',\n      department: '개발팀',\n      currentParticipation: 60,\n      salary: 5500000,\n      performance: 'excellent',\n      availability: 90\n    },\n    {\n      personId: 'person-2',\n      name: '이대체',\n      skills: ['JavaScript', 'Vue.js', 'Python', 'MySQL'],\n      experienceLevel: 'mid',\n      department: '개발팀',\n      currentParticipation: 40,\n      salary: 4500000,\n      performance: 'good',\n      availability: 85\n    },\n    {\n      personId: 'person-3',\n      name: '박대체',\n      skills: ['TypeScript', 'React', 'Express', 'MongoDB'],\n      experienceLevel: 'senior',\n      department: '개발팀',\n      currentParticipation: 70,\n      salary: 5800000,\n      performance: 'excellent',\n      availability: 75\n    }\n  ]\n\n  return candidates\n    .map(candidate => {\n      const score = calculateCandidateScore(\n        candidate,\n        projectRequirements,\n        departingPersonProfile,\n        urgency\n      )\n\n      return {\n        personId: candidate.personId,\n        score: score.total,\n        reason: score.reason,\n        availability: candidate.availability\n      }\n    })\n    .sort((a, b) => b.score - a.score)\n}\n\n// 후보자 점수 계산\nfunction calculateCandidateScore(\n  candidate: any,\n  projectRequirements: any,\n  departingPersonProfile: any,\n  urgency: string\n): { total: number; reason: string } {\n  let totalScore = 0\n  const reasons: string[] = []\n\n  // 1. 기술 스킬 매칭 (40%)\n  const skillScore = calculateSkillScore(candidate.skills, projectRequirements.requiredSkills)\n  totalScore += skillScore * 0.4\n  reasons.push(`기술 스킬: ${skillScore}점`)\n\n  // 2. 경험 수준 매칭 (20%)\n  const experienceScore = calculateExperienceScore(\n    candidate.experienceLevel,\n    projectRequirements.experienceLevel\n  )\n  totalScore += experienceScore * 0.2\n  reasons.push(`경험 수준: ${experienceScore}점`)\n\n  // 3. 가용성 (20%)\n  const availabilityScore = calculateAvailabilityScore(\n    candidate.availability,\n    projectRequirements.participationRate\n  )\n  totalScore += availabilityScore * 0.2\n  reasons.push(`가용성: ${availabilityScore}점`)\n\n  // 4. 성과 이력 (10%)\n  const performanceScore = calculatePerformanceScore(candidate.performance)\n  totalScore += performanceScore * 0.1\n  reasons.push(`성과: ${performanceScore}점`)\n\n  // 5. 급여 적정성 (10%)\n  const salaryScore = calculateSalaryScore(candidate.salary, departingPersonProfile.salary)\n  totalScore += salaryScore * 0.1\n  reasons.push(`급여 적정성: ${salaryScore}점`)\n\n  // 긴급도 보정\n  if (urgency === 'critical') {\n    totalScore *= 1.2\n  } else if (urgency === 'high') {\n    totalScore *= 1.1\n  }\n\n  return {\n    total: Math.round(totalScore),\n    reason: reasons.join(', ')\n  }\n}\n\n// 기술 스킬 점수 계산\nfunction calculateSkillScore(candidateSkills: string[], requiredSkills: string[]): number {\n  const matchedSkills = candidateSkills.filter(skill => requiredSkills.includes(skill))\n  return (matchedSkills.length / requiredSkills.length) * 100\n}\n\n// 경험 수준 점수 계산\nfunction calculateExperienceScore(candidateLevel: string, requiredLevel: string): number {\n  const levelScores = {\n    intern: 20,\n    junior: 40,\n    mid: 60,\n    senior: 80,\n    lead: 90,\n    manager: 100\n  }\n\n  const candidateScore = levelScores[candidateLevel as keyof typeof levelScores] || 0\n  const requiredScore = levelScores[requiredLevel as keyof typeof levelScores] || 0\n\n  if (candidateScore >= requiredScore) {\n    return 100\n  } else {\n    return (candidateScore / requiredScore) * 100\n  }\n}\n\n// 가용성 점수 계산\nfunction calculateAvailabilityScore(\n  candidateAvailability: number,\n  requiredParticipation: number\n): number {\n  if (candidateAvailability >= requiredParticipation) {\n    return 100\n  } else {\n    return (candidateAvailability / requiredParticipation) * 100\n  }\n}\n\n// 성과 점수 계산\nfunction calculatePerformanceScore(performance: string): number {\n  const performanceScores = {\n    excellent: 100,\n    good: 80,\n    average: 60,\n    below_average: 40,\n    poor: 20\n  }\n\n  return performanceScores[performance as keyof typeof performanceScores] || 0\n}\n\n// 급여 적정성 점수 계산\nfunction calculateSalaryScore(candidateSalary: number, departingPersonSalary: number): number {\n  const ratio = candidateSalary / departingPersonSalary\n\n  if (ratio <= 0.8) {\n    return 100 // 20% 이상 저렴\n  } else if (ratio <= 1.0) {\n    return 90 // 동일하거나 저렴\n  } else if (ratio <= 1.2) {\n    return 70 // 20% 이내 비쌈\n  } else {\n    return 50 // 20% 이상 비쌈\n  }\n}\n\n// 대체 추천 승인\nexport function approveReplacementRecommendation(\n  recommendationId: string,\n  approvedPersonId: string,\n  approverId: string,\n  comment?: string\n): void {\n  replacementRecommendations.update(list => {\n    const index = list.findIndex(r => r.id === recommendationId)\n    if (index === -1) return list\n\n    const recommendation = list[index]\n    const updatedRecommendation = {\n      ...recommendation,\n      status: 'approved' as const,\n      approvedBy: approverId,\n      approvedAt: new Date().toISOString()\n    }\n\n    const newList = [...list]\n    newList[index] = updatedRecommendation\n\n    logAudit(\n      'approve',\n      'replacement_recommendation',\n      recommendationId,\n      {\n        approvedPersonId,\n        approverId,\n        comment\n      },\n      updatedRecommendation\n    )\n\n    // 승인된 대체자 배정 처리\n    processReplacementAssignment(\n      recommendation.projectId,\n      recommendation.departingPersonId,\n      approvedPersonId,\n      recommendation.createdAt\n    )\n\n    return newList\n  })\n}\n\n// 대체자 배정 처리\nfunction processReplacementAssignment(\n  projectId: string,\n  departingPersonId: string,\n  replacementPersonId: string,\n  effectiveDate: string\n): void {\n  // 1. 기존 참여 배정 종료\n  // 2. 새로운 참여 배정 생성\n  // 3. 급여 변동 처리\n  // 4. 알림 발송\n\n  logAudit(\n    'process_replacement',\n    'participation_assignment',\n    projectId,\n    {\n      departingPersonId,\n      replacementPersonId,\n      effectiveDate\n    },\n    {}\n  )\n}\n\n// 대체 추천 거부\nexport function rejectReplacementRecommendation(\n  recommendationId: string,\n  rejectorId: string,\n  reason: string\n): void {\n  replacementRecommendations.update(list => {\n    const index = list.findIndex(r => r.id === recommendationId)\n    if (index === -1) return list\n\n    const recommendation = list[index]\n    const updatedRecommendation = {\n      ...recommendation,\n      status: 'rejected' as const,\n      approvedBy: rejectorId,\n      approvedAt: new Date().toISOString()\n    }\n\n    const newList = [...list]\n    newList[index] = updatedRecommendation\n\n    logAudit(\n      'reject',\n      'replacement_recommendation',\n      recommendationId,\n      {\n        rejectorId,\n        reason\n      },\n      updatedRecommendation\n    )\n\n    return newList\n  })\n}\n\n// 채용 요청 생성 (적합한 대체자가 없는 경우)\nexport function createRecruitmentRequest(\n  projectId: string,\n  departingPersonId: string,\n  requirements: any,\n  urgency: 'low' | 'medium' | 'high' | 'critical'\n): string {\n  const requestId = crypto.randomUUID()\n\n  const recruitmentRequest = {\n    id: requestId,\n    projectId,\n    departingPersonId,\n    requirements,\n    urgency,\n    status: 'pending',\n    createdAt: new Date().toISOString(),\n    createdBy: 'current-user'\n  }\n\n  logAudit(\n    'create',\n    'recruitment_request',\n    requestId,\n    {\n      projectId,\n      departingPersonId,\n      requirements,\n      urgency\n    },\n    recruitmentRequest\n  )\n\n  return requestId\n}\n\n// 대체 추천 이력 조회\nexport function getReplacementHistory(projectId: string): ReplacementRecommendation[] {\n  let history: ReplacementRecommendation[] = []\n\n  replacementRecommendations.subscribe(list => {\n    history = list\n      .filter(r => r.projectId === projectId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n  })()\n\n  return history\n}\n\n// 대체 추천 통계\nexport function getReplacementStatistics(projectId: string): any {\n  const history = getReplacementHistory(projectId)\n\n  const totalRecommendations = history.length\n  const approvedRecommendations = history.filter(r => r.status === 'approved').length\n  const rejectedRecommendations = history.filter(r => r.status === 'rejected').length\n  const pendingRecommendations = history.filter(r => r.status === 'pending').length\n\n  const averageScore =\n    history.length > 0\n      ? history.reduce((sum, r) => sum + r.recommendedPersons[0]?.score || 0, 0) / history.length\n      : 0\n\n  const averageProcessingTime = calculateAverageProcessingTime(history)\n\n  return {\n    totalRecommendations,\n    approvedRecommendations,\n    rejectedRecommendations,\n    pendingRecommendations,\n    approvalRate:\n      totalRecommendations > 0 ? (approvedRecommendations / totalRecommendations) * 100 : 0,\n    averageScore,\n    averageProcessingTime\n  }\n}\n\n// 평균 처리 시간 계산\nfunction calculateAverageProcessingTime(history: ReplacementRecommendation[]): number {\n  const processedRecommendations = history.filter(r => r.approvedAt)\n\n  if (processedRecommendations.length === 0) return 0\n\n  const totalTime = processedRecommendations.reduce((sum, r) => {\n    const created = new Date(r.createdAt).getTime()\n    const approved = new Date(r.approvedAt!).getTime()\n    return sum + (approved - created)\n  }, 0)\n\n  return totalTime / processedRecommendations.length\n}\n\n// 스킬 매트릭스 업데이트\nexport function updateSkillMatrix(personId: string, skills: unknown[]): void {\n  skillMatrix.update(matrix => ({\n    ...matrix,\n    [personId]: skills\n  }))\n}\n\n// 가용성 매트릭스 업데이트\nexport function updateAvailabilityMatrix(personId: string, availability: any): void {\n  availabilityMatrix.update(matrix => ({\n    ...matrix,\n    [personId]: availability\n  }))\n}\n\n// 대체 추천 알림 생성\nexport function createReplacementNotification(\n  recommendationId: string,\n  notificationType: 'created' | 'approved' | 'rejected',\n  recipients: string[]\n): void {\n  const notification = {\n    id: crypto.randomUUID(),\n    recommendationId,\n    type: notificationType,\n    recipients,\n    createdAt: new Date().toISOString()\n  }\n\n  // 실제 구현에서는 알림 시스템에 전송\n  logger.log('Replacement notification:', notification)\n}\n\n// 대체 추천 대시보드 데이터\nexport function getReplacementDashboardData(): any {\n  let allRecommendations: ReplacementRecommendation[] = []\n\n  replacementRecommendations.subscribe(list => {\n    allRecommendations = list\n  })()\n\n  const recentRecommendations = allRecommendations\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 10)\n\n  const pendingCount = allRecommendations.filter(r => r.status === 'pending').length\n  const approvedCount = allRecommendations.filter(r => r.status === 'approved').length\n  const rejectedCount = allRecommendations.filter(r => r.status === 'rejected').length\n\n  return {\n    recentRecommendations,\n    pendingCount,\n    approvedCount,\n    rejectedCount,\n    totalCount: allRecommendations.length\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/reporting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1044,1047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1044,1047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekEnd' is defined but never used. Allowed unused args must match /^_/u.","line":71,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1918,1921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1918,1921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekStart' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekEnd' is defined but never used. Allowed unused args must match /^_/u.","line":103,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2668,2671],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2668,2671],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":134,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekStart' is defined but never used. Allowed unused args must match /^_/u.","line":134,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekEnd' is defined but never used. Allowed unused args must match /^_/u.","line":134,"column":75,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3345,3348],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3345,3348],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":162,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekStart' is defined but never used. Allowed unused args must match /^_/u.","line":163,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekEnd' is defined but never used. Allowed unused args must match /^_/u.","line":164,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":165,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":165,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3983,3986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3983,3986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":183,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekStart' is defined but never used. Allowed unused args must match /^_/u.","line":183,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":60},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'weekEnd' is defined but never used. Allowed unused args must match /^_/u.","line":183,"column":70,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":77},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4380,4383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4380,4383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":216,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":216,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":216,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":216,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5056,5059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5056,5059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":283,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":283,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6672,6675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6672,6675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":298,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterStart' is defined but never used. Allowed unused args must match /^_/u.","line":298,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterEnd' is defined but never used. Allowed unused args must match /^_/u.","line":298,"column":74,"nodeType":null,"messageId":"unusedVar","endLine":298,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7412,7415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7412,7415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterStart' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterEnd' is defined but never used. Allowed unused args must match /^_/u.","line":310,"column":69,"nodeType":null,"messageId":"unusedVar","endLine":310,"endColumn":79},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7762,7765],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7762,7765],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":345,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":345,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterStart' is defined but never used. Allowed unused args must match /^_/u.","line":345,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":345,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterEnd' is defined but never used. Allowed unused args must match /^_/u.","line":345,"column":67,"nodeType":null,"messageId":"unusedVar","endLine":345,"endColumn":77},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8458,8461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8458,8461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":375,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":375,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterStart' is defined but never used. Allowed unused args must match /^_/u.","line":375,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":375,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterEnd' is defined but never used. Allowed unused args must match /^_/u.","line":375,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":375,"endColumn":83},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":375,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":375,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9071,9074],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9071,9074],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":409,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":409,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterStart' is defined but never used. Allowed unused args must match /^_/u.","line":409,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":409,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'quarterEnd' is defined but never used. Allowed unused args must match /^_/u.","line":409,"column":73,"nodeType":null,"messageId":"unusedVar","endLine":409,"endColumn":83},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":409,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":409,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9797,9800],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9797,9800],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":436,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":436,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10315,10318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10315,10318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":473,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":473,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":473,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":473,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11064,11067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11064,11067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":506,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":506,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11732,11735],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11732,11735],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12103,12106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12103,12106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used. Allowed unused args must match /^_/u.","line":545,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":545,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14116,14119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14116,14119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":625,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":625,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15038,15041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15038,15041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":638,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":638,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15409,15412],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15409,15412],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":675,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":675,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16313,16316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16313,16316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { Report } from './types'\nimport { logAudit } from './core'\nimport { logger } from '$lib/utils/logger'\n\n// 리포트 관리\nexport const reports = writable<Report[]>([])\nexport const reportTemplates = writable<Record<string, unknown>>({})\n\n// 주간 리포트 생성\nexport function generateWeeklyReport(\n  projectId: string,\n  weekStart: string,\n  weekEnd: string\n): string {\n  const reportId = crypto.randomUUID()\n\n  // 데이터 수집\n  const summaryData = collectWeeklyData(projectId, weekStart, weekEnd)\n\n  const report: Report = {\n    id: reportId,\n    projectId,\n    type: 'weekly',\n    periodStart: weekStart,\n    periodEnd: weekEnd,\n    summaryJson: summaryData,\n    generatedAt: new Date().toISOString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  reports.update(list => [...list, report])\n  logAudit('generate', 'weekly_report', reportId, {}, report)\n\n  return reportId\n}\n\n// 주간 데이터 수집\nfunction collectWeeklyData(projectId: string, weekStart: string, weekEnd: string): any {\n  // 마일스톤 달성률\n  const milestoneProgress = calculateMilestoneProgress(projectId, weekStart, weekEnd)\n\n  // 예산 집행률\n  const budgetExecution = calculateBudgetExecution(projectId, weekStart, weekEnd)\n\n  // 인력 참여율\n  const participationRate = calculateParticipationRate(projectId, weekStart, weekEnd)\n\n  // 연구노트 제출률\n  const researchNoteSubmission = calculateResearchNoteSubmission(projectId, weekStart, weekEnd)\n\n  // 이슈 및 리스크\n  const issuesAndRisks = collectIssuesAndRisks(projectId, weekStart, weekEnd)\n\n  // 다음 주 계획\n  const nextWeekPlan = generateNextWeekPlan(projectId)\n\n  return {\n    milestoneProgress,\n    budgetExecution,\n    participationRate,\n    researchNoteSubmission,\n    issuesAndRisks,\n    nextWeekPlan,\n    generatedAt: new Date().toISOString()\n  }\n}\n\n// 마일스톤 진행률 계산\nfunction calculateMilestoneProgress(projectId: string, weekStart: string, weekEnd: string): any {\n  // 실제 구현에서는 milestones 스토어에서 데이터 가져오기\n  const currentWeek = new Date(weekStart)\n  const quarter = Math.ceil((currentWeek.getMonth() + 1) / 3)\n\n  return {\n    quarter,\n    totalMilestones: 5,\n    completedMilestones: 2,\n    inProgressMilestones: 2,\n    delayedMilestones: 1,\n    overallProgress: 60,\n    milestoneDetails: [\n      {\n        id: 'milestone-1',\n        title: '요구사항 분석',\n        status: 'completed',\n        progress: 100,\n        dueDate: '2024-01-15'\n      },\n      {\n        id: 'milestone-2',\n        title: '시스템 설계',\n        status: 'in-progress',\n        progress: 80,\n        dueDate: '2024-01-30'\n      }\n    ]\n  }\n}\n\n// 예산 집행률 계산\nfunction calculateBudgetExecution(projectId: string, weekStart: string, weekEnd: string): any {\n  // 실제 구현에서는 expenseItems 스토어에서 데이터 가져오기\n  return {\n    totalBudget: 100000000,\n    executedAmount: 25000000,\n    executionRate: 25,\n    categoryBreakdown: [\n      {\n        category: 'PERSONNEL_CASH',\n        planned: 50000000,\n        executed: 15000000,\n        rate: 30\n      },\n      {\n        category: 'MATERIAL',\n        planned: 30000000,\n        executed: 8000000,\n        rate: 27\n      },\n      {\n        category: 'RESEARCH_ACTIVITY',\n        planned: 20000000,\n        executed: 2000000,\n        rate: 10\n      }\n    ],\n    trend: 'increasing'\n  }\n}\n\n// 인력 참여율 계산\nfunction calculateParticipationRate(projectId: string, weekStart: string, weekEnd: string): any {\n  // 실제 구현에서는 participationAssignments 스토어에서 데이터 가져오기\n  return {\n    totalParticipants: 8,\n    averageParticipationRate: 85,\n    participationDetails: [\n      {\n        personId: 'person-1',\n        name: '김연구원',\n        assignedRate: 100,\n        actualRate: 95,\n        status: 'normal'\n      },\n      {\n        personId: 'person-2',\n        name: '이연구원',\n        assignedRate: 80,\n        actualRate: 75,\n        status: 'normal'\n      }\n    ],\n    overloadWarnings: 0,\n    underutilizationWarnings: 1\n  }\n}\n\n// 연구노트 제출률 계산\nfunction calculateResearchNoteSubmission(\n  projectId: string,\n  weekStart: string,\n  weekEnd: string\n): any {\n  // 실제 구현에서는 researchNotes 스토어에서 데이터 가져오기\n  return {\n    expectedSubmissions: 8,\n    actualSubmissions: 7,\n    submissionRate: 87.5,\n    missingSubmissions: [\n      {\n        authorId: 'person-3',\n        name: '박연구원',\n        weekOf: '2024-W03'\n      }\n    ],\n    trend: 'stable'\n  }\n}\n\n// 이슈 및 리스크 수집\nfunction collectIssuesAndRisks(projectId: string, weekStart: string, weekEnd: string): any {\n  return {\n    issues: [\n      {\n        id: 'issue-1',\n        title: '외부 협력사 일정 지연',\n        severity: 'medium',\n        status: 'open',\n        description: '협력사 A사의 부품 납기가 1주일 지연될 예정',\n        impact: '프로토타입 제작 일정 1주일 지연',\n        mitigation: '대체 공급업체 검토 중'\n      }\n    ],\n    risks: [\n      {\n        id: 'risk-1',\n        title: '핵심 인력 이탈 위험',\n        severity: 'high',\n        probability: 30,\n        impact: '프로젝트 일정 2개월 지연',\n        mitigation: '인력 확보 계획 수립'\n      }\n    ],\n    totalIssues: 1,\n    totalRisks: 1,\n    criticalCount: 0,\n    highCount: 1,\n    mediumCount: 1,\n    lowCount: 0\n  }\n}\n\n// 다음 주 계획 생성\nfunction generateNextWeekPlan(projectId: string): any {\n  return {\n    priorities: [\n      {\n        title: '시스템 설계 완료',\n        owner: '김연구원',\n        dueDate: '2024-01-30',\n        priority: 'high'\n      },\n      {\n        title: '프로토타입 개발 시작',\n        owner: '이연구원',\n        dueDate: '2024-02-05',\n        priority: 'medium'\n      }\n    ],\n    deliverables: [\n      {\n        title: '시스템 설계서',\n        type: 'document',\n        dueDate: '2024-01-30'\n      },\n      {\n        title: '프로토타입 v1.0',\n        type: 'prototype',\n        dueDate: '2024-02-05'\n      }\n    ],\n    meetings: [\n      {\n        title: '주간 진행회의',\n        date: '2024-01-29',\n        time: '14:00',\n        participants: ['PM', '팀원 전체']\n      }\n    ]\n  }\n}\n\n// 분기 리포트 생성\nexport function generateQuarterlyReport(projectId: string, quarter: number, year: number): string {\n  const reportId = crypto.randomUUID()\n\n  const quarterStart = new Date(year, (quarter - 1) * 3, 1)\n  const quarterEnd = new Date(year, quarter * 3, 0)\n\n  const summaryData = collectQuarterlyData(projectId, quarterStart, quarterEnd)\n\n  const report: Report = {\n    id: reportId,\n    projectId,\n    type: 'quarterly',\n    periodStart: quarterStart.toISOString().split('T')[0],\n    periodEnd: quarterEnd.toISOString().split('T')[0],\n    summaryJson: summaryData,\n    generatedAt: new Date().toISOString(),\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  reports.update(list => [...list, report])\n  logAudit('generate', 'quarterly_report', reportId, {}, report)\n\n  return reportId\n}\n\n// 분기 데이터 수집\nfunction collectQuarterlyData(projectId: string, quarterStart: Date, quarterEnd: Date): any {\n  return {\n    quarter: Math.ceil((quarterStart.getMonth() + 1) / 3),\n    year: quarterStart.getFullYear(),\n    executiveSummary: generateExecutiveSummary(projectId, quarterStart, quarterEnd),\n    achievements: collectAchievements(projectId, quarterStart, quarterEnd),\n    challenges: collectChallenges(projectId, quarterStart, quarterEnd),\n    financialSummary: collectFinancialSummary(projectId, quarterStart, quarterEnd),\n    personnelSummary: collectPersonnelSummary(projectId, quarterStart, quarterEnd),\n    nextQuarterPlan: generateNextQuarterPlan(projectId),\n    recommendations: generateRecommendations(projectId)\n  }\n}\n\n// 경영진 요약 생성\nfunction generateExecutiveSummary(projectId: string, quarterStart: Date, quarterEnd: Date): any {\n  return {\n    overallStatus: 'on-track',\n    keyAchievements: ['시스템 설계 완료', '프로토타입 v1.0 개발 완료', '핵심 알고리즘 구현 완료'],\n    keyChallenges: ['외부 협력사 일정 지연', '예산 집행률 부족'],\n    overallProgress: 75,\n    budgetUtilization: 60,\n    riskLevel: 'medium'\n  }\n}\n\n// 성과 수집\nfunction collectAchievements(projectId: string, quarterStart: Date, quarterEnd: Date): any {\n  return {\n    milestones: [\n      {\n        title: '시스템 설계 완료',\n        status: 'completed',\n        completionDate: '2024-01-30',\n        impact: 'high'\n      },\n      {\n        title: '프로토타입 v1.0 개발',\n        status: 'completed',\n        completionDate: '2024-02-15',\n        impact: 'high'\n      }\n    ],\n    deliverables: [\n      {\n        title: '시스템 설계서',\n        type: 'document',\n        status: 'delivered'\n      },\n      {\n        title: '프로토타입 v1.0',\n        type: 'prototype',\n        status: 'delivered'\n      }\n    ],\n    publications: [],\n    patents: [],\n    awards: []\n  }\n}\n\n// 도전과제 수집\nfunction collectChallenges(projectId: string, quarterStart: Date, quarterEnd: Date): any {\n  return {\n    technical: [\n      {\n        title: '성능 최적화 이슈',\n        description: '실시간 처리 성능이 요구사항에 미달',\n        status: 'ongoing',\n        impact: 'medium'\n      }\n    ],\n    resource: [\n      {\n        title: '예산 집행 지연',\n        description: '예산 집행률이 계획 대비 낮음',\n        status: 'ongoing',\n        impact: 'low'\n      }\n    ],\n    schedule: [\n      {\n        title: '외부 협력사 일정 지연',\n        description: '부품 납기 지연으로 인한 일정 영향',\n        status: 'resolved',\n        impact: 'medium'\n      }\n    ]\n  }\n}\n\n// 재무 요약 수집\nfunction collectFinancialSummary(projectId: string, quarterStart: Date, quarterEnd: Date): any {\n  return {\n    totalBudget: 100000000,\n    executedAmount: 60000000,\n    executionRate: 60,\n    categoryBreakdown: [\n      {\n        category: 'PERSONNEL_CASH',\n        planned: 50000000,\n        executed: 35000000,\n        rate: 70\n      },\n      {\n        category: 'MATERIAL',\n        planned: 30000000,\n        executed: 20000000,\n        rate: 67\n      },\n      {\n        category: 'RESEARCH_ACTIVITY',\n        planned: 20000000,\n        executed: 5000000,\n        rate: 25\n      }\n    ],\n    trend: 'increasing',\n    forecast: {\n      expectedCompletion: 95,\n      riskAreas: ['RESEARCH_ACTIVITY']\n    }\n  }\n}\n\n// 인력 요약 수집\nfunction collectPersonnelSummary(projectId: string, quarterStart: Date, quarterEnd: Date): any {\n  return {\n    totalParticipants: 8,\n    averageParticipationRate: 85,\n    participationTrend: 'stable',\n    keyPersonnel: [\n      {\n        personId: 'person-1',\n        name: '김연구원',\n        role: 'Lead Developer',\n        participationRate: 100,\n        performance: 'excellent'\n      }\n    ],\n    recruitment: {\n      planned: 2,\n      completed: 1,\n      pending: 1\n    },\n    training: {\n      completed: 3,\n      planned: 2\n    }\n  }\n}\n\n// 다음 분기 계획 생성\nfunction generateNextQuarterPlan(projectId: string): any {\n  return {\n    objectives: [\n      {\n        title: '프로토타입 v2.0 개발',\n        description: '성능 최적화 및 기능 확장',\n        priority: 'high',\n        targetDate: '2024-06-30'\n      },\n      {\n        title: '사용자 테스트 진행',\n        description: '베타 테스터 모집 및 피드백 수집',\n        priority: 'medium',\n        targetDate: '2024-05-31'\n      }\n    ],\n    milestones: [\n      {\n        title: '프로토타입 v2.0 완성',\n        dueDate: '2024-06-30',\n        owner: '개발팀'\n      },\n      {\n        title: '사용자 테스트 완료',\n        dueDate: '2024-05-31',\n        owner: 'QA팀'\n      }\n    ],\n    resourceRequirements: {\n      personnel: 2,\n      budget: 30000000,\n      equipment: ['테스트 서버', '모니터링 도구']\n    }\n  }\n}\n\n// 권고사항 생성\nfunction generateRecommendations(projectId: string): any {\n  return {\n    immediate: [\n      {\n        title: '예산 집행률 개선',\n        description: '연구활동비 집행률이 낮으므로 집행 계획 재검토 필요',\n        priority: 'high',\n        actionOwner: 'PM'\n      }\n    ],\n    shortTerm: [\n      {\n        title: '성능 최적화 전략 수립',\n        description: '성능 이슈 해결을 위한 구체적인 전략 수립',\n        priority: 'medium',\n        actionOwner: '기술팀'\n      }\n    ],\n    longTerm: [\n      {\n        title: '인력 확보 계획',\n        description: '프로젝트 확장을 위한 추가 인력 확보 계획',\n        priority: 'low',\n        actionOwner: 'HR팀'\n      }\n    ]\n  }\n}\n\n// 리포트 템플릿 관리\nexport function createReportTemplate(\n  templateName: string,\n  templateType: 'weekly' | 'quarterly',\n  templateData: any\n): void {\n  reportTemplates.update(templates => ({\n    ...templates,\n    [templateName]: {\n      type: templateType,\n      data: templateData,\n      createdAt: new Date().toISOString()\n    }\n  }))\n}\n\n// 리포트 템플릿 적용\nexport function applyReportTemplate(\n  projectId: string,\n  templateName: string,\n  periodStart: string,\n  periodEnd: string\n): string {\n  let template: any = null\n\n  reportTemplates.subscribe(templates => {\n    template = templates[templateName]\n  })()\n\n  if (!template) {\n    throw new Error(`Template ${templateName} not found`)\n  }\n\n  if (template.type === 'weekly') {\n    return generateWeeklyReport(projectId, periodStart, periodEnd)\n  } else if (template.type === 'quarterly') {\n    return generateQuarterlyReport(projectId, 1, 2024) // 실제로는 파라미터에서 계산\n  }\n\n  throw new Error(`Unsupported template type: ${template.type}`)\n}\n\n// 리포트 내보내기\nexport function exportReport(reportId: string, format: 'pdf' | 'docx' | 'html' | 'excel'): string {\n  let report: Report | undefined = undefined\n\n  reports.subscribe(list => {\n    report = list.find(r => r.id === reportId)\n  })()\n\n  if (!report) {\n    throw new Error(`Report ${reportId} not found`)\n  }\n\n  // 실제 구현에서는 서버에서 해당 형식으로 변환\n  // 여기서는 HTML 형식으로 반환\n  return generateReportHTML(report)\n}\n\n// 리포트 HTML 생성\nfunction generateReportHTML(report: Report): string {\n  const data = report.summaryJson\n\n  return `\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<title>${report.type === 'weekly' ? '주간' : '분기'} 리포트</title>\n\t\t\t<meta charset=\"utf-8\">\n\t\t\t<style>\n\t\t\t\tbody { font-family: Arial, sans-serif; margin: 20px; }\n\t\t\t\t.header { background-color: #f0f0f0; padding: 20px; margin-bottom: 20px; }\n\t\t\t\t.section { margin-bottom: 30px; }\n\t\t\t\t.section h2 { color: #333; border-bottom: 2px solid #333; }\n\t\t\t\t.table { width: 100%; border-collapse: collapse; }\n\t\t\t\t.table th, .table td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n\t\t\t\t.table th { background-color: #f2f2f2; }\n\t\t\t</style>\n\t\t</head>\n\t\t<body>\n\t\t\t<div class=\"header\">\n\t\t\t\t<h1>${report.type === 'weekly' ? '주간' : '분기'} 진도보고서</h1>\n\t\t\t\t<p>프로젝트: ${report.projectId}</p>\n\t\t\t\t<p>기간: ${report.periodStart} ~ ${report.periodEnd}</p>\n\t\t\t\t<p>생성일: ${report.generatedAt}</p>\n\t\t\t</div>\n\t\t\t\n\t\t\t${report.type === 'weekly' ? generateWeeklyReportHTML(data) : generateQuarterlyReportHTML(data)}\n\t\t</body>\n\t\t</html>\n\t`\n}\n\n// 주간 리포트 HTML 생성\nfunction generateWeeklyReportHTML(data: any): string {\n  return `\n\t\t<div class=\"section\">\n\t\t\t<h2>마일스톤 진행률</h2>\n\t\t\t<p>전체 진행률: ${data.milestoneProgress.overallProgress}%</p>\n\t\t\t<p>완료된 마일스톤: ${data.milestoneProgress.completedMilestones}/${data.milestoneProgress.totalMilestones}</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>예산 집행률</h2>\n\t\t\t<p>집행률: ${data.budgetExecution.executionRate}%</p>\n\t\t\t<p>집행 금액: ${data.budgetExecution.executedAmount.toLocaleString()}원</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>인력 참여율</h2>\n\t\t\t<p>평균 참여율: ${data.participationRate.averageParticipationRate}%</p>\n\t\t\t<p>참여자 수: ${data.participationRate.totalParticipants}명</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>연구노트 제출률</h2>\n\t\t\t<p>제출률: ${data.researchNoteSubmission.submissionRate}%</p>\n\t\t\t<p>제출 건수: ${data.researchNoteSubmission.actualSubmissions}/${data.researchNoteSubmission.expectedSubmissions}</p>\n\t\t</div>\n\t`\n}\n\n// 분기 리포트 HTML 생성\nfunction generateQuarterlyReportHTML(data: any): string {\n  return `\n\t\t<div class=\"section\">\n\t\t\t<h2>경영진 요약</h2>\n\t\t\t<p>전체 상태: ${data.executiveSummary.overallStatus}</p>\n\t\t\t<p>전체 진행률: ${data.executiveSummary.overallProgress}%</p>\n\t\t\t<p>예산 활용률: ${data.executiveSummary.budgetUtilization}%</p>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>주요 성과</h2>\n\t\t\t<ul>\n\t\t\t\t${data.achievements.milestones\n          .map((milestone: any) => `<li>${milestone.title} - ${milestone.status}</li>`)\n          .join('')}\n\t\t\t</ul>\n\t\t</div>\n\t\t\n\t\t<div class=\"section\">\n\t\t\t<h2>재무 요약</h2>\n\t\t\t<p>총 예산: ${data.financialSummary.totalBudget.toLocaleString()}원</p>\n\t\t\t<p>집행 금액: ${data.financialSummary.executedAmount.toLocaleString()}원</p>\n\t\t\t<p>집행률: ${data.financialSummary.executionRate}%</p>\n\t\t</div>\n\t`\n}\n\n// 자동 리포트 생성 스케줄링\nexport function scheduleAutoReports(\n  projectId: string,\n  scheduleType: 'weekly' | 'quarterly',\n  dayOfWeek?: number, // 0-6 (일요일-토요일)\n  dayOfMonth?: number // 1-31\n): void {\n  // 실제 구현에서는 백그라운드 작업으로 스케줄링\n  // 여기서는 간단히 설정만 저장\n  const schedule = {\n    projectId,\n    scheduleType,\n    dayOfWeek,\n    dayOfMonth,\n    enabled: true,\n    createdAt: new Date().toISOString()\n  }\n\n  // 스케줄 저장 (실제로는 별도 스토어에 저장)\n  logger.log('Auto report scheduled:', schedule)\n}\n\n// 리포트 통계\nexport function getReportStatistics(projectId: string): any {\n  let projectReports: Report[] = []\n\n  reports.subscribe(list => {\n    projectReports = list.filter(r => r.projectId === projectId)\n  })()\n\n  const weeklyReports = projectReports.filter(r => r.type === 'weekly')\n  const quarterlyReports = projectReports.filter(r => r.type === 'quarterly')\n\n  return {\n    totalReports: projectReports.length,\n    weeklyReports: weeklyReports.length,\n    quarterlyReports: quarterlyReports.length,\n    lastReportDate:\n      projectReports.length > 0\n        ? Math.max(...projectReports.map(r => new Date(r.generatedAt).getTime()))\n        : null,\n    averageGenerationTime: calculateAverageGenerationTime(projectReports)\n  }\n}\n\n// 평균 생성 시간 계산\nfunction calculateAverageGenerationTime(reports: Report[]): number {\n  if (reports.length === 0) return 0\n\n  const totalTime = reports.reduce((sum, report) => {\n    const created = new Date(report.createdAt).getTime()\n    const generated = new Date(report.generatedAt).getTime()\n    return sum + (generated - created)\n  }, 0)\n\n  return totalTime / reports.length\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/research-notes.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'period' is defined but never used. Allowed unused args must match /^_/u.","line":454,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":454,"endColumn":9}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { ResearchNote, Document } from './types'\nimport { logAudit } from './core'\n\n// 연구노트 관리\nexport const researchNotes = writable<ResearchNote[]>([])\nexport const researchNoteAttachments = writable<Record<string, Document[]>>({})\nexport const researchNoteSignatures = writable<Record<string, unknown[]>>({})\n\n// 연구노트 생성\nexport function createResearchNote(\n  projectId: string,\n  authorId: string,\n  weekOf: string,\n  title: string,\n  contentMd: string,\n  attachments: string[] = []\n): string {\n  const note: ResearchNote = {\n    id: crypto.randomUUID(),\n    projectId,\n    authorId,\n    weekOf,\n    title,\n    contentMd,\n    attachments,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  researchNotes.update(list => [...list, note])\n  logAudit('create', 'research_note', note.id, {}, note)\n\n  return note.id\n}\n\n// 연구노트 수정\nexport function updateResearchNote(noteId: string, updates: Partial<ResearchNote>): void {\n  researchNotes.update(list => {\n    const index = list.findIndex(n => n.id === noteId)\n    if (index === -1) return list\n\n    const oldNote = list[index]\n    const updatedNote = {\n      ...oldNote,\n      ...updates,\n      updatedAt: new Date().toISOString()\n    }\n\n    const newList = [...list]\n    newList[index] = updatedNote\n\n    logAudit('update', 'research_note', noteId, oldNote, updatedNote)\n    return newList\n  })\n}\n\n// 연구노트 삭제\nexport function deleteResearchNote(noteId: string): void {\n  researchNotes.update(list => {\n    const note = list.find(n => n.id === noteId)\n    if (note) {\n      logAudit('delete', 'research_note', noteId, note, {})\n    }\n    return list.filter(n => n.id !== noteId)\n  })\n}\n\n// 첨부파일 추가\nexport function addResearchNoteAttachment(\n  noteId: string,\n  filename: string,\n  storageUrl: string,\n  sha256: string,\n  description?: string\n): string {\n  const attachment: Document = {\n    id: crypto.randomUUID(),\n    projectId: '', // 연구노트의 프로젝트 ID로 설정\n    type: 'other',\n    filename,\n    storageUrl,\n    sha256,\n    version: 1,\n    meta: { description, noteId },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  researchNoteAttachments.update(attachments => {\n    const noteAttachments = attachments[noteId] || []\n    return {\n      ...attachments,\n      [noteId]: [...noteAttachments, attachment]\n    }\n  })\n\n  logAudit('add_attachment', 'research_note', noteId, {}, attachment)\n\n  return attachment.id\n}\n\n// 전자서명 추가\nexport function addResearchNoteSignature(\n  noteId: string,\n  signerId: string,\n  signatureData: string,\n  signatureType: 'author' | 'verifier' = 'author'\n): string {\n  const signature = {\n    id: crypto.randomUUID(),\n    noteId,\n    signerId,\n    signatureData,\n    signatureType,\n    signedAt: new Date().toISOString(),\n    verified: false\n  }\n\n  researchNoteSignatures.update(signatures => {\n    const noteSignatures = signatures[noteId] || []\n    return {\n      ...signatures,\n      [noteId]: [...noteSignatures, signature]\n    }\n  })\n\n  logAudit('add_signature', 'research_note', noteId, { signerId, signatureType }, signature)\n\n  // 연구노트 서명 상태 업데이트\n  updateResearchNote(noteId, { signedAt: signature.signedAt })\n\n  return signature.id\n}\n\n// 서명 검증\nexport function verifyResearchNoteSignature(\n  noteId: string,\n  signatureId: string,\n  verifierId: string\n): void {\n  researchNoteSignatures.update(signatures => {\n    const noteSignatures = signatures[noteId] || []\n    const updatedSignatures = noteSignatures.map(sig => {\n      if (sig.id === signatureId) {\n        return {\n          ...sig,\n          verified: true,\n          verifiedBy: verifierId,\n          verifiedAt: new Date().toISOString()\n        }\n      }\n      return sig\n    })\n\n    return {\n      ...signatures,\n      [noteId]: updatedSignatures\n    }\n  })\n\n  logAudit('verify_signature', 'research_note', noteId, { signatureId, verifierId }, {})\n\n  // 연구노트 검증 상태 업데이트\n  updateResearchNote(noteId, { verifiedBy: verifierId })\n}\n\n// 프로젝트별 연구노트 목록\nexport function getResearchNotesByProject(projectId: string): ResearchNote[] {\n  let projectNotes: ResearchNote[] = []\n\n  researchNotes.subscribe(list => {\n    projectNotes = list\n      .filter(n => n.projectId === projectId)\n      .sort((a, b) => new Date(b.weekOf).getTime() - new Date(a.weekOf).getTime())\n  })()\n\n  return projectNotes\n}\n\n// 작성자별 연구노트 목록\nexport function getResearchNotesByAuthor(authorId: string): ResearchNote[] {\n  let authorNotes: ResearchNote[] = []\n\n  researchNotes.subscribe(list => {\n    authorNotes = list\n      .filter(n => n.authorId === authorId)\n      .sort((a, b) => new Date(b.weekOf).getTime() - new Date(a.weekOf).getTime())\n  })()\n\n  return authorNotes\n}\n\n// 주차별 연구노트 목록\nexport function getResearchNotesByWeek(projectId: string, weekOf: string): ResearchNote[] {\n  let weekNotes: ResearchNote[] = []\n\n  researchNotes.subscribe(list => {\n    weekNotes = list.filter(n => n.projectId === projectId && n.weekOf === weekOf)\n  })()\n\n  return weekNotes\n}\n\n// 연구노트별 첨부파일 목록\nexport function getResearchNoteAttachments(noteId: string): Document[] {\n  let attachments: Document[] = []\n\n  researchNoteAttachments.subscribe(attachmentMap => {\n    attachments = attachmentMap[noteId] || []\n  })()\n\n  return attachments\n}\n\n// 연구노트별 서명 목록\nexport function getResearchNoteSignatures(noteId: string): unknown[] {\n  let signatures: unknown[] = []\n\n  researchNoteSignatures.subscribe(signatureMap => {\n    signatures = signatureMap[noteId] || []\n  })()\n\n  return signatures\n}\n\n// 미제출 연구노트 체크\nexport function getMissingResearchNotes(\n  projectId: string,\n  startDate: string,\n  endDate: string\n): {\n  missingWeeks: string[]\n  missingAuthors: string[]\n} {\n  const start = new Date(startDate)\n  const end = new Date(endDate)\n  const missingWeeks: string[] = []\n  const missingAuthors: string[] = []\n\n  // 주차별로 체크\n  const currentDate = new Date(start)\n  while (currentDate <= end) {\n    const weekOf = getWeekOfYear(currentDate)\n    const weekNotes = getResearchNotesByWeek(projectId, weekOf)\n\n    if (weekNotes.length === 0) {\n      missingWeeks.push(weekOf)\n    }\n\n    currentDate.setDate(currentDate.getDate() + 7)\n  }\n\n  // 작성자별 체크 (실제 구현에서는 프로젝트 참여자 목록을 가져와야 함)\n  // 여기서는 간단히 처리\n\n  return { missingWeeks, missingAuthors }\n}\n\n// 주차 계산 (ISO 8601 기준)\nfunction getWeekOfYear(date: Date): string {\n  const year = date.getFullYear()\n  const firstDayOfYear = new Date(year, 0, 1)\n  const pastDaysOfYear = (date.getTime() - firstDayOfYear.getTime()) / 86400000\n  const weekNumber = Math.ceil((pastDaysOfYear + firstDayOfYear.getDay() + 1) / 7)\n  return `${year}-W${weekNumber.toString().padStart(2, '0')}`\n}\n\n// 연구노트 제출 현황\nexport function getResearchNoteSubmissionStatus(\n  projectId: string,\n  month: string\n): {\n  totalWeeks: number\n  submittedWeeks: number\n  submissionRate: number\n  missingWeeks: string[]\n} {\n  const startDate = new Date(month + '-01')\n  const endDate = new Date(startDate.getFullYear(), startDate.getMonth() + 1, 0)\n\n  const { missingWeeks } = getMissingResearchNotes(\n    projectId,\n    startDate.toISOString(),\n    endDate.toISOString()\n  )\n\n  // 해당 월의 총 주차 수 계산\n  const totalWeeks = Math.ceil(\n    (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24 * 7)\n  )\n  const submittedWeeks = totalWeeks - missingWeeks.length\n  const submissionRate = totalWeeks > 0 ? (submittedWeeks / totalWeeks) * 100 : 0\n\n  return {\n    totalWeeks,\n    submittedWeeks,\n    submissionRate,\n    missingWeeks\n  }\n}\n\n// 연구노트 템플릿 생성\nexport function createResearchNoteTemplate(\n  projectId: string,\n  authorId: string,\n  weekOf: string,\n  templateType: 'weekly' | 'experiment' | 'analysis' | 'meeting'\n): string {\n  const templates = {\n    weekly: {\n      title: `주간 연구노트 - ${weekOf}`,\n      content: `# 주간 연구노트\n\n## 이번 주 주요 활동\n- \n\n## 실험/연구 진행사항\n- \n\n## 결과 및 분석\n- \n\n## 다음 주 계획\n- \n\n## 이슈 및 문제점\n- \n\n## 참고자료\n- `\n    },\n    experiment: {\n      title: `실험 노트 - ${weekOf}`,\n      content: `# 실험 노트\n\n## 실험 목적\n- \n\n## 실험 방법\n- \n\n## 실험 조건\n- \n\n## 결과\n- \n\n## 분석 및 해석\n- \n\n## 결론\n- \n\n## 향후 계획\n- `\n    },\n    analysis: {\n      title: `분석 노트 - ${weekOf}`,\n      content: `# 분석 노트\n\n## 분석 목적\n- \n\n## 데이터 소스\n- \n\n## 분석 방법\n- \n\n## 결과\n- \n\n## 해석\n- \n\n## 한계점\n- \n\n## 개선 방안\n- `\n    },\n    meeting: {\n      title: `회의 노트 - ${weekOf}`,\n      content: `# 회의 노트\n\n## 회의 정보\n- 일시: \n- 참석자: \n- 장소: \n\n## 안건\n- \n\n## 논의 내용\n- \n\n## 결정사항\n- \n\n## 액션 아이템\n- \n\n## 다음 회의\n- `\n    }\n  }\n\n  const template = templates[templateType]\n  return createResearchNote(projectId, authorId, weekOf, template.title, template.content)\n}\n\n// 연구노트 검색\nexport function searchResearchNotes(\n  projectId: string,\n  query: string,\n  authorId?: string,\n  startDate?: string,\n  endDate?: string\n): ResearchNote[] {\n  let searchResults: ResearchNote[] = []\n\n  researchNotes.subscribe(list => {\n    searchResults = list.filter(note => {\n      // 프로젝트 필터\n      if (note.projectId !== projectId) return false\n\n      // 작성자 필터\n      if (authorId && note.authorId !== authorId) return false\n\n      // 날짜 필터\n      if (startDate && note.weekOf < startDate) return false\n      if (endDate && note.weekOf > endDate) return false\n\n      // 텍스트 검색\n      if (query) {\n        const searchText = query.toLowerCase()\n        return (\n          note.title.toLowerCase().includes(searchText) ||\n          note.contentMd.toLowerCase().includes(searchText)\n        )\n      }\n\n      return true\n    })\n  })()\n\n  return searchResults\n}\n\n// 연구노트 통계\nexport function getResearchNoteStatistics(\n  projectId: string,\n  period: 'month' | 'quarter' | 'year'\n): {\n  totalNotes: number\n  submittedNotes: number\n  signedNotes: number\n  verifiedNotes: number\n  averageNotesPerWeek: number\n  topAuthors: Array<{ authorId: string; count: number }>\n} {\n  const projectNotes = getResearchNotesByProject(projectId)\n\n  const totalNotes = projectNotes.length\n  const submittedNotes = projectNotes.filter(n => n.signedAt).length\n  const signedNotes = projectNotes.filter(n => n.signedAt).length\n  const verifiedNotes = projectNotes.filter(n => n.verifiedBy).length\n\n  // 주차별 평균 계산\n  const weeks = new Set(projectNotes.map(n => n.weekOf))\n  const averageNotesPerWeek = weeks.size > 0 ? totalNotes / weeks.size : 0\n\n  // 작성자별 통계\n  const authorCounts: Record<string, number> = {}\n  projectNotes.forEach(note => {\n    authorCounts[note.authorId] = (authorCounts[note.authorId] || 0) + 1\n  })\n\n  const topAuthors = Object.entries(authorCounts)\n    .map(([authorId, count]) => ({ authorId, count }))\n    .sort((a, b) => b.count - a.count)\n    .slice(0, 5)\n\n  return {\n    totalNotes,\n    submittedNotes,\n    signedNotes,\n    verifiedNotes,\n    averageNotesPerWeek,\n    topAuthors\n  }\n}\n\n// 연구노트 내보내기 (PDF/Word 형식)\nexport function exportResearchNotes(\n  projectId: string,\n  format: 'pdf' | 'docx' | 'html',\n  startDate?: string,\n  endDate?: string\n): string {\n  const notes = getResearchNotesByProject(projectId)\n  const filteredNotes = notes.filter(note => {\n    if (startDate && note.weekOf < startDate) return false\n    if (endDate && note.weekOf > endDate) return false\n    return true\n  })\n\n  // 실제 구현에서는 서버에서 PDF/Word 생성\n  // 여기서는 HTML 형식으로 반환\n  const html = `\n\t\t<!DOCTYPE html>\n\t\t<html>\n\t\t<head>\n\t\t\t<title>연구노트 모음</title>\n\t\t\t<meta charset=\"utf-8\">\n\t\t</head>\n\t\t<body>\n\t\t\t<h1>연구노트 모음</h1>\n\t\t\t${filteredNotes\n        .map(\n          note => `\n\t\t\t\t<div class=\"note\">\n\t\t\t\t\t<h2>${note.title}</h2>\n\t\t\t\t\t<p><strong>주차:</strong> ${note.weekOf}</p>\n\t\t\t\t\t<p><strong>작성자:</strong> ${note.authorId}</p>\n\t\t\t\t\t<p><strong>작성일:</strong> ${note.createdAt}</p>\n\t\t\t\t\t<div class=\"content\">${note.contentMd}</div>\n\t\t\t\t</div>\n\t\t\t`\n        )\n        .join('')}\n\t\t</body>\n\t\t</html>\n\t`\n\n  return html\n}\n\n// 연구노트 백업\nexport function backupResearchNotes(projectId: string): {\n  notes: ResearchNote[]\n  attachments: Record<string, Document[]>\n  signatures: Record<string, unknown[]>\n  backupDate: string\n} {\n  const notes = getResearchNotesByProject(projectId)\n  const attachments: Record<string, Document[]> = {}\n  const signatures: Record<string, unknown[]> = {}\n\n  notes.forEach(note => {\n    attachments[note.id] = getResearchNoteAttachments(note.id)\n    signatures[note.id] = getResearchNoteSignatures(note.id)\n  })\n\n  return {\n    notes,\n    attachments,\n    signatures,\n    backupDate: new Date().toISOString()\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/sla-alerts.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4586,4589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4586,4589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4763,4766],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4763,4766],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5121,5124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5121,5124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5529,5532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5529,5532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityId' is defined but never used. Allowed unused args must match /^_/u.","line":201,"column":46,"nodeType":null,"messageId":"unusedVar","endLine":201,"endColumn":54},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":225,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":225,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6695,6698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6695,6698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityType' is defined but never used. Allowed unused args must match /^_/u.","line":250,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityId' is defined but never used. Allowed unused args must match /^_/u.","line":251,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":251,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'escalationPath' is defined but never used. Allowed unused args must match /^_/u.","line":252,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":252,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":314,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":314,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8957,8960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8957,8960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11388,11391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11388,11391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getCurrentUTC } from '$lib/utils/date-handler'\nimport { writable } from 'svelte/store'\nimport { logAudit } from './core'\nimport type { Notification, SLAAlert } from './types'\nimport { logger } from '$lib/utils/logger'\n\n// SLA 알림 관리\nexport const slaAlerts = writable<SLAAlert[]>([])\nexport const notifications = writable<Notification[]>([])\nexport const escalationPolicies = writable<Record<string, unknown>>({})\n\n// SLA 정책 정의\nexport function defineSlaPolicies(): void {\n  const policies = {\n    expense_approval: {\n      name: '지출 승인 SLA',\n      entityType: 'expense',\n      stages: [\n        {\n          stage: 'PM_APPROVAL',\n          slaDays: 2,\n          alerts: [\n            { daysBefore: 1, type: 'warning', message: 'PM 승인 마감 1일 전입니다.' },\n            { daysBefore: 0, type: 'breach', message: 'PM 승인 마감일입니다.' },\n            { daysAfter: 1, type: 'escalation', message: 'PM 승인 지연 1일 경과' }\n          ]\n        },\n        {\n          stage: 'SUPPORT_REVIEW',\n          slaDays: 3,\n          alerts: [\n            { daysBefore: 1, type: 'warning', message: '경영지원 검토 마감 1일 전입니다.' },\n            { daysBefore: 0, type: 'breach', message: '경영지원 검토 마감일입니다.' },\n            { daysAfter: 1, type: 'escalation', message: '경영지원 검토 지연 1일 경과' }\n          ]\n        }\n      ],\n      escalationPath: [\n        { level: 1, role: 'PM', delayDays: 1 },\n        { level: 2, role: 'LAB_HEAD', delayDays: 3 },\n        { level: 3, role: 'EXECUTIVE', delayDays: 5 }\n      ]\n    },\n    milestone_delivery: {\n      name: '마일스톤 산출물 제출 SLA',\n      entityType: 'milestone',\n      stages: [\n        {\n          stage: 'DELIVERY',\n          slaDays: 0,\n          alerts: [\n            { daysBefore: 7, type: 'warning', message: '마일스톤 산출물 제출 7일 전입니다.' },\n            { daysBefore: 3, type: 'warning', message: '마일스톤 산출물 제출 3일 전입니다.' },\n            { daysBefore: 1, type: 'warning', message: '마일스톤 산출물 제출 1일 전입니다.' },\n            { daysAfter: 0, type: 'breach', message: '마일스톤 산출물 제출 마감일입니다.' },\n            { daysAfter: 1, type: 'escalation', message: '마일스톤 산출물 제출 지연 1일 경과' }\n          ]\n        }\n      ],\n      escalationPath: [\n        { level: 1, role: 'PM', delayDays: 1 },\n        { level: 2, role: 'LAB_HEAD', delayDays: 3 },\n        { level: 3, role: 'EXECUTIVE', delayDays: 7 }\n      ]\n    },\n    research_note_submission: {\n      name: '연구노트 제출 SLA',\n      entityType: 'research_note',\n      stages: [\n        {\n          stage: 'SUBMISSION',\n          slaDays: 0,\n          alerts: [\n            { daysBefore: 3, type: 'warning', message: '연구노트 제출 3일 전입니다.' },\n            { daysBefore: 1, type: 'warning', message: '연구노트 제출 1일 전입니다.' },\n            { daysAfter: 0, type: 'breach', message: '연구노트 제출 마감일입니다.' },\n            { daysAfter: 3, type: 'escalation', message: '연구노트 제출 지연 3일 경과' }\n          ]\n        }\n      ],\n      escalationPath: [\n        { level: 1, role: 'PM', delayDays: 3 },\n        { level: 2, role: 'LAB_HEAD', delayDays: 7 }\n      ]\n    }\n  }\n\n  escalationPolicies.set(policies)\n}\n\n// SLA 알림 생성\nexport function createSlaAlert(\n  entityType: string,\n  entityId: string,\n  alertType: 'sla-warning' | 'sla-breach' | 'escalation',\n  message: string,\n  severity: 'low' | 'medium' | 'high' | 'critical',\n  assignedTo: string[]\n): string {\n  const alert: SLAAlert = {\n    id: crypto.randomUUID(),\n    entityType,\n    entityId,\n    alertType,\n    message,\n    severity,\n    assignedTo,\n    status: 'active',\n    createdAt: new Date().toISOString()\n  }\n\n  slaAlerts.update(alerts => [...alerts, alert])\n  logAudit('create', 'sla_alert', alert.id, {}, alert)\n\n  // 알림 발송\n  sendNotification(alert)\n\n  return alert.id\n}\n\n// 알림 발송\nfunction sendNotification(alert: SLAAlert): void {\n  const notification: Notification = {\n    id: crypto.randomUUID(),\n    userId: 'current-user', // 실제로는 assignedTo의 각 사용자에게 발송\n    title: `SLA 알림: ${alert.alertType}`,\n    message: alert.message,\n    type: alert.severity === 'critical' ? 'error' : alert.severity === 'high' ? 'warning' : 'info',\n    priority: alert.severity,\n    read: false,\n    actionUrl: `/project-management/${alert.entityType}/${alert.entityId}`,\n    createdAt: new Date().toISOString()\n  }\n\n  notifications.update(notifications => [...notifications, notification])\n}\n\n// SLA 체크 및 알림 생성\nexport function checkSlaCompliance(entityType: string, entityId: string): void {\n  const policies = getEscalationPolicies()\n  const policy =\n    policies[`${entityType}_approval`] ||\n    policies[`${entityType}_delivery`] ||\n    policies[`${entityType}_submission`]\n\n  if (!policy) return\n\n  // 각 단계별 SLA 체크\n  policy.stages.forEach((stage: any) => {\n    checkStageSla(entityType, entityId, stage, policy.escalationPath)\n  })\n}\n\n// 단계별 SLA 체크\nfunction checkStageSla(\n  entityType: string,\n  entityId: string,\n  stage: any,\n  escalationPath: unknown[]\n): void {\n  const entityData = getEntityData(entityType, entityId)\n  if (!entityData) return\n\n  const currentStage = getCurrentStage(entityType, entityId)\n  if (currentStage !== stage.stage) return\n\n  const daysElapsed = calculateDaysElapsed(entityData.createdAt, stage.slaDays)\n\n  // 알림 조건 체크\n  stage.alerts.forEach((alert: any) => {\n    if (shouldTriggerAlert(daysElapsed, alert)) {\n      const assignedTo = getAssignedUsers(entityType, entityId, escalationPath)\n      createSlaAlert(\n        entityType,\n        entityId,\n        alert.type,\n        alert.message,\n        getSeverityFromAlertType(alert.type),\n        assignedTo\n      )\n    }\n  })\n}\n\n// 엔티티 데이터 가져오기\nfunction getEntityData(entityType: string, entityId: string): any {\n  // 실제 구현에서는 해당 엔티티의 데이터를 가져옴\n  switch (entityType) {\n    case 'expense':\n      return { id: entityId, createdAt: '2024-01-20T00:00:00Z', status: 'pending-approval' }\n    case 'milestone':\n      return { id: entityId, createdAt: '2024-01-15T00:00:00Z', dueDate: '2024-01-30T00:00:00Z' }\n    case 'research_note':\n      return { id: entityId, createdAt: '2024-01-22T00:00:00Z', weekOf: '2024-W04' }\n    default:\n      return null\n  }\n}\n\n// 현재 단계 가져오기\nfunction getCurrentStage(entityType: string, entityId: string): string {\n  // 실제 구현에서는 엔티티의 현재 단계를 가져옴\n  switch (entityType) {\n    case 'expense':\n      return 'PM_APPROVAL'\n    case 'milestone':\n      return 'DELIVERY'\n    case 'research_note':\n      return 'SUBMISSION'\n    default:\n      return ''\n  }\n}\n\n// 경과 일수 계산\nfunction calculateDaysElapsed(createdAt: string, slaDays: number): number {\n  const created = new Date(createdAt)\n  const now = new Date(getCurrentUTC())\n  const deadline = new Date(created.getTime() + slaDays * 24 * 60 * 60 * 1000)\n\n  return Math.ceil((now.getTime() - deadline.getTime()) / (1000 * 60 * 60 * 24))\n}\n\n// 알림 발송 조건 체크\nfunction shouldTriggerAlert(daysElapsed: number, alert: any): boolean {\n  if (alert.daysBefore !== undefined) {\n    return daysElapsed === -alert.daysBefore\n  } else if (alert.daysAfter !== undefined) {\n    return daysElapsed === alert.daysAfter\n  }\n  return false\n}\n\n// 알림 타입에서 심각도 결정\nfunction getSeverityFromAlertType(alertType: string): 'low' | 'medium' | 'high' | 'critical' {\n  switch (alertType) {\n    case 'warning':\n      return 'medium'\n    case 'breach':\n      return 'high'\n    case 'escalation':\n      return 'critical'\n    default:\n      return 'low'\n  }\n}\n\n// 할당된 사용자 가져오기\nfunction getAssignedUsers(\n  entityType: string,\n  entityId: string,\n  escalationPath: unknown[]\n): string[] {\n  // 실제 구현에서는 엔티티의 담당자와 에스컬레이션 경로를 기반으로 사용자 결정\n  const users = ['PM', 'LAB_HEAD', 'EXECUTIVE']\n  return users\n}\n\n// 에스컬레이션 정책 가져오기\nfunction getEscalationPolicies(): Record<string, unknown> {\n  let policies: Record<string, unknown> = {}\n  escalationPolicies.subscribe(p => {\n    policies = p\n  })()\n  return policies\n}\n\n// SLA 알림 해결\nexport function resolveSlaAlert(alertId: string, resolvedBy: string, resolution: string): void {\n  slaAlerts.update(alerts => {\n    const index = alerts.findIndex(a => a.id === alertId)\n    if (index === -1) return alerts\n\n    const alert = alerts[index]\n    const updatedAlert = {\n      ...alert,\n      status: 'resolved' as const,\n      resolvedAt: new Date().toISOString()\n    }\n\n    const newList = [...alerts]\n    newList[index] = updatedAlert\n\n    logAudit('resolve', 'sla_alert', alertId, { resolvedBy, resolution }, updatedAlert)\n\n    return newList\n  })\n}\n\n// SLA 알림 에스컬레이션\nexport function escalateSlaAlert(alertId: string, escalatedBy: string, reason: string): void {\n  slaAlerts.update(alerts => {\n    const index = alerts.findIndex(a => a.id === alertId)\n    if (index === -1) return alerts\n\n    const alert = alerts[index]\n    const updatedAlert = {\n      ...alert,\n      status: 'escalated' as const,\n      severity: 'critical' as const,\n      assignedTo: [...alert.assignedTo, 'EXECUTIVE'] // 상위 레벨로 에스컬레이션\n    }\n\n    const newList = [...alerts]\n    newList[index] = updatedAlert\n\n    logAudit('escalate', 'sla_alert', alertId, { escalatedBy, reason }, updatedAlert)\n\n    return newList\n  })\n}\n\n// SLA 통계\nexport function getSlaStatistics(period: 'day' | 'week' | 'month'): any {\n  let allAlerts: SLAAlert[] = []\n\n  slaAlerts.subscribe(alerts => {\n    allAlerts = alerts\n  })()\n\n  const now = new Date()\n  const periodStart = getPeriodStart(now, period)\n\n  const periodAlerts = allAlerts.filter(alert => new Date(alert.createdAt) >= periodStart)\n\n  const totalAlerts = periodAlerts.length\n  const activeAlerts = periodAlerts.filter(a => a.status === 'active').length\n  const resolvedAlerts = periodAlerts.filter(a => a.status === 'resolved').length\n  const escalatedAlerts = periodAlerts.filter(a => a.status === 'escalated').length\n\n  const severityBreakdown = {\n    critical: periodAlerts.filter(a => a.severity === 'critical').length,\n    high: periodAlerts.filter(a => a.severity === 'high').length,\n    medium: periodAlerts.filter(a => a.severity === 'medium').length,\n    low: periodAlerts.filter(a => a.severity === 'low').length\n  }\n\n  const typeBreakdown = {\n    warning: periodAlerts.filter(a => a.alertType === 'sla-warning').length,\n    breach: periodAlerts.filter(a => a.alertType === 'sla-breach').length,\n    escalation: periodAlerts.filter(a => a.alertType === 'escalation').length\n  }\n\n  const averageResolutionTime = calculateAverageResolutionTime(periodAlerts)\n\n  return {\n    period,\n    totalAlerts,\n    activeAlerts,\n    resolvedAlerts,\n    escalatedAlerts,\n    resolutionRate: totalAlerts > 0 ? (resolvedAlerts / totalAlerts) * 100 : 0,\n    escalationRate: totalAlerts > 0 ? (escalatedAlerts / totalAlerts) * 100 : 0,\n    severityBreakdown,\n    typeBreakdown,\n    averageResolutionTime\n  }\n}\n\n// 기간 시작일 계산\nfunction getPeriodStart(now: Date, period: string): Date {\n  const start = new Date(now)\n\n  switch (period) {\n    case 'day':\n      start.setHours(0, 0, 0, 0)\n      break\n    case 'week':\n      start.setDate(start.getDate() - 7)\n      break\n    case 'month':\n      start.setMonth(start.getMonth() - 1)\n      break\n  }\n\n  return start\n}\n\n// 평균 해결 시간 계산\nfunction calculateAverageResolutionTime(alerts: SLAAlert[]): number {\n  const resolvedAlerts = alerts.filter(a => a.status === 'resolved' && a.resolvedAt)\n\n  if (resolvedAlerts.length === 0) return 0\n\n  const totalTime = resolvedAlerts.reduce((sum, alert) => {\n    const created = new Date(alert.createdAt).getTime()\n    const resolved = new Date(alert.resolvedAt!).getTime()\n    return sum + (resolved - created)\n  }, 0)\n\n  return totalTime / resolvedAlerts.length\n}\n\n// SLA 대시보드 데이터\nexport function getSlaDashboardData(): any {\n  const dayStats = getSlaStatistics('day')\n  const weekStats = getSlaStatistics('week')\n  const monthStats = getSlaStatistics('month')\n\n  let recentAlerts: SLAAlert[] = []\n  slaAlerts.subscribe(alerts => {\n    recentAlerts = alerts\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 10)\n  })()\n\n  return {\n    dayStats,\n    weekStats,\n    monthStats,\n    recentAlerts,\n    trends: {\n      alertsTrend: calculateTrend(dayStats.totalAlerts, weekStats.totalAlerts),\n      resolutionTrend: calculateTrend(dayStats.resolutionRate, weekStats.resolutionRate),\n      escalationTrend: calculateTrend(dayStats.escalationRate, weekStats.escalationRate)\n    }\n  }\n}\n\n// 트렌드 계산\nfunction calculateTrend(current: number, previous: number): 'up' | 'down' | 'stable' {\n  const change = ((current - previous) / previous) * 100\n\n  if (change > 5) return 'up'\n  if (change < -5) return 'down'\n  return 'stable'\n}\n\n// SLA 알림 자동 체크 스케줄링\nexport function scheduleSlaChecks(): void {\n  // 매시간 SLA 체크 실행\n  setInterval(\n    () => {\n      logger.log('Running SLA checks...')\n\n      // 모든 활성 엔티티에 대해 SLA 체크\n      checkAllActiveEntities()\n    },\n    60 * 60 * 1000\n  ) // 1시간마다\n}\n\n// 모든 활성 엔티티 SLA 체크\nfunction checkAllActiveEntities(): void {\n  // 실제 구현에서는 모든 활성 엔티티를 가져와서 체크\n  const activeEntities = [\n    { type: 'expense', id: 'expense-1' },\n    { type: 'expense', id: 'expense-2' },\n    { type: 'milestone', id: 'milestone-1' },\n    { type: 'research_note', id: 'note-1' }\n  ]\n\n  activeEntities.forEach(entity => {\n    checkSlaCompliance(entity.type, entity.id)\n  })\n}\n\n// SLA 알림 내보내기\nexport function exportSlaAlerts(format: 'json' | 'csv' | 'excel', period?: string): string {\n  let allAlerts: SLAAlert[] = []\n\n  slaAlerts.subscribe(alerts => {\n    if (period) {\n      const periodStart = getPeriodStart(new Date(), period)\n      allAlerts = alerts.filter(alert => new Date(alert.createdAt) >= periodStart)\n    } else {\n      allAlerts = alerts\n    }\n  })()\n\n  if (format === 'json') {\n    return JSON.stringify(allAlerts, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader =\n      'ID,Entity Type,Entity ID,Alert Type,Message,Severity,Status,Created At,Resolved At\\n'\n    const csvRows = allAlerts\n      .map(\n        alert =>\n          `${alert.id},${alert.entityType},${alert.entityId},${alert.alertType},\"${alert.message}\",${alert.severity},${alert.status},${alert.createdAt},${alert.resolvedAt || ''}`\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(allAlerts, null, 2)\n}\n\n// SLA 알림 템플릿 관리\nexport function createSlaTemplate(\n  templateName: string,\n  entityType: string,\n  stages: unknown[],\n  escalationPath: unknown[]\n): void {\n  const template = {\n    name: templateName,\n    entityType,\n    stages,\n    escalationPath,\n    createdAt: new Date().toISOString()\n  }\n\n  escalationPolicies.update(policies => ({\n    ...policies,\n    [templateName]: template\n  }))\n}\n\n// SLA 알림 설정 업데이트\nexport function updateSlaSettings(\n  entityType: string,\n  settings: {\n    enabled: boolean\n    alertChannels: string[]\n    escalationEnabled: boolean\n    notificationFrequency: 'immediate' | 'daily' | 'weekly'\n  }\n): void {\n  // 실제 구현에서는 SLA 설정을 저장\n  logger.log(`SLA settings updated for ${entityType}:`, settings)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/submission-bundles.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2315,2318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2315,2318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'period' is defined but never used. Allowed unused args must match /^_/u.","line":99,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":58},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":124,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'period' is defined but never used. Allowed unused args must match /^_/u.","line":124,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":124,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3347,3350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3347,3350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":153,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":46},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'period' is defined but never used. Allowed unused args must match /^_/u.","line":153,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":153,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3948,3951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3948,3951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectId' is defined but never used. Allowed unused args must match /^_/u.","line":177,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'period' is defined but never used. Allowed unused args must match /^_/u.","line":177,"column":58,"nodeType":null,"messageId":"unusedVar","endLine":177,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":177,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":177,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4476,4479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4476,4479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5114,5117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5114,5117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5133,5136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5133,5136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":213,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":213,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5155,5158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5155,5158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5179,5182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5179,5182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6028,6031],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6028,6031],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":255,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":255,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6462,6465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6462,6465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6957,6960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6957,6960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7312,7315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7312,7315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7794,7797],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7794,7797],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7814,7817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7814,7817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":310,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7836,7839],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7836,7839],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8596,8599],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8596,8599],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":172,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":175,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8680,8683],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8680,8683],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8868,8871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8868,8871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":318,"column":177,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":318,"endColumn":180,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8954,8957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8954,8957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'bundleFile' is defined but never used. Allowed unused args must match /^_/u.","line":346,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":346,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":447,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":447,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12486,12489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12486,12489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":498,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":498,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13023,13026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13023,13026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":526,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13716,13719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13716,13719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":564,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15005,15008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15005,15008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable } from 'svelte/store'\nimport type { SubmissionBundle, Document } from './types'\nimport { logAudit } from './core'\nimport { logger } from '$lib/utils/logger'\n\n// 업로드 번들 관리\nexport const submissionBundles = writable<SubmissionBundle[]>([])\nexport const bundleTemplates = writable<Record<string, unknown>>({})\n\n// 국가R&D 업로드 번들 생성\nexport function createSubmissionBundle(\n  projectId: string,\n  period: string,\n  requestedBy: string\n): string {\n  const bundleId = crypto.randomUUID()\n\n  // 번들 생성 시작\n  const bundle: SubmissionBundle = {\n    id: bundleId,\n    projectId,\n    period,\n    fileUrl: '', // 생성 완료 후 설정\n    manifestXml: '', // 생성 완료 후 설정\n    checksum: '', // 생성 완료 후 설정\n    createdBy: requestedBy,\n    createdAt: new Date().toISOString(),\n    status: 'generating'\n  }\n\n  submissionBundles.update(list => [...list, bundle])\n  logAudit('create', 'submission_bundle', bundleId, { projectId, period }, bundle)\n\n  // 비동기로 번들 생성\n  generateBundleContent(bundleId, projectId, period)\n\n  return bundleId\n}\n\n// 번들 콘텐츠 생성\nasync function generateBundleContent(\n  bundleId: string,\n  projectId: string,\n  period: string\n): Promise<void> {\n  try {\n    // 1. 프로젝트 정보 수집\n    const projectInfo = await collectProjectInfo(projectId)\n\n    // 2. 문서 수집\n    const documents = await collectDocuments(projectId, period)\n\n    // 3. 예산 정보 수집\n    const budgetInfo = await collectBudgetInfo(projectId, period)\n\n    // 4. 인력 정보 수집\n    const personnelInfo = await collectPersonnelInfo(projectId, period)\n\n    // 5. 성과 정보 수집\n    const performanceInfo = await collectPerformanceInfo(projectId, period)\n\n    // 6. 매니페스트 XML 생성\n    const manifestXml = generateManifestXml(projectInfo, budgetInfo, personnelInfo, performanceInfo)\n\n    // 7. 요약 CSV 생성\n    const summaryCsv = generateSummaryCsv(budgetInfo, personnelInfo, performanceInfo)\n\n    // 8. 번들 파일 생성\n    const bundleFile = await createBundleFile(documents, manifestXml, summaryCsv)\n\n    // 9. 체크섬 계산\n    const checksum = await calculateChecksum(bundleFile)\n\n    // 10. 번들 상태 업데이트\n    updateBundleStatus(bundleId, 'ready', bundleFile.url, manifestXml, checksum)\n  } catch (error) {\n    logger.error('Bundle generation failed:', error)\n    updateBundleStatus(bundleId, 'failed', '', '', '')\n  }\n}\n\n// 프로젝트 정보 수집\nasync function collectProjectInfo(projectId: string): Promise<any> {\n  // 실제 구현에서는 프로젝트 데이터를 가져옴\n  return {\n    id: projectId,\n    code: 'R&D-2024-001',\n    title: 'AI 기반 스마트 제조 시스템 개발',\n    sponsor: '과학기술정보통신부',\n    startDate: '2024-01-01',\n    endDate: '2024-12-31',\n    manager: '김연구원',\n    department: '개발팀',\n    description: 'AI 기술을 활용한 스마트 제조 시스템 개발 프로젝트'\n  }\n}\n\n// 문서 수집\nasync function collectDocuments(projectId: string, period: string): Promise<Document[]> {\n  // 실제 구현에서는 해당 기간의 모든 문서를 수집\n  const mockDocuments = [\n    {\n      id: 'doc-1',\n      type: 'requisition',\n      filename: '기안서_2024-01-15.pdf',\n      storageUrl: '/documents/requisition_2024-01-15.pdf',\n      sha256: 'abc123...',\n      uploadedAt: '2024-01-15T10:00:00Z'\n    },\n    {\n      id: 'doc-2',\n      type: 'tax_invoice',\n      filename: '세금계산서_2024-01-20.pdf',\n      storageUrl: '/documents/tax_invoice_2024-01-20.pdf',\n      sha256: 'def456...',\n      uploadedAt: '2024-01-20T14:30:00Z'\n    }\n  ]\n\n  return mockDocuments\n}\n\n// 예산 정보 수집\nasync function collectBudgetInfo(projectId: string, period: string): Promise<any> {\n  // 실제 구현에서는 예산 데이터를 수집\n  return {\n    totalBudget: 100000000,\n    executedAmount: 60000000,\n    categoryBreakdown: [\n      {\n        category: 'PERSONNEL_CASH',\n        planned: 50000000,\n        executed: 35000000,\n        rate: 70\n      },\n      {\n        category: 'MATERIAL',\n        planned: 30000000,\n        executed: 20000000,\n        rate: 67\n      },\n      {\n        category: 'RESEARCH_ACTIVITY',\n        planned: 20000000,\n        executed: 5000000,\n        rate: 25\n      }\n    ]\n  }\n}\n\n// 인력 정보 수집\nasync function collectPersonnelInfo(projectId: string, period: string): Promise<any> {\n  // 실제 구현에서는 인력 데이터를 수집\n  return {\n    totalParticipants: 8,\n    participationDetails: [\n      {\n        personId: 'person-1',\n        name: '김연구원',\n        department: '개발팀',\n        participationRate: 100,\n        monthlyAllocation: 5000000\n      },\n      {\n        personId: 'person-2',\n        name: '이연구원',\n        department: '개발팀',\n        participationRate: 80,\n        monthlyAllocation: 4000000\n      }\n    ]\n  }\n}\n\n// 성과 정보 수집\nasync function collectPerformanceInfo(projectId: string, period: string): Promise<any> {\n  // 실제 구현에서는 성과 데이터를 수집\n  return {\n    milestones: [\n      {\n        id: 'milestone-1',\n        title: '시스템 설계 완료',\n        status: 'completed',\n        completionDate: '2024-01-30'\n      },\n      {\n        id: 'milestone-2',\n        title: '프로토타입 v1.0 개발',\n        status: 'completed',\n        completionDate: '2024-02-15'\n      }\n    ],\n    deliverables: [\n      {\n        title: '시스템 설계서',\n        type: 'document',\n        status: 'delivered'\n      },\n      {\n        title: '프로토타입 v1.0',\n        type: 'prototype',\n        status: 'delivered'\n      }\n    ]\n  }\n}\n\n// 매니페스트 XML 생성\nfunction generateManifestXml(\n  projectInfo: any,\n  budgetInfo: any,\n  personnelInfo: any,\n  performanceInfo: any\n): string {\n  const xml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<submission_bundle>\n\t<project_info>\n\t\t<id>${projectInfo.id}</id>\n\t\t<code>${projectInfo.code}</code>\n\t\t<title>${projectInfo.title}</title>\n\t\t<sponsor>${projectInfo.sponsor}</sponsor>\n\t\t<start_date>${projectInfo.startDate}</start_date>\n\t\t<end_date>${projectInfo.endDate}</end_date>\n\t\t<manager>${projectInfo.manager}</manager>\n\t\t<department>${projectInfo.department}</department>\n\t\t<description>${projectInfo.description}</description>\n\t</project_info>\n\t\n\t<budget_info>\n\t\t<total_budget>${budgetInfo.totalBudget}</total_budget>\n\t\t<executed_amount>${budgetInfo.executedAmount}</executed_amount>\n\t\t<execution_rate>${((budgetInfo.executedAmount / budgetInfo.totalBudget) * 100).toFixed(2)}</execution_rate>\n\t\t<categories>\n\t\t\t${budgetInfo.categoryBreakdown\n        .map(\n          (cat: any) => `\n\t\t\t<category>\n\t\t\t\t<name>${cat.category}</name>\n\t\t\t\t<planned>${cat.planned}</planned>\n\t\t\t\t<executed>${cat.executed}</executed>\n\t\t\t\t<rate>${cat.rate}</rate>\n\t\t\t</category>\n\t\t\t`\n        )\n        .join('')}\n\t\t</categories>\n\t</budget_info>\n\t\n\t<personnel_info>\n\t\t<total_participants>${personnelInfo.totalParticipants}</total_participants>\n\t\t<participants>\n\t\t\t${personnelInfo.participationDetails\n        .map(\n          (person: any) => `\n\t\t\t<participant>\n\t\t\t\t<person_id>${person.personId}</person_id>\n\t\t\t\t<name>${person.name}</name>\n\t\t\t\t<department>${person.department}</department>\n\t\t\t\t<participation_rate>${person.participationRate}</participation_rate>\n\t\t\t\t<monthly_allocation>${person.monthlyAllocation}</monthly_allocation>\n\t\t\t</participant>\n\t\t\t`\n        )\n        .join('')}\n\t\t</participants>\n\t</personnel_info>\n\t\n\t<performance_info>\n\t\t<milestones>\n\t\t\t${performanceInfo.milestones\n        .map(\n          (milestone: any) => `\n\t\t\t<milestone>\n\t\t\t\t<id>${milestone.id}</id>\n\t\t\t\t<title>${milestone.title}</title>\n\t\t\t\t<status>${milestone.status}</status>\n\t\t\t\t<completion_date>${milestone.completionDate}</completion_date>\n\t\t\t</milestone>\n\t\t\t`\n        )\n        .join('')}\n\t\t</milestones>\n\t\t<deliverables>\n\t\t\t${performanceInfo.deliverables\n        .map(\n          (deliverable: any) => `\n\t\t\t<deliverable>\n\t\t\t\t<title>${deliverable.title}</title>\n\t\t\t\t<type>${deliverable.type}</type>\n\t\t\t\t<status>${deliverable.status}</status>\n\t\t\t</deliverable>\n\t\t\t`\n        )\n        .join('')}\n\t\t</deliverables>\n\t</performance_info>\n\t\n\t<metadata>\n\t\t<generated_at>${new Date().toISOString()}</generated_at>\n\t\t<version>1.0</version>\n\t\t<format>R&D_SUBMISSION_BUNDLE</format>\n\t</metadata>\n</submission_bundle>`\n\n  return xml\n}\n\n// 요약 CSV 생성\nfunction generateSummaryCsv(budgetInfo: any, personnelInfo: any, performanceInfo: any): string {\n  const csv = `구분,항목,계획,실행,비율\n예산,총예산,${budgetInfo.totalBudget},${budgetInfo.executedAmount},${((budgetInfo.executedAmount / budgetInfo.totalBudget) * 100).toFixed(2)}%\n예산,인건비,${budgetInfo.categoryBreakdown[0].planned},${budgetInfo.categoryBreakdown[0].executed},${budgetInfo.categoryBreakdown[0].rate}%\n예산,재료비,${budgetInfo.categoryBreakdown[1].planned},${budgetInfo.categoryBreakdown[1].executed},${budgetInfo.categoryBreakdown[1].rate}%\n예산,연구활동비,${budgetInfo.categoryBreakdown[2].planned},${budgetInfo.categoryBreakdown[2].executed},${budgetInfo.categoryBreakdown[2].rate}%\n인력,총참여자,${personnelInfo.totalParticipants},${personnelInfo.totalParticipants},100%\n성과,완료마일스톤,${performanceInfo.milestones.length},${performanceInfo.milestones.filter((m: any) => m.status === 'completed').length},${((performanceInfo.milestones.filter((m: any) => m.status === 'completed').length / performanceInfo.milestones.length) * 100).toFixed(2)}%\n성과,제출산출물,${performanceInfo.deliverables.length},${performanceInfo.deliverables.filter((d: any) => d.status === 'delivered').length},${((performanceInfo.deliverables.filter((d: any) => d.status === 'delivered').length / performanceInfo.deliverables.length) * 100).toFixed(2)}%`\n\n  return csv\n}\n\n// 번들 파일 생성\nasync function createBundleFile(\n  documents: Document[],\n  manifestXml: string,\n  summaryCsv: string\n): Promise<{ url: string; size: number }> {\n  // 실제 구현에서는 ZIP 파일을 생성하고 스토리지에 업로드\n  // 여기서는 모의 구현\n  const bundleData = {\n    documents: documents,\n    manifest: manifestXml,\n    summary: summaryCsv,\n    createdAt: new Date().toISOString()\n  }\n\n  // 모의 파일 URL과 크기\n  return {\n    url: `/bundles/submission_${Date.now()}.zip`,\n    size: JSON.stringify(bundleData).length\n  }\n}\n\n// 체크섬 계산\nasync function calculateChecksum(bundleFile: { url: string; size: number }): Promise<string> {\n  // 실제 구현에서는 파일의 SHA-256 해시를 계산\n  // 여기서는 모의 해시\n  return `sha256:${crypto.randomUUID().replace(/-/g, '')}`\n}\n\n// 번들 상태 업데이트\nfunction updateBundleStatus(\n  bundleId: string,\n  status: SubmissionBundle['status'],\n  fileUrl: string,\n  manifestXml: string,\n  checksum: string\n): void {\n  submissionBundles.update(list => {\n    const index = list.findIndex(b => b.id === bundleId)\n    if (index === -1) return list\n\n    const bundle = list[index]\n    const updatedBundle = {\n      ...bundle,\n      status,\n      fileUrl,\n      manifestXml,\n      checksum\n    }\n\n    const newList = [...list]\n    newList[index] = updatedBundle\n\n    logAudit('update', 'submission_bundle', bundleId, { status }, updatedBundle)\n\n    return newList\n  })\n}\n\n// 번들 다운로드\nexport function downloadBundle(bundleId: string): void {\n  let bundle: SubmissionBundle | undefined = undefined\n\n  submissionBundles.subscribe(list => {\n    bundle = list.find(b => b.id === bundleId)\n  })()\n\n  if (!bundle || bundle.status !== 'ready') {\n    throw new Error('Bundle not ready for download')\n  }\n\n  // 실제 구현에서는 파일 다운로드 처리\n  logger.log(`Downloading bundle: ${bundle.fileUrl}`)\n\n  // 다운로드 이력 기록\n  logAudit('download', 'submission_bundle', bundleId, { fileUrl: bundle.fileUrl }, {})\n}\n\n// 번들 검증\nexport function validateBundle(bundleId: string): {\n  valid: boolean\n  errors: string[]\n  warnings: string[]\n} {\n  let bundle: SubmissionBundle | undefined = undefined\n\n  submissionBundles.subscribe(list => {\n    bundle = list.find(b => b.id === bundleId)\n  })()\n\n  if (!bundle) {\n    return {\n      valid: false,\n      errors: ['Bundle not found'],\n      warnings: []\n    }\n  }\n\n  const errors: string[] = []\n  const warnings: string[] = []\n\n  // 1. 필수 파일 존재 여부 확인\n  if (!bundle.fileUrl) {\n    errors.push('Bundle file not found')\n  }\n\n  if (!bundle.manifestXml) {\n    errors.push('Manifest XML not found')\n  }\n\n  if (!bundle.checksum) {\n    errors.push('Checksum not found')\n  }\n\n  // 2. 매니페스트 XML 유효성 검사\n  if (bundle.manifestXml) {\n    try {\n      const parser = new DOMParser()\n      const doc = parser.parseFromString(bundle.manifestXml, 'text/xml')\n      const parseError = doc.querySelector('parsererror')\n\n      if (parseError) {\n        errors.push('Invalid XML format in manifest')\n      }\n    } catch (error) {\n      errors.push('Failed to parse manifest XML')\n    }\n  }\n\n  // 3. 체크섬 유효성 검사\n  if (bundle.checksum && !bundle.checksum.startsWith('sha256:')) {\n    warnings.push('Invalid checksum format')\n  }\n\n  // 4. 번들 상태 확인\n  if (bundle.status !== 'ready') {\n    errors.push(`Bundle status is ${bundle.status}, expected 'ready'`)\n  }\n\n  return {\n    valid: errors.length === 0,\n    errors,\n    warnings\n  }\n}\n\n// 번들 템플릿 생성\nexport function createBundleTemplate(\n  templateName: string,\n  templateData: {\n    requiredDocuments: string[]\n    manifestStructure: any\n    validationRules: unknown[]\n  }\n): void {\n  const template = {\n    name: templateName,\n    requiredDocuments: templateData.requiredDocuments,\n    manifestStructure: templateData.manifestStructure,\n    validationRules: templateData.validationRules,\n    createdAt: new Date().toISOString()\n  }\n\n  bundleTemplates.update(templates => ({\n    ...templates,\n    [templateName]: template\n  }))\n}\n\n// 번들 템플릿 적용\nexport function applyBundleTemplate(\n  projectId: string,\n  templateName: string,\n  period: string\n): string {\n  let template: any = undefined\n\n  bundleTemplates.subscribe(templates => {\n    template = templates[templateName]\n  })()\n\n  if (!template) {\n    throw new Error(`Template ${templateName} not found`)\n  }\n\n  // 템플릿을 적용하여 번들 생성\n  return createSubmissionBundle(projectId, period, 'current-user')\n}\n\n// 번들 이력 조회\nexport function getBundleHistory(projectId: string): SubmissionBundle[] {\n  let history: SubmissionBundle[] = []\n\n  submissionBundles.subscribe(list => {\n    history = list\n      .filter(b => b.projectId === projectId)\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n  })()\n\n  return history\n}\n\n// 번들 통계\nexport function getBundleStatistics(projectId: string): any {\n  const history = getBundleHistory(projectId)\n\n  const totalBundles = history.length\n  const readyBundles = history.filter(b => b.status === 'ready').length\n  const generatingBundles = history.filter(b => b.status === 'generating').length\n  const failedBundles = history.filter(b => b.status === 'failed').length\n  const uploadedBundles = history.filter(b => b.status === 'uploaded').length\n\n  const averageGenerationTime = calculateAverageGenerationTime(history)\n\n  return {\n    totalBundles,\n    readyBundles,\n    generatingBundles,\n    failedBundles,\n    uploadedBundles,\n    successRate: totalBundles > 0 ? (readyBundles / totalBundles) * 100 : 0,\n    averageGenerationTime\n  }\n}\n\n// 평균 생성 시간 계산\nfunction calculateAverageGenerationTime(history: SubmissionBundle[]): number {\n  const completedBundles = history.filter(b => b.status === 'ready' || b.status === 'uploaded')\n\n  if (completedBundles.length === 0) return 0\n\n  const totalTime = completedBundles.reduce((sum, bundle) => {\n    const created = new Date(bundle.createdAt).getTime()\n    const completed = new Date(bundle.createdAt).getTime() + 300000 // 모의 완료 시간 (5분 후)\n    return sum + (completed - created)\n  }, 0)\n\n  return totalTime / completedBundles.length\n}\n\n// 번들 대시보드 데이터\nexport function getBundleDashboardData(): any {\n  let allBundles: SubmissionBundle[] = []\n\n  submissionBundles.subscribe(list => {\n    allBundles = list\n  })()\n\n  const recentBundles = allBundles\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 10)\n\n  const statusCounts = {\n    generating: allBundles.filter(b => b.status === 'generating').length,\n    ready: allBundles.filter(b => b.status === 'ready').length,\n    uploaded: allBundles.filter(b => b.status === 'uploaded').length,\n    failed: allBundles.filter(b => b.status === 'failed').length\n  }\n\n  return {\n    recentBundles,\n    statusCounts,\n    totalBundles: allBundles.length\n  }\n}\n\n// 번들 자동 생성 스케줄링\nexport function scheduleAutoBundleGeneration(\n  projectId: string,\n  schedule: 'monthly' | 'quarterly' | 'yearly'\n): void {\n  // 실제 구현에서는 스케줄러에 등록\n  const scheduleConfig = {\n    projectId,\n    schedule,\n    enabled: true,\n    createdAt: new Date().toISOString()\n  }\n\n  logger.log('Auto bundle generation scheduled:', scheduleConfig)\n}\n\n// 번들 내보내기\nexport function exportBundleData(format: 'json' | 'csv' | 'excel'): string {\n  let allBundles: SubmissionBundle[] = []\n\n  submissionBundles.subscribe(list => {\n    allBundles = list\n  })()\n\n  if (format === 'json') {\n    return JSON.stringify(allBundles, null, 2)\n  } else if (format === 'csv') {\n    const csvHeader = 'ID,Project ID,Period,Status,File URL,Checksum,Created By,Created At\\n'\n    const csvRows = allBundles\n      .map(\n        bundle =>\n          `${bundle.id},${bundle.projectId},${bundle.period},${bundle.status},${bundle.fileUrl},${bundle.checksum},${bundle.createdBy},${bundle.createdAt}`\n      )\n      .join('\\n')\n    return csvHeader + csvRows\n  }\n\n  return JSON.stringify(allBundles, null, 2)\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/project-management/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7108,7111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7108,7111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":330,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":330,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7118,7121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7118,7121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Project Management System Types\n// 프로젝트 관리 시스템을 위한 타입 정의\n\nexport interface Project {\n  id: string\n  code: string\n  title: string\n  description?: string\n  sponsor?: string\n  sponsorName?: string\n  sponsorType: 'government' | 'private' | 'internal'\n  startDate?: string\n  endDate?: string\n  managerId?: string\n  managerName?: string\n  status: 'planning' | 'active' | 'completed' | 'cancelled' | 'suspended'\n  budgetTotal?: number\n  budgetCurrency: string\n  researchType?: 'basic' | 'applied' | 'development'\n  technologyArea?: string\n  priority: 'low' | 'medium' | 'high' | 'critical'\n  memberCount?: number\n  totalParticipationRate?: number\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ProjectMember {\n  id: string\n  projectId: string\n  employeeId: string\n  employeeName?: string\n  department?: string\n  role: string\n  startDate: string\n  endDate?: string\n  participationRate: number\n  monthlySalary?: number\n  status: 'active' | 'inactive' | 'completed' | 'withdrawn'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ProjectBudget {\n  id: string\n  projectId: string\n  fiscalYear: number\n  totalBudget: number\n  personnelCost: number\n  materialCost: number\n  researchActivityCost: number\n  indirectCost: number\n  otherCost: number\n  spentAmount: number\n  currency: string\n  status: 'planned' | 'approved' | 'executing' | 'completed'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ParticipationRate {\n  id: string\n  employeeId: string\n  employeeName?: string\n  projectId: string\n  projectName?: string\n  participationRate: number\n  startDate: string\n  endDate?: string\n  status: 'active' | 'inactive' | 'completed'\n  createdBy?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ParticipationRateHistory {\n  id: string\n  employeeId: string\n  employeeName?: string\n  projectId: string\n  projectName?: string\n  oldRate?: number\n  newRate: number\n  changeReason:\n    | 'project_start'\n    | 'project_end'\n    | 'manual_adjustment'\n    | 'employee_leave'\n    | 'employee_join'\n  changeDate: string\n  changedBy?: string\n  changedByName?: string\n  notes?: string\n  createdAt: string\n}\n\nexport interface BudgetCategory {\n  id: string\n  code: string\n  name: string\n  description?: string\n  parentCategoryId?: string\n  isActive: boolean\n  sortOrder: number\n  createdAt: string\n  updatedAt: string\n  // 추가 속성들\n  categoryCode?: string\n  nameKo?: string\n  requiredDocs?: Document[]\n  defaultWorkflow?: {\n    steps: string[]\n    sla: number\n  }\n  defaultSlaDays?: number\n  defaultOwners?: {\n    primary: string\n    secondary: string\n  }\n}\n\nexport interface ProjectMilestone {\n  id: string\n  projectId: string\n  title: string\n  description?: string\n  milestoneDate: string\n  status: 'pending' | 'completed' | 'delayed' | 'cancelled'\n  completionDate?: string\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ProjectRisk {\n  id: string\n  projectId: string\n  riskType: 'technical' | 'schedule' | 'budget' | 'resource' | 'external'\n  title: string\n  description?: string\n  probability: 'low' | 'medium' | 'high'\n  impact: 'low' | 'medium' | 'high'\n  status: 'open' | 'mitigated' | 'closed'\n  mitigationPlan?: string\n  ownerId?: string\n  ownerName?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 대시보드용 요약 정보\nexport interface ProjectSummary {\n  totalProjects: number\n  activeProjects: number\n  completedProjects: number\n  totalBudget: number\n  currentYearBudget: number\n  totalMembers: number\n  overParticipationEmployees: number\n}\n\nexport interface EmployeeParticipationSummary {\n  employeeId: string\n  employeeName: string\n  department: string\n  activeProjects: number\n  totalParticipationRate: number\n  participationStatus: 'OVER_LIMIT' | 'FULL' | 'AVAILABLE'\n  projects: Array<{\n    projectId: string\n    projectName: string\n    participationRate: number\n    role: string\n  }>\n}\n\nexport interface BudgetSummaryByYear {\n  fiscalYear: number\n  projectCount: number\n  totalBudget: number\n  totalPersonnelCost: number\n  totalMaterialCost: number\n  totalResearchActivityCost: number\n  totalIndirectCost: number\n  totalOtherCost: number\n  totalSpentAmount: number\n}\n\n// API 요청/응답 타입\nexport interface CreateProjectRequest {\n  code: string\n  title: string\n  description?: string\n  sponsor?: string\n  sponsorName?: string\n  sponsorType: 'government' | 'private' | 'internal'\n  startDate?: string\n  endDate?: string\n  managerId?: string\n  budgetTotal?: number\n  researchType?: 'basic' | 'applied' | 'development'\n  technologyArea?: string\n  priority: 'low' | 'medium' | 'high' | 'critical'\n}\n\nexport interface UpdateProjectRequest extends Partial<CreateProjectRequest> {\n  id: string\n}\n\nexport interface AddProjectMemberRequest {\n  projectId: string\n  employeeId: string\n  role: string\n  startDate: string\n  endDate?: string\n  participationRate: number\n  monthlySalary?: number\n  notes?: string\n}\n\nexport interface UpdateProjectMemberRequest extends Partial<AddProjectMemberRequest> {\n  id: string\n}\n\nexport interface CreateProjectBudgetRequest {\n  projectId: string\n  fiscalYear: number\n  totalBudget: number\n  personnelCost?: number\n  materialCost?: number\n  researchActivityCost?: number\n  indirectCost?: number\n  otherCost?: number\n  notes?: string\n}\n\nexport interface UpdateProjectBudgetRequest extends Partial<CreateProjectBudgetRequest> {\n  id: string\n}\n\nexport interface UpdateParticipationRateRequest {\n  employeeId: string\n  projectId: string\n  participationRate: number\n  changeReason:\n    | 'project_start'\n    | 'project_end'\n    | 'manual_adjustment'\n    | 'employee_leave'\n    | 'employee_join'\n  notes?: string\n}\n\n// 필터링 및 검색 타입\nexport interface ProjectFilters {\n  status?: string\n  sponsorType?: string\n  researchType?: string\n  priority?: string\n  managerId?: string\n  startDateFrom?: string\n  startDateTo?: string\n  search?: string\n}\n\nexport interface ParticipationRateFilters {\n  employeeId?: string\n  projectId?: string\n  status?: string\n  participationStatus?: 'OVER_LIMIT' | 'FULL' | 'AVAILABLE'\n  department?: string\n}\n\n// 통계 및 차트 데이터 타입\nexport interface ProjectStatusStats {\n  planning: number\n  active: number\n  completed: number\n  cancelled: number\n  suspended: number\n}\n\nexport interface BudgetDistributionStats {\n  personnelCost: number\n  materialCost: number\n  researchActivityCost: number\n  indirectCost: number\n  otherCost: number\n}\n\nexport interface ParticipationRateStats {\n  overLimit: number\n  full: number\n  available: number\n  averageRate: number\n}\n\n// 알림 및 경고 타입\nexport interface ParticipationRateAlert {\n  employeeId: string\n  employeeName: string\n  totalParticipationRate: number\n  excessRate: number\n  projects: Array<{\n    projectId: string\n    projectName: string\n    participationRate: number\n  }>\n}\n\nexport interface BudgetAlert {\n  projectId: string\n  projectName: string\n  fiscalYear: number\n  alertType: 'over_budget' | 'near_budget' | 'under_utilized'\n  message: string\n  amount?: number\n  percentage?: number\n}\n\n// 감사 및 보안 관련 타입\nexport interface AuditLog {\n  id: string\n  actorId: string\n  action: string\n  entity: string\n  entityId: string\n  diff: { old: any; new: any }\n  at: string\n  metadata?: Record<string, unknown>\n}\n\nexport interface Person {\n  id: string\n  name: string\n  email: string\n  department: string\n  roleSet: string[]\n  active: boolean\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Document {\n  id: string\n  title: string\n  type: string\n  content?: string\n  filePath?: string\n  createdBy: string\n  createdAt: string\n  updatedAt: string\n  // 추가 속성들\n  required?: boolean\n  templateId?: string\n}\n\nexport interface Approval {\n  id: string\n  entityType: string\n  entityId: string\n  status: 'pending' | 'approved' | 'rejected'\n  requestedBy: string\n  approvedBy?: string\n  requestedAt: string\n  approvedAt?: string\n  notes?: string\n  // 추가 속성들\n  decision?: 'approve' | 'reject' | 'pending'\n}\n\nexport interface Employment {\n  id: string\n  employeeId: string\n  startDate: string\n  endDate?: string\n  position: string\n  department: string\n  salary: number\n  status: 'active' | 'inactive' | 'terminated'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface SalaryHistory {\n  id: string\n  employeeId: string\n  effectiveDate: string\n  salary: number\n  changeReason: string\n  createdAt: string\n}\n\nexport interface Milestone {\n  id: string\n  projectId: string\n  title: string\n  description?: string\n  dueDate: string\n  status: 'pending' | 'completed' | 'overdue'\n  completedAt?: string\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ParticipationAssignment {\n  id: string\n  employeeId: string\n  projectId: string\n  participationRate: number\n  startDate: string\n  endDate?: string\n  role: string\n  status: 'active' | 'inactive'\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface ExpenseItem {\n  id: string\n  expenseId: string\n  category: string\n  description: string\n  amount: number\n  currency: string\n  receiptPath?: string\n  createdAt: string\n  updatedAt: string\n  // 추가 속성들\n  status?: 'pending' | 'approved' | 'rejected' | 'completed'\n}\n\nexport interface ResearchNote {\n  id: string\n  projectId: string\n  title: string\n  content: string\n  authorId: string\n  authorName: string\n  tags: string[]\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface Report {\n  id: string\n  title: string\n  type: string\n  content: string\n  generatedBy: string\n  generatedAt: string\n  parameters?: Record<string, unknown>\n}\n\n// BudgetCategoryMaster는 BudgetCategory의 별칭\nexport type BudgetCategoryMaster = BudgetCategory\n\n// ===== 제출 번들 타입 =====\nexport interface SubmissionBundle {\n  id: string\n  projectId: string\n  categoryId: string\n  title: string\n  description?: string\n  documents: Document[]\n  status: 'draft' | 'submitted' | 'under_review' | 'approved' | 'rejected'\n  submittedBy: string\n  submittedAt?: string\n  reviewedBy?: string\n  reviewedAt?: string\n  comments?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// ProjectBudgetCategory는 BudgetCategory의 별칭\nexport type ProjectBudgetCategory = BudgetCategory\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rd.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/recruitment.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/budget-categories.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'categoryCode' is defined but never used. Allowed unused args must match /^_/u.","line":508,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":508,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// R&D 통합관리 시스템 예산 카테고리 마스터 및 워크플로우 관리\n\nimport { derived, writable } from 'svelte/store'\nimport {\n  UserRole,\n  type BudgetCategory,\n  type RequiredDocument,\n  type UUID,\n  type WorkflowStep\n} from './types'\n\n// ===== 예산 카테고리 마스터 데이터 =====\nconst BUDGET_CATEGORY_MASTER: BudgetCategory[] = [\n  {\n    id: 'cat-001',\n    code: 'PERSONNEL_CASH',\n    name: 'Personnel Cost (Cash)',\n    nameKo: '인건비(현금)',\n    description: '연구원 급여 및 현금 지급 인건비',\n    requiredDocuments: [\n      {\n        type: 'PARTICIPATION_ASSIGNMENT',\n        required: true,\n        templateId: 'TMP-PA-001',\n        description: '참여배정서'\n      },\n      { type: 'SALARY_SLIP', required: true, templateId: 'TMP-SS-001', description: '급여명세' },\n      {\n        type: 'INSURANCE_DATA',\n        required: true,\n        templateId: 'TMP-ID-001',\n        description: '4대보험/원천세 자료'\n      },\n      {\n        type: 'SALARY_DISTRIBUTION',\n        required: true,\n        templateId: 'TMP-SD-001',\n        description: '급여배분표'\n      }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 2 },\n      { step: 2, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 3 }\n    ],\n    defaultSlaDays: 5,\n    defaultOwners: ['경영지원팀'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-002',\n    code: 'PERSONNEL_IN_KIND',\n    name: 'Personnel Cost (In-Kind)',\n    nameKo: '인건비(현물)',\n    description: '연구원 현물 지급 인건비',\n    requiredDocuments: [\n      {\n        type: 'PARTICIPATION_ASSIGNMENT',\n        required: true,\n        templateId: 'TMP-PA-001',\n        description: '참여배정서'\n      },\n      {\n        type: 'IN_KIND_EVIDENCE',\n        required: true,\n        templateId: 'TMP-IK-001',\n        description: '현물지급 증빙'\n      },\n      {\n        type: 'SALARY_DISTRIBUTION',\n        required: true,\n        templateId: 'TMP-SD-001',\n        description: '급여배분표'\n      }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 2 },\n      { step: 2, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 3 }\n    ],\n    defaultSlaDays: 5,\n    defaultOwners: ['경영지원팀'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-003',\n    code: 'MATERIAL',\n    name: 'Material Cost',\n    nameKo: '재료비',\n    description: '연구용 재료 및 소모품 구매비',\n    requiredDocuments: [\n      { type: 'REQUISITION', required: true, templateId: 'TMP-REQ-001', description: '기안서' },\n      { type: 'QUOTE', required: true, templateId: 'TMP-QTE-001', description: '견적서 1개 이상' },\n      { type: 'PURCHASE_ORDER', required: true, templateId: 'TMP-PO-001', description: '발주서' },\n      { type: 'TAX_INVOICE', required: true, description: '세금계산서' },\n      { type: 'DELIVERY_NOTE', required: true, description: '납품서' },\n      {\n        type: 'INSPECTION_REPORT',\n        required: true,\n        templateId: 'TMP-INS-001',\n        description: '검수보고서'\n      }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 2 },\n      { step: 2, role: UserRole.DEPARTMENT_HEAD, action: 'execute', required: true, slaDays: 5 },\n      { step: 3, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 3 }\n    ],\n    defaultSlaDays: 10,\n    defaultOwners: ['구매팀'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-004',\n    code: 'RESEARCH_ACTIVITY',\n    name: 'Research Activity Cost',\n    nameKo: '연구활동비',\n    description: '연구 활동 관련 비용',\n    requiredDocuments: [\n      { type: 'REQUISITION', required: true, templateId: 'TMP-REQ-001', description: '기안서' },\n      {\n        type: 'ACTIVITY_PLAN',\n        required: true,\n        templateId: 'TMP-AP-001',\n        description: '활동계획서/보고서'\n      },\n      { type: 'RECEIPT', required: true, description: '영수증' }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 1 },\n      { step: 2, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 4 }\n    ],\n    defaultSlaDays: 5,\n    defaultOwners: ['PM'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-005',\n    code: 'TRAVEL',\n    name: 'Travel Cost',\n    nameKo: '출장비',\n    description: '출장 관련 비용',\n    requiredDocuments: [\n      { type: 'TRAVEL_PLAN', required: true, templateId: 'TMP-TP-001', description: '출장계획서' },\n      { type: 'TRAVEL_RECEIPT', required: true, description: '교통/숙박 영수증' },\n      { type: 'TRAVEL_REPORT', required: true, templateId: 'TMP-TR-001', description: '출장보고서' }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 1 },\n      { step: 2, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 2 }\n    ],\n    defaultSlaDays: 3,\n    defaultOwners: ['PM', '담당자'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-006',\n    code: 'MEETING',\n    name: 'Meeting Cost',\n    nameKo: '회의비',\n    description: '회의 관련 비용',\n    requiredDocuments: [\n      { type: 'REQUISITION', required: true, templateId: 'TMP-REQ-001', description: '기안서' },\n      {\n        type: 'ATTENDEE_LIST',\n        required: true,\n        templateId: 'TMP-AL-001',\n        description: '참석자 명단'\n      },\n      { type: 'RECEIPT', required: true, description: '영수증' },\n      { type: 'MEETING_MINUTES', required: true, templateId: 'TMP-MM-001', description: '회의록' }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.DEPARTMENT_HEAD, action: 'execute', required: true, slaDays: 1 },\n      { step: 2, role: UserRole.PM, action: 'approve', required: true, slaDays: 1 },\n      { step: 3, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 1 }\n    ],\n    defaultSlaDays: 3,\n    defaultOwners: ['담당부서'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-007',\n    code: 'PATENT',\n    name: 'Patent Application Cost',\n    nameKo: '특허출원비',\n    description: '특허 출원 관련 비용',\n    requiredDocuments: [\n      { type: 'REQUISITION', required: true, templateId: 'TMP-REQ-001', description: '기안서' },\n      {\n        type: 'PATENT_SPECIFICATION',\n        required: true,\n        templateId: 'TMP-PS-001',\n        description: '출원명세서'\n      },\n      {\n        type: 'POWER_OF_ATTORNEY',\n        required: true,\n        templateId: 'TMP-POA-001',\n        description: '위임장'\n      },\n      { type: 'FEE_RECEIPT', required: true, description: '수수료 영수증' }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 2 },\n      { step: 2, role: UserRole.DEPARTMENT_HEAD, action: 'execute', required: true, slaDays: 3 },\n      { step: 3, role: UserRole.LAB_HEAD, action: 'approve', required: true, slaDays: 2 },\n      { step: 4, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 3 }\n    ],\n    defaultSlaDays: 10,\n    defaultOwners: ['R&D전략팀'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-008',\n    code: 'RESEARCH_STIPEND',\n    name: 'Research Stipend',\n    nameKo: '연구수당',\n    description: '연구원 연구수당 지급',\n    requiredDocuments: [\n      { type: 'REQUISITION', required: true, templateId: 'TMP-REQ-001', description: '기안서' },\n      {\n        type: 'PARTICIPATION_ASSIGNMENT',\n        required: true,\n        templateId: 'TMP-PA-001',\n        description: '참여배정서'\n      },\n      {\n        type: 'STIPEND_CALCULATION',\n        required: true,\n        templateId: 'TMP-SC-001',\n        description: '연구수당 산정서'\n      },\n      { type: 'RECEIPT', required: true, description: '지급 영수증' }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 2 },\n      { step: 2, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 3 }\n    ],\n    defaultSlaDays: 5,\n    defaultOwners: ['경영지원팀'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  },\n  {\n    id: 'cat-009',\n    code: 'OFFICE_SUPPLIES',\n    name: 'Office Supplies Cost',\n    nameKo: '사무용품비',\n    description: '사무용품 구매 비용',\n    requiredDocuments: [\n      { type: 'REQUISITION', required: true, templateId: 'TMP-REQ-001', description: '기안서' },\n      { type: 'QUOTE', required: true, description: '견적/영수증' },\n      { type: 'RECEIPT', required: true, description: '수령증' }\n    ],\n    defaultWorkflow: [\n      { step: 1, role: UserRole.PM, action: 'approve', required: true, slaDays: 1 },\n      { step: 2, role: UserRole.MANAGEMENT_SUPPORT, action: 'approve', required: true, slaDays: 2 }\n    ],\n    defaultSlaDays: 3,\n    defaultOwners: ['총무팀'],\n    active: true,\n    createdAt: '2024-01-01T00:00:00Z'\n  }\n]\n\n// ===== 예산 카테고리 스토어 =====\nexport const budgetCategories = writable<BudgetCategory[]>(BUDGET_CATEGORY_MASTER)\n\n// ===== 활성 카테고리만 필터링 =====\nexport const activeBudgetCategories = derived(budgetCategories, $budgetCategories =>\n  $budgetCategories.filter(cat => cat.active)\n)\n\n// ===== 카테고리별 그룹화 =====\nexport const budgetCategoriesByType = derived(activeBudgetCategories, $activeBudgetCategories => {\n  const groups: Record<string, BudgetCategory[]> = {\n    인건비: [],\n    재료비: [],\n    연구활동비: [],\n    연구수당: [],\n    출장비: [],\n    회의비: [],\n    특허출원비: [],\n    사무용품비: [],\n    기타: []\n  }\n\n  $activeBudgetCategories.forEach(category => {\n    if (category.code.includes('PERSONNEL')) {\n      groups['인건비'].push(category)\n    } else if (category.code === 'MATERIAL') {\n      groups['재료비'].push(category)\n    } else if (category.code === 'RESEARCH_ACTIVITY') {\n      groups['연구활동비'].push(category)\n    } else if (category.code === 'RESEARCH_STIPEND') {\n      groups['연구수당'].push(category)\n    } else if (category.code === 'TRAVEL') {\n      groups['출장비'].push(category)\n    } else if (category.code === 'MEETING') {\n      groups['회의비'].push(category)\n    } else if (category.code === 'PATENT') {\n      groups['특허출원비'].push(category)\n    } else if (category.code === 'OFFICE_SUPPLIES') {\n      groups['사무용품비'].push(category)\n    } else {\n      groups['기타'].push(category)\n    }\n  })\n\n  return groups\n})\n\n// ===== 예산 카테고리 관리 함수들 =====\n\n/**\n * 코드로 예산 카테고리 찾기\n */\nexport function getBudgetCategoryByCode(code: string): BudgetCategory | undefined {\n  let categories: BudgetCategory[] = []\n  budgetCategories.subscribe(value => (categories = value))()\n  return categories.find(cat => cat.code === code)\n}\n\n/**\n * ID로 예산 카테고리 찾기\n */\nexport function getBudgetCategoryById(id: UUID): BudgetCategory | undefined {\n  let categories: BudgetCategory[] = []\n  budgetCategories.subscribe(value => (categories = value))()\n  return categories.find(cat => cat.id === id)\n}\n\n/**\n * 카테고리별 필수 문서 목록 가져오기\n */\nexport function getRequiredDocuments(categoryCode: string): RequiredDocument[] {\n  const category = getBudgetCategoryByCode(categoryCode)\n  return category?.requiredDocuments || []\n}\n\n/**\n * 카테고리별 기본 워크플로우 가져오기\n */\nexport function getDefaultWorkflow(categoryCode: string): WorkflowStep[] {\n  const category = getBudgetCategoryByCode(categoryCode)\n  return category?.defaultWorkflow || []\n}\n\n/**\n * 카테고리별 기본 SLA 일수 가져오기\n */\nexport function getDefaultSlaDays(categoryCode: string): number {\n  const category = getBudgetCategoryByCode(categoryCode)\n  return category?.defaultSlaDays || 5\n}\n\n/**\n * 카테고리별 기본 담당자 가져오기\n */\nexport function getDefaultOwners(categoryCode: string): string[] {\n  const category = getBudgetCategoryByCode(categoryCode)\n  return category?.defaultOwners || []\n}\n\n/**\n * 필수 문서 체크리스트 생성\n */\nexport function generateDocumentChecklist(categoryCode: string): Array<{\n  type: string\n  required: boolean\n  description: string\n  templateId?: string\n  status: 'pending' | 'uploaded' | 'verified'\n  uploadedAt?: string\n  verifiedAt?: string\n}> {\n  const requiredDocs = getRequiredDocuments(categoryCode)\n  return requiredDocs.map(doc => ({\n    type: doc.type,\n    required: doc.required,\n    description: doc.description,\n    templateId: doc.templateId,\n    status: 'pending' as const\n  }))\n}\n\n/**\n * 문서 체크리스트 완성도 확인\n */\nexport function checkDocumentCompleteness(\n  categoryCode: string,\n  uploadedDocuments: Array<{ type: string; uploadedAt: string }>\n): {\n  completeness: number // 0-100\n  missing: string[]\n  completed: string[]\n} {\n  const requiredDocs = getRequiredDocuments(categoryCode)\n  const uploadedTypes = uploadedDocuments.map(doc => doc.type)\n\n  const completed = requiredDocs\n    .filter(doc => doc.required && uploadedTypes.includes(doc.type))\n    .map(doc => doc.type)\n\n  const missing = requiredDocs\n    .filter(doc => doc.required && !uploadedTypes.includes(doc.type))\n    .map(doc => doc.type)\n\n  const completeness =\n    requiredDocs.length > 0 ? Math.round((completed.length / requiredDocs.length) * 100) : 100\n\n  return { completeness, missing, completed }\n}\n\n/**\n * 워크플로우 단계별 SLA 확인\n */\nexport function checkWorkflowSla(\n  categoryCode: string,\n  currentStep: number,\n  stepStartDate: string\n): {\n  isOverdue: boolean\n  remainingDays: number\n  slaDays: number\n} {\n  const workflow = getDefaultWorkflow(categoryCode)\n  const currentWorkflowStep = workflow.find(step => step.step === currentStep)\n\n  if (!currentWorkflowStep) {\n    return { isOverdue: false, remainingDays: 0, slaDays: 0 }\n  }\n\n  const startDate = new Date(stepStartDate)\n  const now = new Date()\n  const elapsedDays = Math.floor((now.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24))\n  const remainingDays = currentWorkflowStep.slaDays - elapsedDays\n  const isOverdue = remainingDays < 0\n\n  return {\n    isOverdue,\n    remainingDays: Math.max(0, remainingDays),\n    slaDays: currentWorkflowStep.slaDays\n  }\n}\n\n/**\n * 새 예산 카테고리 생성\n */\nexport function createBudgetCategory(\n  category: Omit<BudgetCategory, 'id' | 'createdAt'>\n): BudgetCategory {\n  const newCategory: BudgetCategory = {\n    ...category,\n    id: `cat-${Date.now()}`,\n    createdAt: new Date().toISOString()\n  }\n\n  budgetCategories.update(categories => [...categories, newCategory])\n  return newCategory\n}\n\n/**\n * 예산 카테고리 업데이트\n */\nexport function updateBudgetCategory(id: UUID, updates: Partial<BudgetCategory>): boolean {\n  let updated = false\n  budgetCategories.update(categories => {\n    const index = categories.findIndex(cat => cat.id === id)\n    if (index !== -1) {\n      categories[index] = { ...categories[index], ...updates, updatedAt: new Date().toISOString() }\n      updated = true\n    }\n    return categories\n  })\n  return updated\n}\n\n/**\n * 예산 카테고리 비활성화\n */\nexport function deactivateBudgetCategory(id: UUID): boolean {\n  return updateBudgetCategory(id, { active: false })\n}\n\n/**\n * 예산 카테고리 삭제\n */\nexport function deleteBudgetCategory(id: UUID): boolean {\n  let deleted = false\n  budgetCategories.update(categories => {\n    const filtered = categories.filter(cat => cat.id !== id)\n    deleted = filtered.length !== categories.length\n    return filtered\n  })\n  return deleted\n}\n\n/**\n * 카테고리별 통계 정보\n */\nexport function getCategoryStatistics(categoryCode: string): {\n  totalExpenses: number\n  pendingExpenses: number\n  approvedExpenses: number\n  averageAmount: number\n  lastUsed: string | null\n} {\n  // 실제로는 expenseItems 스토어에서 데이터를 가져와야 함\n  // 여기서는 더미 데이터 반환\n  return {\n    totalExpenses: 0,\n    pendingExpenses: 0,\n    approvedExpenses: 0,\n    averageAmount: 0,\n    lastUsed: null\n  }\n}\n\n/**\n * 템플릿 다운로드 URL 생성\n */\nexport function getTemplateDownloadUrl(templateId: string): string {\n  return `/api/templates/${templateId}/download`\n}\n\n/**\n * 카테고리별 권한 확인\n */\nexport function canManageCategory(categoryCode: string, userRoles: UserRole[]): boolean {\n  // 경영지원팀만 카테고리 관리 가능\n  return userRoles.includes(UserRole.MANAGEMENT_SUPPORT)\n}\n\n/**\n * 카테고리 검색\n */\nexport function searchBudgetCategories(query: string): BudgetCategory[] {\n  let categories: BudgetCategory[] = []\n  budgetCategories.subscribe(value => (categories = value))()\n\n  if (!query.trim()) return categories\n\n  const searchTerm = query.toLowerCase()\n  return categories.filter(\n    cat =>\n      cat.name.toLowerCase().includes(searchTerm) ||\n      cat.nameKo.toLowerCase().includes(searchTerm) ||\n      cat.code.toLowerCase().includes(searchTerm) ||\n      cat.description.toLowerCase().includes(searchTerm)\n  )\n}\n\n/**\n * 카테고리별 사용 빈도 통계\n */\nexport function getCategoryUsageStats(): Array<{\n  category: BudgetCategory\n  usageCount: number\n  totalAmount: number\n  lastUsed: string | null\n}> {\n  let categories: BudgetCategory[] = []\n  budgetCategories.subscribe(value => (categories = value))()\n\n  // 실제로는 expenseItems에서 통계를 계산해야 함\n  // 여기서는 더미 데이터 반환\n  return categories.map(category => ({\n    category,\n    usageCount: Math.floor(Math.random() * 50),\n    totalAmount: Math.floor(Math.random() * 100000000),\n    lastUsed: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\n  }))\n}\n\n// ===== 내보내기 =====\nexport { BUDGET_CATEGORY_MASTER }\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/dummy-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/expense-workflow.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'approverId' is defined but never used. Allowed unused args must match /^_/u.","line":461,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":461,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'executedBy' is defined but never used. Allowed unused args must match /^_/u.","line":483,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":483,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'completedBy' is defined but never used. Allowed unused args must match /^_/u.","line":493,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reason' is defined but never used. Allowed unused args must match /^_/u.","line":503,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":503,"endColumn":58}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// R&D 통합관리 시스템 지출/증빙 표준 흐름 및 결재 시스템\n\nimport { writable, derived } from 'svelte/store'\nimport type {\n  ExpenseItem,\n  Document,\n  Approval,\n  ApprovalWorkflow,\n  ApprovalStatus,\n  DocumentType,\n  UUID\n} from './types'\nimport { getDefaultWorkflow, checkDocumentCompleteness } from './budget-categories'\n\n// ===== 지출 항목 스토어 =====\nexport const expenseItems = writable<ExpenseItem[]>([])\n\n// ===== 문서 스토어 =====\nexport const documents = writable<Document[]>([])\n\n// ===== 결재 스토어 =====\nexport const approvals = writable<Approval[]>([])\n\n// ===== 결재 워크플로우 스토어 =====\nexport const approvalWorkflows = writable<ApprovalWorkflow[]>([])\n\n// ===== 필터링된 데이터 =====\nexport const pendingExpenses = derived(expenseItems, $expenseItems =>\n  $expenseItems.filter(\n    expense => expense.status === 'pending_approval' || expense.status === 'draft'\n  )\n)\n\nexport const approvedExpenses = derived(expenseItems, $expenseItems =>\n  $expenseItems.filter(\n    expense =>\n      expense.status === 'approved' ||\n      expense.status === 'executed' ||\n      expense.status === 'completed'\n  )\n)\n\nexport const rejectedExpenses = derived(expenseItems, $expenseItems =>\n  $expenseItems.filter(expense => expense.status === 'rejected')\n)\n\n// ===== 지출 항목 관리 함수들 =====\n\n/**\n * 새 지출 요청 생성\n */\nexport function createExpenseRequest(expenseData: {\n  projectId: UUID\n  categoryCode: string\n  requesterId: UUID\n  amount: number\n  currency: 'KRW' | 'USD' | 'EUR'\n  description: string\n  deptOwner: string\n}): ExpenseItem {\n  const newExpense: ExpenseItem = {\n    id: `exp-${Date.now()}`,\n    ...expenseData,\n    status: 'draft',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  expenseItems.update(items => [...items, newExpense])\n\n  // 결재 워크플로우 초기화\n  initializeApprovalWorkflow(newExpense.id, expenseData.categoryCode)\n\n  return newExpense\n}\n\n/**\n * 지출 항목 업데이트\n */\nexport function updateExpenseItem(id: UUID, updates: Partial<ExpenseItem>): boolean {\n  let updated = false\n  expenseItems.update(items => {\n    const index = items.findIndex(item => item.id === id)\n    if (index !== -1) {\n      items[index] = { ...items[index], ...updates, updatedAt: new Date().toISOString() }\n      updated = true\n    }\n    return items\n  })\n  return updated\n}\n\n/**\n * 지출 항목 삭제\n */\nexport function deleteExpenseItem(id: UUID): boolean {\n  let deleted = false\n  expenseItems.update(items => {\n    const filtered = items.filter(item => item.id !== id)\n    deleted = filtered.length !== items.length\n    return filtered\n  })\n\n  if (deleted) {\n    // 관련 문서와 결재 정보도 삭제\n    documents.update(docs => docs.filter(doc => doc.expenseId !== id))\n    approvals.update(apps => apps.filter(app => app.subjectId !== id))\n    approvalWorkflows.update(workflows => workflows.filter(workflow => workflow.subjectId !== id))\n  }\n\n  return deleted\n}\n\n// ===== 문서 관리 함수들 =====\n\n/**\n * 문서 업로드\n */\nexport function uploadDocument(documentData: {\n  expenseId?: UUID\n  projectId?: UUID\n  type: DocumentType\n  filename: string\n  originalFilename: string\n  storageUrl: string\n  sha256: string\n  meta?: Record<string, unknown>\n}): Document {\n  const newDocument: Document = {\n    id: `doc-${Date.now()}`,\n    ...documentData,\n    version: 1,\n    createdAt: new Date().toISOString()\n  }\n\n  documents.update(docs => [...docs, newDocument])\n\n  // 지출 항목의 문서 완성도 확인\n  if (documentData.expenseId) {\n    checkExpenseDocumentCompleteness(documentData.expenseId)\n  }\n\n  return newDocument\n}\n\n/**\n * 문서 서명\n */\nexport function signDocument(documentId: UUID, signedBy: UUID): boolean {\n  let signed = false\n  documents.update(docs => {\n    const index = docs.findIndex(doc => doc.id === documentId)\n    if (index !== -1) {\n      docs[index] = {\n        ...docs[index],\n        signedBy,\n        signedAt: new Date().toISOString()\n      }\n      signed = true\n    }\n    return docs\n  })\n  return signed\n}\n\n/**\n * 문서 검증\n */\nexport function verifyDocument(documentId: UUID, verifiedBy: UUID): boolean {\n  let verified = false\n  documents.update(docs => {\n    const index = docs.findIndex(doc => doc.id === documentId)\n    if (index !== -1) {\n      docs[index] = {\n        ...docs[index],\n        verifiedBy,\n        verifiedAt: new Date().toISOString()\n      }\n      verified = true\n    }\n    return docs\n  })\n  return verified\n}\n\n/**\n * 문서 버전 관리\n */\nexport function createDocumentVersion(\n  originalDocumentId: UUID,\n  newDocumentData: {\n    filename: string\n    storageUrl: string\n    sha256: string\n    meta?: Record<string, unknown>\n  }\n): Document | null {\n  let originalDoc: Document | undefined\n  documents.subscribe(docs => {\n    originalDoc = docs.find(doc => doc.id === originalDocumentId)\n  })()\n\n  if (!originalDoc) return null\n\n  const newVersion: Document = {\n    id: `doc-${Date.now()}`,\n    expenseId: originalDoc.expenseId,\n    projectId: originalDoc.projectId,\n    type: originalDoc.type,\n    filename: newDocumentData.filename,\n    originalFilename: newDocumentData.filename,\n    storageUrl: newDocumentData.storageUrl,\n    sha256: newDocumentData.sha256,\n    version: originalDoc.version + 1,\n    signedBy: originalDoc.signedBy,\n    signedAt: originalDoc.signedAt,\n    verifiedBy: originalDoc.verifiedBy,\n    verifiedAt: originalDoc.verifiedAt,\n    meta: { ...originalDoc.meta, ...newDocumentData.meta },\n    createdAt: new Date().toISOString()\n  }\n\n  documents.update(docs => [...docs, newVersion])\n  return newVersion\n}\n\n// ===== 결재 워크플로우 관리 =====\n\n/**\n * 결재 워크플로우 초기화\n */\nfunction initializeApprovalWorkflow(expenseId: UUID, categoryCode: string): void {\n  const workflow = getDefaultWorkflow(categoryCode)\n\n  const newWorkflow: ApprovalWorkflow = {\n    id: `workflow-${Date.now()}`,\n    subjectType: 'expense',\n    subjectId: expenseId,\n    currentStep: 1,\n    totalSteps: workflow.length,\n    status: 'pending',\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  approvalWorkflows.update(workflows => [...workflows, newWorkflow])\n}\n\n/**\n * 결재 진행\n */\nexport function processApproval(approvalData: {\n  subjectType: 'expense' | 'milestone' | 'document' | 'project'\n  subjectId: UUID\n  approverId: UUID\n  decision: ApprovalStatus\n  comment?: string\n}): boolean {\n  const newApproval: Approval = {\n    id: `app-${Date.now()}`,\n    subjectType: approvalData.subjectType,\n    subjectId: approvalData.subjectId,\n    stepNo: 0, // 워크플로우에서 계산\n    approverId: approvalData.approverId,\n    decision: approvalData.decision,\n    comment: approvalData.comment,\n    decidedAt: new Date().toISOString(),\n    createdAt: new Date().toISOString()\n  }\n\n  // 워크플로우 업데이트\n  let workflowUpdated = false\n  approvalWorkflows.update(workflows => {\n    const workflowIndex = workflows.findIndex(\n      w => w.subjectType === approvalData.subjectType && w.subjectId === approvalData.subjectId\n    )\n\n    if (workflowIndex !== -1) {\n      const workflow = workflows[workflowIndex]\n      newApproval.stepNo = workflow.currentStep\n\n      if (approvalData.decision === 'approved') {\n        workflow.currentStep += 1\n        if (workflow.currentStep > workflow.totalSteps) {\n          workflow.status = 'approved'\n        }\n      } else if (approvalData.decision === 'rejected') {\n        workflow.status = 'rejected'\n      }\n\n      workflow.updatedAt = new Date().toISOString()\n      workflowUpdated = true\n    }\n\n    return workflows\n  })\n\n  if (workflowUpdated) {\n    approvals.update(apps => [...apps, newApproval])\n\n    // 지출 항목 상태 업데이트\n    if (approvalData.subjectType === 'expense') {\n      updateExpenseStatus(approvalData.subjectId)\n    }\n\n    return true\n  }\n\n  return false\n}\n\n/**\n * 지출 항목 상태 업데이트\n */\nfunction updateExpenseStatus(expenseId: UUID): void {\n  let workflow: ApprovalWorkflow | undefined\n  approvalWorkflows.subscribe(workflows => {\n    workflow = workflows.find(w => w.subjectType === 'expense' && w.subjectId === expenseId)\n  })()\n\n  if (!workflow) return\n\n  let newStatus: ExpenseItem['status']\n\n  switch (workflow.status) {\n    case 'pending':\n      newStatus = 'pending_approval'\n      break\n    case 'approved':\n      newStatus = 'approved'\n      break\n    case 'rejected':\n      newStatus = 'rejected'\n      break\n    case 'cancelled':\n      newStatus = 'draft'\n      break\n    default:\n      return\n  }\n\n  updateExpenseItem(expenseId, { status: newStatus })\n}\n\n// ===== 문서 완성도 확인 =====\n\n/**\n * 지출 항목의 문서 완성도 확인\n */\nfunction checkExpenseDocumentCompleteness(expenseId: UUID): void {\n  let expense: ExpenseItem | undefined\n  expenseItems.subscribe(items => {\n    expense = items.find(item => item.id === expenseId)\n  })()\n\n  if (!expense) return\n\n  let uploadedDocs: Array<{ type: string; uploadedAt: string }> = []\n  documents.subscribe(docs => {\n    uploadedDocs = docs\n      .filter(doc => doc.expenseId === expenseId)\n      .map(doc => ({ type: doc.type, uploadedAt: doc.createdAt }))\n  })()\n\n  const completeness = checkDocumentCompleteness(expense.categoryCode, uploadedDocs)\n\n  // 문서 완성도가 100%이고 상태가 draft라면 pending_approval로 변경\n  if (completeness.completeness === 100 && expense.status === 'draft') {\n    updateExpenseItem(expenseId, { status: 'pending_approval' })\n  }\n}\n\n// ===== 지출 항목 검색 및 필터링 =====\n\n/**\n * 지출 항목 검색\n */\nexport function searchExpenseItems(filters: {\n  projectId?: UUID\n  status?: string\n  categoryCode?: string\n  requesterId?: UUID\n  dateFrom?: string\n  dateTo?: string\n  amountMin?: number\n  amountMax?: number\n}): ExpenseItem[] {\n  let items: ExpenseItem[] = []\n  expenseItems.subscribe(value => (items = value))()\n\n  return items.filter(item => {\n    if (filters.projectId && item.projectId !== filters.projectId) return false\n    if (filters.status && item.status !== filters.status) return false\n    if (filters.categoryCode && item.categoryCode !== filters.categoryCode) return false\n    if (filters.requesterId && item.requesterId !== filters.requesterId) return false\n\n    if (filters.dateFrom) {\n      const itemDate = new Date(item.createdAt)\n      const filterDate = new Date(filters.dateFrom)\n      if (itemDate < filterDate) return false\n    }\n\n    if (filters.dateTo) {\n      const itemDate = new Date(item.createdAt)\n      const filterDate = new Date(filters.dateTo)\n      if (itemDate > filterDate) return false\n    }\n\n    if (filters.amountMin && item.amount < filters.amountMin) return false\n    if (filters.amountMax && item.amount > filters.amountMax) return false\n\n    return true\n  })\n}\n\n/**\n * 프로젝트별 지출 통계\n */\nexport function getProjectExpenseStatistics(projectId: UUID): {\n  totalAmount: number\n  totalCount: number\n  byCategory: Record<string, { amount: number; count: number }>\n  byStatus: Record<string, { amount: number; count: number }>\n} {\n  let items: ExpenseItem[] = []\n  expenseItems.subscribe(value => (items = value))()\n\n  const projectExpenses = items.filter(item => item.projectId === projectId)\n\n  const statistics = {\n    totalAmount: 0,\n    totalCount: projectExpenses.length,\n    byCategory: {} as Record<string, { amount: number; count: number }>,\n    byStatus: {} as Record<string, { amount: number; count: number }>\n  }\n\n  projectExpenses.forEach(expense => {\n    statistics.totalAmount += expense.amount\n\n    // 카테고리별 통계\n    if (!statistics.byCategory[expense.categoryCode]) {\n      statistics.byCategory[expense.categoryCode] = { amount: 0, count: 0 }\n    }\n    statistics.byCategory[expense.categoryCode].amount += expense.amount\n    statistics.byCategory[expense.categoryCode].count += 1\n\n    // 상태별 통계\n    if (!statistics.byStatus[expense.status]) {\n      statistics.byStatus[expense.status] = { amount: 0, count: 0 }\n    }\n    statistics.byStatus[expense.status].amount += expense.amount\n    statistics.byStatus[expense.status].count += 1\n  })\n\n  return statistics\n}\n\n/**\n * 결재 대기 중인 지출 항목\n */\nexport function getPendingApprovalExpenses(approverId: UUID): ExpenseItem[] {\n  let items: ExpenseItem[] = []\n  expenseItems.subscribe(value => (items = value))()\n\n  let workflows: ApprovalWorkflow[] = []\n  approvalWorkflows.subscribe(value => (workflows = value))()\n\n  // 현재 결재 단계에서 해당 사용자가 승인해야 하는 항목들\n  const pendingWorkflows = workflows.filter(\n    workflow => workflow.status === 'pending' && workflow.subjectType === 'expense'\n  )\n\n  const pendingExpenseIds = pendingWorkflows.map(workflow => workflow.subjectId)\n\n  return items.filter(\n    item => pendingExpenseIds.includes(item.id) && item.status === 'pending_approval'\n  )\n}\n\n/**\n * 지출 항목 실행 (집행)\n */\nexport function executeExpenseItem(expenseId: UUID, executedBy: UUID): boolean {\n  return updateExpenseItem(expenseId, {\n    status: 'executed',\n    updatedAt: new Date().toISOString()\n  })\n}\n\n/**\n * 지출 항목 완료\n */\nexport function completeExpenseItem(expenseId: UUID, completedBy: UUID): boolean {\n  return updateExpenseItem(expenseId, {\n    status: 'completed',\n    updatedAt: new Date().toISOString()\n  })\n}\n\n/**\n * 지출 항목 취소\n */\nexport function cancelExpenseItem(expenseId: UUID, reason: string): boolean {\n  // 워크플로우 취소\n  approvalWorkflows.update(workflows => {\n    const index = workflows.findIndex(w => w.subjectType === 'expense' && w.subjectId === expenseId)\n    if (index !== -1) {\n      workflows[index].status = 'cancelled'\n      workflows[index].updatedAt = new Date().toISOString()\n    }\n    return workflows\n  })\n\n  return updateExpenseItem(expenseId, {\n    status: 'draft',\n    updatedAt: new Date().toISOString()\n  })\n}\n\n/**\n * 지출 항목 반려\n */\nexport function rejectExpenseItem(expenseId: UUID, reason: string, rejectedBy: UUID): boolean {\n  // 결재 처리\n  processApproval({\n    subjectType: 'expense',\n    subjectId: expenseId,\n    approverId: rejectedBy,\n    decision: 'rejected',\n    comment: reason\n  })\n\n  return true\n}\n\n/**\n * 지출 항목 승인\n */\nexport function approveExpenseItem(expenseId: UUID, approvedBy: UUID, comment?: string): boolean {\n  // 결재 처리\n  processApproval({\n    subjectType: 'expense',\n    subjectId: expenseId,\n    approverId: approvedBy,\n    decision: 'approved',\n    comment\n  })\n\n  return true\n}\n\n// ===== 내보내기 =====\nexport // 스토어는 이미 export됨\n {}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/init-dummy-data.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1886,1889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1886,1889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":96,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":96,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2840,2843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2840,2843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4180,4183],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4180,4183],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5046,5049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5046,5049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// R&D 통합관리 시스템 더미데이터 초기화\n\nimport { toUTC } from '$lib/utils/date-handler'\nimport { approvalWorkflows, approvals, documents, expenseItems } from './expense-workflow'\nimport type { Approval, ApprovalWorkflow, Document, ExpenseItem } from './types'\nimport { logger } from '$lib/utils/logger'\n\n// ===== 더미 지출 항목 생성 =====\nfunction generateDummyExpenses(): ExpenseItem[] {\n  const categories = [\n    'PERSONNEL_CASH',\n    'MATERIAL',\n    'RESEARCH_ACTIVITY',\n    'TRAVEL',\n    'MEETING',\n    'PATENT',\n    'OFFICE_SUPPLIES'\n  ]\n  const statuses = ['draft', 'pending_approval', 'approved', 'executed', 'completed', 'rejected']\n  const projects = ['proj-001', 'proj-002', 'proj-003', 'proj-004', 'proj-005']\n  const requesters = [\n    'person-002',\n    'person-008',\n    'person-009',\n    'person-011',\n    'person-013',\n    'person-014',\n    'person-015'\n  ]\n  const deptOwners = [\n    '경영지원팀',\n    '구매팀',\n    'AI연구팀',\n    '블록체인팀',\n    'IoT팀',\n    '총무팀',\n    'R&D전략팀'\n  ]\n\n  const expenses: ExpenseItem[] = []\n\n  for (let i = 1; i <= 25; i++) {\n    const category = categories[Math.floor(Math.random() * categories.length)]\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const project = projects[Math.floor(Math.random() * projects.length)]\n    const requester = requesters[Math.floor(Math.random() * requesters.length)]\n    const deptOwner = deptOwners[Math.floor(Math.random() * deptOwners.length)]\n\n    const amount = Math.floor(Math.random() * 10000000) + 100000 // 10만원 ~ 1000만원\n    const createdAt = new Date(Date.now() - Math.random() * 90 * 24 * 60 * 60 * 1000).toISOString()\n\n    expenses.push({\n      id: `exp-${i.toString().padStart(3, '0')}`,\n      projectId: project,\n      categoryCode: category,\n      requesterId: requester,\n      amount: amount,\n      currency: 'KRW',\n      description: `${category} 관련 지출 - ${i}번째 요청`,\n      status: status as any,\n      deptOwner: deptOwner,\n      createdAt: createdAt,\n      updatedAt: createdAt\n    })\n  }\n\n  return expenses\n}\n\n// ===== 더미 문서 생성 =====\nfunction generateDummyDocuments(): Document[] {\n  const documentTypes = [\n    'REQUISITION',\n    'QUOTE',\n    'PURCHASE_ORDER',\n    'TAX_INVOICE',\n    'DELIVERY_NOTE',\n    'INSPECTION_REPORT',\n    'RECEIPT',\n    'MEETING_MINUTES',\n    'TRAVEL_REPORT',\n    'PATENT_DOCUMENT'\n  ]\n  const expenses = generateDummyExpenses()\n  const documents: Document[] = []\n\n  for (let i = 1; i <= 30; i++) {\n    const expense = expenses[Math.floor(Math.random() * expenses.length)]\n    const docType = documentTypes[Math.floor(Math.random() * documentTypes.length)]\n    const createdAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString()\n\n    documents.push({\n      id: `doc-${i.toString().padStart(3, '0')}`,\n      expenseId: expense.id,\n      projectId: expense.projectId,\n      type: docType as any,\n      filename: `${docType}_${i}.pdf`,\n      originalFilename: `${docType}_${i}.pdf`,\n      storageUrl: `/storage/documents/${docType}_${i}.pdf`,\n      sha256: `sha256_${i}_${Math.random().toString(36).substr(2, 9)}`,\n      version: 1,\n      meta: {\n        fileSize: Math.floor(Math.random() * 5000000) + 100000, // 100KB ~ 5MB\n        uploadedBy: expense.requesterId\n      },\n      createdAt: createdAt\n    })\n  }\n\n  return documents\n}\n\n// ===== 더미 결재 생성 =====\nfunction generateDummyApprovals(): Approval[] {\n  const expenses = generateDummyExpenses()\n  const approvers = ['person-003', 'person-010', 'person-012', 'person-001', 'person-005']\n  const decisions = ['approved', 'rejected', 'pending']\n  const approvals: Approval[] = []\n\n  for (let i = 1; i <= 20; i++) {\n    const expense = expenses[Math.floor(Math.random() * expenses.length)]\n    const approver = approvers[Math.floor(Math.random() * approvers.length)]\n    const decision = decisions[Math.floor(Math.random() * decisions.length)]\n    const createdAt = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\n\n    approvals.push({\n      id: `app-${i.toString().padStart(3, '0')}`,\n      subjectType: 'expense',\n      subjectId: expense.id,\n      stepNo: Math.floor(Math.random() * 3) + 1,\n      approverId: approver,\n      decision: decision as any,\n      comment: decision === 'rejected' ? '추가 서류 필요' : '승인 완료',\n      decidedAt: decision !== 'pending' ? createdAt : undefined,\n      createdAt: createdAt\n    })\n  }\n\n  return approvals\n}\n\n// ===== 더미 결재 워크플로우 생성 =====\nfunction generateDummyWorkflows(): ApprovalWorkflow[] {\n  const expenses = generateDummyExpenses()\n  const workflows: ApprovalWorkflow[] = []\n\n  expenses.forEach((expense, index) => {\n    const statuses = ['pending', 'approved', 'rejected', 'cancelled']\n    const status = statuses[Math.floor(Math.random() * statuses.length)]\n    const createdAt = new Date(Date.now() - Math.random() * 60 * 24 * 60 * 60 * 1000).toISOString()\n\n    workflows.push({\n      id: `workflow-${index + 1}`,\n      subjectType: 'expense',\n      subjectId: expense.id,\n      currentStep: Math.floor(Math.random() * 3) + 1,\n      totalSteps: 3,\n      status: status as any,\n      createdAt: createdAt,\n      updatedAt: createdAt\n    })\n  })\n\n  return workflows\n}\n\n// ===== 더미데이터 초기화 함수 =====\nexport function initializeDummyData(): void {\n  logger.log('R&D 시스템 더미데이터 초기화 시작...')\n\n  // 지출 항목 초기화\n  const dummyExpenses = generateDummyExpenses()\n  expenseItems.set(dummyExpenses)\n  logger.log(`${dummyExpenses.length}개의 지출 항목 생성 완료`)\n\n  // 문서 초기화\n  const dummyDocuments = generateDummyDocuments()\n  documents.set(dummyDocuments)\n  logger.log(`${dummyDocuments.length}개의 문서 생성 완료`)\n\n  // 결재 초기화\n  const dummyApprovals = generateDummyApprovals()\n  approvals.set(dummyApprovals)\n  logger.log(`${dummyApprovals.length}개의 결재 생성 완료`)\n\n  // 결재 워크플로우 초기화\n  const dummyWorkflows = generateDummyWorkflows()\n  approvalWorkflows.set(dummyWorkflows)\n  logger.log(`${dummyWorkflows.length}개의 결재 워크플로우 생성 완료`)\n\n  logger.log('R&D 시스템 더미데이터 초기화 완료!')\n}\n\n// ===== 통계 데이터 생성 =====\nexport function generateStatistics() {\n  let expenses: ExpenseItem[] = []\n  expenseItems.subscribe(value => (expenses = value))()\n\n  const stats = {\n    total: expenses.length,\n    pending: expenses.filter(e => e.status === 'pending_approval' || e.status === 'draft').length,\n    approved: expenses.filter(\n      e => e.status === 'approved' || e.status === 'executed' || e.status === 'completed'\n    ).length,\n    rejected: expenses.filter(e => e.status === 'rejected').length,\n    totalAmount: expenses.reduce((sum, e) => sum + e.amount, 0),\n    byCategory: {} as Record<string, number>,\n    byProject: {} as Record<string, number>,\n    byStatus: {} as Record<string, number>\n  }\n\n  // 카테고리별 통계\n  expenses.forEach(expense => {\n    stats.byCategory[expense.categoryCode] = (stats.byCategory[expense.categoryCode] || 0) + 1\n    stats.byProject[expense.projectId] = (stats.byProject[expense.projectId] || 0) + 1\n    stats.byStatus[expense.status] = (stats.byStatus[expense.status] || 0) + 1\n  })\n\n  return stats\n}\n\n// ===== 랜덤 데이터 생성 유틸리티 =====\nexport function generateRandomId(prefix: string): string {\n  return `${prefix}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n}\n\nexport function generateRandomDate(daysAgo: number = 30): string {\n  const date = new Date(Date.now() - Math.random() * daysAgo * 24 * 60 * 60 * 1000)\n  return toUTC(date)\n}\n\nexport function generateRandomAmount(min: number = 100000, max: number = 10000000): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\n// ===== 샘플 텍스트 생성 =====\nexport const sampleTexts = {\n  descriptions: [\n    '연구용 장비 구매',\n    '소프트웨어 라이선스 구매',\n    '출장비 정산',\n    '회의비 지출',\n    '특허출원 수수료',\n    '사무용품 구매',\n    '연구활동비 지출',\n    '교육비 지출',\n    '컨설팅비 지출',\n    '마케팅비 지출'\n  ],\n  comments: [\n    '승인 완료',\n    '추가 서류 필요',\n    '금액 조정 필요',\n    '카테고리 변경 필요',\n    '담당자 확인 필요',\n    '예산 초과',\n    '정상 처리',\n    '재검토 필요',\n    '즉시 처리',\n    '보류'\n  ],\n  departments: [\n    '경영지원팀',\n    '구매팀',\n    'AI연구팀',\n    '블록체인팀',\n    'IoT팀',\n    '총무팀',\n    'R&D전략팀',\n    '기술팀',\n    '마케팅팀',\n    '인사팀'\n  ]\n}\n\n// ===== 내보내기 =====\nexport {\n  generateDummyApprovals,\n  generateDummyDocuments,\n  generateDummyExpenses,\n  generateDummyWorkflows\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/mock-data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/participation-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'monthlyAnalysis' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":208,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'history' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":333,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":333,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'changes' is defined but never used. Allowed unused args must match /^_/u.","line":359,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":359,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":414,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":414,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13314,13317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13314,13317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13439,13442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13439,13442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, derived, get } from 'svelte/store'\nimport { employees, projects } from '../rd'\nimport type { ParticipationAssignment } from './types'\nimport type { Employee, Project } from '../rd'\n\n// 고도화된 참여율 관리 스토어\nexport const participationAssignments = writable<ParticipationAssignment[]>([])\nexport const participationHistory = writable<ParticipationHistory[]>([])\nexport const participationConflicts = writable<ParticipationConflict[]>([])\nexport const participationRecommendations = writable<ParticipationRecommendation[]>([])\n// participationHealth와 participationTrends는 derived store로 정의됨\n\n// 참여율 히스토리 인터페이스\nexport interface ParticipationHistory {\n  id: string\n  personId: string\n  projectId: string\n  oldRate: number\n  newRate: number\n  changeReason: string\n  changedBy: string\n  changedAt: string\n  effectiveFrom: string\n  effectiveTo: string\n}\n\n// 참여율 충돌 인터페이스\nexport interface ParticipationConflict {\n  id: string\n  personId: string\n  conflictType: 'overload' | 'underutilization' | 'schedule_conflict' | 'skill_mismatch'\n  severity: 'low' | 'medium' | 'high' | 'critical'\n  description: string\n  affectedProjects: string[]\n  recommendedActions: string[]\n  detectedAt: string\n  resolvedAt?: string\n}\n\n// 참여율 추천 인터페이스\nexport interface ParticipationRecommendation {\n  id: string\n  type: 'rebalance' | 'hire' | 'reduce' | 'optimize'\n  priority: 'low' | 'medium' | 'high' | 'urgent'\n  title: string\n  description: string\n  affectedPersons: string[]\n  affectedProjects: string[]\n  estimatedImpact: {\n    cost: number\n    benefit: number\n    risk: number\n  }\n  recommendedActions: string[]\n  createdAt: string\n  expiresAt: string\n}\n\n// 고급 참여율 분석 함수들\nexport class ParticipationManager {\n  // 1. 참여율 충돌 감지\n  static detectConflicts(): ParticipationConflict[] {\n    const conflicts: ParticipationConflict[] = []\n    const currentAssignments = get(participationAssignments)\n    const currentEmployees = get(employees)\n    const currentProjects = get(projects)\n\n    // 월별 참여율 분석\n    const monthlyAnalysis = this.analyzeMonthlyParticipation()\n\n    // 과부하 감지\n    monthlyAnalysis.forEach(monthData => {\n      monthData.personAnalysis.forEach(personData => {\n        if (personData.totalRate > 100) {\n          conflicts.push({\n            id: crypto.randomUUID(),\n            personId: personData.personId,\n            conflictType: 'overload',\n            severity: personData.totalRate > 120 ? 'critical' : 'high',\n            description: `${personData.personName}의 ${monthData.month} 참여율이 ${personData.totalRate}%로 과부하 상태입니다.`,\n            affectedProjects: personData.projects.map(p => p.projectId),\n            recommendedActions: ['참여율 재조정', '추가 인력 투입', '프로젝트 일정 조정'],\n            detectedAt: new Date().toISOString()\n          })\n        }\n      })\n    })\n\n    // 미활용 감지\n    monthlyAnalysis.forEach(monthData => {\n      monthData.personAnalysis.forEach(personData => {\n        if (personData.totalRate < 50 && personData.totalRate > 0) {\n          conflicts.push({\n            id: crypto.randomUUID(),\n            personId: personData.personId,\n            conflictType: 'underutilization',\n            severity: personData.totalRate < 30 ? 'medium' : 'low',\n            description: `${personData.personName}의 ${monthData.month} 참여율이 ${personData.totalRate}%로 미활용 상태입니다.`,\n            affectedProjects: personData.projects.map(p => p.projectId),\n            recommendedActions: ['추가 프로젝트 배정', '교육 및 개발 활동', '다른 팀 지원'],\n            detectedAt: new Date().toISOString()\n          })\n        }\n      })\n    })\n\n    // 스킬 불일치 감지\n    currentAssignments.forEach(assignment => {\n      const employee = currentEmployees.find(e => e.id === assignment.personId)\n      const project = currentProjects.find(p => p.id === assignment.projectId)\n\n      if (employee && project) {\n        const skillMatch = this.calculateSkillMatch(employee, project)\n        if (skillMatch < 0.6) {\n          conflicts.push({\n            id: crypto.randomUUID(),\n            personId: assignment.personId,\n            conflictType: 'skill_mismatch',\n            severity: skillMatch < 0.4 ? 'high' : 'medium',\n            description: `${employee.name}의 스킬이 ${project.name} 프로젝트 요구사항과 ${(skillMatch * 100).toFixed(0)}% 일치합니다.`,\n            affectedProjects: [assignment.projectId],\n            recommendedActions: ['스킬 향상 교육', '멘토링 프로그램', '프로젝트 역할 조정'],\n            detectedAt: new Date().toISOString()\n          })\n        }\n      }\n    })\n\n    participationConflicts.set(conflicts)\n    return conflicts\n  }\n\n  // 2. 월별 참여율 분석\n  static analyzeMonthlyParticipation(): Array<{\n    month: string\n    personAnalysis: Array<{\n      personId: string\n      personName: string\n      totalRate: number\n      projects: Array<{\n        projectId: string\n        projectName: string\n        rate: number\n      }>\n    }>\n  }> {\n    const assignments = get(participationAssignments)\n    const employees = get(employees)\n    const projects = get(projects)\n\n    // 최근 12개월 분석\n    const months = []\n    for (let i = 0; i < 12; i++) {\n      const date = new Date()\n      date.setMonth(date.getMonth() - i)\n      months.push(date.toISOString().slice(0, 7)) // YYYY-MM 형식\n    }\n\n    return months.map(month => {\n      const personAnalysis = employees.map(employee => {\n        const personAssignments = assignments.filter(\n          a =>\n            a.personId === employee.id && a.dateFrom <= `${month}-31` && a.dateTo >= `${month}-01`\n        )\n\n        const projects = personAssignments.map(assignment => {\n          const project = projects.find(p => p.id === assignment.projectId)\n          return {\n            projectId: assignment.projectId,\n            projectName: project?.name || 'Unknown',\n            rate: assignment.ratePct\n          }\n        })\n\n        const totalRate = personAssignments.reduce((sum, a) => sum + a.ratePct, 0)\n\n        return {\n          personId: employee.id,\n          personName: employee.name,\n          totalRate,\n          projects\n        }\n      })\n\n      return { month, personAnalysis }\n    })\n  }\n\n  // 3. 스킬 매칭 계산\n  static calculateSkillMatch(employee: Employee, project: Project): number {\n    // 실제 구현에서는 더 정교한 스킬 매칭 알고리즘 사용\n    const requiredSkills = project.requiredSkills || []\n    const employeeSkills = employee.skills || []\n\n    if (requiredSkills.length === 0) return 1.0\n\n    const matchedSkills = requiredSkills.filter(skill =>\n      employeeSkills.some(empSkill => empSkill.toLowerCase().includes(skill.toLowerCase()))\n    )\n\n    return matchedSkills.length / requiredSkills.length\n  }\n\n  // 4. 참여율 최적화 추천\n  static generateOptimizationRecommendations(): ParticipationRecommendation[] {\n    const recommendations: ParticipationRecommendation[] = []\n    const conflicts = get(participationConflicts)\n    const monthlyAnalysis = this.analyzeMonthlyParticipation()\n\n    // 과부하 해결 추천\n    const overloadConflicts = conflicts.filter(c => c.conflictType === 'overload')\n    if (overloadConflicts.length > 0) {\n      recommendations.push({\n        id: crypto.randomUUID(),\n        type: 'rebalance',\n        priority: 'high',\n        title: '참여율 재조정 필요',\n        description: `${overloadConflicts.length}명의 연구원이 과부하 상태입니다. 참여율 재조정이 필요합니다.`,\n        affectedPersons: overloadConflicts.map(c => c.personId),\n        affectedProjects: [...new Set(overloadConflicts.flatMap(c => c.affectedProjects))],\n        estimatedImpact: {\n          cost: 0,\n          benefit: 5000000, // 생산성 향상\n          risk: 0.2\n        },\n        recommendedActions: [\n          '과부하 인력의 참여율 20% 감소',\n          '미활용 인력의 참여율 증가',\n          '프로젝트 우선순위 재검토'\n        ],\n        createdAt: new Date().toISOString(),\n        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7일 후\n      })\n    }\n\n    // 신규 채용 추천\n    const underutilizationConflicts = conflicts.filter(c => c.conflictType === 'underutilization')\n    const totalUnderutilized = underutilizationConflicts.length\n    if (totalUnderutilized === 0) {\n      // 모든 인력이 적절히 활용되고 있지만, 프로젝트가 많다면 신규 채용 고려\n      const activeProjects = get(projects).filter(p => p.status === 'active')\n      const totalEmployees = get(employees).length\n\n      if (activeProjects.length > totalEmployees * 0.8) {\n        recommendations.push({\n          id: crypto.randomUUID(),\n          type: 'hire',\n          priority: 'medium',\n          title: '신규 연구원 채용 고려',\n          description: '프로젝트 수가 인력 대비 많아 신규 채용을 고려해볼 수 있습니다.',\n          affectedPersons: [],\n          affectedProjects: activeProjects.map(p => p.id),\n          estimatedImpact: {\n            cost: 60000000, // 연봉 6000만원\n            benefit: 80000000, // 생산성 향상\n            risk: 0.3\n          },\n          recommendedActions: ['필요 스킬 분석', '채용 계획 수립', '온보딩 계획 준비'],\n          createdAt: new Date().toISOString(),\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30일 후\n        })\n      }\n    }\n\n    participationRecommendations.set(recommendations)\n    return recommendations\n  }\n\n  // 5. 참여율 자동 조정\n  static autoAdjustParticipation(personId: string, targetRate: number, reason: string): boolean {\n    const assignments = get(participationAssignments)\n    const personAssignments = assignments.filter(a => a.personId === personId)\n\n    if (personAssignments.length === 0) return false\n\n    // 현재 총 참여율 계산\n    const currentTotal = personAssignments.reduce((sum, a) => sum + a.ratePct, 0)\n    const adjustment = targetRate - currentTotal\n\n    if (Math.abs(adjustment) < 5) return true // 5% 미만이면 조정하지 않음\n\n    // 조정 로직: 우선순위가 낮은 프로젝트부터 조정\n    const sortedAssignments = personAssignments.sort((a, b) => {\n      const projectA = get(projects).find(p => p.id === a.projectId)\n      const projectB = get(projects).find(p => p.id === b.projectId)\n      return (projectA?.priority || 0) - (projectB?.priority || 0)\n    })\n\n    let remainingAdjustment = adjustment\n    const updates: Array<{ id: string; newRate: number }> = []\n\n    for (const assignment of sortedAssignments) {\n      if (remainingAdjustment === 0) break\n\n      const currentRate = assignment.ratePct\n      let newRate = currentRate\n\n      if (remainingAdjustment > 0) {\n        // 참여율 증가\n        const maxIncrease = Math.min(remainingAdjustment, 100 - currentRate)\n        newRate = currentRate + maxIncrease\n        remainingAdjustment -= maxIncrease\n      } else {\n        // 참여율 감소\n        const maxDecrease = Math.min(Math.abs(remainingAdjustment), currentRate)\n        newRate = currentRate - maxDecrease\n        remainingAdjustment += maxDecrease\n      }\n\n      if (newRate !== currentRate) {\n        updates.push({ id: assignment.id, newRate })\n      }\n    }\n\n    // 업데이트 적용\n    updates.forEach(update => {\n      this.updateParticipationRate(update.id, update.newRate, reason)\n    })\n\n    return true\n  }\n\n  // 6. 참여율 업데이트 (히스토리 포함)\n  static updateParticipationRate(assignmentId: string, newRate: number, reason: string): void {\n    const assignments = get(participationAssignments)\n    const assignment = assignments.find(a => a.id === assignmentId)\n\n    if (!assignment) return\n\n    const oldRate = assignment.ratePct\n\n    // 히스토리 기록\n    const history: ParticipationHistory = {\n      id: crypto.randomUUID(),\n      personId: assignment.personId,\n      projectId: assignment.projectId,\n      oldRate,\n      newRate,\n      changeReason: reason,\n      changedBy: 'system', // 실제로는 현재 사용자 ID\n      changedAt: new Date().toISOString(),\n      effectiveFrom: new Date().toISOString(),\n      effectiveTo: assignment.dateTo\n    }\n\n    // 할당 업데이트\n    participationAssignments.update(assignments =>\n      assignments.map(a =>\n        a.id === assignmentId ? { ...a, ratePct: newRate, updatedAt: new Date().toISOString() } : a\n      )\n    )\n\n    // 히스토리 추가\n    participationHistory.update(history => [history, ...history])\n  }\n\n  // 7. 참여율 예측 및 시뮬레이션\n  static simulateParticipationChanges(\n    changes: Array<{\n      personId: string\n      projectId: string\n      newRate: number\n    }>\n  ): {\n    monthlyImpact: Array<{\n      month: string\n      overloadCount: number\n      underutilizedCount: number\n      totalCost: number\n    }>\n    recommendations: string[]\n  } {\n    // 시뮬레이션 로직 구현\n    const monthlyImpact = []\n    const recommendations = []\n\n    // 최근 6개월 시뮬레이션\n    for (let i = 0; i < 6; i++) {\n      const date = new Date()\n      date.setMonth(date.getMonth() + i)\n      const month = date.toISOString().slice(0, 7)\n\n      // 시뮬레이션된 참여율로 분석\n      const simulatedAnalysis = this.analyzeMonthlyParticipation()\n      const monthData = simulatedAnalysis.find(m => m.month === month)\n\n      if (monthData) {\n        const overloadCount = monthData.personAnalysis.filter(p => p.totalRate > 100).length\n        const underutilizedCount = monthData.personAnalysis.filter(\n          p => p.totalRate < 50 && p.totalRate > 0\n        ).length\n\n        monthlyImpact.push({\n          month,\n          overloadCount,\n          underutilizedCount,\n          totalCost: this.calculateMonthlyCost(monthData)\n        })\n      }\n    }\n\n    // 추천사항 생성\n    if (monthlyImpact.some(m => m.overloadCount > 0)) {\n      recommendations.push('일부 인력의 과부하가 예상됩니다. 추가 인력 투입을 고려하세요.')\n    }\n    if (monthlyImpact.some(m => m.underutilizedCount > 0)) {\n      recommendations.push('일부 인력의 미활용이 예상됩니다. 추가 프로젝트 배정을 고려하세요.')\n    }\n\n    return { monthlyImpact, recommendations }\n  }\n\n  // 8. 월별 비용 계산\n  static calculateMonthlyCost(monthData: any): number {\n    const employees = get(employees)\n    let totalCost = 0\n\n    monthData.personAnalysis.forEach((personData: any) => {\n      const employee = employees.find(e => e.id === personData.personId)\n      if (employee) {\n        // 월급의 참여율 비율로 계산\n        const monthlySalary = employee.salary\n        const participationCost = monthlySalary * (personData.totalRate / 100)\n        totalCost += participationCost\n      }\n    })\n\n    return totalCost\n  }\n}\n\n// 파생 스토어들\nexport const participationHealth = derived(\n  [participationAssignments, participationConflicts],\n  ([assignments, conflicts]) => {\n    const totalAssignments = assignments.length\n    const criticalConflicts = conflicts.filter(c => c.severity === 'critical').length\n    const highConflicts = conflicts.filter(c => c.severity === 'high').length\n\n    const healthScore = Math.max(0, 100 - criticalConflicts * 20 - highConflicts * 10)\n\n    return {\n      score: healthScore,\n      status:\n        healthScore >= 80\n          ? 'excellent'\n          : healthScore >= 60\n            ? 'good'\n            : healthScore >= 40\n              ? 'fair'\n              : 'poor',\n      criticalIssues: criticalConflicts,\n      highIssues: highConflicts,\n      totalAssignments\n    }\n  }\n)\n\nexport const participationTrends = derived(participationHistory, history => {\n  // 최근 6개월 트렌드 분석\n  const sixMonthsAgo = new Date()\n  sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6)\n\n  const recentHistory = history.filter(h => new Date(h.changedAt) >= sixMonthsAgo)\n\n  const monthlyChanges = {}\n  recentHistory.forEach(change => {\n    const month = change.changedAt.slice(0, 7)\n    if (!monthlyChanges[month]) {\n      monthlyChanges[month] = { increases: 0, decreases: 0, total: 0 }\n    }\n\n    if (change.newRate > change.oldRate) {\n      monthlyChanges[month].increases++\n    } else if (change.newRate < change.oldRate) {\n      monthlyChanges[month].decreases++\n    }\n    monthlyChanges[month].total++\n  })\n\n  return {\n    monthlyChanges,\n    totalChanges: recentHistory.length,\n    averageChange:\n      recentHistory.length > 0\n        ? recentHistory.reduce((sum, h) => sum + Math.abs(h.newRate - h.oldRate), 0) /\n          recentHistory.length\n        : 0\n  }\n})\n\n// 초기 데이터 로드\nexport function initializeParticipationManager() {\n  // 충돌 감지\n  ParticipationManager.detectConflicts()\n\n  // 추천 생성\n  ParticipationManager.generateOptimizationRecommendations()\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/rbac.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9183,9186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9183,9186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9208,9211],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9208,9211],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// R&D 통합관리 시스템 RBAC (Role-Based Access Control) 구현\n\nimport { writable, derived } from 'svelte/store'\nimport { UserRole, Permission, type Person } from './types'\n\n// ===== 권한 매트릭스 정의 =====\nconst PERMISSION_MATRIX: Record<UserRole, Permission[]> = {\n  [UserRole.RESEARCHER]: [\n    Permission.READ_PROJECT,\n    Permission.UPLOAD_DOCUMENT,\n    Permission.CREATE_REPORT\n  ],\n  [UserRole.PM]: [\n    Permission.READ_PROJECT,\n    Permission.WRITE_PROJECT,\n    Permission.APPROVE_EXPENSE,\n    Permission.MANAGE_PERSONNEL,\n    Permission.CREATE_REPORT,\n    Permission.UPLOAD_DOCUMENT\n  ],\n  [UserRole.DEPARTMENT_HEAD]: [\n    Permission.READ_PROJECT,\n    Permission.WRITE_PROJECT,\n    Permission.APPROVE_EXPENSE,\n    Permission.UPLOAD_DOCUMENT\n  ],\n  [UserRole.MANAGEMENT_SUPPORT]: [\n    Permission.READ_ALL,\n    Permission.WRITE_ALL,\n    Permission.APPROVE_ALL,\n    Permission.MANAGE_BUDGET,\n    Permission.MANAGE_PERSONNEL,\n    Permission.CREATE_REPORT,\n    Permission.UPLOAD_DOCUMENT,\n    Permission.VIEW_AUDIT_LOG\n  ],\n  [UserRole.LAB_HEAD]: [\n    Permission.READ_ALL,\n    Permission.WRITE_PROJECT,\n    Permission.APPROVE_ALL,\n    Permission.MANAGE_PERSONNEL,\n    Permission.CREATE_REPORT,\n    Permission.VIEW_AUDIT_LOG\n  ],\n  [UserRole.EXECUTIVE]: [\n    Permission.READ_ALL,\n    Permission.APPROVE_ALL,\n    Permission.MANAGE_BUDGET,\n    Permission.MANAGE_PERSONNEL,\n    Permission.VIEW_AUDIT_LOG\n  ],\n  [UserRole.AUDITOR]: [Permission.READ_ALL, Permission.VIEW_AUDIT_LOG]\n}\n\n// ===== 엔터티별 권한 정의 =====\nconst ENTITY_PERMISSIONS: Record<string, Record<UserRole, string[]>> = {\n  Project: {\n    [UserRole.RESEARCHER]: ['read'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read', 'write'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve', 'lock'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read', 'approve', 'lock'],\n    [UserRole.AUDITOR]: ['read']\n  },\n  ExpenseItem: {\n    [UserRole.RESEARCHER]: ['read'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve', 'lock'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read', 'approve'],\n    [UserRole.AUDITOR]: ['read']\n  },\n  Document: {\n    [UserRole.RESEARCHER]: ['read', 'write'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read', 'write'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve', 'lock'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read', 'approve'],\n    [UserRole.AUDITOR]: ['read']\n  },\n  ResearchNote: {\n    [UserRole.RESEARCHER]: ['read', 'write'],\n    [UserRole.PM]: ['read', 'write', 'approve'],\n    [UserRole.DEPARTMENT_HEAD]: ['read'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write'],\n    [UserRole.LAB_HEAD]: ['read', 'write', 'approve'],\n    [UserRole.EXECUTIVE]: ['read'],\n    [UserRole.AUDITOR]: ['read']\n  },\n  SubmissionBundle: {\n    [UserRole.RESEARCHER]: [],\n    [UserRole.PM]: ['read'],\n    [UserRole.DEPARTMENT_HEAD]: ['read'],\n    [UserRole.MANAGEMENT_SUPPORT]: ['read', 'write', 'approve'],\n    [UserRole.LAB_HEAD]: ['read'],\n    [UserRole.EXECUTIVE]: ['read', 'approve'],\n    [UserRole.AUDITOR]: ['read', 'lock']\n  }\n}\n\n// ===== 현재 사용자 스토어 =====\nexport const currentUser = writable<Person | null>(null)\n\n// ===== 사용자 역할 스토어 =====\nexport const userRoles = writable<UserRole[]>([])\n\n// ===== 사용자 권한 스토어 =====\nexport const userPermissions = derived(userRoles, $userRoles => {\n  const permissions = new Set<Permission>()\n  $userRoles.forEach(role => {\n    PERMISSION_MATRIX[role]?.forEach(permission => {\n      permissions.add(permission)\n    })\n  })\n  return Array.from(permissions)\n})\n\n// ===== RBAC 함수들 =====\n\n/**\n * 사용자에게 특정 권한이 있는지 확인\n */\nexport function hasPermission(permission: Permission, userRoles: UserRole[]): boolean {\n  return userRoles.some(role => PERMISSION_MATRIX[role]?.includes(permission))\n}\n\n/**\n * 사용자가 특정 엔터티에 대해 특정 액션을 수행할 수 있는지 확인\n */\nexport function canPerformAction(entity: string, action: string, userRoles: UserRole[]): boolean {\n  return userRoles.some(role => {\n    const entityPermissions = ENTITY_PERMISSIONS[entity]\n    if (!entityPermissions || !entityPermissions[role]) {\n      return false\n    }\n    return entityPermissions[role].includes(action)\n  })\n}\n\n/**\n * 사용자의 모든 권한을 가져옴\n */\nexport function getUserPermissions(userRoles: UserRole[]): Permission[] {\n  const permissions = new Set<Permission>()\n  userRoles.forEach(role => {\n    PERMISSION_MATRIX[role]?.forEach(permission => {\n      permissions.add(permission)\n    })\n  })\n  return Array.from(permissions)\n}\n\n/**\n * 특정 역할의 모든 권한을 가져옴\n */\nexport function getRolePermissions(role: UserRole): Permission[] {\n  return PERMISSION_MATRIX[role] || []\n}\n\n/**\n * 사용자 역할 설정\n */\nexport function setUserRoles(roles: UserRole[]): void {\n  userRoles.set(roles)\n}\n\n/**\n * 사용자 역할 추가\n */\nexport function addUserRole(role: UserRole): void {\n  userRoles.update(roles => {\n    if (!roles.includes(role)) {\n      return [...roles, role]\n    }\n    return roles\n  })\n}\n\n/**\n * 사용자 역할 제거\n */\nexport function removeUserRole(role: UserRole): void {\n  userRoles.update(roles => roles.filter(r => r !== role))\n}\n\n/**\n * 현재 사용자 설정\n */\nexport function setCurrentUser(user: Person): void {\n  currentUser.set(user)\n  setUserRoles(user.roleSet)\n}\n\n/**\n * 현재 사용자 정보 가져오기\n */\nexport function getCurrentUser(): Person | null {\n  let user: Person | null = null\n  currentUser.subscribe(value => (user = value))()\n  return user\n}\n\n/**\n * 권한 체크 헬퍼 함수들\n */\nexport const permissionChecks = {\n  canReadAll: (roles: UserRole[]) => hasPermission(Permission.READ_ALL, roles),\n  canWriteAll: (roles: UserRole[]) => hasPermission(Permission.WRITE_ALL, roles),\n  canApproveAll: (roles: UserRole[]) => hasPermission(Permission.APPROVE_ALL, roles),\n  canAuditAll: (roles: UserRole[]) => hasPermission(Permission.AUDIT_ALL, roles),\n  canManageBudget: (roles: UserRole[]) => hasPermission(Permission.MANAGE_BUDGET, roles),\n  canManagePersonnel: (roles: UserRole[]) => hasPermission(Permission.MANAGE_PERSONNEL, roles),\n  canCreateReport: (roles: UserRole[]) => hasPermission(Permission.CREATE_REPORT, roles),\n  canUploadDocument: (roles: UserRole[]) => hasPermission(Permission.UPLOAD_DOCUMENT, roles),\n  canViewAuditLog: (roles: UserRole[]) => hasPermission(Permission.VIEW_AUDIT_LOG, roles)\n}\n\n/**\n * 엔터티별 권한 체크 헬퍼 함수들\n */\nexport const entityPermissionChecks = {\n  canReadProject: (roles: UserRole[]) => canPerformAction('Project', 'read', roles),\n  canWriteProject: (roles: UserRole[]) => canPerformAction('Project', 'write', roles),\n  canApproveProject: (roles: UserRole[]) => canPerformAction('Project', 'approve', roles),\n  canLockProject: (roles: UserRole[]) => canPerformAction('Project', 'lock', roles),\n\n  canReadExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'read', roles),\n  canWriteExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'write', roles),\n  canApproveExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'approve', roles),\n  canLockExpense: (roles: UserRole[]) => canPerformAction('ExpenseItem', 'lock', roles),\n\n  canReadDocument: (roles: UserRole[]) => canPerformAction('Document', 'read', roles),\n  canWriteDocument: (roles: UserRole[]) => canPerformAction('Document', 'write', roles),\n  canApproveDocument: (roles: UserRole[]) => canPerformAction('Document', 'approve', roles),\n  canLockDocument: (roles: UserRole[]) => canPerformAction('Document', 'lock', roles),\n\n  canReadResearchNote: (roles: UserRole[]) => canPerformAction('ResearchNote', 'read', roles),\n  canWriteResearchNote: (roles: UserRole[]) => canPerformAction('ResearchNote', 'write', roles),\n  canApproveResearchNote: (roles: UserRole[]) => canPerformAction('ResearchNote', 'approve', roles),\n\n  canReadSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'read', roles),\n  canWriteSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'write', roles),\n  canApproveSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'approve', roles),\n  canLockSubmissionBundle: (roles: UserRole[]) =>\n    canPerformAction('SubmissionBundle', 'lock', roles)\n}\n\n/**\n * 역할별 메뉴 접근 권한 확인\n */\nexport function canAccessMenu(menuName: string, roles: UserRole[]): boolean {\n  const menuPermissions: Record<string, Permission[]> = {\n    대시보드: [Permission.READ_PROJECT],\n    '프로젝트 관리': [Permission.READ_PROJECT, Permission.WRITE_PROJECT],\n    '예산 관리': [Permission.MANAGE_BUDGET],\n    '지출 관리': [Permission.APPROVE_EXPENSE],\n    '인력 관리': [Permission.MANAGE_PERSONNEL],\n    연구노트: [Permission.READ_PROJECT],\n    리포트: [Permission.CREATE_REPORT],\n    '결재 관리': [Permission.APPROVE_ALL],\n    '국가R&D 업로드': [Permission.WRITE_ALL],\n    '감사 로그': [Permission.VIEW_AUDIT_LOG]\n  }\n\n  const requiredPermissions = menuPermissions[menuName]\n  if (!requiredPermissions) return false\n\n  return requiredPermissions.some(permission => hasPermission(permission, roles))\n}\n\n/**\n * 데이터 마스킹 (민감 정보 보호)\n */\nexport function maskSensitiveData(data: any, roles: UserRole[]): any {\n  if (!data) return data\n\n  // 경영지원팀과 경영진만 급여 정보 조회 가능\n  const canViewSalary = roles.some(role =>\n    [UserRole.MANAGEMENT_SUPPORT, UserRole.EXECUTIVE].includes(role)\n  )\n\n  if (!canViewSalary && data.salary) {\n    data.salary = '***'\n  }\n\n  // 개인정보 마스킹 (연구원은 본인 정보만 조회 가능)\n  const canViewPersonalInfo = roles.some(role =>\n    [UserRole.MANAGEMENT_SUPPORT, UserRole.EXECUTIVE, UserRole.LAB_HEAD].includes(role)\n  )\n\n  if (!canViewPersonalInfo) {\n    if (data.phone) data.phone = '***-****-****'\n    if (data.email) data.email = data.email.replace(/(.{2}).*(@.*)/, '$1***$2')\n  }\n\n  return data\n}\n\n/**\n * 역할별 대시보드 타입 결정\n */\nexport function getDashboardType(roles: UserRole[]): string {\n  if (roles.includes(UserRole.EXECUTIVE)) return 'executive'\n  if (roles.includes(UserRole.LAB_HEAD)) return 'lab_head'\n  if (roles.includes(UserRole.PM)) return 'pm'\n  if (roles.includes(UserRole.MANAGEMENT_SUPPORT)) return 'management_support'\n  if (roles.includes(UserRole.DEPARTMENT_HEAD)) return 'department_head'\n  return 'researcher'\n}\n\n/**\n * 역할별 우선순위 (높을수록 권한이 높음)\n */\nconst ROLE_PRIORITY: Record<UserRole, number> = {\n  [UserRole.RESEARCHER]: 1,\n  [UserRole.DEPARTMENT_HEAD]: 2,\n  [UserRole.PM]: 3,\n  [UserRole.MANAGEMENT_SUPPORT]: 4,\n  [UserRole.LAB_HEAD]: 5,\n  [UserRole.EXECUTIVE]: 6,\n  [UserRole.AUDITOR]: 7\n}\n\n/**\n * 사용자의 최고 권한 역할 가져오기\n */\nexport function getHighestRole(roles: UserRole[]): UserRole | null {\n  if (roles.length === 0) return null\n\n  return roles.reduce((highest, current) => {\n    return ROLE_PRIORITY[current] > ROLE_PRIORITY[highest] ? current : highest\n  })\n}\n\n/**\n * 역할별 설명\n */\nexport const ROLE_DESCRIPTIONS: Record<UserRole, string> = {\n  [UserRole.RESEARCHER]: '연구원 - 연구노트 작성, 산출물 업로드, 본인 휴가/참여율 확인',\n  [UserRole.PM]:\n    'PM(과제책임자) - 분기 목표/산출물 정의, 참여 배정, 지출요청 승인(1차), 리스크 등록',\n  [UserRole.DEPARTMENT_HEAD]: '담당부서(구매·기술 등) - 카테고리별 지출 집행/검수, 문서 수취',\n  [UserRole.MANAGEMENT_SUPPORT]:\n    '경영지원(회계·총무) - 예산 항목 관리, 증빙 검토, 내부 전자결재 기안/종결, 국가R&D 업로드 번들 생성',\n  [UserRole.LAB_HEAD]: '연구소장 - 주간/분기 리포트 수신, 중요 승인(2차), 인력 교체 승인',\n  [UserRole.EXECUTIVE]: '경영진 - 의사결정/에스컬레이션 승인, 신규 채용 트리거 승인',\n  [UserRole.AUDITOR]: '감사/외부평가 - 읽기 전용(감사 로그/증빙 번들 열람)'\n}\n\n/**\n * 역할별 한글명\n */\nexport const ROLE_NAMES_KO: Record<UserRole, string> = {\n  [UserRole.RESEARCHER]: '연구원',\n  [UserRole.PM]: 'PM(과제책임자)',\n  [UserRole.DEPARTMENT_HEAD]: '담당부서',\n  [UserRole.MANAGEMENT_SUPPORT]: '경영지원',\n  [UserRole.LAB_HEAD]: '연구소장',\n  [UserRole.EXECUTIVE]: '경영진',\n  [UserRole.AUDITOR]: '감사'\n}\n\n// ===== 초기화 함수 =====\nexport function initializeRBAC(): void {\n  // 기본 사용자 설정 (경영지원팀)\n  const defaultUser: Person = {\n    id: 'user-001',\n    name: '김경영',\n    email: 'kim.kyung@company.com',\n    phone: '010-1234-5678',\n    department: '경영지원팀',\n    position: '팀장',\n    roleSet: [UserRole.MANAGEMENT_SUPPORT],\n    active: true,\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString()\n  }\n\n  setCurrentUser(defaultUser)\n}\n\n// ===== 내보내기 =====\nexport { PERMISSION_MATRIX, ENTITY_PERMISSIONS, ROLE_PRIORITY }\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/rnd/types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/salary/contract-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/salary/salary-store.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/theme.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used. Allowed unused args must match /^_/u.","line":119,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":28}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { writable, derived } from 'svelte/store'\nimport { browser } from '$app/environment'\n\n// Theme types\nexport type Theme = 'light' | 'dark' | 'auto'\nexport type ColorScheme = 'light' | 'dark'\n\n// Theme configuration\nexport interface ThemeConfig {\n  name: string\n  displayName: string\n  colors: {\n    primary: string\n    secondary: string\n    accent: string\n    background: string\n    surface: string\n    text: string\n    textSecondary: string\n    border: string\n    success: string\n    warning: string\n    error: string\n    info: string\n  }\n}\n\n// Predefined themes\nexport const themes: Record<ColorScheme, ThemeConfig> = {\n  light: {\n    name: 'light',\n    displayName: 'Light',\n    colors: {\n      primary: '#3B82F6',\n      secondary: '#6B7280',\n      accent: '#8B5CF6',\n      background: '#FFFFFF',\n      surface: '#F9FAFB',\n      text: '#111827',\n      textSecondary: '#6B7280',\n      border: '#E5E7EB',\n      success: '#10B981',\n      warning: '#F59E0B',\n      error: '#EF4444',\n      info: '#06B6D4'\n    }\n  },\n  dark: {\n    name: 'dark',\n    displayName: 'Dark',\n    colors: {\n      primary: '#60A5FA',\n      secondary: '#9CA3AF',\n      accent: '#A78BFA',\n      background: '#111827',\n      surface: '#1F2937',\n      text: '#F9FAFB',\n      textSecondary: '#D1D5DB',\n      border: '#374151',\n      success: '#34D399',\n      warning: '#FBBF24',\n      error: '#F87171',\n      info: '#22D3EE'\n    }\n  }\n}\n\n// Theme store\nconst themeStore = writable<Theme>('auto')\nconst systemColorScheme = writable<ColorScheme>('light')\n\n// Current effective theme (resolved from auto)\nexport const currentTheme = derived([themeStore, systemColorScheme], ([theme, systemScheme]) => {\n  if (theme === 'auto') {\n    return systemScheme\n  }\n  return theme as ColorScheme\n})\n\n// Current theme configuration\nexport const themeConfig = derived(currentTheme, scheme => themes[scheme])\n\n// Theme management class\nexport class ThemeManager {\n  private static instance: ThemeManager\n  private store = themeStore\n  private systemStore = systemColorScheme\n\n  private constructor() {\n    if (browser) {\n      this.initializeTheme()\n      this.setupSystemThemeListener()\n    }\n  }\n\n  public static getInstance(): ThemeManager {\n    if (!ThemeManager.instance) {\n      ThemeManager.instance = new ThemeManager()\n    }\n    return ThemeManager.instance\n  }\n\n  // Initialize theme from localStorage and system preference\n  private initializeTheme(): void {\n    // Get saved theme from localStorage\n    const savedTheme = localStorage.getItem('theme') as Theme\n    if (savedTheme && ['light', 'dark', 'auto'].includes(savedTheme)) {\n      this.store.set(savedTheme)\n    }\n\n    // Get system color scheme\n    this.updateSystemColorScheme()\n  }\n\n  // Setup listener for system theme changes\n  private setupSystemThemeListener(): (() => void) | void {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)')\n\n    const handleChange = (e: MediaQueryListEvent) => {\n      this.updateSystemColorScheme()\n    }\n\n    mediaQuery.addEventListener('change', handleChange)\n\n    // Cleanup function\n    return () => {\n      mediaQuery.removeEventListener('change', handleChange)\n    }\n  }\n\n  // Update system color scheme\n  private updateSystemColorScheme(): void {\n    if (browser) {\n      const isDark = window.matchMedia('(prefers-color-scheme: dark)').matches\n      this.systemStore.set(isDark ? 'dark' : 'light')\n    }\n  }\n\n  // Set theme\n  public setTheme(theme: Theme): void {\n    this.store.set(theme)\n\n    if (browser) {\n      localStorage.setItem('theme', theme)\n      this.applyTheme()\n    }\n  }\n\n  // Get current theme\n  public getTheme(): Theme {\n    let currentTheme: Theme\n    this.store.subscribe(theme => {\n      currentTheme = theme\n    })()\n    return currentTheme!\n  }\n\n  // Apply theme to document\n  public applyTheme(): void {\n    if (!browser) return\n\n    const scheme = this.getEffectiveColorScheme()\n    const config = themes[scheme]\n\n    // Apply CSS custom properties\n    const root = document.documentElement\n\n    Object.entries(config.colors).forEach(([key, value]) => {\n      root.style.setProperty(`--color-${key}`, value)\n    })\n\n    // Set data attribute for CSS selectors\n    root.setAttribute('data-theme', scheme)\n    root.setAttribute('data-color-scheme', scheme)\n\n    // Update meta theme-color\n    const metaThemeColor = document.querySelector('meta[name=\"theme-color\"]')\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', config.colors.primary)\n    }\n  }\n\n  // Get effective color scheme\n  public getEffectiveColorScheme(): ColorScheme {\n    const theme = this.getTheme()\n    if (theme === 'auto') {\n      let systemScheme: ColorScheme\n      this.systemStore.subscribe(scheme => {\n        systemScheme = scheme\n      })()\n      return systemScheme!\n    }\n    return theme as ColorScheme\n  }\n\n  // Toggle between light and dark\n  public toggleTheme(): void {\n    const current = this.getEffectiveColorScheme()\n    const newTheme = current === 'light' ? 'dark' : 'light'\n    this.setTheme(newTheme)\n  }\n\n  // Get available themes\n  public getAvailableThemes(): Array<{ value: Theme; label: string }> {\n    return [\n      { value: 'light', label: 'Light' },\n      { value: 'dark', label: 'Dark' },\n      { value: 'auto', label: 'Auto (System)' }\n    ]\n  }\n\n  // Subscribe to theme changes\n  public subscribe(callback: (theme: Theme) => void) {\n    return this.store.subscribe(callback)\n  }\n\n  // Subscribe to current effective theme\n  public subscribeToCurrent(callback: (scheme: ColorScheme) => void) {\n    return currentTheme.subscribe(callback)\n  }\n\n  // Subscribe to theme config\n  public subscribeToConfig(callback: (config: ThemeConfig) => void) {\n    return themeConfig.subscribe(callback)\n  }\n}\n\n// Export singleton instance\nexport const themeManager = ThemeManager.getInstance()\n\n// Apply theme on initialization\nif (browser) {\n  themeManager.applyTheme()\n\n  // Apply theme when it changes\n  currentTheme.subscribe(() => {\n    themeManager.applyTheme()\n  })\n}\n\n// CSS custom properties for theme colors\nexport const themeCSS = `\n\t:root {\n\t\t--color-primary: ${themes.light.colors.primary};\n\t\t--color-secondary: ${themes.light.colors.secondary};\n\t\t--color-accent: ${themes.light.colors.accent};\n\t\t--color-background: ${themes.light.colors.background};\n\t\t--color-surface: ${themes.light.colors.surface};\n\t\t--color-text: ${themes.light.colors.text};\n\t\t--color-text-secondary: ${themes.light.colors.textSecondary};\n\t\t--color-border: ${themes.light.colors.border};\n\t\t--color-success: ${themes.light.colors.success};\n\t\t--color-warning: ${themes.light.colors.warning};\n\t\t--color-error: ${themes.light.colors.error};\n\t\t--color-info: ${themes.light.colors.info};\n\t}\n\n\t[data-theme=\"dark\"] {\n\t\t--color-primary: ${themes.dark.colors.primary};\n\t\t--color-secondary: ${themes.dark.colors.secondary};\n\t\t--color-accent: ${themes.dark.colors.accent};\n\t\t--color-background: ${themes.dark.colors.background};\n\t\t--color-surface: ${themes.dark.colors.surface};\n\t\t--color-text: ${themes.dark.colors.text};\n\t\t--color-text-secondary: ${themes.dark.colors.textSecondary};\n\t\t--color-border: ${themes.dark.colors.border};\n\t\t--color-success: ${themes.dark.colors.success};\n\t\t--color-warning: ${themes.dark.colors.warning};\n\t\t--color-error: ${themes.dark.colors.error};\n\t\t--color-info: ${themes.dark.colors.info};\n\t}\n`\n\n// Utility functions for components\nexport function useTheme() {\n  return {\n    subscribe: themeManager.subscribe.bind(themeManager),\n    subscribeToCurrent: themeManager.subscribeToCurrent.bind(themeManager),\n    subscribeToConfig: themeManager.subscribeToConfig.bind(themeManager),\n    setTheme: themeManager.setTheme.bind(themeManager),\n    toggleTheme: themeManager.toggleTheme.bind(themeManager),\n    getTheme: themeManager.getTheme.bind(themeManager),\n    getAvailableThemes: themeManager.getAvailableThemes.bind(themeManager)\n  }\n}\n\n// Reactive stores for common theme checks\nexport const isDark = derived(currentTheme, scheme => scheme === 'dark')\nexport const isLight = derived(currentTheme, scheme => scheme === 'light')\nexport const isAuto = derived(themeStore, theme => theme === 'auto')\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/timezone.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/toasts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/stores/ui.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/types/common.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1290,1293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1290,1293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1405,1408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1405,1408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Centralized common types to avoid conflicts\n\n// ===== User Roles and Permissions =====\nexport enum UserRole {\n  RESEARCHER = 'RESEARCHER', // 연구원\n  PM = 'PM', // PM(과제책임자)\n  DEPARTMENT_HEAD = 'DEPARTMENT_HEAD', // 담당부서(구매·기술 등)\n  MANAGEMENT_SUPPORT = 'MANAGEMENT_SUPPORT', // 경영지원(회계·총무)\n  LAB_HEAD = 'LAB_HEAD', // 연구소장\n  EXECUTIVE = 'EXECUTIVE', // 경영진\n  AUDITOR = 'AUDITOR' // 감사/외부평가\n}\n\nexport enum Permission {\n  READ_ALL = 'READ_ALL',\n  WRITE_ALL = 'WRITE_ALL',\n  APPROVE_ALL = 'APPROVE_ALL',\n  AUDIT_ALL = 'AUDIT_ALL',\n  READ_PROJECT = 'READ_PROJECT',\n  WRITE_PROJECT = 'WRITE_PROJECT',\n  APPROVE_EXPENSE = 'APPROVE_EXPENSE',\n  APPROVE_PROJECT = 'APPROVE_PROJECT',\n  READ_PERSONNEL = 'READ_PERSONNEL',\n  WRITE_PERSONNEL = 'WRITE_PERSONNEL',\n  READ_REPORTS = 'READ_REPORTS',\n  WRITE_REPORTS = 'WRITE_REPORTS'\n}\n\n// ===== Basic Types =====\nexport type UUID = string\nexport type DateString = string\nexport type Currency = 'KRW' | 'USD' | 'EUR'\nexport type HealthStatus = 'green' | 'amber' | 'red'\nexport type ApprovalStatus = 'pending' | 'approved' | 'rejected' | 'cancelled'\nexport type DocumentStatus = 'draft' | 'submitted' | 'approved' | 'locked'\nexport type ProjectStatus = 'planning' | 'active' | 'completed'\n\n// ===== API Response Types =====\nexport interface ApiResponse<T = any> {\n  success: boolean\n  data?: T\n  error?: string\n  message?: string\n}\n\nexport interface PaginatedResponse<T = any> extends ApiResponse<T[]> {\n  pagination: {\n    page: number\n    limit: number\n    total: number\n    totalPages: number\n  }\n}\n\n// ===== Form Data Types =====\nexport interface ProjectFormData {\n  name: string\n  description: string\n  startDate: string\n  endDate: string\n  budget: number\n  organization: string\n  personnelIds: string[]\n}\n\nexport interface ExpenseFormData {\n  projectId: string\n  category: string\n  description: string\n  amount: number\n  date: string\n  receiptUrl?: string\n}\n\nexport interface MilestoneFormData {\n  projectId: string\n  name: string\n  description: string\n  targetDate: string\n  deliverables: string[]\n}\n\n// ===== Dashboard Types =====\nexport interface DashboardData {\n  projects: {\n    total: number\n    active: number\n    completed: number\n    overdue: number\n  }\n  expenses: {\n    total: number\n    budget: number\n    remaining: number\n  }\n  personnel: {\n    total: number\n    allocated: number\n    available: number\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/types/hr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/types/project-budget.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1458,1461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1458,1461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 프로젝트 연차별 예산 구조 타입 정의\n\nexport interface ProjectBudgetStructure {\n  projectId: string\n  totalBudget: number // 전체 사업비 (모든 연차 합계)\n  annualBudgets: AnnualBudget[] // 연차별 예산\n  createdAt: string\n  updatedAt: string\n}\n\nexport interface AnnualBudget {\n  id: string\n  projectId: string\n  year: number // 연차 (1차년도, 2차년도 등)\n  startDate?: string // 연차 시작일\n  endDate?: string // 연차 종료일\n\n  // 지원금 (현금만)\n  governmentFunding: number // 정부 지원금 (현금)\n\n  // 기업부담금\n  companyCash: number // 기업부담금 (현금)\n  companyInKind: number // 기업부담금 (현물)\n\n  // 계산된 값들\n  totalCash: number // 현금 총액 (지원금 + 기업부담금 현금)\n  totalInKind: number // 현물 총액 (기업부담금 현물)\n  yearlyTotal: number // 연차 사업비 (현금 + 현물)\n\n  status: 'draft' | 'submitted' | 'approved' | 'active' | 'completed'\n  notes?: string\n  createdAt: string\n  updatedAt: string\n}\n\n// 예산 입력/수정을 위한 폼 데이터 타입\nexport interface AnnualBudgetFormData {\n  year: number\n  startDate?: string\n  endDate?: string\n  governmentFunding: number\n  companyCash: number\n  companyInKind: number\n  notes?: string\n}\n\n// 예산 요약 정보\nexport interface BudgetSummary {\n  projectId: string\n  totalYears: number\n  totalBudget: number\n  totalGovernmentFunding: number\n  totalCompanyCash: number\n  totalCompanyInKind: number\n  totalCash: number\n  totalInKind: number\n\n  // 비율 정보\n  governmentFundingRatio: number // 지원금 비율\n  companyBurdenRatio: number // 기업부담 비율\n  cashRatio: number // 현금 비율\n  inKindRatio: number // 현물 비율\n}\n\n// API 응답 타입\nexport interface BudgetApiResponse<T = any> {\n  success: boolean\n  data?: T\n  error?: string\n  message?: string\n}\n\n// 예산 검증 결과\nexport interface BudgetValidationResult {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/types/salary-contracts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/types/salary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/ai-coding-guidelines.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/api-data-transformer.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1193,1196],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1193,1196],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2312,2315],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2312,2315],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3076,3079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3076,3079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3650,3653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3650,3653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":169,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":169,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3916,3919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3916,3919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4178,4181],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4178,4181],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5053,5056],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5053,5056],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5666,5669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5666,5669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5975,5978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5975,5978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5981,5984],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5981,5984],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":254,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":254,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6165,6168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6165,6168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// API 데이터 변환 유틸리티\n// 데이터베이스 snake_case를 JavaScript camelCase로 변환하는 공통 함수들\n\nimport { formatDateForAPI } from './date-calculator'\nimport { formatEmployeeName } from './format'\n\n/**\n * 한국 이름을 표준 형식으로 포맷팅 (성+이름, 띄어쓰기 없음)\n */\nfunction formatKoreanNameStandard(fullName: string): string {\n  if (!fullName || typeof fullName !== 'string') return ''\n\n  const trimmed = fullName.trim()\n\n  // 이미 표준 형식인 경우 (띄어쓰기 없음)\n  if (!trimmed.includes(' ')) {\n    return trimmed\n  }\n\n  // 한국 이름인지 확인 (한글 정규식)\n  const koreanRegex = /^[가-힣\\s]+$/\n  if (koreanRegex.test(trimmed)) {\n    // 공백으로 분리\n    const parts = trimmed.split(/\\s+/)\n    if (parts.length === 2) {\n      const [first, second] = parts\n\n      // 일반적으로 성은 1글자, 이름은 2글자 이상\n      if (first.length >= 2 && second.length === 1) {\n        // \"지은 차\" -> \"차지은\" (이름 성 -> 성 이름)\n        return formatEmployeeName({ last_name: second, first_name: first })\n      } else if (first.length === 1 && second.length >= 2) {\n        // \"차 지은\" -> \"차지은\" (이미 올바른 순서)\n        return formatEmployeeName({ last_name: first, first_name: second })\n      }\n    }\n  }\n\n  // 한국 이름이 아닌 경우 원본 반환\n  return trimmed\n}\n\n/**\n * 프로젝트 데이터 변환\n */\nexport function transformProjectData(project: any) {\n  // snake_case 필드들을 제거하고 camelCase로만 구성\n  const {\n    start_date,\n    end_date,\n    manager_id,\n    budget_total,\n    sponsor_type,\n    sponsor_name,\n    research_type,\n    technology_area,\n    created_at,\n    updated_at,\n    manager_name,\n    member_count,\n    total_participation_rate,\n    budget_currency,\n    ...otherFields\n  } = project\n\n  return {\n    ...otherFields,\n    // camelCase로 변환된 필드들만 포함\n    startDate: formatDateForAPI(start_date),\n    endDate: formatDateForAPI(end_date),\n    managerId: manager_id,\n    budgetTotal: budget_total,\n    sponsorType: sponsor_type,\n    sponsorName: sponsor_name,\n    researchType: research_type,\n    technologyArea: technology_area,\n    createdAt: created_at,\n    updatedAt: updated_at,\n    budgetCurrency: budget_currency,\n    // 추가 필드들\n    ...(manager_name && { managerName: manager_name }),\n    ...(member_count && { memberCount: parseInt(member_count) || 0 }),\n    ...(total_participation_rate && {\n      totalParticipationRate: parseInt(total_participation_rate) || 0\n    })\n  }\n}\n\n/**\n * 프로젝트 멤버 데이터 변환\n */\nexport function transformProjectMemberData(member: any) {\n  // snake_case 필드들을 제거하고 camelCase로만 구성\n  const {\n    employee_id,\n    employee_name,\n    project_id,\n    start_date,\n    end_date,\n    participation_rate,\n    contribution_type,\n    monthly_amount,\n    created_at,\n    updated_at,\n    ...otherFields\n  } = member\n\n  return {\n    ...otherFields,\n    // camelCase로 변환된 필드들만 포함\n    employeeId: employee_id,\n    employeeName: employee_name,\n    projectId: project_id,\n    startDate: formatDateForAPI(start_date),\n    endDate: formatDateForAPI(end_date),\n    participationRate: participation_rate,\n    contributionType: contribution_type,\n    monthlyAmount: monthly_amount,\n    createdAt: created_at,\n    updatedAt: updated_at\n  }\n}\n\n/**\n * 프로젝트 예산 데이터 변환\n */\nexport function transformProjectBudgetData(budget: any) {\n  // snake_case 필드들을 제거하고 camelCase로만 구성\n  const {\n    project_id,\n    start_date,\n    end_date,\n    fiscal_year,\n    period_number,\n    created_at,\n    updated_at,\n    ...otherFields\n  } = budget\n\n  return {\n    ...otherFields,\n    // camelCase로 변환된 필드들만 포함\n    projectId: project_id,\n    startDate: formatDateForAPI(start_date),\n    endDate: formatDateForAPI(end_date),\n    fiscalYear: fiscal_year,\n    periodNumber: period_number,\n    createdAt: created_at,\n    updatedAt: updated_at\n  }\n}\n\n/**\n * 마일스톤 데이터 변환\n */\nexport function transformMilestoneData(milestone: any) {\n  return {\n    ...milestone,\n    projectId: milestone.project_id,\n    dueDate: formatDateForAPI(milestone.due_date),\n    createdAt: milestone.created_at,\n    updatedAt: milestone.updated_at\n  }\n}\n\n/**\n * 리스크 데이터 변환\n */\nexport function transformRiskData(risk: any) {\n  return {\n    ...risk,\n    projectId: risk.project_id,\n    ownerId: risk.owner_id,\n    ownerName: risk.owner_name,\n    createdAt: risk.created_at,\n    updatedAt: risk.updated_at\n  }\n}\n\n/**\n * 직원 데이터 변환\n */\nexport function transformEmployeeData(employee: any) {\n  const lastName = employee.last_name || ''\n  const firstName = employee.first_name || ''\n\n  return {\n    ...employee,\n    employeeId: employee.employee_id,\n    firstName: firstName,\n    lastName: lastName,\n    phoneNumber: employee.phone_number,\n    emailAddress: employee.email_address,\n    departmentId: employee.department_id,\n    positionId: employee.position_id,\n    hireDate: formatDateForAPI(employee.hire_date),\n    salaryAmount: employee.salary_amount,\n    createdAt: employee.created_at,\n    updatedAt: employee.updated_at,\n    // 직원 이름을 표준 형식으로 변환\n    ...(lastName &&\n      firstName && {\n        displayName: formatEmployeeName({ last_name: lastName, first_name: firstName })\n      }),\n    ...(employee.name && {\n      name: formatKoreanNameStandard(employee.name)\n    })\n  }\n}\n\n/**\n * 증빙 항목 데이터 변환\n */\nexport function transformEvidenceItemData(evidence: any) {\n  return {\n    ...evidence,\n    projectId: evidence.project_id,\n    projectBudgetId: evidence.project_budget_id,\n    dueDate: formatDateForAPI(evidence.due_date),\n    createdAt: evidence.created_at,\n    updatedAt: evidence.updated_at,\n    // 담당자 이름을 표준 형식으로 변환\n    ...(evidence.assignee_full_name && {\n      assigneeFullName: formatKoreanNameStandard(evidence.assignee_full_name)\n    }),\n    ...(evidence.assignee_name && {\n      assigneeName: formatKoreanNameStandard(evidence.assignee_name)\n    })\n  }\n}\n\n/**\n * 배열 데이터 일괄 변환\n */\nexport function transformArrayData<T>(data: unknown[], transformer: (item: any) => T): T[] {\n  return data.map(transformer)\n}\n\n/**\n * 일반적인 snake_case to camelCase 변환\n */\nexport function toCamelCase(str: string): string {\n  return str.replace(/_([a-z])/g, (_, letter) => letter.toUpperCase())\n}\n\n/**\n * 객체의 모든 키를 snake_case에서 camelCase로 변환\n */\nexport function transformObjectKeys(obj: any): any {\n  if (obj === null || obj === undefined) return obj\n  if (Array.isArray(obj)) return obj.map(transformObjectKeys)\n  if (typeof obj !== 'object') return obj\n\n  const transformed: any = {}\n  for (const [key, value] of Object.entries(obj)) {\n    const camelKey = toCamelCase(key)\n    transformed[camelKey] = transformObjectKeys(value)\n  }\n  return transformed\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/auto-validation-hooks.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[587,590],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[587,590],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2856,2859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2856,2859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2872,2875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2872,2875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2892,2895],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2892,2895],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2947,2950],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2947,2950],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2974,2977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2974,2977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3005,3008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3005,3008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":149,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":149,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3578,3581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3578,3581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":174,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":174,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4308,4311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4308,4311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4722,4725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4722,4725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'validation' is defined but never used. Allowed unused args must match /^_/u.","line":191,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":191,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":191,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4739,4742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4739,4742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filePath' is defined but never used. Allowed unused args must match /^_/u.","line":200,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":200,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4971,4974],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4971,4974],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 자동 검증 훅 시스템\n\nimport { readFileSync, watch, writeFileSync } from 'fs'\nimport { extname, join } from 'path'\nimport { AICodingValidator } from './ai-coding-guidelines'\nimport { SafeChangeManager } from './safe-change-manager'\nimport { SchemaValidator } from './schema-validation'\nimport { logger } from '$lib/utils/logger'\n\n// 파일 변경 감지 및 자동 검증\nexport class AutoValidationHooks {\n  private static readonly WATCH_DIRS = ['src/lib/utils', 'src/routes/api/project-management']\n  private static readonly SUPPORTED_EXTENSIONS = ['.ts', '.js', '.svelte']\n  private static watchers: Map<string, any> = new Map()\n  private static isEnabled = false\n\n  /**\n   * 자동 검증 시스템 활성화\n   */\n  static enable(): void {\n    if (this.isEnabled) {\n      logger.log('⚠️ [자동 검증] 이미 활성화되어 있습니다.')\n      return\n    }\n\n    logger.log('🚀 [자동 검증] 시스템 활성화 시작')\n\n    // 파일 변경 감지 시작\n    this.startFileWatching()\n\n    // Git 훅 설정\n    this.setupGitHooks()\n\n    // IDE 확장 프로그램 연동\n    this.setupIDEIntegration()\n\n    this.isEnabled = true\n    logger.log('✅ [자동 검증] 시스템 활성화 완료')\n  }\n\n  /**\n   * 자동 검증 시스템 비활성화\n   */\n  static disable(): void {\n    if (!this.isEnabled) {\n      logger.log('⚠️ [자동 검증] 이미 비활성화되어 있습니다.')\n      return\n    }\n\n    logger.log('🛑 [자동 검증] 시스템 비활성화 시작')\n\n    // 파일 감지 중지\n    this.stopFileWatching()\n\n    this.isEnabled = false\n    logger.log('✅ [자동 검증] 시스템 비활성화 완료')\n  }\n\n  /**\n   * 파일 변경 감지 시작\n   */\n  private static startFileWatching(): void {\n    for (const dir of this.WATCH_DIRS) {\n      try {\n        const watcher = watch(dir, { recursive: true }, (eventType, filename) => {\n          if (filename && this.SUPPORTED_EXTENSIONS.includes(extname(filename))) {\n            const filePath = join(dir, filename)\n            this.handleFileChange(eventType, filePath)\n          }\n        })\n\n        this.watchers.set(dir, watcher)\n        logger.log(`👀 [파일 감지] ${dir} 감시 시작`)\n      } catch (error) {\n        logger.error(`❌ [파일 감지] ${dir} 감시 실패:`, error)\n      }\n    }\n  }\n\n  /**\n   * 파일 변경 감지 중지\n   */\n  private static stopFileWatching(): void {\n    for (const [dir, watcher] of this.watchers) {\n      watcher.close()\n      logger.log(`👀 [파일 감지] ${dir} 감시 중지`)\n    }\n    this.watchers.clear()\n  }\n\n  /**\n   * 파일 변경 처리\n   */\n  private static async handleFileChange(eventType: string, filePath: string): Promise<void> {\n    logger.log(`📝 [파일 변경] ${eventType}: ${filePath}`)\n\n    try {\n      // 1. 파일 내용 읽기\n      const content = readFileSync(filePath, 'utf-8')\n\n      // 2. 자동 검증 실행\n      const validation = await this.runAutoValidation(filePath, content)\n\n      // 3. 검증 결과 처리\n      await this.handleValidationResult(filePath, validation)\n    } catch (error) {\n      logger.error(`❌ [파일 변경 처리] ${filePath} 오류:`, error)\n    }\n  }\n\n  /**\n   * 자동 검증 실행\n   */\n  private static async runAutoValidation(\n    filePath: string,\n    content: string\n  ): Promise<{\n    coding: any\n    schema: any\n    dependency: any\n  }> {\n    const results = {\n      coding: null as any,\n      schema: null as any,\n      dependency: null as any\n    }\n\n    try {\n      // 1. 코딩 가이드라인 검증\n      results.coding = AICodingValidator.validateCode(content, 'typescript')\n\n      // 2. 스키마 검증 (API 파일인 경우)\n      if (filePath.includes('/api/')) {\n        results.schema = await SchemaValidator.validateDatabaseSchema()\n      }\n\n      // 3. 의존성 분석\n      results.dependency = await this.analyzeDependencies(filePath)\n    } catch (error) {\n      logger.error(`❌ [자동 검증] ${filePath} 오류:`, error)\n    }\n\n    return results\n  }\n\n  /**\n   * 검증 결과 처리\n   */\n  private static async handleValidationResult(filePath: string, validation: any): Promise<void> {\n    const hasErrors = validation.coding?.errors?.length > 0\n    const hasWarnings = validation.coding?.warnings?.length > 0\n\n    if (hasErrors) {\n      logger.log(`❌ [검증 실패] ${filePath}`)\n      validation.coding.errors.forEach((error: string) => {\n        logger.log(`  - ${error}`)\n      })\n\n      // 자동 수정 시도\n      await this.attemptAutoFix(filePath, validation)\n    } else if (hasWarnings) {\n      logger.log(`⚠️ [검증 경고] ${filePath}`)\n      validation.coding.warnings.forEach((warning: string) => {\n        logger.log(`  - ${warning}`)\n      })\n    } else {\n      logger.log(`✅ [검증 통과] ${filePath}`)\n    }\n  }\n\n  /**\n   * 자동 수정 시도\n   */\n  private static async attemptAutoFix(filePath: string, validation: any): Promise<void> {\n    logger.log(`🔧 [자동 수정] ${filePath} 시도`)\n\n    try {\n      // 변경 계획 생성\n      const plan = await SafeChangeManager.createChangePlan(filePath, 'modify', '자동 수정')\n\n      // 자동 수정 로직 실행\n      await this.executeAutoFix(plan, validation)\n    } catch (error) {\n      logger.error(`❌ [자동 수정] ${filePath} 실패:`, error)\n    }\n  }\n\n  /**\n   * 자동 수정 실행\n   */\n  private static async executeAutoFix(plan: any, validation: any): Promise<void> {\n    // 실제 자동 수정 로직은 여기에 구현\n    // 예: 코드 포맷팅, 타입 수정, import 정리 등\n    logger.log(`🔧 [자동 수정] 계획 ID: ${plan.id}`)\n  }\n\n  /**\n   * 의존성 분석\n   */\n  private static async analyzeDependencies(filePath: string): Promise<any> {\n    // 간단한 의존성 분석\n    return {\n      riskLevel: 'low',\n      dependencies: [],\n      dependents: []\n    }\n  }\n\n  /**\n   * Git 훅 설정\n   */\n  private static setupGitHooks(): void {\n    logger.log('🔗 [Git 훅] 설정 시작')\n\n    // pre-commit 훅 설정\n    const preCommitHook = `#!/bin/sh\n# 자동 검증 실행\necho \"🔍 [Git 훅] 커밋 전 검증 시작\"\nnode -e \"\nconst { AutoValidationHooks } = require('./src/lib/utils/auto-validation-hooks.ts');\nAutoValidationHooks.runPreCommitValidation();\n\"\n`\n\n    // post-commit 훅 설정\n    const postCommitHook = `#!/bin/sh\n# 커밋 후 검증\necho \"✅ [Git 훅] 커밋 후 검증 완료\"\n`\n\n    try {\n      writeFileSync('.git/hooks/pre-commit', preCommitHook)\n      writeFileSync('.git/hooks/post-commit', postCommitHook)\n      logger.log('✅ [Git 훅] 설정 완료')\n    } catch (error) {\n      logger.error('❌ [Git 훅] 설정 실패:', error)\n    }\n  }\n\n  /**\n   * IDE 확장 프로그램 연동\n   */\n  private static setupIDEIntegration(): void {\n    logger.log('🔌 [IDE 연동] 설정 시작')\n\n    // VS Code 설정\n    const vscodeSettings = {\n      'files.watcherExclude': {\n        '**/node_modules/**': true,\n        '**/.git/**': true\n      },\n      'typescript.preferences.includePackageJsonAutoImports': 'auto',\n      'editor.codeActionsOnSave': {\n        'source.fixAll': true,\n        'source.organizeImports': true\n      }\n    }\n\n    try {\n      writeFileSync('.vscode/settings.json', JSON.stringify(vscodeSettings, null, 2))\n      logger.log('✅ [IDE 연동] VS Code 설정 완료')\n    } catch (error) {\n      logger.error('❌ [IDE 연동] 설정 실패:', error)\n    }\n  }\n\n  /**\n   * 커밋 전 검증 실행\n   */\n  static async runPreCommitValidation(): Promise<boolean> {\n    logger.log('🔍 [커밋 전 검증] 시작')\n\n    try {\n      // 변경된 파일들 검증\n      const changedFiles = await this.getChangedFiles()\n      let allValid = true\n\n      for (const file of changedFiles) {\n        const content = readFileSync(file, 'utf-8')\n        const validation = await this.runAutoValidation(file, content)\n\n        if (validation.coding?.errors?.length > 0) {\n          logger.log(`❌ [커밋 전 검증] ${file} 실패`)\n          allValid = false\n        }\n      }\n\n      if (allValid) {\n        logger.log('✅ [커밋 전 검증] 모든 파일 통과')\n      } else {\n        logger.log('❌ [커밋 전 검증] 일부 파일 실패 - 커밋 중단')\n      }\n\n      return allValid\n    } catch (error) {\n      logger.error('❌ [커밋 전 검증] 오류:', error)\n      return false\n    }\n  }\n\n  /**\n   * 변경된 파일 목록 가져오기\n   */\n  private static async getChangedFiles(): Promise<string[]> {\n    // Git 명령어로 변경된 파일 목록 가져오기\n    // 실제 구현에서는 child_process를 사용\n    return []\n  }\n\n  /**\n   * 상태 조회\n   */\n  static getStatus(): {\n    isEnabled: boolean\n    watchedDirs: string[]\n    watchersCount: number\n  } {\n    return {\n      isEnabled: this.isEnabled,\n      watchedDirs: this.WATCH_DIRS,\n      watchersCount: this.watchers.size\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/backup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1725,1728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1725,1728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { BankAccount, Transaction, ExpectedTransaction } from '$lib/stores/funds'\nimport type { BudgetCategory, BudgetGoal } from '$lib/stores/budget'\nimport type { Notification, NotificationSettings } from '$lib/stores/notifications'\nimport { logger } from '$lib/utils/logger'\n\nexport interface BackupData {\n  version: string\n  timestamp: string\n  data: {\n    bankAccounts: BankAccount[]\n    transactions: Transaction[]\n    expectedTransactions: ExpectedTransaction[]\n    budgetCategories: BudgetCategory[]\n    budgetGoals: BudgetGoal[]\n    notifications: Notification[]\n    notificationSettings: NotificationSettings\n  }\n}\n\n// 데이터 백업\nexport function createBackup(\n  bankAccounts: BankAccount[],\n  transactions: Transaction[],\n  expectedTransactions: ExpectedTransaction[],\n  budgetCategories: BudgetCategory[],\n  budgetGoals: BudgetGoal[],\n  notifications: Notification[],\n  notificationSettings: NotificationSettings\n): BackupData {\n  return {\n    version: '1.0.0',\n    timestamp: new Date().toISOString(),\n    data: {\n      bankAccounts,\n      transactions,\n      expectedTransactions,\n      budgetCategories,\n      budgetGoals,\n      notifications,\n      notificationSettings\n    }\n  }\n}\n\n// 백업 파일 다운로드\nexport function downloadBackup(backupData: BackupData) {\n  const jsonString = JSON.stringify(backupData, null, 2)\n  const blob = new Blob([jsonString], { type: 'application/json' })\n  const url = URL.createObjectURL(blob)\n  const a = document.createElement('a')\n  a.href = url\n  a.download = `workstream-backup-${new Date().toISOString().split('T')[0]}.json`\n  document.body.appendChild(a)\n  a.click()\n  document.body.removeChild(a)\n  URL.revokeObjectURL(url)\n}\n\n// 백업 파일 검증\nexport function validateBackup(data: any): data is BackupData {\n  if (!data || typeof data !== 'object') {\n    return false\n  }\n\n  if (!data.version || !data.timestamp || !data.data) {\n    return false\n  }\n\n  const requiredFields = [\n    'bankAccounts',\n    'transactions',\n    'expectedTransactions',\n    'budgetCategories',\n    'budgetGoals',\n    'notifications',\n    'notificationSettings'\n  ]\n\n  return requiredFields.every(\n    field => Array.isArray(data.data[field]) || typeof data.data[field] === 'object'\n  )\n}\n\n// 로컬 스토리지에 자동 백업\nexport function autoBackup(\n  bankAccounts: BankAccount[],\n  transactions: Transaction[],\n  expectedTransactions: ExpectedTransaction[],\n  budgetCategories: BudgetCategory[],\n  budgetGoals: BudgetGoal[],\n  notifications: Notification[],\n  notificationSettings: NotificationSettings\n) {\n  const backupData = createBackup(\n    bankAccounts,\n    transactions,\n    expectedTransactions,\n    budgetCategories,\n    budgetGoals,\n    notifications,\n    notificationSettings\n  )\n\n  try {\n    localStorage.setItem('workstream-auto-backup', JSON.stringify(backupData))\n    localStorage.setItem('workstream-backup-timestamp', backupData.timestamp)\n  } catch (error) {\n    logger.error('자동 백업 실패:', error)\n  }\n}\n\n// 로컬 스토리지에서 자동 백업 복원\nexport function loadAutoBackup(): BackupData | null {\n  try {\n    const backupString = localStorage.getItem('workstream-auto-backup')\n    if (!backupString) {\n      return null\n    }\n\n    const backupData = JSON.parse(backupString)\n    if (validateBackup(backupData)) {\n      return backupData\n    }\n  } catch (error) {\n    logger.error('자동 백업 로드 실패:', error)\n  }\n\n  return null\n}\n\n// 백업 파일 읽기\nexport function readBackupFile(file: File): Promise<BackupData> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader()\n\n    reader.onload = e => {\n      try {\n        const result = e.target?.result\n        if (typeof result !== 'string') {\n          throw new Error('파일 읽기 실패')\n        }\n\n        const backupData = JSON.parse(result)\n        if (validateBackup(backupData)) {\n          resolve(backupData)\n        } else {\n          reject(new Error('잘못된 백업 파일 형식입니다.'))\n        }\n      } catch (error) {\n        reject(new Error('백업 파일 파싱 실패: ' + (error as Error).message))\n      }\n    }\n\n    reader.onerror = () => {\n      reject(new Error('파일 읽기 중 오류가 발생했습니다.'))\n    }\n\n    reader.readAsText(file)\n  })\n}\n\n// 백업 복원 확인 메시지\nexport function getRestoreConfirmMessage(backupData: BackupData): string {\n  const backupDate = new Date(backupData.timestamp).toLocaleString('ko-KR')\n  const dataCount = {\n    accounts: backupData.data.bankAccounts.length,\n    transactions: backupData.data.transactions.length,\n    expectedTransactions: backupData.data.expectedTransactions.length,\n    budgetCategories: backupData.data.budgetCategories.length,\n    budgetGoals: backupData.data.budgetGoals.length\n  }\n\n  return `\n다음 백업을 복원하시겠습니까?\n\n백업 일시: ${backupDate}\n버전: ${backupData.version}\n\n포함된 데이터:\n- 계좌: ${dataCount.accounts}개\n- 거래내역: ${dataCount.transactions}개  \n- 예상거래: ${dataCount.expectedTransactions}개\n- 예산카테고리: ${dataCount.budgetCategories}개\n- 예산목표: ${dataCount.budgetGoals}개\n\n※ 현재 데이터는 모두 대체됩니다.\n\t`.trim()\n}\n\n// 백업 통계\nexport interface BackupStats {\n  lastBackupTime: string | null\n  backupSize: number\n  totalRecords: number\n}\n\nexport function getBackupStats(\n  bankAccounts: BankAccount[],\n  transactions: Transaction[],\n  expectedTransactions: ExpectedTransaction[],\n  budgetCategories: BudgetCategory[],\n  budgetGoals: BudgetGoal[]\n): BackupStats {\n  const lastBackupTime = localStorage.getItem('workstream-backup-timestamp')\n  const totalRecords =\n    bankAccounts.length +\n    transactions.length +\n    expectedTransactions.length +\n    budgetCategories.length +\n    budgetGoals.length\n\n  const backupData = createBackup(\n    bankAccounts,\n    transactions,\n    expectedTransactions,\n    budgetCategories,\n    budgetGoals,\n    [],\n    {} as NotificationSettings\n  )\n  const backupSize = JSON.stringify(backupData).length\n\n  return {\n    lastBackupTime,\n    backupSize,\n    totalRecords\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/date-calculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/date-handler.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentTimezone' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":75,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":75,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hours' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":179,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'minutes' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":180,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":180,"endColumn":18}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '$lib/utils/logger'\n/**\n * 통일된 날짜 처리 유틸리티\n *\n * 이 모듈은 모든 날짜 처리를 표준화하여 UTC와 서울 시간을 일관되게 처리합니다.\n *\n * 표준:\n * - 데이터베이스 저장: UTC (ISO 8601)\n * - 사용자 표시: 서울 시간 (Asia/Seoul)\n * - 입력 처리: 다양한 형식 지원 → UTC로 변환\n * - API 응답: UTC → 서울 시간으로 변환\n */\n\n/**\n * 표준화된 날짜 타입\n */\nexport type StandardDate = string & { readonly __brand: 'StandardDate' }\n\n/**\n * 지원하는 날짜 입력 형식\n */\nexport type DateInputFormat =\n  | string // ISO 8601, YYYY-MM-DD, YYYY.MM.DD 등\n  | Date // JavaScript Date 객체\n  | number // Unix timestamp, Excel 날짜 등\n\n/**\n * 날짜 표시 형식\n */\nexport const DATE_FORMATS = {\n  // 표시용 형식들\n  DISPLAY: {\n    FULL: 'YYYY. MM. DD.', // 2025. 01. 15.\n    SHORT: 'MM/DD', // 01/15\n    ISO: 'YYYY-MM-DD', // 2025-01-15\n    KOREAN: 'YYYY년 MM월 DD일', // 2025년 01월 15일\n    RELATIVE: 'relative' // 상대적 시간 (1일 전, 2시간 전 등)\n  },\n\n  // 입력용 형식들\n  INPUT: {\n    HTML_DATE: 'YYYY-MM-DD', // HTML date input\n    DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // HTML datetime-local input\n    ISO: 'YYYY-MM-DDTHH:mm:ss.sssZ' // ISO 8601\n  }\n} as const\n\n/**\n * 시간대 설정 import\n */\n// timezone-config.js 파일이 삭제되어 import 제거됨\n\n/**\n * 시간대 상수 (하위 호환성을 위해 유지)\n */\nexport const SEOUL_TIMEZONE = 'Asia/Seoul'\nexport const UTC_TIMEZONE = 'UTC'\n\n/**\n * 현재 설정된 시간대를 가져옵니다.\n */\nfunction getCurrentAppTimezone(): string {\n  return SEOUL_TIMEZONE // 기본값으로 서울 시간대 사용\n}\n\n/**\n * 날짜를 UTC로 변환 (데이터베이스 저장용)\n * 모든 입력을 현재 설정된 시간대 기준으로 해석하여 UTC로 저장\n */\nexport function toUTC(date: DateInputFormat): StandardDate {\n  if (!date) return '' as StandardDate\n\n  try {\n    let dateObj: Date\n    const currentTimezone = getCurrentAppTimezone()\n    const timezoneOffset = '+09:00' // 서울 시간대 오프셋\n\n    if (date instanceof Date) {\n      // Date 객체는 이미 올바른 시간대로 간주\n      dateObj = date\n    } else if (typeof date === 'number') {\n      // Excel 날짜 또는 Unix timestamp 처리\n      if (date > 25569) {\n        // Excel 날짜 (1900-01-01 기준)\n        const excelEpoch = new Date(1900, 0, 1)\n        dateObj = new Date(excelEpoch.getTime() + (date - 2) * 24 * 60 * 60 * 1000)\n      } else {\n        // Unix timestamp\n        dateObj = new Date(date * 1000)\n      }\n    } else {\n      // 문자열 처리 - 모든 날짜를 현재 설정된 시간대 기준으로 해석\n      const dateStr = String(date).trim()\n\n      if (!dateStr) return '' as StandardDate\n\n      // 다양한 형식 지원\n      if (dateStr.includes('T')) {\n        // ISO 8601 형식 - 이미 시간대 정보가 포함되어 있으면 그대로 사용\n        if (dateStr.includes('+') || dateStr.includes('Z') || dateStr.includes('-', 10)) {\n          dateObj = new Date(dateStr)\n        } else {\n          // 시간대 정보가 없으면 현재 설정된 시간대로 해석\n          dateObj = new Date(`${dateStr}${timezoneOffset}`)\n        }\n      } else if (dateStr.includes('.')) {\n        // YYYY.MM.DD 형식 - 현재 설정된 시간대 자정으로 해석\n        const [year, month, day] = dateStr.split('.')\n        dateObj = new Date(\n          `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T00:00:00${timezoneOffset}`\n        )\n      } else if (dateStr.includes('-')) {\n        // YYYY-MM-DD 형식 - 현재 설정된 시간대 자정으로 해석\n        const [year, month, day] = dateStr.split('-')\n        dateObj = new Date(\n          `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T00:00:00${timezoneOffset}`\n        )\n      } else if (dateStr.includes('/')) {\n        // MM/DD/YYYY 또는 DD/MM/YYYY 형식 - 현재 설정된 시간대 자정으로 해석\n        const parts = dateStr.split('/')\n        if (parts.length === 3) {\n          // MM/DD/YYYY 가정\n          const [month, day, year] = parts\n          dateObj = new Date(\n            `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T00:00:00${timezoneOffset}`\n          )\n        }\n      } else {\n        // 기본 Date 생성자 사용 후 현재 설정된 시간대로 해석\n        const tempDate = new Date(dateStr)\n        if (!isNaN(tempDate.getTime())) {\n          // 유효한 날짜면 현재 설정된 시간대 자정으로 재해석\n          const year = tempDate.getFullYear()\n          const month = String(tempDate.getMonth() + 1).padStart(2, '0')\n          const day = String(tempDate.getDate()).padStart(2, '0')\n          dateObj = new Date(`${year}-${month}-${day}T00:00:00${timezoneOffset}`)\n        } else {\n          dateObj = tempDate\n        }\n      }\n    }\n\n    if (isNaN(dateObj.getTime())) {\n      throw new Error(`Invalid date: ${date}`)\n    }\n\n    // UTC로 변환하여 ISO 문자열 반환\n    return dateObj.toISOString() as StandardDate\n  } catch (error) {\n    logger.error('Date conversion error:', error, 'for input:', date)\n    return '' as StandardDate\n  }\n}\n\n/**\n * UTC 날짜를 서울 시간으로 변환하여 표시용 형식으로 포맷팅\n */\nexport function formatDateForDisplay(\n  utcDate: StandardDate | string,\n  format: keyof typeof DATE_FORMATS.DISPLAY = 'FULL'\n): string {\n  if (!utcDate) return ''\n\n  try {\n    const date = new Date(utcDate)\n\n    if (isNaN(date.getTime())) {\n      logger.warn('Invalid UTC date for display:', utcDate)\n      return ''\n    }\n\n    // 현재 설정된 시간대로 변환\n    const currentTimezone = getCurrentAppTimezone()\n    const localDate = new Date(date.toLocaleString('en-US', { timeZone: currentTimezone }))\n\n    const year = localDate.getFullYear()\n    const month = String(localDate.getMonth() + 1).padStart(2, '0')\n    const day = String(localDate.getDate()).padStart(2, '0')\n    const hours = String(localDate.getHours()).padStart(2, '0')\n    const minutes = String(localDate.getMinutes()).padStart(2, '0')\n\n    switch (format) {\n      case 'FULL':\n        return `${year}. ${month}. ${day}.`\n      case 'SHORT':\n        return `${month}/${day}`\n      case 'ISO':\n        return `${year}-${month}-${day}`\n      case 'KOREAN':\n        return `${year}년 ${month}월 ${day}일`\n      case 'RELATIVE':\n        return getRelativeTime(seoulDate)\n      default:\n        return `${year}. ${month}. ${day}.`\n    }\n  } catch (error) {\n    logger.error('Date display formatting error:', error, 'for date:', utcDate)\n    return ''\n  }\n}\n\n/**\n * HTML input용 날짜 형식 (YYYY-MM-DD)\n */\nexport function formatDateForInput(utcDate: StandardDate | string): string {\n  if (!utcDate) return ''\n\n  try {\n    const date = new Date(utcDate)\n\n    if (isNaN(date.getTime())) {\n      return ''\n    }\n\n    // 현재 설정된 시간대로 변환하여 YYYY-MM-DD 형식으로 반환\n    const currentTimezone = getCurrentAppTimezone()\n    const localDate = new Date(date.toLocaleString('en-US', { timeZone: currentTimezone }))\n\n    const year = localDate.getFullYear()\n    const month = String(localDate.getMonth() + 1).padStart(2, '0')\n    const day = String(localDate.getDate()).padStart(2, '0')\n\n    return `${year}-${month}-${day}`\n  } catch (error) {\n    logger.error('Date input formatting error:', error, 'for date:', utcDate)\n    return ''\n  }\n}\n\n/**\n * HTML datetime-local input용 형식 (YYYY-MM-DDTHH:mm)\n */\nexport function formatDateTimeForInput(utcDate: StandardDate | string): string {\n  if (!utcDate) return ''\n\n  try {\n    const date = new Date(utcDate)\n\n    if (isNaN(date.getTime())) {\n      return ''\n    }\n\n    // 현재 설정된 시간대로 변환\n    const currentTimezone = getCurrentAppTimezone()\n    const localDate = new Date(date.toLocaleString('en-US', { timeZone: currentTimezone }))\n\n    const year = localDate.getFullYear()\n    const month = String(localDate.getMonth() + 1).padStart(2, '0')\n    const day = String(localDate.getDate()).padStart(2, '0')\n    const hours = String(localDate.getHours()).padStart(2, '0')\n    const minutes = String(localDate.getMinutes()).padStart(2, '0')\n\n    return `${year}-${month}-${day}T${hours}:${minutes}`\n  } catch (error) {\n    logger.error('DateTime input formatting error:', error, 'for date:', utcDate)\n    return ''\n  }\n}\n\n/**\n * 상대적 시간 표시 (예: \"1일 전\", \"2시간 전\")\n */\nfunction getRelativeTime(date: Date): string {\n  const now = new Date()\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000)\n\n  if (diffInSeconds < 60) {\n    return `${diffInSeconds}초 전`\n  } else if (diffInSeconds < 3600) {\n    const minutes = Math.floor(diffInSeconds / 60)\n    return `${minutes}분 전`\n  } else if (diffInSeconds < 86400) {\n    const hours = Math.floor(diffInSeconds / 3600)\n    return `${hours}시간 전`\n  } else if (diffInSeconds < 2592000) {\n    const days = Math.floor(diffInSeconds / 86400)\n    return `${days}일 전`\n  } else if (diffInSeconds < 31536000) {\n    const months = Math.floor(diffInSeconds / 2592000)\n    return `${months}개월 전`\n  } else {\n    const years = Math.floor(diffInSeconds / 31536000)\n    return `${years}년 전`\n  }\n}\n\n/**\n * 현재 시간을 UTC로 반환\n */\nexport function getCurrentUTC(): StandardDate {\n  return new Date().toISOString() as StandardDate\n}\n\n/**\n * 현재 서울 시간을 UTC로 변환하여 반환\n */\nexport function getCurrentSeoulAsUTC(): StandardDate {\n  const now = new Date()\n  // 서울 시간대의 현재 시간을 UTC로 변환하는 더 정확한 방법\n  const seoulTime = new Date(now.toLocaleString('en-US', { timeZone: SEOUL_TIMEZONE }))\n  return seoulTime.toISOString() as StandardDate\n}\n\n/**\n * 날짜 유효성 검증\n */\nexport function isValidDate(date: DateInputFormat): boolean {\n  try {\n    const utcDate = toUTC(date)\n    return utcDate !== '' && !isNaN(new Date(utcDate).getTime())\n  } catch {\n    return false\n  }\n}\n\n/**\n * 두 날짜 간의 차이 계산 (일 단위)\n */\nexport function getDateDifference(\n  startDate: StandardDate | string,\n  endDate: StandardDate | string\n): number {\n  try {\n    const start = new Date(startDate)\n    const end = new Date(endDate)\n\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      return 0\n    }\n\n    const diffInMs = end.getTime() - start.getTime()\n    return Math.floor(diffInMs / (1000 * 60 * 60 * 24))\n  } catch {\n    return 0\n  }\n}\n\n/**\n * 날짜 범위 검증 (시작일이 종료일보다 이전인지)\n */\nexport function isValidDateRange(\n  startDate: StandardDate | string,\n  endDate: StandardDate | string\n): boolean {\n  try {\n    const start = new Date(startDate)\n    const end = new Date(endDate)\n\n    if (isNaN(start.getTime()) || isNaN(end.getTime())) {\n      return false\n    }\n\n    return start < end\n  } catch {\n    return false\n  }\n}\n\n/**\n * 날짜 처리 강제 함수 (개발 모드에서만 동작)\n */\nexport function enforceStandardDate(date: DateInputFormat, context: string = '날짜'): StandardDate {\n  if (process.env.NODE_ENV === 'development') {\n    if (!isValidDate(date)) {\n      logger.warn(`⚠️ [날짜 처리 강제] ${context}에서 유효하지 않은 날짜 발견: \"${date}\"`)\n    }\n  }\n\n  return toUTC(date)\n}\n\n/**\n * 날짜 처리 표준 가이드라인\n */\nexport const DATE_STANDARDS = {\n  /**\n   * 표준 형식\n   */\n  FORMATS: {\n    STORAGE: 'UTC (ISO 8601)', // 데이터베이스 저장\n    DISPLAY: '서울 시간 (Asia/Seoul)', // 사용자 표시\n    INPUT: '다양한 형식 지원' // 사용자 입력\n  },\n\n  /**\n   * 사용 금지 패턴들\n   */\n  FORBIDDEN_PATTERNS: [\n    'new Date().toLocaleDateString()', // 직접 로컬 날짜 사용\n    'new Date().toLocaleString()', // 직접 로컬 시간 사용\n    'date.toISOString()', // UTC 변환 없이 직접 사용\n    'new Date(dateString)', // 문자열을 직접 Date 생성자에 전달\n    'Date.now()' // 직접 timestamp 사용\n  ],\n\n  /**\n   * 권장 패턴들\n   */\n  RECOMMENDED_PATTERNS: [\n    'toUTC(userInput)', // 사용자 입력을 UTC로 변환\n    'formatDateForDisplay(utcDate)', // UTC를 표시용으로 변환\n    'formatDateForInput(utcDate)', // HTML input용으로 변환\n    'getCurrentUTC()', // 현재 시간을 UTC로\n    'enforceStandardDate(date)' // 타입 안전한 날짜 처리\n  ]\n} as const\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/format.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/hr.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/korean-name.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/logger.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":6,"column":32,"nodeType":"MemberExpression","messageId":"unexpected","endLine":6,"endColumn":43},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":33,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":45},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":9,"column":34,"nodeType":"MemberExpression","messageId":"unexpected","endLine":9,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":10,"column":34,"nodeType":"MemberExpression","messageId":"unexpected","endLine":10,"endColumn":47},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":11,"column":34,"nodeType":"MemberExpression","messageId":"unexpected","endLine":11,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Safe logger wrapper that delegates to console by default\n * This allows for future logging infrastructure changes without code modifications\n */\nexport const logger = {\n  log: (...args: unknown[]) => console.log(...args),\n  info: (...args: unknown[]) => console.info(...args),\n  warn: (...args: unknown[]) => console.warn(...args),\n  error: (...args: unknown[]) => console.error(...args),\n  debug: (...args: unknown[]) => console.debug(...args),\n  trace: (...args: unknown[]) => console.trace(...args)\n} as const\n\nexport default logger\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/name-validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1565,1568],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1565,1568],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * 이름 처리 검증 및 강제 유틸리티\n *\n * 이 모듈은 이름 처리가 표준 방식으로 이루어지도록 강제하는 도구들을 제공합니다.\n */\n\nimport { formatEmployeeName } from './format'\nimport { formatKoreanNameStandard } from './korean-name'\nimport { logger } from '$lib/utils/logger'\n\n/**\n * 이름 표시를 위한 타입 가드\n * 모든 이름 표시는 이 타입을 사용해야 합니다.\n */\nexport type StandardizedName = string & { readonly __brand: 'StandardizedName' }\n\n/**\n * 직원 객체에서 표준화된 이름을 생성\n */\nexport function createStandardEmployeeName(employee: {\n  last_name?: string\n  first_name?: string\n}): StandardizedName {\n  return formatEmployeeName(employee) as StandardizedName\n}\n\n/**\n * 전체 이름에서 표준화된 이름을 생성\n */\nexport function createStandardFullName(fullName: string): StandardizedName {\n  return formatKoreanNameStandard(fullName) as StandardizedName\n}\n\n/**\n * 이름이 표준 형식인지 검증\n */\nexport function isValidStandardName(name: string): name is StandardizedName {\n  // 한국 이름인 경우 (성)(이름) 형식이고 공백이 없어야 함\n  const koreanRegex = /^[가-힣]+$/\n  if (koreanRegex.test(name)) {\n    return name.length >= 2 && !name.includes(' ')\n  }\n\n  // 영문 이름인 경우 그대로 허용\n  return name.length > 0\n}\n\n/**\n * 이름 표시 강제 함수 (개발 모드에서만 동작)\n */\nexport function enforceStandardName(name: string, context: string = '이름'): StandardizedName {\n  if (process.env.NODE_ENV === 'development') {\n    if (!isValidStandardName(name)) {\n      logger.warn(`⚠️ [이름 표시 강제] ${context}에서 비표준 형식 발견: \"${name}\"`)\n      logger.warn('표준 형식으로 변환 중...')\n    }\n  }\n\n  return formatKoreanNameStandard(name) as StandardizedName\n}\n\n/**\n * 런타임 검증을 위한 데코레이터 함수\n */\nexport function withNameValidation<T extends (...args: unknown[]) => any>(\n  fn: T,\n  context: string = '함수'\n): T {\n  return ((...args: unknown[]) => {\n    const result = fn(...args)\n\n    if (process.env.NODE_ENV === 'development') {\n      // 결과가 문자열인 경우 이름 형식 검증\n      if (typeof result === 'string' && result.length > 0) {\n        // 한국 이름 패턴이 있는지 확인\n        const koreanRegex = /[가-힣]/\n        if (koreanRegex.test(result) && result.includes(' ')) {\n          logger.warn(`⚠️ [이름 검증] ${context}에서 비표준 형식 반환: \"${result}\"`)\n          logger.warn('표준 형식: (성)(이름) - 공백 없음')\n        }\n      }\n    }\n\n    return result\n  }) as T\n}\n\n/**\n * 이름 처리 표준 가이드라인\n */\nexport const NAME_STANDARDS = {\n  /**\n   * 한국 이름 표준 형식: (성)(이름) - 공백 없음\n   * 예: \"차지은\", \"이지후\", \"김성호\"\n   */\n  KOREAN_FORMAT: '(성)(이름) - 공백 없음',\n\n  /**\n   * 영문 이름 표준 형식: (First) (Last) - 공백 있음\n   * 예: \"John Doe\", \"Jane Smith\"\n   */\n  ENGLISH_FORMAT: '(First) (Last) - 공백 있음',\n\n  /**\n   * 사용 금지 패턴들\n   */\n  FORBIDDEN_PATTERNS: [\n    'first_name + \" \" + last_name', // 직접 문자열 결합\n    'last_name + \" \" + first_name', // 직접 문자열 결합\n    '`${first} ${last}`', // 템플릿 리터럴 직접 사용\n    'employee.name' // 원시 필드 직접 사용\n  ],\n\n  /**\n   * 권장 패턴들\n   */\n  RECOMMENDED_PATTERNS: [\n    'formatEmployeeName(employee)', // 직원 객체용\n    'formatKoreanNameStandard(fullName)', // 전체 이름용\n    'createStandardEmployeeName(employee)', // 타입 안전한 직원 이름\n    'createStandardFullName(fullName)' // 타입 안전한 전체 이름\n  ]\n} as const\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/report-generator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/safe-change-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'analysis' is defined but never used. Allowed unused args must match /^_/u.","line":263,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":263,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'impacts' is defined but never used. Allowed unused args must match /^_/u.","line":264,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":264,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'impacts' is defined but never used. Allowed unused args must match /^_/u.","line":296,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { ChangeImpact, DependencyAnalysis } from './code-dependency-analyzer'\nimport { CodeDependencyAnalyzer } from './code-dependency-analyzer'\nimport { logger } from '$lib/utils/logger'\n\n// 변경 타입 정의\nexport type ChangeType = 'modify' | 'delete' | 'rename' | 'move' | 'add'\n\n// 변경 단계 정의\nexport type ChangeStep =\n  | 'analysis'\n  | 'backup'\n  | 'preparation'\n  | 'execution'\n  | 'validation'\n  | 'cleanup'\n\n// 변경 상태 정의\nexport type ChangeStatus = 'pending' | 'in_progress' | 'completed' | 'failed' | 'rolled_back'\n\n// 안전한 변경 계획\nexport interface SafeChangePlan {\n  id: string\n  filePath: string\n  changeType: ChangeType\n  description: string\n  status: ChangeStatus\n  currentStep: ChangeStep\n  createdAt: Date\n  updatedAt: Date\n  analysis: DependencyAnalysis | null\n  impacts: ChangeImpact[]\n  procedure: string[]\n  risks: string[]\n  recommendations: string[]\n  affectedFiles: string[]\n  rollbackPlan: string[]\n  validationChecks: string[]\n}\n\n// 변경 검증 결과\nexport interface ChangeValidationResult {\n  isValid: boolean\n  errors: string[]\n  warnings: string[]\n  recommendations: string[]\n}\n\n// 안전한 변경 관리자\nexport class SafeChangeManager {\n  private static changePlans = new Map<string, SafeChangePlan>()\n  private static readonly VALIDATION_RULES = {\n    global: [\n      '글로벌 유틸리티 함수 변경 시 모든 사용처 확인',\n      'API 엔드포인트 변경 시 클라이언트 코드 확인',\n      '데이터베이스 스키마 변경 시 마이그레이션 계획',\n      '타입 정의 변경 시 모든 구현체 확인'\n    ],\n    page: [\n      '페이지별 컴포넌트 변경 시 상위/하위 컴포넌트 확인',\n      '라우트 변경 시 네비게이션 링크 확인',\n      '상태 관리 변경 시 관련 컴포넌트 확인',\n      '스타일 변경 시 테마 일관성 확인'\n    ],\n    api: [\n      'API 응답 형식 변경 시 클라이언트 호환성 확인',\n      '인증/권한 로직 변경 시 보안 영향 확인',\n      '데이터베이스 쿼리 변경 시 성능 영향 확인',\n      '에러 처리 변경 시 클라이언트 에러 핸들링 확인'\n    ]\n  }\n\n  /**\n   * 안전한 변경 계획 생성\n   */\n  static async createChangePlan(\n    filePath: string,\n    changeType: ChangeType,\n    description: string\n  ): Promise<SafeChangePlan> {\n    logger.log(`📋 [변경 계획 생성] ${changeType}: ${filePath}`)\n\n    // 의존성 분석\n    const analysis = await CodeDependencyAnalyzer.analyzeProjectDependencies()\n    const fileAnalysis = analysis.get(filePath)\n\n    if (!fileAnalysis) {\n      throw new Error(`파일을 찾을 수 없습니다: ${filePath}`)\n    }\n\n    // 변경 영향도 예측 (ChangeType을 predictChangeImpact가 받는 타입으로 변환)\n    const impactChangeType =\n      changeType === 'add' ? 'modify' : (changeType as 'modify' | 'delete' | 'rename')\n    const impacts = CodeDependencyAnalyzer.predictChangeImpact(filePath, impactChangeType, analysis)\n\n    // 안전한 변경 절차 생성\n    const procedure = this.generateChangeProcedure(filePath, changeType, fileAnalysis, impacts)\n\n    // 롤백 계획 생성\n    const rollbackPlan = this.generateRollbackPlan(filePath, changeType, impacts)\n\n    // 검증 체크리스트 생성\n    const validationChecks = this.generateValidationChecks(filePath, changeType, fileAnalysis)\n\n    const plan: SafeChangePlan = {\n      id: this.generatePlanId(),\n      filePath,\n      changeType,\n      description,\n      status: 'pending',\n      currentStep: 'analysis',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      analysis: fileAnalysis,\n      impacts,\n      procedure,\n      risks: this.identifyRisks(fileAnalysis, impacts),\n      recommendations: this.generateRecommendations(filePath, changeType, fileAnalysis),\n      affectedFiles: impacts.map(impact => impact.affectedFile),\n      rollbackPlan,\n      validationChecks\n    }\n\n    this.changePlans.set(plan.id, plan)\n    logger.log(`✅ [변경 계획 생성] 완료 - ID: ${plan.id}`)\n\n    return plan\n  }\n\n  /**\n   * 변경 계획 실행\n   */\n  static async executeChangePlan(planId: string): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    const plan = this.changePlans.get(planId)\n    if (!plan) {\n      return { success: false, message: '변경 계획을 찾을 수 없습니다.' }\n    }\n\n    logger.log(`🚀 [변경 실행] ${plan.changeType}: ${plan.filePath}`)\n\n    try {\n      plan.status = 'in_progress'\n      plan.updatedAt = new Date()\n\n      // 현재 단계에 따른 실행\n      switch (plan.currentStep) {\n        case 'analysis':\n          return await this.executeAnalysisStep(plan)\n        case 'backup':\n          return await this.executeBackupStep(plan)\n        case 'preparation':\n          return await this.executePreparationStep(plan)\n        case 'execution':\n          return await this.executeExecutionStep(plan)\n        case 'validation':\n          return await this.executeValidationStep(plan)\n        case 'cleanup':\n          return await this.executeCleanupStep(plan)\n        default:\n          return { success: false, message: '알 수 없는 단계입니다.' }\n      }\n    } catch (error) {\n      plan.status = 'failed'\n      plan.updatedAt = new Date()\n      return {\n        success: false,\n        message: `변경 실행 실패: ${error instanceof Error ? error.message : 'Unknown error'}`\n      }\n    }\n  }\n\n  /**\n   * 변경 계획 롤백\n   */\n  static async rollbackChangePlan(planId: string): Promise<{\n    success: boolean\n    message: string\n  }> {\n    const plan = this.changePlans.get(planId)\n    if (!plan) {\n      return { success: false, message: '변경 계획을 찾을 수 없습니다.' }\n    }\n\n    logger.log(`🔄 [변경 롤백] ${plan.changeType}: ${plan.filePath}`)\n\n    try {\n      // 롤백 계획 실행\n      for (const rollbackStep of plan.rollbackPlan) {\n        logger.log(`  🔄 ${rollbackStep}`)\n        // 실제 롤백 로직 구현\n      }\n\n      plan.status = 'rolled_back'\n      plan.updatedAt = new Date()\n\n      return { success: true, message: '롤백이 완료되었습니다.' }\n    } catch (error) {\n      return {\n        success: false,\n        message: `롤백 실패: ${error instanceof Error ? error.message : 'Unknown error'}`\n      }\n    }\n  }\n\n  /**\n   * 변경 계획 조회\n   */\n  static getChangePlan(planId: string): SafeChangePlan | null {\n    return this.changePlans.get(planId) || null\n  }\n\n  /**\n   * 모든 변경 계획 조회\n   */\n  static getAllChangePlans(): SafeChangePlan[] {\n    return Array.from(this.changePlans.values())\n  }\n\n  /**\n   * 변경 검증\n   */\n  static validateChange(\n    filePath: string,\n    changeType: ChangeType,\n    content: string\n  ): ChangeValidationResult {\n    const result: ChangeValidationResult = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      recommendations: []\n    }\n\n    // 파일 타입별 검증 규칙 적용\n    if (filePath.includes('/utils/') || filePath.includes('/lib/')) {\n      this.validateGlobalFile(filePath, content, result)\n    }\n\n    if (filePath.includes('/routes/') || filePath.includes('/pages/')) {\n      this.validatePageFile(filePath, content, result)\n    }\n\n    if (filePath.includes('/api/')) {\n      this.validateApiFile(filePath, content, result)\n    }\n\n    // 일반적인 검증 규칙\n    this.validateGeneralRules(filePath, content, result)\n\n    result.isValid = result.errors.length === 0\n    return result\n  }\n\n  /**\n   * 변경 절차 생성\n   */\n  private static generateChangeProcedure(\n    filePath: string,\n    changeType: ChangeType,\n    analysis: DependencyAnalysis,\n    impacts: ChangeImpact[]\n  ): string[] {\n    const procedure: string[] = []\n\n    procedure.push('1. 변경 전 의존성 분석 완료')\n    procedure.push('2. 백업 생성')\n    procedure.push('3. 영향받는 파일들 확인')\n\n    if (changeType === 'delete') {\n      procedure.push('4. 모든 참조 제거')\n      procedure.push('5. 파일 삭제')\n    } else if (changeType === 'rename') {\n      procedure.push('4. 새 이름으로 파일 생성')\n      procedure.push('5. 모든 참조 업데이트')\n      procedure.push('6. 기존 파일 삭제')\n    } else if (changeType === 'modify') {\n      procedure.push('4. 파일 수정')\n    }\n\n    procedure.push('6. 변경 후 검증')\n    procedure.push('7. 테스트 실행')\n    procedure.push('8. 문서 업데이트')\n\n    return procedure\n  }\n\n  /**\n   * 롤백 계획 생성\n   */\n  private static generateRollbackPlan(\n    filePath: string,\n    changeType: ChangeType,\n    impacts: ChangeImpact[]\n  ): string[] {\n    const rollbackPlan: string[] = []\n\n    rollbackPlan.push('1. 백업에서 원본 파일 복원')\n\n    if (changeType === 'delete') {\n      rollbackPlan.push('2. 삭제된 파일 복원')\n    } else if (changeType === 'rename') {\n      rollbackPlan.push('2. 파일명을 원래대로 변경')\n      rollbackPlan.push('3. 모든 참조를 원래대로 복원')\n    } else if (changeType === 'modify') {\n      rollbackPlan.push('2. 수정된 파일을 원본으로 복원')\n    }\n\n    rollbackPlan.push('3. 영향받은 파일들 복원')\n    rollbackPlan.push('4. 검증 및 테스트')\n\n    return rollbackPlan\n  }\n\n  /**\n   * 검증 체크리스트 생성\n   */\n  private static generateValidationChecks(\n    filePath: string,\n    changeType: ChangeType,\n    analysis: DependencyAnalysis\n  ): string[] {\n    const checks: string[] = []\n\n    // 기본 검증\n    checks.push('문법 오류 없음')\n    checks.push('타입 오류 없음')\n    checks.push('린트 오류 없음')\n\n    // 의존성 관련 검증\n    if (analysis.dependents.length > 0) {\n      checks.push('의존하는 파일들이 정상 작동')\n      checks.push('Import/Export 관계 정상')\n    }\n\n    // 파일 타입별 검증\n    if (filePath.includes('/api/')) {\n      checks.push('API 엔드포인트 정상 응답')\n      checks.push('에러 처리 정상')\n    }\n\n    if (filePath.includes('/utils/')) {\n      checks.push('유틸리티 함수 정상 작동')\n      checks.push('모든 사용처에서 정상 호출')\n    }\n\n    return checks\n  }\n\n  /**\n   * 위험 요소 식별\n   */\n  private static identifyRisks(analysis: DependencyAnalysis, impacts: ChangeImpact[]): string[] {\n    const risks: string[] = []\n\n    if (analysis.riskLevel === 'critical') {\n      risks.push('Critical 위험도 파일 - 신중한 변경 필요')\n    }\n\n    if (impacts.length > 10) {\n      risks.push('많은 파일에 영향 - 광범위한 테스트 필요')\n    }\n\n    if (impacts.some(impact => impact.impactType === 'breaking')) {\n      risks.push('Breaking Change 감지 - 하위 호환성 문제 가능')\n    }\n\n    return risks\n  }\n\n  /**\n   * 권장사항 생성\n   */\n  private static generateRecommendations(\n    filePath: string,\n    changeType: ChangeType,\n    analysis: DependencyAnalysis\n  ): string[] {\n    const recommendations: string[] = []\n\n    if (changeType === 'delete') {\n      recommendations.push('삭제 전 모든 참조 제거')\n      recommendations.push('대체 방안 마련')\n    }\n\n    if (changeType === 'rename') {\n      recommendations.push('단계적 이름 변경 (별칭 유지)')\n      recommendations.push('모든 참조 업데이트')\n    }\n\n    if (analysis.dependents.length > 5) {\n      recommendations.push('의존하는 파일이 많음 - 단계적 변경 고려')\n    }\n\n    recommendations.push('변경 후 전체 테스트 실행')\n    recommendations.push('문서 업데이트')\n\n    return recommendations\n  }\n\n  /**\n   * 글로벌 파일 검증\n   */\n  private static validateGlobalFile(\n    filePath: string,\n    content: string,\n    result: ChangeValidationResult\n  ): void {\n    // 글로벌 유틸리티 함수 검증\n    if (content.includes('export') && !content.includes('export default')) {\n      result.warnings.push('글로벌 유틸리티 함수 변경 시 모든 사용처 확인 필요')\n    }\n\n    // 타입 정의 검증\n    if (content.includes('interface') || content.includes('type')) {\n      result.warnings.push('타입 정의 변경 시 모든 구현체 확인 필요')\n    }\n  }\n\n  /**\n   * 페이지 파일 검증\n   */\n  private static validatePageFile(\n    filePath: string,\n    content: string,\n    result: ChangeValidationResult\n  ): void {\n    // 컴포넌트 props 검증\n    if (content.includes('export let')) {\n      result.warnings.push('컴포넌트 props 변경 시 상위 컴포넌트 확인 필요')\n    }\n\n    // 라우트 검증\n    if (filePath.includes('/routes/')) {\n      result.warnings.push('라우트 변경 시 네비게이션 링크 확인 필요')\n    }\n  }\n\n  /**\n   * API 파일 검증\n   */\n  private static validateApiFile(\n    filePath: string,\n    content: string,\n    result: ChangeValidationResult\n  ): void {\n    // API 응답 형식 검증\n    if (content.includes('json(')) {\n      result.warnings.push('API 응답 형식 변경 시 클라이언트 호환성 확인 필요')\n    }\n\n    // 인증/권한 검증\n    if (content.includes('auth') || content.includes('permission')) {\n      result.warnings.push('인증/권한 로직 변경 시 보안 영향 확인 필요')\n    }\n  }\n\n  /**\n   * 일반적인 검증 규칙\n   */\n  private static validateGeneralRules(\n    filePath: string,\n    content: string,\n    result: ChangeValidationResult\n  ): void {\n    // 하드코딩된 값 검증\n    if (content.includes('localhost') || content.includes('127.0.0.1')) {\n      result.warnings.push('하드코딩된 URL 사용 - 환경 변수 사용 권장')\n    }\n\n    // 에러 처리 검증\n    if (content.includes('await') && !content.includes('try') && !content.includes('catch')) {\n      result.warnings.push('비동기 작업에 에러 처리 추가 권장')\n    }\n  }\n\n  /**\n   * 계획 ID 생성\n   */\n  private static generatePlanId(): string {\n    return `plan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n\n  /**\n   * 분석 단계 실행\n   */\n  private static async executeAnalysisStep(plan: SafeChangePlan): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    logger.log('  📊 의존성 분석 완료')\n    plan.currentStep = 'backup'\n    plan.updatedAt = new Date()\n    return { success: true, message: '분석 완료', nextStep: 'backup' }\n  }\n\n  /**\n   * 백업 단계 실행\n   */\n  private static async executeBackupStep(plan: SafeChangePlan): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    logger.log('  💾 백업 생성 완료')\n    plan.currentStep = 'preparation'\n    plan.updatedAt = new Date()\n    return { success: true, message: '백업 완료', nextStep: 'preparation' }\n  }\n\n  /**\n   * 준비 단계 실행\n   */\n  private static async executePreparationStep(plan: SafeChangePlan): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    logger.log('  🔧 변경 준비 완료')\n    plan.currentStep = 'execution'\n    plan.updatedAt = new Date()\n    return { success: true, message: '준비 완료', nextStep: 'execution' }\n  }\n\n  /**\n   * 실행 단계 실행\n   */\n  private static async executeExecutionStep(plan: SafeChangePlan): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    logger.log('  ⚡ 변경 실행 완료')\n    plan.currentStep = 'validation'\n    plan.updatedAt = new Date()\n    return { success: true, message: '실행 완료', nextStep: 'validation' }\n  }\n\n  /**\n   * 검증 단계 실행\n   */\n  private static async executeValidationStep(plan: SafeChangePlan): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    logger.log('  ✅ 검증 완료')\n    plan.currentStep = 'cleanup'\n    plan.updatedAt = new Date()\n    return { success: true, message: '검증 완료', nextStep: 'cleanup' }\n  }\n\n  /**\n   * 정리 단계 실행\n   */\n  private static async executeCleanupStep(plan: SafeChangePlan): Promise<{\n    success: boolean\n    message: string\n    nextStep?: ChangeStep\n  }> {\n    logger.log('  🧹 정리 완료')\n    plan.status = 'completed'\n    plan.updatedAt = new Date()\n    return { success: true, message: '모든 단계 완료' }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/salary-calculator.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/schema-validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/timezone.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timezone' is assigned a value but never used. Allowed unused args must match /^_/u.","line":34,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'timezoneString' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":56,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'localDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":141,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":141,"endColumn":18}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * UTC 기준 시간 처리 유틸리티\n * 모든 시간 처리를 UTC 기준으로 하고, 타임존 변환을 명확하게 관리합니다.\n */\n\nimport { toUTC } from './date-handler'\n\n// 지원하는 타임존 목록 (확장 가능)\nexport const SUPPORTED_TIMEZONES = {\n  UTC: 'UTC',\n  KST: 'Asia/Seoul', // 한국 표준시 (UTC+9)\n  JST: 'Asia/Tokyo', // 일본 표준시 (UTC+9)\n  EST: 'America/New_York', // 미국 동부 표준시 (UTC-5)\n  PST: 'America/Los_Angeles', // 미국 서부 표준시 (UTC-8)\n  GMT: 'Europe/London', // 그리니치 표준시 (UTC+0)\n  CET: 'Europe/Paris', // 중앙유럽 표준시 (UTC+1)\n  CST: 'Asia/Shanghai', // 중국 표준시 (UTC+8)\n  IST: 'Asia/Kolkata', // 인도 표준시 (UTC+5:30)\n  AEST: 'Australia/Sydney', // 호주 동부 표준시 (UTC+10)\n  NZST: 'Pacific/Auckland' // 뉴질랜드 표준시 (UTC+12)\n} as const\n\nexport type Timezone = keyof typeof SUPPORTED_TIMEZONES\n\n// 기본 타임존 설정 (한국 표준시)\nexport const DEFAULT_TIMEZONE: Timezone = 'KST'\n\n/**\n * UTC 시간을 특정 타임존의 로컬 시간으로 변환\n * @param utcDate UTC 시간\n * @param timezone 변환할 타임존\n * @returns 변환된 로컬 시간\n */\nexport function utcToLocal(utcDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): Date {\n  if (!utcDate || isNaN(utcDate.getTime())) {\n    throw new Error('Invalid UTC date provided')\n  }\n\n  // 표준 날짜 처리 함수 사용\n  const utcString = utcDate.toISOString()\n  const localDate = new Date(toUTC(utcString))\n  return localDate\n}\n\n/**\n * 로컬 시간을 UTC 시간으로 변환\n * @param localDate 로컬 시간\n * @param timezone 로컬 시간의 타임존\n * @returns UTC 시간\n */\nexport function localToUtc(localDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): Date {\n  if (!localDate || isNaN(localDate.getTime())) {\n    throw new Error('Invalid local date provided')\n  }\n\n  const timezoneString = SUPPORTED_TIMEZONES[timezone]\n  // 표준 날짜 처리 함수 사용\n  const utcDate = new Date(toUTC(localDate.toISOString()))\n\n  // 타임존 오프셋을 고려하여 UTC로 변환\n  const offset = getTimezoneOffset(timezone)\n  return new Date(utcDate.getTime() - offset * 60 * 1000)\n}\n\n/**\n * 타임존 오프셋을 분 단위로 반환\n * @param timezone 타임존\n * @returns 오프셋 (분)\n */\nexport function getTimezoneOffset(timezone: Timezone): number {\n  const offsets: Record<Timezone, number> = {\n    UTC: 0,\n    KST: -540, // UTC+9 = -540분\n    JST: -540, // UTC+9 = -540분\n    EST: 300, // UTC-5 = +300분\n    PST: 480, // UTC-8 = +480분\n    GMT: 0, // UTC+0 = 0분\n    CET: -60, // UTC+1 = -60분\n    CST: -480, // UTC+8 = -480분\n    IST: -330, // UTC+5:30 = -330분\n    AEST: -600, // UTC+10 = -600분\n    NZST: -720 // UTC+12 = -720분\n  }\n\n  return offsets[timezone]\n}\n\n/**\n * UTC 시간을 YYYY-MM-DD 형식의 문자열로 변환 (로컬 타임존 기준)\n * @param utcDate UTC 시간\n * @param timezone 변환할 타임존\n * @returns YYYY-MM-DD 형식의 날짜 문자열\n */\nexport function utcToDateString(utcDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): string {\n  const localDate = utcToLocal(utcDate, timezone)\n  const year = localDate.getFullYear()\n  const month = String(localDate.getMonth() + 1).padStart(2, '0')\n  const day = String(localDate.getDate()).padStart(2, '0')\n  return `${year}-${month}-${day}`\n}\n\n/**\n * YYYY-MM-DD 형식의 문자열을 UTC 시간으로 변환\n * @param dateString YYYY-MM-DD 형식의 날짜 문자열\n * @param timezone 입력 날짜의 타임존\n * @returns UTC 시간\n */\nexport function dateStringToUtc(dateString: string, timezone: Timezone = DEFAULT_TIMEZONE): Date {\n  if (!dateString || !dateString.match(/^\\d{4}-\\d{2}-\\d{2}$/)) {\n    throw new Error('Invalid date string format. Expected YYYY-MM-DD')\n  }\n\n  // 로컬 타임존에서 자정으로 해석\n  const [year, month, day] = dateString.split('-').map(Number)\n  const localDate = new Date(year, month - 1, day, 0, 0, 0, 0)\n\n  return localToUtc(localDate, timezone)\n}\n\n/**\n * UTC 시간을 HH:MM:SS 형식의 시간 문자열로 변환 (로컬 타임존 기준)\n * @param utcDate UTC 시간\n * @param timezone 변환할 타임존\n * @returns HH:MM:SS 형식의 시간 문자열\n */\nexport function utcToTimeString(utcDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): string {\n  const localDate = utcToLocal(utcDate, timezone)\n  const hours = String(localDate.getHours()).padStart(2, '0')\n  const minutes = String(localDate.getMinutes()).padStart(2, '0')\n  const seconds = String(localDate.getSeconds()).padStart(2, '0')\n  return `${hours}:${minutes}:${seconds}`\n}\n\n/**\n * UTC 시간을 YYYY-MM-DD HH:MM:SS 형식의 문자열로 변환 (로컬 타임존 기준)\n * @param utcDate UTC 시간\n * @param timezone 변환할 타임존\n * @returns YYYY-MM-DD HH:MM:SS 형식의 날짜시간 문자열\n */\nexport function utcToDateTimeString(utcDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): string {\n  const localDate = utcToLocal(utcDate, timezone)\n  const dateString = utcToDateString(utcDate, timezone)\n  const timeString = utcToTimeString(utcDate, timezone)\n  return `${dateString} ${timeString}`\n}\n\n/**\n * 현재 UTC 시간을 반환\n * @returns 현재 UTC 시간\n */\nexport function getCurrentUtcTime(): Date {\n  return new Date()\n}\n\n/**\n * 현재 로컬 시간을 반환 (지정된 타임존 기준)\n * @param timezone 타임존\n * @returns 현재 로컬 시간\n */\nexport function getCurrentLocalTime(timezone: Timezone = DEFAULT_TIMEZONE): Date {\n  return utcToLocal(getCurrentUtcTime(), timezone)\n}\n\n/**\n * 두 UTC 시간 사이의 일수를 계산\n * @param startUtc 시작 UTC 시간\n * @param endUtc 종료 UTC 시간\n * @returns 일수\n */\nexport function getDaysBetweenUtc(startUtc: Date, endUtc: Date): number {\n  if (!startUtc || !endUtc || isNaN(startUtc.getTime()) || isNaN(endUtc.getTime())) {\n    throw new Error('Invalid UTC dates provided')\n  }\n\n  const diffTime = endUtc.getTime() - startUtc.getTime()\n  return Math.ceil(diffTime / (1000 * 60 * 60 * 24))\n}\n\n/**\n * UTC 시간에 일수를 더함\n * @param utcDate 기준 UTC 시간\n * @param days 더할 일수\n * @returns 계산된 UTC 시간\n */\nexport function addDaysToUtc(utcDate: Date, days: number): Date {\n  if (!utcDate || isNaN(utcDate.getTime())) {\n    throw new Error('Invalid UTC date provided')\n  }\n\n  const result = new Date(utcDate)\n  result.setUTCDate(result.getUTCDate() + days)\n  return result\n}\n\n/**\n * UTC 시간에서 일수를 뺌\n * @param utcDate 기준 UTC 시간\n * @param days 뺄 일수\n * @returns 계산된 UTC 시간\n */\nexport function subtractDaysFromUtc(utcDate: Date, days: number): Date {\n  return addDaysToUtc(utcDate, -days)\n}\n\n/**\n * UTC 시간을 특정 타임존의 로컬 시간으로 포맷팅\n * @param utcDate UTC 시간\n * @param timezone 타임존\n * @param options Intl.DateTimeFormatOptions\n * @returns 포맷팅된 문자열\n */\nexport function formatUtcToLocal(\n  utcDate: Date,\n  timezone: Timezone = DEFAULT_TIMEZONE,\n  options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    timeZoneName: 'short'\n  }\n): string {\n  if (!utcDate || isNaN(utcDate.getTime())) {\n    throw new Error('Invalid UTC date provided')\n  }\n\n  // 표준 날짜 처리 함수 사용\n  return formatUtcToLocal(utcDate, timezone, options)\n}\n\n/**\n * 날짜 입력 필드용 UTC 시간 변환 (YYYY-MM-DD 형식)\n * @param utcDate UTC 시간\n * @param timezone 타임존\n * @returns HTML date input용 YYYY-MM-DD 형식\n */\nexport function utcToDateInput(utcDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): string {\n  return utcToDateString(utcDate, timezone)\n}\n\n/**\n * HTML date input 값을 UTC 시간으로 변환\n * @param dateInputValue HTML date input의 값 (YYYY-MM-DD)\n * @param timezone 입력 값의 타임존\n * @returns UTC 시간\n */\nexport function dateInputToUtc(\n  dateInputValue: string,\n  timezone: Timezone = DEFAULT_TIMEZONE\n): Date {\n  return dateStringToUtc(dateInputValue, timezone)\n}\n\n/**\n * 데이터베이스 저장용 UTC 시간 문자열 생성\n * @param utcDate UTC 시간\n * @returns ISO 8601 형식의 UTC 시간 문자열\n */\nexport function utcToDbString(utcDate: Date): string {\n  if (!utcDate || isNaN(utcDate.getTime())) {\n    throw new Error('Invalid UTC date provided')\n  }\n\n  return utcDate.toISOString()\n}\n\n/**\n * 데이터베이스에서 가져온 UTC 시간 문자열을 Date 객체로 변환\n * @param dbString ISO 8601 형식의 UTC 시간 문자열\n * @returns UTC Date 객체\n */\nexport function dbStringToUtc(dbString: string): Date {\n  if (!dbString) {\n    throw new Error('Invalid database string provided')\n  }\n\n  const date = new Date(dbString)\n  if (isNaN(date.getTime())) {\n    throw new Error('Invalid database string format')\n  }\n\n  return date\n}\n\n/**\n * 타임존 정보를 포함한 시간 정보 객체\n */\nexport interface TimeInfo {\n  utc: Date\n  local: Date\n  timezone: Timezone\n  dateString: string // YYYY-MM-DD\n  timeString: string // HH:MM:SS\n  dateTimeString: string // YYYY-MM-DD HH:MM:SS\n  formatted: string // 포맷팅된 문자열\n}\n\n/**\n * UTC 시간을 모든 형식으로 변환하여 반환\n * @param utcDate UTC 시간\n * @param timezone 타임존\n * @returns 시간 정보 객체\n */\nexport function getTimeInfo(utcDate: Date, timezone: Timezone = DEFAULT_TIMEZONE): TimeInfo {\n  const local = utcToLocal(utcDate, timezone)\n\n  return {\n    utc: utcDate,\n    local,\n    timezone,\n    dateString: utcToDateString(utcDate, timezone),\n    timeString: utcToTimeString(utcDate, timezone),\n    dateTimeString: utcToDateTimeString(utcDate, timezone),\n    formatted: formatUtcToLocal(utcDate, timezone)\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/lib/utils/validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[437,440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[437,440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1221,1224],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1221,1224],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":223,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":223,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4722,4725],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4722,4725],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4990,4993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4990,4993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5264,5267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5264,5267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5808,5811],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5808,5811],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":285,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":285,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6351,6354],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6351,6354],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":303,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":303,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6898,6901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6898,6901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7509,7512],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7509,7512],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8761,8764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8761,8764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9600,9603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9600,9603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9614,9617],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9614,9617],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'memberEndDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":386,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":386,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11692,11695],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11692,11695],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":453,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":453,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11707,11710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11707,11710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":568,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":568,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14988,14991],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14988,14991],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":601,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":601,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16061,16064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16061,16064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Pool } from 'pg'\nimport { logger } from '$lib/utils/logger'\n\n// 데이터베이스 연결 풀\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false }\n})\n\n// 검증 결과 타입 정의\nexport interface ValidationResult {\n  isValid: boolean\n  reason: string\n  message: string\n  issues?: string[]\n  details?: any\n}\n\nexport interface ValidationResponse {\n  success: boolean\n  projectId: string\n  projectTitle?: string\n  validationResults: unknown[]\n  overallValidation: {\n    isValid: boolean\n    totalItems: number\n    validItems: number\n    invalidItems: number\n  }\n  generatedAt: string\n}\n\n// 공통 검증 유틸리티 함수들\nexport class ValidationUtils {\n  // 데이터베이스 연결 풀 접근자\n  static get pool() {\n    return pool\n  }\n\n  // 쿼리 메서드\n  static async query(text: string, params?: unknown[]) {\n    return await pool.query(text, params)\n  }\n\n  // 프로젝트 ID로 조회\n  static async getProjectById(projectId: string) {\n    return await this.getProjectInfo(projectId)\n  }\n\n  // 검증 결과 생성 메서드\n  static createValidationResult(\n    isValid: boolean,\n    reason: string,\n    message: string,\n    issues?: string[],\n    details?: any\n  ): ValidationResult {\n    return {\n      isValid,\n      reason,\n      message,\n      issues,\n      details\n    }\n  }\n  /**\n   * 프로젝트 기본 정보 조회\n   */\n  static async getProjectInfo(projectId: string) {\n    const result = await pool.query('SELECT * FROM projects WHERE id = $1', [projectId])\n    if (result.rows.length === 0) {\n      throw new Error('프로젝트를 찾을 수 없습니다.')\n    }\n    return result.rows[0]\n  }\n\n  /**\n   * 프로젝트 예산 정보 조회\n   */\n  static async getProjectBudgets(projectId: string) {\n    const result = await pool.query(\n      'SELECT * FROM project_budgets WHERE project_id = $1 ORDER BY period_number',\n      [projectId]\n    )\n    return result.rows\n  }\n\n  /**\n   * 프로젝트 참여연구원 정보 조회 (인사 데이터 포함)\n   */\n  static async getProjectMembers(projectId: string) {\n    const result = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.hire_date,\n\t\t\t\te.termination_date,\n\t\t\t\te.status,\n\t\t\t\te.employment_type,\n\t\t\t\te.department,\n\t\t\t\te.position\n\t\t\tFROM project_members pm\n\t\t\tLEFT JOIN employees e ON pm.employee_id = e.id\n\t\t\tWHERE pm.project_id = $1\n\t\t\tORDER BY pm.start_date\n\t\t`,\n      [projectId]\n    )\n    return result.rows\n  }\n\n  /**\n   * 증빙 항목 정보 조회\n   */\n  static async getEvidenceItems(projectId: string, categoryName?: string) {\n    let query = `\n\t\t\tSELECT \n\t\t\t\tei.*,\n\t\t\t\tpb.period_number,\n\t\t\t\tpb.fiscal_year,\n\t\t\t\tpb.start_date as period_start_date,\n\t\t\t\tpb.end_date as period_end_date,\n\t\t\t\tec.name as category_name\n\t\t\tFROM evidence_items ei\n\t\t\tJOIN project_budgets pb ON ei.project_budget_id = pb.id\n\t\t\tJOIN evidence_categories ec ON ei.category_id = ec.id\n\t\t\tWHERE pb.project_id = $1\n\t\t`\n    const params = [projectId]\n\n    if (categoryName) {\n      query += ' AND ec.name = $2'\n      params.push(categoryName)\n    }\n\n    query += ' ORDER BY pb.period_number, ei.due_date'\n\n    const result = await pool.query(query, params)\n    return result.rows\n  }\n\n  /**\n   * 직원 정보 조회\n   */\n  static async getEmployeeInfo(employeeId: string) {\n    const result = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tid,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\thire_date,\n\t\t\t\ttermination_date,\n\t\t\t\tstatus,\n\t\t\t\temployment_type,\n\t\t\t\tdepartment,\n\t\t\t\tposition\n\t\t\tFROM employees \n\t\t\tWHERE id = $1\n\t\t`,\n      [employeeId]\n    )\n    return result.rows[0] || null\n  }\n\n  /**\n   * 날짜 범위 겹침 확인\n   */\n  static isDateRangeOverlap(start1: Date, end1: Date, start2: Date, end2: Date): boolean {\n    return start1 <= end2 && start2 <= end1\n  }\n\n  /**\n   * 날짜 차이 계산 (월 단위)\n   */\n  static getMonthsDifference(startDate: Date, endDate: Date): number {\n    return (\n      (endDate.getFullYear() - startDate.getFullYear()) * 12 +\n      (endDate.getMonth() - startDate.getMonth()) +\n      1\n    )\n  }\n\n  /**\n   * 금액 차이 계산 (허용 오차 포함)\n   */\n  static isAmountWithinTolerance(\n    expected: number,\n    actual: number,\n    tolerance: number = 1000\n  ): boolean {\n    return Math.abs(expected - actual) <= tolerance\n  }\n\n  /**\n   * 전체 검증 결과 생성\n   */\n  static createOverallValidation(validationResults: unknown[]) {\n    const validItems = validationResults.filter(result => result.validation.isValid).length\n    const invalidItems = validationResults.filter(result => !result.validation.isValid).length\n\n    return {\n      isValid: invalidItems === 0,\n      totalItems: validationResults.length,\n      validItems,\n      invalidItems\n    }\n  }\n\n  /**\n   * 표준 검증 응답 생성\n   */\n  static createValidationResponse(\n    projectId: string,\n    projectTitle: string,\n    validationResults: unknown[],\n    overallValidation: any\n  ): ValidationResponse {\n    return {\n      success: true,\n      projectId,\n      projectTitle,\n      validationResults,\n      overallValidation,\n      generatedAt: new Date().toISOString()\n    }\n  }\n\n  /**\n   * 에러 응답 생성\n   */\n  static createErrorResponse(error: any, message: string = '검증 중 오류가 발생했습니다.') {\n    return {\n      success: false,\n      error: message,\n      details: error instanceof Error ? error.message : 'Unknown error'\n    }\n  }\n\n  /**\n   * 프로젝트 예산 업데이트\n   */\n  static async updateProjectBudget(budgetId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE project_budgets SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [budgetId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 프로젝트 예산 업데이트 실패:', error)\n      return false\n    }\n  }\n\n  /**\n   * 프로젝트 업데이트\n   */\n  static async updateProject(projectId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE projects SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [projectId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 프로젝트 업데이트 실패:', error)\n      return false\n    }\n  }\n\n  /**\n   * 프로젝트 멤버 업데이트\n   */\n  static async updateProjectMember(memberId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE project_members SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [memberId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 프로젝트 멤버 업데이트 실패:', error)\n      return false\n    }\n  }\n\n  /**\n   * 증빙 항목 업데이트\n   */\n  static async updateEvidenceItem(itemId: string, data: any): Promise<boolean> {\n    try {\n      const fields = Object.keys(data)\n        .map((key, index) => `${key} = $${index + 2}`)\n        .join(', ')\n      const values = Object.values(data)\n      const query = `UPDATE evidence_items SET ${fields} WHERE id = $1`\n      await ValidationUtils.query(query, [itemId, ...values])\n      return true\n    } catch (error) {\n      logger.error('❌ [ValidationUtils] 증빙 항목 업데이트 실패:', error)\n      return false\n    }\n  }\n}\n\n// 인건비 검증 로직\nexport class PersonnelCostValidator {\n  /**\n   * 참여연구원의 실제 인건비 계산\n   */\n  static calculateActualPersonnelCost(members: unknown[], budget: any): number {\n    const budgetStartDate = new Date(budget.start_date)\n    const budgetEndDate = new Date(budget.end_date)\n\n    const relevantMembers = members.filter(member => {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n      return ValidationUtils.isDateRangeOverlap(\n        memberStartDate,\n        memberEndDate,\n        budgetStartDate,\n        budgetEndDate\n      )\n    })\n\n    let totalCost = 0\n    relevantMembers.forEach(member => {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n\n      const actualStartDate = memberStartDate > budgetStartDate ? memberStartDate : budgetStartDate\n      const actualEndDate = memberEndDate < budgetEndDate ? memberEndDate : budgetEndDate\n\n      const months = ValidationUtils.getMonthsDifference(actualStartDate, actualEndDate)\n      const monthlyAmount = parseFloat(member.monthly_amount) || 0\n      const participationRate = parseFloat(member.participation_rate) || 0\n\n      const memberCost = monthlyAmount * months * (participationRate / 100)\n      totalCost += memberCost\n    })\n\n    return totalCost\n  }\n\n  /**\n   * 인건비 검증\n   */\n  static validatePersonnelCost(budget: any, actualCost: number): ValidationResult {\n    const budgetedCost = parseFloat(budget.personnel_cost) || 0\n    const isWithinTolerance = ValidationUtils.isAmountWithinTolerance(budgetedCost, actualCost)\n\n    if (isWithinTolerance) {\n      return ValidationUtils.createValidationResult(true, 'VALID', '인건비가 예산과 일치합니다.')\n    }\n\n    return ValidationUtils.createValidationResult(\n      false,\n      'PERSONNEL_COST_MISMATCH',\n      `인건비 불일치: 예산 ${budgetedCost.toLocaleString()}원 vs 실제 ${actualCost.toLocaleString()}원`,\n      [`예산: ${budgetedCost.toLocaleString()}원`, `실제: ${actualCost.toLocaleString()}원`],\n      { budgetedCost, actualCost, difference: Math.abs(budgetedCost - actualCost) }\n    )\n  }\n}\n\n// 재직 기간 검증 로직\nexport class EmploymentPeriodValidator {\n  /**\n   * 참여연구원 재직 기간 검증\n   */\n  static validateMemberEmploymentPeriod(member: any, project: any): ValidationResult {\n    const memberStartDate = new Date(member.start_date)\n    const memberEndDate = new Date(member.end_date)\n    const hireDate = member.hire_date ? new Date(member.hire_date) : null\n    const terminationDate = member.termination_date ? new Date(member.termination_date) : null\n    const projectStartDate = new Date(project.start_date)\n    const projectEndDate = new Date(project.end_date)\n\n    const issues: string[] = []\n\n    // 1. 직원 정보가 없는 경우\n    if (!member.first_name || !member.last_name) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYEE_NOT_FOUND',\n        '직원 정보를 찾을 수 없습니다.',\n        ['직원 정보 없음']\n      )\n    }\n\n    // 2. 퇴사한 직원인지 확인\n    if (member.status === 'terminated' && terminationDate) {\n      if (memberStartDate > terminationDate) {\n        issues.push(\n          `퇴사일: ${terminationDate.toLocaleDateString()}, 참여시작일: ${memberStartDate.toLocaleDateString()}`\n        )\n      }\n    }\n\n    // 3. 입사 전에 프로젝트에 참여했는지 확인\n    if (hireDate && memberStartDate < hireDate) {\n      issues.push(\n        `입사일: ${hireDate.toLocaleDateString()}, 참여시작일: ${memberStartDate.toLocaleDateString()}`\n      )\n    }\n\n    // 4. 현재 비활성 상태인 직원인지 확인\n    if (member.status === 'inactive') {\n      issues.push(`상태: ${member.status}`)\n    }\n\n    // 5. 프로젝트 기간과 재직 기간이 겹치는지 확인\n    if (hireDate && projectEndDate < hireDate) {\n      issues.push(\n        `프로젝트 종료: ${projectEndDate.toLocaleDateString()}, 입사일: ${hireDate.toLocaleDateString()}`\n      )\n    }\n\n    if (terminationDate && projectStartDate > terminationDate) {\n      issues.push(\n        `프로젝트 시작: ${projectStartDate.toLocaleDateString()}, 퇴사일: ${terminationDate.toLocaleDateString()}`\n      )\n    }\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYMENT_PERIOD_INVALID',\n        '재직 기간이 유효하지 않습니다.',\n        issues\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '재직 기간이 유효합니다.')\n  }\n\n  /**\n   * 증빙 항목 재직 기간 검증\n   */\n  static validateEvidenceEmploymentPeriod(evidence: any, employee: any): ValidationResult {\n    if (!employee) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYEE_NOT_FOUND',\n        '담당 직원을 찾을 수 없습니다.'\n      )\n    }\n\n    const dueDate = new Date(evidence.due_date)\n    const hireDate = employee.hire_date ? new Date(employee.hire_date) : null\n    const terminationDate = employee.termination_date ? new Date(employee.termination_date) : null\n\n    const issues: string[] = []\n\n    // 1. 퇴사한 직원인지 확인\n    if (employee.status === 'terminated' || terminationDate) {\n      if (terminationDate && dueDate > terminationDate) {\n        issues.push(\n          `퇴사일(${terminationDate.toLocaleDateString()}) 이후에 인건비가 집행되었습니다.`\n        )\n      }\n    }\n\n    // 2. 입사 전에 인건비가 집행되었는지 확인\n    if (hireDate && dueDate < hireDate) {\n      issues.push(`입사일(${hireDate.toLocaleDateString()}) 이전에 인건비가 집행되었습니다.`)\n    }\n\n    // 3. 현재 비활성 상태인 직원인지 확인\n    if (employee.status === 'inactive') {\n      issues.push('비활성 상태인 직원에게 인건비가 집행되었습니다.')\n    }\n\n    // 4. 프로젝트 기간과 재직 기간이 겹치는지 확인\n    const periodStartDate = new Date(evidence.period_start_date)\n    const periodEndDate = new Date(evidence.period_end_date)\n\n    if (hireDate && periodEndDate < hireDate) {\n      issues.push(\n        `프로젝트 기간(${periodStartDate.toLocaleDateString()} ~ ${periodEndDate.toLocaleDateString()}) 이후에 입사했습니다.`\n      )\n    }\n\n    if (terminationDate && periodStartDate > terminationDate) {\n      issues.push(\n        `프로젝트 기간(${periodStartDate.toLocaleDateString()} ~ ${periodEndDate.toLocaleDateString()}) 이전에 퇴사했습니다.`\n      )\n    }\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'EMPLOYMENT_PERIOD_INVALID',\n        '재직 기간이 유효하지 않습니다.',\n        issues\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '재직 기간이 유효합니다.')\n  }\n}\n\n// 참여율 검증 로직\nexport class ParticipationRateValidator {\n  /**\n   * 참여율 검증\n   */\n  static validateParticipationRate(members: unknown[]): ValidationResult {\n    const issues: string[] = []\n\n    // 1. 개별 참여율이 100%를 초과하는지 확인\n    members.forEach(member => {\n      const participationRate = parseFloat(member.participation_rate) || 0\n      if (participationRate > 100) {\n        issues.push(\n          `${member.first_name} ${member.last_name}: 참여율 ${participationRate}% (100% 초과)`\n        )\n      }\n    })\n\n    // 2. 동일 기간 내 참여율 합계가 100%를 초과하는지 확인\n    const periodGroups = new Map<string, number>()\n\n    members.forEach(member => {\n      const key = `${member.start_date}_${member.end_date}`\n      const currentTotal = periodGroups.get(key) || 0\n      const participationRate = parseFloat(member.participation_rate) || 0\n      periodGroups.set(key, currentTotal + participationRate)\n    })\n\n    periodGroups.forEach((total, period) => {\n      if (total > 100) {\n        issues.push(`기간 ${period}: 총 참여율 ${total}% (100% 초과)`)\n      }\n    })\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'PARTICIPATION_RATE_INVALID',\n        '참여율이 유효하지 않습니다.',\n        issues\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '참여율이 유효합니다.')\n  }\n}\n\n// 예산 일관성 검증 로직\nexport class BudgetConsistencyValidator {\n  /**\n   * 예산 일관성 검증\n   */\n  static validateBudgetConsistency(project: any, budgets: unknown[]): ValidationResult {\n    const totalBudgetFromBudgets = budgets.reduce((sum, budget) => {\n      return sum + (parseFloat(budget.total_budget) || 0)\n    }, 0)\n\n    const projectTotalBudget = parseFloat(project.budget_total) || 0\n\n    if (ValidationUtils.isAmountWithinTolerance(projectTotalBudget, totalBudgetFromBudgets)) {\n      return ValidationUtils.createValidationResult(true, 'VALID', '예산이 일관성 있습니다.')\n    }\n\n    return ValidationUtils.createValidationResult(\n      false,\n      'BUDGET_INCONSISTENCY',\n      `예산 일관성 문제: 프로젝트 총 예산 ${projectTotalBudget.toLocaleString()}원 vs 연차별 예산 합계 ${totalBudgetFromBudgets.toLocaleString()}원`,\n      [\n        `프로젝트 총 예산: ${projectTotalBudget.toLocaleString()}원`,\n        `연차별 예산 합계: ${totalBudgetFromBudgets.toLocaleString()}원`\n      ],\n      {\n        projectTotalBudget,\n        totalBudgetFromBudgets,\n        difference: Math.abs(projectTotalBudget - totalBudgetFromBudgets)\n      }\n    )\n  }\n}\n\n// 사용률 검증 로직\nexport class UsageRateValidator {\n  /**\n   * 사용률 검증\n   */\n  static validateUsageRate(budget: any, evidenceItems: unknown[]): ValidationResult {\n    const totalBudget = parseFloat(budget.total_budget) || 0\n    const spentAmount = parseFloat(budget.spent_amount) || 0\n    const overallUsageRate = totalBudget > 0 ? (spentAmount / totalBudget) * 100 : 0\n\n    const categories = ['인건비', '재료비', '연구활동비', '간접비']\n    const issues: string[] = []\n\n    categories.forEach(categoryName => {\n      const categoryEvidence = evidenceItems.filter(\n        item => item.period_number === budget.period_number && item.category_name === categoryName\n      )\n\n      const categorySpent = categoryEvidence.reduce(\n        (sum, item) => sum + (parseFloat(item.spent_amount) || 0),\n        0\n      )\n\n      let categoryBudget = 0\n      switch (categoryName) {\n        case '인건비':\n          categoryBudget = parseFloat(budget.personnel_cost) || 0\n          break\n        case '재료비':\n          categoryBudget = parseFloat(budget.research_material_cost) || 0\n          break\n        case '연구활동비':\n          categoryBudget = parseFloat(budget.research_activity_cost) || 0\n          break\n        case '간접비':\n          categoryBudget = parseFloat(budget.indirect_cost) || 0\n          break\n      }\n\n      const categoryUsageRate = categoryBudget > 0 ? (categorySpent / categoryBudget) * 100 : 0\n      const tolerance = 5 // 5% 허용 오차\n\n      if (Math.abs(categoryUsageRate - overallUsageRate) > tolerance) {\n        issues.push(\n          `${categoryName}: 전체 ${overallUsageRate.toFixed(1)}% vs ${categoryName} ${categoryUsageRate.toFixed(1)}%`\n        )\n      }\n    })\n\n    if (issues.length > 0) {\n      return ValidationUtils.createValidationResult(\n        false,\n        'USAGE_RATE_INCONSISTENCY',\n        '사용률이 일관성 없습니다.',\n        issues\n      )\n    }\n\n    return ValidationUtils.createValidationResult(true, 'VALID', '사용률이 일관성 있습니다.')\n  }\n}\n\nexport { pool }\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/+error.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/+layout.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/+page.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/auth/login/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[908,911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[908,911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'password_hash' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":51,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json, error } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { DatabaseService } from '$lib/database/connection'\nimport bcrypt from 'bcryptjs'\nimport jwt from 'jsonwebtoken'\nimport { config } from '$lib/utils/config'\nimport { logger } from '$lib/utils/logger'\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { email, password } = await request.json()\n\n    // Validate input\n    if (!email || !password) {\n      return error(400, 'Email and password are required')\n    }\n\n    // Get user from database\n    const user = await DatabaseService.getUserByEmail(email)\n    if (!user) {\n      return error(401, 'Invalid credentials')\n    }\n\n    // Check if user is active\n    if (!user.is_active) {\n      return error(401, 'Account is deactivated')\n    }\n\n    // Verify password\n    const isValidPassword = await bcrypt.compare(password, (user as any).password_hash)\n    if (!isValidPassword) {\n      return error(401, 'Invalid credentials')\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      {\n        userId: user.id,\n        email: user.email,\n        role: user.role\n      },\n      config.jwt.secret,\n      { expiresIn: config.jwt.expiresIn }\n    )\n\n    // Update last login\n    const { query } = await import('$lib/database/connection')\n    await query('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = $1', [user.id])\n\n    // Return user data (without password)\n    const { password_hash, ...userWithoutPassword } = user\n\n    return json({\n      success: true,\n      user: userWithoutPassword,\n      token\n    })\n  } catch (err) {\n    logger.error('Login error:', err)\n    return error(500, 'Internal server error')\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/companies/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/company/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[746,749],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[746,749],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3458,3461],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3458,3461],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport { query } from '$lib/database/connection.js'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// GET /api/company - 회사 정보 조회\nexport const GET: RequestHandler = async () => {\n  try {\n    const result = await query(`\n\t\t\tSELECT \n\t\t\t\tid, name, establishment_date, ceo_name, business_type,\n\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\tcreated_at, updated_at\n\t\t\tFROM companies \n\t\t\tORDER BY created_at DESC\n\t\t\tLIMIT 1\n\t\t`)\n\n    const company = result.rows.length > 0 ? result.rows[0] : null\n\n    return json({\n      success: true,\n      data: company,\n      message: company ? '회사 정보를 성공적으로 조회했습니다.' : '등록된 회사 정보가 없습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error fetching company:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '회사 정보 조회에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/company - 회사 정보 등록/수정\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name) {\n      return json(\n        {\n          success: false,\n          error: '회사명은 필수입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 기존 회사 정보가 있는지 확인\n    const existingResult = await query('SELECT id FROM companies LIMIT 1')\n    const existingCompany = existingResult.rows.length > 0\n\n    let result\n    if (existingCompany) {\n      // 기존 회사 정보 업데이트\n      result = await query(\n        `\n\t\t\t\tUPDATE companies SET\n\t\t\t\t\tname = $1,\n\t\t\t\t\testablishment_date = $2,\n\t\t\t\t\tceo_name = $3,\n\t\t\t\t\tbusiness_type = $4,\n\t\t\t\t\taddress = $5,\n\t\t\t\t\tphone = $6,\n\t\t\t\t\tfax = $7,\n\t\t\t\t\temail = $8,\n\t\t\t\t\twebsite = $9,\n\t\t\t\t\tregistration_number = $10,\n\t\t\t\t\tupdated_at = $11\n\t\t\t\tWHERE id = (SELECT id FROM companies LIMIT 1)\n\t\t\t\tRETURNING id, name, establishment_date, ceo_name, business_type,\n\t\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\t\tcreated_at, updated_at\n\t\t\t`,\n        [\n          data.name,\n          data.establishment_date || null,\n          data.ceo_name || null,\n          data.business_type || null,\n          data.address || null,\n          data.phone || null,\n          data.fax || null,\n          data.email || null,\n          data.website || null,\n          data.registration_number || null,\n          new Date()\n        ]\n      )\n    } else {\n      // 새 회사 정보 등록\n      result = await query(\n        `\n\t\t\t\tINSERT INTO companies (\n\t\t\t\t\tname, establishment_date, ceo_name, business_type,\n\t\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\t\tcreated_at, updated_at\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n\t\t\t\tRETURNING id, name, establishment_date, ceo_name, business_type,\n\t\t\t\t\taddress, phone, fax, email, website, registration_number,\n\t\t\t\t\tcreated_at, updated_at\n\t\t\t`,\n        [\n          data.name,\n          data.establishment_date || null,\n          data.ceo_name || null,\n          data.business_type || null,\n          data.address || null,\n          data.phone || null,\n          data.fax || null,\n          data.email || null,\n          data.website || null,\n          data.registration_number || null,\n          new Date(),\n          new Date()\n        ]\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: existingCompany\n        ? '회사 정보가 성공적으로 수정되었습니다.'\n        : '회사 정보가 성공적으로 등록되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error saving company:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '회사 정보 저장에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/add-job-title-field/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[885,888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[885,888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 직원 테이블에 직책 필드 추가\nexport const POST: RequestHandler = async () => {\n  try {\n    // 직책 필드가 이미 존재하는지 확인\n    const checkColumn = await query(`\n\t\t\tSELECT column_name \n\t\t\tFROM information_schema.columns \n\t\t\tWHERE table_name = 'employees' AND column_name = 'job_title_id'\n\t\t`)\n\n    if (checkColumn.rows.length === 0) {\n      // 직책 필드 추가\n      await query(`\n\t\t\t\tALTER TABLE employees \n\t\t\t\tADD COLUMN job_title_id UUID REFERENCES job_titles(id)\n\t\t\t`)\n\n      logger.log('job_title_id column added to employees table')\n    } else {\n      logger.log('job_title_id column already exists in employees table')\n    }\n\n    return json({\n      success: true,\n      message: '직책 필드가 성공적으로 추가되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error adding job_title_id field:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 필드 추가에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/company-setup/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2223,2226],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2223,2226],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport { query } from '$lib/database/connection.js'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nexport const POST: RequestHandler = async () => {\n  try {\n    // 기존 companies 테이블 삭제 후 새로 생성\n    await query('DROP TABLE IF EXISTS companies CASCADE')\n\n    // 새 companies 테이블 생성\n    await query(`\n\t\t\tCREATE TABLE companies (\n\t\t\t\tid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\t\t\t\tname VARCHAR(255) NOT NULL,\n\t\t\t\testablishment_date DATE,\n\t\t\t\tceo_name VARCHAR(100),\n\t\t\t\tbusiness_type VARCHAR(255),\n\t\t\t\taddress TEXT,\n\t\t\t\tphone VARCHAR(50),\n\t\t\t\tfax VARCHAR(50),\n\t\t\t\temail VARCHAR(255),\n\t\t\t\twebsite VARCHAR(255),\n\t\t\t\tregistration_number VARCHAR(50),\n\t\t\t\tcreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\t\t\t\tupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\t\t\t)\n\t\t`)\n\n    // 인덱스 생성\n    await query(`\n\t\t\tCREATE INDEX IF NOT EXISTS idx_companies_name ON companies(name);\n\t\t`)\n\n    // 기존 회사 정보가 있는지 확인\n    const existingResult = await query('SELECT id FROM companies WHERE name = $1', ['(주)비아'])\n\n    if (existingResult.rows.length > 0) {\n      // 기존 회사 정보 업데이트\n      await query(\n        `\n\t\t\t\tUPDATE companies SET\n\t\t\t\t\testablishment_date = $1,\n\t\t\t\t\tceo_name = $2,\n\t\t\t\t\tbusiness_type = $3,\n\t\t\t\t\taddress = $4,\n\t\t\t\t\tphone = $5,\n\t\t\t\t\tfax = $6,\n\t\t\t\t\tupdated_at = $7\n\t\t\t\tWHERE name = $8\n\t\t\t`,\n        [\n          '2019-03-10',\n          '박기선',\n          '소프트웨어 개발 및 공급업',\n          '전라북도 전주시 덕진구 유상로67, 전주혁신창업허브 513호',\n          '063-211-0814',\n          '063-211-0813',\n          new Date(),\n          '(주)비아'\n        ]\n      )\n    } else {\n      // 새 회사 정보 삽입\n      await query(\n        `\n\t\t\t\tINSERT INTO companies (\n\t\t\t\t\tname, establishment_date, ceo_name, business_type, \n\t\t\t\t\taddress, phone, fax, created_at, updated_at\n\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n\t\t\t`,\n        [\n          '(주)비아',\n          '2019-03-10',\n          '박기선',\n          '소프트웨어 개발 및 공급업',\n          '전라북도 전주시 덕진구 유상로67, 전주혁신창업허브 513호',\n          '063-211-0814',\n          '063-211-0813',\n          new Date(),\n          new Date()\n        ]\n      )\n    }\n\n    return json({\n      success: true,\n      message: '회사 정보 테이블이 생성되고 기본 데이터가 등록되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error setting up company table:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '회사 정보 테이블 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/employees/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/executives-setup/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3276,3279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3276,3279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 이사 명부 및 직책 체계 테이블 생성\nexport const POST: RequestHandler = async () => {\n  try {\n    // Job Titles 테이블 생성\n    await query(`\n\t\t\tCREATE TABLE IF NOT EXISTS job_titles (\n\t\t\t\tid UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n\t\t\t\tname VARCHAR(100) UNIQUE NOT NULL,\n\t\t\t\tlevel INTEGER NOT NULL,\n\t\t\t\tcategory VARCHAR(50) NOT NULL,\n\t\t\t\tdescription TEXT,\n\t\t\t\tis_active BOOLEAN DEFAULT true,\n\t\t\t\tcreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\t\t\t\tupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\t\t\t)\n\t\t`)\n\n    // Executives 테이블 생성\n    await query(`\n\t\t\tCREATE TABLE IF NOT EXISTS executives (\n\t\t\t\tid UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n\t\t\t\texecutive_id VARCHAR(50) UNIQUE NOT NULL,\n\t\t\t\tfirst_name VARCHAR(100) NOT NULL,\n\t\t\t\tlast_name VARCHAR(100) NOT NULL,\n\t\t\t\temail VARCHAR(255) UNIQUE NOT NULL,\n\t\t\t\tphone VARCHAR(50),\n\t\t\t\tjob_title_id UUID REFERENCES job_titles(id),\n\t\t\t\tdepartment VARCHAR(100),\n\t\t\t\tappointment_date DATE,\n\t\t\t\tterm_end_date DATE,\n\t\t\t\tstatus VARCHAR(50) DEFAULT 'active',\n\t\t\t\tbio TEXT,\n\t\t\t\tprofile_image_url VARCHAR(500),\n\t\t\t\tcreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\t\t\t\tupdated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n\t\t\t)\n\t\t`)\n\n    // 인덱스 생성\n    await query(`CREATE INDEX IF NOT EXISTS idx_job_titles_level ON job_titles(level)`)\n    await query(`CREATE INDEX IF NOT EXISTS idx_job_titles_category ON job_titles(category)`)\n    await query(\n      `CREATE INDEX IF NOT EXISTS idx_executives_executive_id ON executives(executive_id)`\n    )\n    await query(\n      `CREATE INDEX IF NOT EXISTS idx_executives_job_title_id ON executives(job_title_id)`\n    )\n\n    // 기본 직책 데이터 삽입\n    await query(`\n\t\t\tINSERT INTO job_titles (name, level, category, description) VALUES\n\t\t\t('CEO', 1, 'executive', 'Chief Executive Officer - 대표이사'),\n\t\t\t('CTO', 1, 'executive', 'Chief Technology Officer - 연구소장, 기술이사'),\n\t\t\t('CFO', 1, 'executive', 'Chief Financial Officer - 상무이사'),\n\t\t\t('Director', 2, 'management', 'Director - 이사'),\n\t\t\t('Managing Director', 2, 'management', 'Managing Director - 상무'),\n\t\t\t('Team Lead', 3, 'specialist', 'Team Lead - 팀장'),\n\t\t\t('Senior Manager', 3, 'specialist', 'Senior Manager - 부장'),\n\t\t\t('Manager', 3, 'specialist', 'Manager - 과장')\n\t\t\tON CONFLICT (name) DO NOTHING\n\t\t`)\n\n    // C-Level 임원진 데이터 삽입\n    await query(`\n\t\t\tINSERT INTO executives (executive_id, first_name, last_name, email, phone, job_title_id, department, appointment_date, status, bio) VALUES\n\t\t\t('EXE001', '박기선', '', 'ceo@viahub.com', '010-0001-0001', \n\t\t\t (SELECT id FROM job_titles WHERE name = 'CEO'), '경영진', '2020-01-01', 'active', \n\t\t\t '회사의 비전과 전략을 수립하고 이끌어가는 대표이사입니다.'),\n\t\t\t('EXE002', '최현민', '', 'cto@viahub.com', '010-0002-0002', \n\t\t\t (SELECT id FROM job_titles WHERE name = 'CTO'), '연구개발', '2020-01-01', 'active', \n\t\t\t '기술 혁신과 연구개발을 총괄하는 연구소장이자 기술이사입니다.'),\n\t\t\t('EXE003', '오현종', '', 'cfo@viahub.com', '010-0003-0003', \n\t\t\t (SELECT id FROM job_titles WHERE name = 'CFO'), '재무', '2020-01-01', 'active', \n\t\t\t '재무 관리와 경영 지원을 담당하는 상무이사입니다.')\n\t\t\tON CONFLICT (executive_id) DO NOTHING\n\t\t`)\n\n    return json({\n      success: true,\n      message: '이사 명부 및 직책 체계 테이블이 성공적으로 생성되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error setting up executives tables:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '테이블 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/projects/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/rd-projects/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/setup/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1785,1788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1785,1788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":68,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":68,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2049,2052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2049,2052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 데이터베이스 테이블 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n    const { tables } = data\n\n    const results = []\n\n    for (const table of tables) {\n      try {\n        if (table === 'departments') {\n          // 부서 테이블 생성\n          await query(`\n\t\t\t\t\t\tCREATE TABLE IF NOT EXISTS departments (\n\t\t\t\t\t\t\tid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\t\t\t\t\t\t\tname VARCHAR(100) NOT NULL UNIQUE,\n\t\t\t\t\t\t\tdescription TEXT,\n\t\t\t\t\t\t\tstatus VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),\n\t\t\t\t\t\t\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\t\t\t\t\t\t\tupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n\t\t\t\t\t\t)\n\t\t\t\t\t`)\n          results.push({\n            table: 'departments',\n            success: true,\n            message: '부서 테이블이 생성되었습니다.'\n          })\n        } else if (table === 'positions') {\n          // 직급 테이블 생성\n          await query(`\n\t\t\t\t\t\tCREATE TABLE IF NOT EXISTS positions (\n\t\t\t\t\t\t\tid UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n\t\t\t\t\t\t\tname VARCHAR(100) NOT NULL,\n\t\t\t\t\t\t\tdescription TEXT,\n\t\t\t\t\t\t\tdepartment VARCHAR(100) NOT NULL,\n\t\t\t\t\t\t\tlevel INTEGER DEFAULT 1 CHECK (level >= 1 AND level <= 10),\n\t\t\t\t\t\t\tstatus VARCHAR(20) DEFAULT 'active' CHECK (status IN ('active', 'inactive')),\n\t\t\t\t\t\t\tcreated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\t\t\t\t\t\t\tupdated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n\t\t\t\t\t\t\tUNIQUE(name, department)\n\t\t\t\t\t\t)\n\t\t\t\t\t`)\n          results.push({\n            table: 'positions',\n            success: true,\n            message: '직급 테이블이 생성되었습니다.'\n          })\n        }\n      } catch (error: any) {\n        results.push({\n          table,\n          success: false,\n          message: `테이블 생성 실패: ${error.message}`\n        })\n      }\n    }\n\n    return json({\n      success: true,\n      results,\n      message: '데이터베이스 설정이 완료되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error setting up database:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '데이터베이스 설정에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/database/users/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/departments/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[832,835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[832,835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2262,2265],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2262,2265],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 부서 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n\n    let whereClause = ''\n    if (status === 'active') {\n      whereClause = 'WHERE status = $1'\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, status, max_employees, created_at, updated_at\n\t\t\tFROM departments\n\t\t\t${whereClause}\n\t\t\tORDER BY name ASC\n\t\t`,\n      status === 'all' ? [] : [status]\n    )\n\n    return json({\n      success: true,\n      data: result.rows\n    })\n  } catch (error: any) {\n    logger.error('Error fetching departments:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 목록을 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 새 부서 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서명은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 부서명 검증\n    const existingDept = await query('SELECT id FROM departments WHERE LOWER(name) = LOWER($1)', [\n      data.name.trim()\n    ])\n\n    if (existingDept.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 부서명입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO departments (name, description, status, max_employees, created_at, updated_at)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6)\n\t\t\tRETURNING id, name, description, status, max_employees, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.status || 'active',\n        data.to || 0,\n        new Date(),\n        new Date()\n      ]\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '부서가 성공적으로 생성되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error creating department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/departments/[id]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[708,711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[708,711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2375,2378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2375,2378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":194,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":194,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4227,4230],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4227,4230],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 부서 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, status, max_employees, created_at, updated_at\n\t\t\tFROM departments\n\t\t\tWHERE id = $1\n\t\t`,\n      [params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '부서를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0]\n    })\n  } catch (error: any) {\n    logger.error('Error fetching department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 정보를 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 부서 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서명은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 부서명 검증 (자기 자신 제외)\n    const existingDept = await query(\n      'SELECT id FROM departments WHERE LOWER(name) = LOWER($1) AND id != $2',\n      [data.name.trim(), params.id]\n    )\n\n    if (existingDept.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 부서명입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE departments SET\n\t\t\t\tname = $2,\n\t\t\t\tdescription = $3,\n\t\t\t\tstatus = $4,\n\t\t\t\tmax_employees = $5,\n\t\t\t\tupdated_at = $6\n\t\t\tWHERE id = $1\n\t\t\tRETURNING id, name, description, status, max_employees, created_at, updated_at\n\t\t`,\n      [\n        params.id,\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.status || 'active',\n        data.to || 0,\n        new Date()\n      ]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '부서를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '부서 정보가 성공적으로 수정되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error updating department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 정보 수정에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 부서 삭제\nexport const DELETE: RequestHandler = async ({ params, url }) => {\n  try {\n    const searchParams = url.searchParams\n    const hardDelete = searchParams.get('hard') === 'true'\n\n    if (hardDelete) {\n      // 하드 삭제: 부서를 사용하는 직원이 있는지 확인\n      const employeesInDept = await query(\n        'SELECT COUNT(*) as count FROM employees WHERE department = (SELECT name FROM departments WHERE id = $1)',\n        [params.id]\n      )\n\n      if (parseInt(employeesInDept.rows[0].count) > 0) {\n        return json(\n          {\n            success: false,\n            error: '해당 부서에 소속된 직원이 있어 삭제할 수 없습니다.'\n          },\n          { status: 400 }\n        )\n      }\n\n      // 하드 삭제 실행\n      const result = await query('DELETE FROM departments WHERE id = $1 RETURNING id, name', [\n        params.id\n      ])\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '부서를 찾을 수 없습니다.'\n          },\n          { status: 404 }\n        )\n      }\n\n      return json({\n        success: true,\n        message: '부서가 완전히 삭제되었습니다.'\n      })\n    } else {\n      // 소프트 삭제: 상태를 'inactive'로 변경\n      const result = await query(\n        `\n\t\t\t\tUPDATE departments SET\n\t\t\t\t\tstatus = 'inactive',\n\t\t\t\t\tupdated_at = $2\n\t\t\t\tWHERE id = $1\n\t\t\t\tRETURNING id, name, status\n\t\t\t`,\n        [params.id, new Date()]\n      )\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '부서를 찾을 수 없습니다.'\n          },\n          { status: 404 }\n        )\n      }\n\n      return json({\n        success: true,\n        message: '부서가 비활성화되었습니다.'\n      })\n    }\n  } catch (error: any) {\n    logger.error('Error deleting department:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '부서 삭제에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/[id]/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/migrate-executives/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3047,3050],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3047,3050],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// 이사급 직원들을 이사 명부로 이관하고 직원 명부에서 제외\nexport const POST: RequestHandler = async () => {\n  try {\n    // 이사급 직원들을 찾기 (대표, 이사, 상무 등)\n    const executivePositions = [\n      '대표',\n      '이사',\n      '상무',\n      '대표이사',\n      '연구소장',\n      '기술이사',\n      '상무이사'\n    ]\n\n    const executiveEmployees = await query(\n      `\n\t\t\tSELECT * FROM employees \n\t\t\tWHERE position IN (${executivePositions.map((_, i) => `$${i + 1}`).join(', ')})\n\t\t\tAND status = 'active'\n\t\t`,\n      executivePositions\n    )\n\n    // 임원 직원 마이그레이션 시작\n\n    const migratedExecutives = []\n\n    for (const employee of executiveEmployees.rows) {\n      // 직책 매핑\n      let jobTitleName = 'CEO' // 기본값\n      if (employee.position.includes('대표')) {\n        jobTitleName = 'CEO'\n      } else if (employee.position.includes('연구소장') || employee.position.includes('기술이사')) {\n        jobTitleName = 'CTO'\n      } else if (employee.position.includes('상무')) {\n        jobTitleName = 'CFO'\n      } else if (employee.position.includes('이사')) {\n        jobTitleName = 'Director'\n      }\n\n      // 해당 직책 ID 찾기\n      const jobTitleResult = await query('SELECT id FROM job_titles WHERE name = $1', [\n        jobTitleName\n      ])\n\n      if (jobTitleResult.rows.length === 0) {\n        // 직책을 찾을 수 없음, 건너뛰기\n        continue\n      }\n\n      const jobTitleId = jobTitleResult.rows[0].id\n\n      // Executive ID 생성\n      const execIdResult = await query('SELECT COUNT(*) as count FROM executives')\n      const execCount = parseInt(execIdResult.rows[0].count) + 1\n      const executiveId = `EXE${execCount.toString().padStart(3, '0')}`\n\n      // 이사 명부에 추가\n      const executiveResult = await query(\n        `\n\t\t\t\tINSERT INTO executives (\n\t\t\t\t\texecutive_id, first_name, last_name, email, phone, job_title_id, \n\t\t\t\t\tdepartment, appointment_date, status, bio, created_at, updated_at\n\t\t\t\t)\n\t\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)\n\t\t\t\tRETURNING id, executive_id, first_name, last_name, email, job_title_id\n\t\t\t`,\n        [\n          executiveId,\n          employee.first_name,\n          employee.last_name,\n          employee.email,\n          employee.phone,\n          jobTitleId,\n          employee.department,\n          employee.hire_date,\n          'active',\n          `${employee.position}로 임명된 임원진입니다.`,\n          new Date(),\n          new Date()\n        ]\n      )\n\n      migratedExecutives.push(executiveResult.rows[0])\n\n      // 직원 명부에서 비활성화 (완전 삭제하지 않고 상태만 변경)\n      await query(\n        `\n\t\t\t\tUPDATE employees SET\n\t\t\t\t\tstatus = 'inactive',\n\t\t\t\t\tupdated_at = $1\n\t\t\t\tWHERE id = $2\n\t\t\t`,\n        [new Date(), employee.id]\n      )\n\n      // 임원 테이블로 마이그레이션 완료\n    }\n\n    return json({\n      success: true,\n      message: `${migratedExecutives.length}명의 이사급 직원이 이사 명부로 이관되었습니다.`,\n      data: {\n        migratedCount: migratedExecutives.length,\n        migratedExecutives: migratedExecutives\n      }\n    })\n  } catch (error: any) {\n    logger.error('Error migrating executives:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사급 직원 이관에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/employees/upload/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":45,"column":38,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1437,1440],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1437,1440],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":91,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":91,"endColumn":45},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2725,2728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2725,2728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3090,3093],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3090,3093],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":118,"column":25,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":118,"endColumn":86},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":133,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":133,"endColumn":77},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\+.","line":139,"column":35,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":139,"endColumn":36,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4156,4157],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4156,4156],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\(.","line":139,"column":37,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":139,"endColumn":38,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4158,4159],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4158,4158],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-useless-escape","severity":2,"message":"Unnecessary escape character: \\).","line":139,"column":39,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":139,"endColumn":40,"suggestions":[{"messageId":"removeEscape","fix":{"range":[4160,4161],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[4160,4160],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":141,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":141,"endColumn":79},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":150,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":150,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":160,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":160,"endColumn":77}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection.js'\nimport { formatDateForDisplay, getCurrentUTC, isValidDate, toUTC } from '$lib/utils/date-handler'\nimport { json } from '@sveltejs/kit'\nimport * as ExcelJS from 'exceljs'\nimport { logger } from '$lib/utils/logger'\n\nexport async function POST({ request }) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n\n    if (!file) {\n      return json({ error: '파일이 선택되지 않았습니다.' }, { status: 400 })\n    }\n\n    // 파일 확장자 확인\n    const fileName = file.name.toLowerCase()\n    const isExcel = fileName.endsWith('.xlsx') || fileName.endsWith('.xls')\n    const isCSV = fileName.endsWith('.csv')\n\n    let data: unknown[] = []\n    let headers: string[] = []\n\n    if (isExcel) {\n      // Excel 파일 파싱\n      const buffer = await file.arrayBuffer()\n      const workbook = new ExcelJS.Workbook()\n      await workbook.xlsx.load(buffer)\n\n      const worksheet = workbook.worksheets[0]\n      if (!worksheet) {\n        return json({ error: 'Excel 파일에 워크시트가 없습니다.' }, { status: 400 })\n      }\n\n      const rows = worksheet.getRows()\n      if (!rows || rows.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // 헤더 추출 (첫 번째 행)\n      headers = rows[0].values.slice(1) as string[] // ExcelJS는 1-based indexing\n      // Excel 헤더 파싱 완료\n\n      // 데이터 추출\n      data = rows.slice(1).map((row, index) => {\n        const rowData: any = {}\n        const rowValues = row.values.slice(1) as unknown[] // ExcelJS는 1-based indexing\n        headers.forEach((header, headerIndex) => {\n          rowData[header] = rowValues[headerIndex] || ''\n        })\n        // Excel 행 파싱 완료\n        return rowData\n      })\n    } else if (isCSV) {\n      // CSV 파일 파싱\n      const text = await file.text()\n      const lines = text.split('\\n').filter(line => line.trim())\n\n      if (lines.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // CSV 파싱 함수\n      function parseCSVLine(line: string): string[] {\n        const result: string[] = []\n        let current = ''\n        let inQuotes = false\n\n        for (let i = 0; i < line.length; i++) {\n          const char = line[i]\n\n          if (char === '\"') {\n            inQuotes = !inQuotes\n          } else if (char === ',' && !inQuotes) {\n            result.push(current.trim())\n            current = ''\n          } else {\n            current += char\n          }\n        }\n\n        result.push(current.trim())\n        return result\n      }\n\n      // 헤더 파싱\n      headers = parseCSVLine(lines[0])\n      // CSV 헤더 파싱 완료\n\n      // 데이터 파싱\n      data = lines.slice(1).map((line, index) => {\n        const values = parseCSVLine(line)\n        const row: any = {}\n        headers.forEach((header, headerIndex) => {\n          row[header] = values[headerIndex] || ''\n        })\n        // CSV 행 파싱 완료\n        return row\n      })\n    } else {\n      return json(\n        { error: '지원하지 않는 파일 형식입니다. CSV 또는 Excel 파일을 업로드해주세요.' },\n        { status: 400 }\n      )\n    }\n\n    // 데이터 검증 및 변환\n    const employees = data.map((row: any, index: number) => {\n      const rowNumber = index + 2 // 헤더 행을 고려하여 +2\n\n      // 필수 필드 검증 (새로운 템플릿 형식)\n      const requiredFields = ['성', '이름', '이메일', '부서', '직급', '급여']\n      const missingFields = requiredFields.filter(\n        field => !row[field] || String(row[field]).trim() === ''\n      )\n\n      if (missingFields.length > 0) {\n        throw new Error(`행 ${rowNumber}: 필수 필드가 누락되었습니다: ${missingFields.join(', ')}`)\n      }\n\n      // 성과 이름 분리 검증\n      const lastName = String(row['성']).trim()\n      const firstName = String(row['이름']).trim()\n\n      if (!lastName || !firstName) {\n        throw new Error(`행 ${rowNumber}: 성과 이름은 반드시 분리되어 입력되어야 합니다.`)\n      }\n\n      // 이메일 형식 검증 (있는 경우)\n      if (row['이메일'] && row['이메일'].trim() !== '') {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n        if (!emailRegex.test(row['이메일'].trim())) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 이메일 형식입니다: ${row['이메일']}`)\n        }\n      }\n\n      // 전화번호 형식 검증 (있는 경우)\n      if (row['전화번호'] && row['전화번호'].trim() !== '') {\n        const phoneRegex = /^[\\d\\-\\+\\(\\)\\s]+$/\n        if (!phoneRegex.test(row['전화번호'].trim())) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 전화번호 형식입니다: ${row['전화번호']}`)\n        }\n      }\n\n      // 급여 검증\n      let salary = 0\n      if (row['급여'] && String(row['급여']).trim() !== '') {\n        salary = parseFloat(String(row['급여']))\n        if (isNaN(salary) || salary < 0) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 급여 형식입니다: ${row['급여']}`)\n        }\n      }\n\n      // 입사일 검증\n      let hireDate = new Date()\n      if (row['입사일'] && String(row['입사일']).trim() !== '') {\n        const hireDateValue = row['입사일']\n\n        if (!isValidDate(hireDateValue)) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 입사일 형식입니다: ${row['입사일']}`)\n        }\n\n        hireDate = new Date(toUTC(hireDateValue))\n      }\n\n      // 상태 검증\n      const validStatuses = ['active', 'inactive', 'on_leave']\n      const status = row['상태'] || 'active'\n      if (!validStatuses.includes(status)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 상태입니다: ${status}. 허용된 값: ${validStatuses.join(', ')}`\n        )\n      }\n\n      // 미들네임 처리 (선택사항)\n      const middleName = row['미들네임'] ? String(row['미들네임']).trim() : ''\n\n      // employee_id 생성 (V00001 형식)\n      // 업로드 시에는 임시로 인덱스 기반 생성, 실제 저장 시에는 순차적으로 할당\n      const tempId = rowNumber // 행 번호를 임시 ID로 사용\n      const employeeId = `V${tempId.toString().padStart(5, '0')}`\n\n      return {\n        employee_id: employeeId,\n        first_name: firstName,\n        last_name: lastName,\n        middle_name: middleName,\n        email: email,\n        phone: row['전화번호'] ? String(row['전화번호']).trim() : '',\n        department: String(row['부서']).trim(),\n        position: String(row['직급']).trim(),\n        salary: salary,\n        hire_date: formatDateForDisplay(toUTC(hireDate), 'ISO'),\n        status: status,\n        employment_type: row['고용형태'] || 'full-time',\n        created_at: getCurrentUTC(),\n        updated_at: getCurrentUTC()\n      }\n    })\n\n    // 데이터베이스에 저장\n    let successCount = 0\n\n    for (const employee of employees) {\n      try {\n        // 직원 데이터 저장 시도\n\n        // 새로운 사번 생성 (기존 4자리 숫자 규칙 유지)\n        const countResult = await query(`\n\t\t\t\t\tSELECT MAX(CAST(employee_id AS INTEGER)) as max_id \n\t\t\t\t\tFROM employees \n\t\t\t\t\tWHERE employee_id ~ '^[0-9]+$' AND LENGTH(employee_id) <= 4\n\t\t\t\t`)\n        const maxId = countResult.rows[0]?.max_id || 1000\n        const nextId = maxId + 1\n        const newEmployeeId = nextId.toString()\n\n        // UPSERT: 이메일이 존재하면 UPDATE, 없으면 INSERT\n        await query(\n          `\n\t\t\t\t\tINSERT INTO employees (\n\t\t\t\t\t\temployee_id, first_name, last_name, middle_name, email, phone, \n\t\t\t\t\t\tdepartment, position, salary, hire_date, status, \n\t\t\t\t\t\temployment_type, created_at, updated_at\n\t\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n\t\t\t\t\tON CONFLICT (email) \n\t\t\t\t\tDO UPDATE SET\n\t\t\t\t\t\tfirst_name = EXCLUDED.first_name,\n\t\t\t\t\t\tlast_name = EXCLUDED.last_name,\n\t\t\t\t\t\tmiddle_name = EXCLUDED.middle_name,\n\t\t\t\t\t\tphone = EXCLUDED.phone,\n\t\t\t\t\t\tdepartment = EXCLUDED.department,\n\t\t\t\t\t\tposition = EXCLUDED.position,\n\t\t\t\t\t\tsalary = EXCLUDED.salary,\n\t\t\t\t\t\thire_date = EXCLUDED.hire_date,\n\t\t\t\t\t\tstatus = EXCLUDED.status,\n\t\t\t\t\t\temployment_type = EXCLUDED.employment_type,\n\t\t\t\t\t\tupdated_at = EXCLUDED.updated_at\n\t\t\t\t`,\n          [\n            newEmployeeId,\n            employee.first_name,\n            employee.last_name,\n            employee.middle_name,\n            employee.email,\n            employee.phone,\n            employee.department,\n            employee.position,\n            employee.salary,\n            employee.hire_date,\n            employee.status,\n            employee.employment_type,\n            employee.created_at,\n            employee.updated_at\n          ]\n        )\n        // 직원 저장/업데이트 성공\n        successCount++\n      } catch (error) {\n        logger.error('직원 저장 실패:', error)\n        logger.error('직원 데이터:', employee)\n      }\n    }\n\n    return json({\n      success: true,\n      count: successCount,\n      total: employees.length,\n      message: `${successCount}명의 직원이 성공적으로 업로드되었습니다.`\n    })\n  } catch (error) {\n    logger.error('업로드 에러:', error)\n    return json(\n      {\n        error: error instanceof Error ? error.message : '업로드 중 오류가 발생했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/executives/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1451,1454],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1451,1454],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":153,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4031,4034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4031,4034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 이사 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n    const department = searchParams.get('department')\n\n    let whereClause = ''\n    const params: unknown[] = []\n\n    if (status === 'active') {\n      whereClause = 'WHERE e.status = $1'\n      params.push(status)\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    if (department) {\n      if (whereClause) {\n        whereClause += ' AND e.department = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE e.department = $1'\n      }\n      params.push(department)\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id, e.executive_id, e.first_name, e.last_name, e.email, e.phone,\n\t\t\t\te.department, e.appointment_date, e.term_end_date, e.status, e.bio, e.profile_image_url,\n\t\t\t\te.created_at, e.updated_at,\n\t\t\t\tjt.name as job_title_name, jt.level as job_title_level, jt.category as job_title_category\n\t\t\tFROM executives e\n\t\t\tLEFT JOIN job_titles jt ON e.job_title_id = jt.id\n\t\t\t${whereClause}\n\t\t\tORDER BY jt.level ASC, e.appointment_date DESC\n\t\t`,\n      params\n    )\n\n    return json({\n      success: true,\n      data: result.rows\n    })\n  } catch (error: any) {\n    logger.error('Error fetching executives:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 목록을 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 새 이사 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.first_name || data.first_name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이름은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.email || data.email.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이메일은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.job_title_id) {\n      return json(\n        {\n          success: false,\n          error: '직책은 필수 선택 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 이메일 중복 검증\n    const existingExec = await query('SELECT id FROM executives WHERE LOWER(email) = LOWER($1)', [\n      data.email.trim()\n    ])\n\n    if (existingExec.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 이메일입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // Executive ID 생성\n    const execIdResult = await query('SELECT COUNT(*) as count FROM executives')\n    const execCount = parseInt(execIdResult.rows[0].count) + 1\n    const executiveId = `EXE${execCount.toString().padStart(3, '0')}`\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO executives (\n\t\t\t\texecutive_id, first_name, last_name, email, phone, job_title_id, \n\t\t\t\tdepartment, appointment_date, term_end_date, status, bio, profile_image_url,\n\t\t\t\tcreated_at, updated_at\n\t\t\t)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)\n\t\t\tRETURNING id, executive_id, first_name, last_name, email, phone, department, \n\t\t\t          appointment_date, term_end_date, status, bio, profile_image_url, created_at, updated_at\n\t\t`,\n      [\n        executiveId,\n        data.first_name.trim(),\n        data.last_name?.trim() || '',\n        data.email.trim(),\n        data.phone?.trim() || '',\n        data.job_title_id,\n        data.department?.trim() || '',\n        data.appointment_date || null,\n        data.term_end_date || null,\n        data.status || 'active',\n        data.bio?.trim() || '',\n        data.profile_image_url?.trim() || '',\n        new Date(),\n        new Date()\n      ]\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '이사가 성공적으로 생성되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error creating executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/executives/[id]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[986,989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[986,989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":152,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":152,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3539,3542],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3539,3542],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":192,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":192,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4323,4326],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4323,4326],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 이사 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id, e.executive_id, e.first_name, e.last_name, e.email, e.phone,\n\t\t\t\te.department, e.appointment_date, e.term_end_date, e.status, e.bio, e.profile_image_url,\n\t\t\t\te.created_at, e.updated_at,\n\t\t\t\tjt.name as job_title_name, jt.level as job_title_level, jt.category as job_title_category\n\t\t\tFROM executives e\n\t\t\tLEFT JOIN job_titles jt ON e.job_title_id = jt.id\n\t\t\tWHERE e.id = $1\n\t\t`,\n      [params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '이사를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0]\n    })\n  } catch (error: any) {\n    logger.error('Error fetching executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 정보를 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 이사 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.first_name || data.first_name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이름은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.email || data.email.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '이메일은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.job_title_id) {\n      return json(\n        {\n          success: false,\n          error: '직책은 필수 선택 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 이메일 중복 검증 (자신 제외)\n    const existingExec = await query(\n      'SELECT id FROM executives WHERE LOWER(email) = LOWER($1) AND id != $2',\n      [data.email.trim(), params.id]\n    )\n\n    if (existingExec.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 이메일입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE executives SET\n\t\t\t\tfirst_name = $1,\n\t\t\t\tlast_name = $2,\n\t\t\t\temail = $3,\n\t\t\t\tphone = $4,\n\t\t\t\tjob_title_id = $5,\n\t\t\t\tdepartment = $6,\n\t\t\t\tappointment_date = $7,\n\t\t\t\tterm_end_date = $8,\n\t\t\t\tstatus = $9,\n\t\t\t\tbio = $10,\n\t\t\t\tprofile_image_url = $11,\n\t\t\t\tupdated_at = $12\n\t\t\tWHERE id = $13\n\t\t\tRETURNING id, executive_id, first_name, last_name, email, phone, department, \n\t\t\t          appointment_date, term_end_date, status, bio, profile_image_url, created_at, updated_at\n\t\t`,\n      [\n        data.first_name.trim(),\n        data.last_name?.trim() || '',\n        data.email.trim(),\n        data.phone?.trim() || '',\n        data.job_title_id,\n        data.department?.trim() || '',\n        data.appointment_date || null,\n        data.term_end_date || null,\n        data.status || 'active',\n        data.bio?.trim() || '',\n        data.profile_image_url?.trim() || '',\n        new Date(),\n        params.id\n      ]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '이사를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '이사 정보가 성공적으로 수정되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error updating executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 정보 수정에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 이사 삭제 (비활성화)\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tUPDATE executives SET\n\t\t\t\tstatus = 'inactive',\n\t\t\t\tupdated_at = $1\n\t\t\tWHERE id = $2\n\t\t\tRETURNING id, executive_id, first_name, last_name\n\t\t`,\n      [new Date(), params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '이사를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      message: '이사가 비활성화되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error deleting executive:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '이사 삭제에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/expenses/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/hr/employees/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/job-titles/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1398,1401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1398,1401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3277,3280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3277,3280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 직책 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n    const category = searchParams.get('category')\n    const level = searchParams.get('level')\n\n    let whereClause = ''\n    const params: unknown[] = []\n\n    if (status === 'active') {\n      whereClause = 'WHERE is_active = $1'\n      params.push(true)\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    if (category) {\n      if (whereClause) {\n        whereClause += ' AND category = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE category = $1'\n      }\n      params.push(category)\n    }\n\n    if (level) {\n      if (whereClause) {\n        whereClause += ' AND level = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE level = $1'\n      }\n      params.push(parseInt(level))\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT id, name, level, category, description, is_active, created_at, updated_at\n\t\t\tFROM job_titles\n\t\t\t${whereClause}\n\t\t\tORDER BY level ASC, name ASC\n\t\t`,\n      params\n    )\n\n    return json({\n      success: true,\n      data: result.rows\n    })\n  } catch (error: any) {\n    logger.error('Error fetching job titles:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 목록을 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 새 직책 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직책명은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.level || data.level < 1 || data.level > 10) {\n      return json(\n        {\n          success: false,\n          error: '레벨은 1-10 사이의 값이어야 합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.category || data.category.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '카테고리는 필수 선택 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 직책명 검증\n    const existingTitle = await query('SELECT id FROM job_titles WHERE LOWER(name) = LOWER($1)', [\n      data.name.trim()\n    ])\n\n    if (existingTitle.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 직책명입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO job_titles (name, level, category, description, is_active, created_at, updated_at)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t\t\tRETURNING id, name, level, category, description, is_active, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.level,\n        data.category.trim(),\n        data.description?.trim() || '',\n        data.is_active !== false,\n        new Date(),\n        new Date()\n      ]\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직책이 성공적으로 생성되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error creating job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/job-titles/[id]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[712,715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[712,715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2830,2833],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2830,2833],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":190,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":190,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4000,4003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4000,4003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 직책 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT id, name, level, category, description, is_active, created_at, updated_at\n\t\t\tFROM job_titles\n\t\t\tWHERE id = $1\n\t\t`,\n      [params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직책을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0]\n    })\n  } catch (error: any) {\n    logger.error('Error fetching job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 정보를 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 직책 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직책명은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.level || data.level < 1 || data.level > 10) {\n      return json(\n        {\n          success: false,\n          error: '레벨은 1-10 사이의 값이어야 합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.category || data.category.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '카테고리는 필수 선택 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 직책명 검증 (자신 제외)\n    const existingTitle = await query(\n      'SELECT id FROM job_titles WHERE LOWER(name) = LOWER($1) AND id != $2',\n      [data.name.trim(), params.id]\n    )\n\n    if (existingTitle.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '이미 존재하는 직책명입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE job_titles SET\n\t\t\t\tname = $1,\n\t\t\t\tlevel = $2,\n\t\t\t\tcategory = $3,\n\t\t\t\tdescription = $4,\n\t\t\t\tis_active = $5,\n\t\t\t\tupdated_at = $6\n\t\t\tWHERE id = $7\n\t\t\tRETURNING id, name, level, category, description, is_active, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.level,\n        data.category.trim(),\n        data.description?.trim() || '',\n        data.is_active !== false,\n        new Date(),\n        params.id\n      ]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직책을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직책 정보가 성공적으로 수정되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error updating job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 정보 수정에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 직책 삭제 (비활성화)\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    // 해당 직책을 사용하는 이사가 있는지 확인\n    const executivesUsingTitle = await query(\n      'SELECT COUNT(*) as count FROM executives WHERE job_title_id = $1 AND status = $2',\n      [params.id, 'active']\n    )\n\n    if (parseInt(executivesUsingTitle.rows[0].count) > 0) {\n      return json(\n        {\n          success: false,\n          error: '해당 직책을 사용하는 활성 이사가 있어 삭제할 수 없습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE job_titles SET\n\t\t\t\tis_active = false,\n\t\t\t\tupdated_at = $1\n\t\t\tWHERE id = $2\n\t\t\tRETURNING id, name\n\t\t`,\n      [new Date(), params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직책을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      message: '직책이 비활성화되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error deleting job title:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직책 삭제에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/migrate/add-department-to/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[756,759],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[756,759],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 부서 테이블에 T/O 컬럼 추가\nexport const POST: RequestHandler = async () => {\n  try {\n    // T/O 컬럼 추가\n    await query(`\n\t\t\tALTER TABLE departments \n\t\t\tADD COLUMN IF NOT EXISTS max_employees INTEGER DEFAULT 0\n\t\t`)\n\n    // 기존 부서들의 T/O 설정\n    await query(`\n\t\t\tUPDATE departments \n\t\t\tSET max_employees = CASE \n\t\t\t\tWHEN name = '개발팀' THEN 4\n\t\t\t\tWHEN name = '경영기획팀' THEN 1\n\t\t\t\tWHEN name = '경영지원팀' THEN 2\n\t\t\t\tELSE 0\n\t\t\tEND\n\t\t\tWHERE max_employees = 0 OR max_employees IS NULL\n\t\t`)\n\n    return json({\n      success: true,\n      message: '부서 테이블에 T/O 컬럼이 성공적으로 추가되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error adding TO column to departments:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || 'T/O 컬럼 추가에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/organization/chart/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[934,937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[934,937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":40,"column":15,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":40,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1599,1602],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1599,1602],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3494,3497],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3494,3497],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 조직도 데이터 생성 (동적)\nexport const GET: RequestHandler = async () => {\n  try {\n    // 모든 직원 데이터 조회 (직책 정보 포함)\n    const employeesResult = await query(`\n\t\t\tSELECT \n\t\t\t\te.id,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.salary,\n\t\t\t\te.status,\n\t\t\t\te.job_title_id,\n\t\t\t\tjt.name as job_title_name,\n\t\t\t\tjt.level as job_title_level,\n\t\t\t\tjt.category as job_title_category\n\t\t\tFROM employees e\n\t\t\tLEFT JOIN job_titles jt ON e.job_title_id = jt.id\n\t\t\tWHERE e.status = 'active'\n\t\t\tORDER BY e.department, e.position\n\t\t`)\n\n    const employees = Array.isArray(employeesResult) ? employeesResult : employeesResult.rows || []\n\n    // 부서별로 직원 그룹화\n    const departmentGroups: { [key: string]: unknown[] } = {}\n    employees.forEach((emp: any) => {\n      const dept = emp.department || '기타'\n      if (!departmentGroups[dept]) {\n        departmentGroups[dept] = []\n      }\n      departmentGroups[dept].push({\n        name: `${emp.last_name}${emp.first_name}`,\n        position: emp.position,\n        email: emp.email,\n        salary: emp.salary,\n        job_title: emp.job_title_name,\n        isTeamLead: emp.job_title_name === 'Team Lead'\n      })\n    })\n\n    // 부서를 임원별로 그룹화하는 매핑\n    const executiveDepartmentMapping: { [key: string]: string[] } = {\n      대표이사: ['경영기획팀'],\n      재무이사: ['경영지원팀'],\n      연구소장: ['PSR팀', 'GRIT팀', '개발팀']\n    }\n\n    // 동적으로 조직도 구조 생성\n    const orgStructure: { [key: string]: any } = {}\n\n    // 각 임원별로 구조 생성\n    Object.entries(executiveDepartmentMapping).forEach(([executiveName, departments]) => {\n      const children: unknown[] = []\n\n      departments.forEach(deptName => {\n        // 해당 부서에 직원이 있는지 확인\n        if (departmentGroups[deptName] && departmentGroups[deptName].length > 0) {\n          children.push({\n            name: deptName,\n            position: '팀',\n            type: 'department',\n            children: departmentGroups[deptName]\n          })\n        }\n      })\n\n      // 직원이 있는 부서가 있는 경우에만 임원 추가\n      if (children.length > 0) {\n        orgStructure[executiveName] = {\n          name: executiveName,\n          position: executiveName,\n          email: `${executiveName.toLowerCase().replace('이사', '')}@company.com`,\n          children: children\n        }\n      }\n    })\n\n    // 매핑되지 않은 부서들을 '기타' 임원으로 그룹화\n    const mappedDepartments = Object.values(executiveDepartmentMapping).flat()\n    const unmappedDepartments = Object.keys(departmentGroups).filter(\n      dept => !mappedDepartments.includes(dept)\n    )\n\n    if (unmappedDepartments.length > 0) {\n      const otherChildren: unknown[] = []\n      unmappedDepartments.forEach(deptName => {\n        otherChildren.push({\n          name: deptName,\n          position: '팀',\n          type: 'department',\n          children: departmentGroups[deptName]\n        })\n      })\n\n      orgStructure['기타'] = {\n        name: '기타',\n        position: '기타',\n        email: 'other@company.com',\n        children: otherChildren\n      }\n    }\n\n    return json({\n      success: true,\n      data: orgStructure,\n      metadata: {\n        totalEmployees: employees.length,\n        totalDepartments: Object.keys(departmentGroups).length,\n        totalExecutives: Object.keys(orgStructure).length,\n        departments: Object.keys(departmentGroups)\n      },\n      message: '조직도 데이터가 성공적으로 생성되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error generating organization chart:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '조직도 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/organization/chart/download/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[734,737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[734,737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1190,1193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1190,1193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 조직도 다운로드 (CSV 형식)\nexport const GET: RequestHandler = async () => {\n  try {\n    // 모든 직원 데이터 조회\n    const employeesResult = await query(`\n\t\t\tSELECT \n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\temail,\n\t\t\t\tdepartment,\n\t\t\t\tposition,\n\t\t\t\tsalary,\n\t\t\t\tstatus\n\t\t\tFROM employees \n\t\t\tWHERE status = 'active'\n\t\t\tORDER BY department, position\n\t\t`)\n\n    const employees = Array.isArray(employeesResult) ? employeesResult : employeesResult.rows || []\n\n    // CSV 헤더\n    const csvHeader = '이름,부서,직급,이메일,연봉,상태\\n'\n\n    // CSV 데이터 생성\n    const csvData = employees\n      .map((emp: any) => {\n        return `\"${emp.last_name}${emp.first_name}\",\"${emp.department}\",\"${emp.position}\",\"${emp.email}\",\"${emp.salary}\",\"${emp.status}\"`\n      })\n      .join('\\n')\n\n    const csvContent = csvHeader + csvData\n\n    // CSV 파일로 응답\n    return new Response(csvContent, {\n      headers: {\n        'Content-Type': 'text/csv; charset=utf-8',\n        'Content-Disposition': 'attachment; filename=\"organization_chart.csv\"'\n      }\n    })\n  } catch (error: any) {\n    logger.error('Error downloading organization chart:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '조직도 다운로드에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/positions/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1153,1156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1153,1156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2893,2896],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2893,2896],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3328,3331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3328,3331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 직급 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const searchParams = url.searchParams\n    const status = searchParams.get('status') || 'active'\n    const department = searchParams.get('department')\n\n    let whereClause = ''\n    const params: unknown[] = []\n\n    if (status === 'active') {\n      whereClause = 'WHERE status = $1'\n      params.push(status)\n    } else if (status === 'all') {\n      whereClause = ''\n    }\n\n    if (department) {\n      if (whereClause) {\n        whereClause += ' AND department = $' + (params.length + 1)\n      } else {\n        whereClause = 'WHERE department = $1'\n      }\n      params.push(department)\n    }\n\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, department, level, status, created_at, updated_at\n\t\t\tFROM positions\n\t\t\t${whereClause}\n\t\t\tORDER BY level ASC, name ASC\n\t\t`,\n      params\n    )\n\n    return json({\n      success: true,\n      data: result.rows\n    })\n  } catch (error: any) {\n    logger.error('Error fetching positions:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 목록을 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 새 직급 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직급명은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.department || data.department.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서는 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 직급명 검증 (같은 부서 내에서)\n    const existingPos = await query(\n      'SELECT id FROM positions WHERE LOWER(name) = LOWER($1) AND department = $2',\n      [data.name.trim(), data.department.trim()]\n    )\n\n    if (existingPos.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '해당 부서에 이미 존재하는 직급명입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tINSERT INTO positions (name, description, department, level, status, created_at, updated_at)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7)\n\t\t\tRETURNING id, name, description, department, level, status, created_at, updated_at\n\t\t`,\n      [\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.department.trim(),\n        data.level || 1,\n        data.status || 'active',\n        new Date(),\n        new Date()\n      ]\n    )\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직급이 성공적으로 생성되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error creating position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 모든 직급 삭제 (리셋용)\nexport const DELETE: RequestHandler = async () => {\n  try {\n    // 모든 직급을 삭제\n    await query('DELETE FROM positions')\n\n    return json({\n      success: true,\n      message: '모든 직급이 삭제되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error deleting all positions:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 삭제에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/positions/[id]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[710,713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[710,713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2685,2688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2685,2688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4524,4527],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4524,4527],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { query } from '$lib/database/connection'\nimport { logger } from '$lib/utils/logger'\n\n// 특정 직급 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT id, name, description, department, level, status, created_at, updated_at\n\t\t\tFROM positions\n\t\t\tWHERE id = $1\n\t\t`,\n      [params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직급을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0]\n    })\n  } catch (error: any) {\n    logger.error('Error fetching position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 정보를 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 직급 정보 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n\n    // 필수 필드 검증\n    if (!data.name || data.name.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '직급명은 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!data.department || data.department.trim() === '') {\n      return json(\n        {\n          success: false,\n          error: '부서는 필수 입력 항목입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 직급명 검증 (자기 자신 제외, 같은 부서 내에서)\n    const existingPos = await query(\n      'SELECT id FROM positions WHERE LOWER(name) = LOWER($1) AND department = $2 AND id != $3',\n      [data.name.trim(), data.department.trim(), params.id]\n    )\n\n    if (existingPos.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          error: '해당 부서에 이미 존재하는 직급명입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const result = await query(\n      `\n\t\t\tUPDATE positions SET\n\t\t\t\tname = $2,\n\t\t\t\tdescription = $3,\n\t\t\t\tdepartment = $4,\n\t\t\t\tlevel = $5,\n\t\t\t\tstatus = $6,\n\t\t\t\tupdated_at = $7\n\t\t\tWHERE id = $1\n\t\t\tRETURNING id, name, description, department, level, status, created_at, updated_at\n\t\t`,\n      [\n        params.id,\n        data.name.trim(),\n        data.description?.trim() || '',\n        data.department.trim(),\n        data.level || 1,\n        data.status || 'active',\n        new Date()\n      ]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직급을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0],\n      message: '직급 정보가 성공적으로 수정되었습니다.'\n    })\n  } catch (error: any) {\n    logger.error('Error updating position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 정보 수정에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 직급 삭제\nexport const DELETE: RequestHandler = async ({ params, url }) => {\n  try {\n    const searchParams = url.searchParams\n    const hardDelete = searchParams.get('hard') === 'true'\n\n    if (hardDelete) {\n      // 하드 삭제: 직급을 사용하는 직원이 있는지 확인\n      const employeesInPos = await query(\n        'SELECT COUNT(*) as count FROM employees WHERE position = (SELECT name FROM positions WHERE id = $1)',\n        [params.id]\n      )\n\n      if (parseInt(employeesInPos.rows[0].count) > 0) {\n        return json(\n          {\n            success: false,\n            error: '해당 직급을 가진 직원이 있어 삭제할 수 없습니다.'\n          },\n          { status: 400 }\n        )\n      }\n\n      // 하드 삭제 실행\n      const result = await query('DELETE FROM positions WHERE id = $1 RETURNING id, name', [\n        params.id\n      ])\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '직급을 찾을 수 없습니다.'\n          },\n          { status: 404 }\n        )\n      }\n\n      return json({\n        success: true,\n        message: '직급이 완전히 삭제되었습니다.'\n      })\n    } else {\n      // 소프트 삭제: 상태를 'inactive'로 변경\n      const result = await query(\n        `\n\t\t\t\tUPDATE positions SET\n\t\t\t\t\tstatus = 'inactive',\n\t\t\t\t\tupdated_at = $2\n\t\t\t\tWHERE id = $1\n\t\t\t\tRETURNING id, name, status\n\t\t\t`,\n        [params.id, new Date()]\n      )\n\n      if (result.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            error: '직급을 찾을 수 없습니다.'\n          },\n          { status: 404 }\n        )\n      }\n\n      return json({\n        success: true,\n        message: '직급이 비활성화되었습니다.'\n      })\n    }\n  } catch (error: any) {\n    logger.error('Error deleting position:', error)\n    return json(\n      {\n        success: false,\n        error: error.message || '직급 삭제에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/alerts/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-categories/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/[id]/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/[id]/approve/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-evidence/[id]/reject/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budget-validation/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":80,"column":16,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":80,"endColumn":81},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":115,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":115,"endColumn":134},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":147,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":147,"endColumn":117}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { BudgetConsistencyValidator, ValidationUtils } from '$lib/utils/validation'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n\n    if (!projectId) {\n      return json({ error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    logger.log(`🔍 [예산 일관성 검증] 프로젝트 ${projectId} 검증 시작`)\n\n    // 프로젝트 기본 정보 및 예산 조회\n    const [project, budgets] = await Promise.all([\n      ValidationUtils.getProjectInfo(projectId),\n      ValidationUtils.getProjectBudgets(projectId)\n    ])\n\n    logger.log(`📋 프로젝트: ${project.title}`)\n\n    // 예산 일관성 검증\n    const validation = BudgetConsistencyValidator.validateBudgetConsistency(project, budgets)\n\n    const validationResults = [\n      {\n        validationType: 'budget_consistency',\n        validation,\n        details: {\n          projectTotalBudget: parseFloat(project.budget_total) || 0,\n          totalBudgetFromBudgets: budgets.reduce(\n            (sum, budget) => sum + (parseFloat(budget.total_budget) || 0),\n            0\n          ),\n          budgetBreakdown: budgets.map(budget => ({\n            periodNumber: budget.period_number,\n            fiscalYear: budget.fiscal_year,\n            totalBudget: parseFloat(budget.total_budget) || 0,\n            personnelCost: parseFloat(budget.personnel_cost) || 0,\n            researchMaterialCost: parseFloat(budget.research_material_cost) || 0,\n            researchActivityCost: parseFloat(budget.research_activity_cost) || 0,\n            indirectCost: parseFloat(budget.indirect_cost) || 0\n          }))\n        }\n      }\n    ]\n\n    // 전체 검증 결과 생성\n    const overallValidation = ValidationUtils.createOverallValidation(validationResults)\n\n    logger.log(`✅ [예산 일관성 검증] 완료 - ${validation.isValid ? '✅ 통과' : '❌ 실패'}`)\n\n    return json(\n      ValidationUtils.createValidationResponse(\n        projectId,\n        project.title,\n        validationResults,\n        overallValidation\n      )\n    )\n  } catch (error) {\n    logger.error('Budget validation error:', error)\n    return json(\n      ValidationUtils.createErrorResponse(error, '예산 일관성 검증 중 오류가 발생했습니다.'),\n      { status: 500 }\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { projectId, autoFix = false } = await request.json()\n\n    if (!projectId) {\n      return json({ error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    logger.log(`🔧 [예산 일관성 검증] 프로젝트 ${projectId} ${autoFix ? '자동 수정' : '검증'} 시작`)\n\n    // 프로젝트 기본 정보 및 예산 조회\n    const [project, budgets] = await Promise.all([\n      ValidationUtils.getProjectInfo(projectId),\n      ValidationUtils.getProjectBudgets(projectId)\n    ])\n\n    logger.log(`📋 프로젝트: ${project.title}`)\n\n    // 예산 일관성 검증\n    const validation = BudgetConsistencyValidator.validateBudgetConsistency(project, budgets)\n\n    const fixes = []\n\n    // 자동 수정이 활성화되고 불일치가 있는 경우\n    if (autoFix && !validation.isValid) {\n      const totalBudgetFromBudgets = budgets.reduce(\n        (sum, budget) => sum + (parseFloat(budget.total_budget) || 0),\n        0\n      )\n\n      // 프로젝트 총 예산을 연차별 예산 합계로 업데이트\n      await ValidationUtils.pool.query('UPDATE projects SET budget_total = $1 WHERE id = $2', [\n        totalBudgetFromBudgets,\n        projectId\n      ])\n\n      fixes.push({\n        action: 'project_budget_total_updated',\n        oldValue: parseFloat(project.budget_total) || 0,\n        newValue: totalBudgetFromBudgets\n      })\n\n      logger.log(\n        `🔧 프로젝트 총 예산 수정: ${(parseFloat(project.budget_total) || 0).toLocaleString()}원 → ${totalBudgetFromBudgets.toLocaleString()}원`\n      )\n    }\n\n    const validationResults = [\n      {\n        validationType: 'budget_consistency',\n        validation,\n        details: {\n          projectTotalBudget: parseFloat(project.budget_total) || 0,\n          totalBudgetFromBudgets: budgets.reduce(\n            (sum, budget) => sum + (parseFloat(budget.total_budget) || 0),\n            0\n          ),\n          budgetBreakdown: budgets.map(budget => ({\n            periodNumber: budget.period_number,\n            fiscalYear: budget.fiscal_year,\n            totalBudget: parseFloat(budget.total_budget) || 0,\n            personnelCost: parseFloat(budget.personnel_cost) || 0,\n            researchMaterialCost: parseFloat(budget.research_material_cost) || 0,\n            researchActivityCost: parseFloat(budget.research_activity_cost) || 0,\n            indirectCost: parseFloat(budget.indirect_cost) || 0\n          }))\n        },\n        fixed: autoFix && !validation.isValid\n      }\n    ]\n\n    // 전체 검증 결과 생성\n    const overallValidation = ValidationUtils.createOverallValidation(validationResults)\n\n    logger.log(\n      `✅ [예산 일관성 검증] 완료 - ${validation.isValid ? '✅ 통과' : '❌ 실패'}${fixes.length > 0 ? `, ${fixes.length}개 수정` : ''}`\n    )\n\n    return json({\n      ...ValidationUtils.createValidationResponse(\n        projectId,\n        project.title,\n        validationResults,\n        overallValidation\n      ),\n      fixes: fixes.length > 0 ? fixes : undefined\n    })\n  } catch (error) {\n    logger.error('Budget validation error:', error)\n    return json(\n      ValidationUtils.createErrorResponse(error, '예산 일관성 검증 중 오류가 발생했습니다.'),\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/budgets/summary-by-year/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/comprehensive-validation/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":21,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":21,"endColumn":87},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[796,799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[796,799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[823,826],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[823,826],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[851,854],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[851,854],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":180,"column":21,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":180,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7305,7308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7305,7308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7337,7340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7337,7340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7402,7405],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7402,7405],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":230,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":230,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7434,7437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7434,7437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7629,7632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7629,7632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7679,7682],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7679,7682],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":246,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":246,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7868,7871],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7868,7871],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7918,7921],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7918,7921],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":260,"column":20,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":260,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":281,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":281,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8785,8788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8785,8788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":324,"column":20,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":324,"endColumn":44}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AICodingValidator } from '$lib/utils/ai-coding-guidelines'\nimport { SchemaValidator } from '$lib/utils/schema-validation'\nimport {\n  BudgetConsistencyValidator,\n  EmploymentPeriodValidator,\n  ParticipationRateValidator,\n  PersonnelCostValidator,\n  UsageRateValidator,\n  ValidationUtils\n} from '$lib/utils/validation'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n    const validationScope = url.searchParams.get('scope') || 'all'\n\n    logger.log(\n      `🔍 [종합 검증] ${validationScope} 검증 시작${projectId ? ` - 프로젝트: ${projectId}` : ''}`\n    )\n\n    const results = {\n      schema: null as any,\n      coding: null as any,\n      project: null as any,\n      summary: {\n        total: 0,\n        valid: 0,\n        invalid: 0,\n        issues: [] as string[]\n      }\n    }\n\n    // 1. 스키마 검증\n    if (validationScope === 'all' || validationScope === 'schema') {\n      logger.log('📋 [스키마 검증] 시작')\n      try {\n        const [schemaResults, namingResults] = await Promise.all([\n          SchemaValidator.validateDatabaseSchema(),\n          SchemaValidator.validateColumnNamingConsistency()\n        ])\n\n        results.schema = {\n          database: schemaResults,\n          naming: namingResults,\n          summary: {\n            total: schemaResults.length + namingResults.length,\n            valid:\n              schemaResults.filter(r => r.isValid).length +\n              namingResults.filter(r => r.isValid).length,\n            invalid:\n              schemaResults.filter(r => !r.isValid).length +\n              namingResults.filter(r => !r.isValid).length\n          }\n        }\n      } catch (error) {\n        logger.error('스키마 검증 실패:', error)\n        results.schema = { error: '스키마 검증 실패' }\n      }\n    }\n\n    // 2. 코딩 가이드라인 검증\n    if (validationScope === 'all' || validationScope === 'coding') {\n      logger.log('📝 [코딩 가이드라인 검증] 시작')\n      try {\n        const guidelines = AICodingValidator.getGuidelines()\n        const validationRules = AICodingValidator.getValidationRules()\n\n        // 샘플 검증 실행\n        const sampleValidations = [\n          {\n            type: 'column',\n            name: 'user_id',\n            result: AICodingValidator.validateColumnName('user_id')\n          },\n          {\n            type: 'column',\n            name: 'userId',\n            result: AICodingValidator.validateColumnName('userId')\n          },\n          {\n            type: 'variable',\n            name: 'projectId',\n            result: AICodingValidator.validateVariableName('projectId')\n          },\n          {\n            type: 'variable',\n            name: 'project_id',\n            result: AICodingValidator.validateVariableName('project_id')\n          },\n          {\n            type: 'function',\n            name: 'validateProject',\n            result: AICodingValidator.validateFunctionName('validateProject')\n          },\n          {\n            type: 'function',\n            name: 'project_validate',\n            result: AICodingValidator.validateFunctionName('project_validate')\n          },\n          {\n            type: 'class',\n            name: 'ValidationUtils',\n            result: AICodingValidator.validateClassName('ValidationUtils')\n          },\n          {\n            type: 'class',\n            name: 'validation_utils',\n            result: AICodingValidator.validateClassName('validation_utils')\n          }\n        ]\n\n        results.coding = {\n          guidelines,\n          validationRules,\n          sampleValidations,\n          summary: {\n            total: sampleValidations.length,\n            valid: sampleValidations.filter(v => v.result.isValid).length,\n            invalid: sampleValidations.filter(v => !v.result.isValid).length\n          }\n        }\n      } catch (error) {\n        logger.error('코딩 가이드라인 검증 실패:', error)\n        results.coding = { error: '코딩 가이드라인 검증 실패' }\n      }\n    }\n\n    // 3. 프로젝트 검증 (프로젝트 ID가 있는 경우)\n    if (projectId && (validationScope === 'all' || validationScope === 'project')) {\n      logger.log(`📊 [프로젝트 검증] 시작 - 프로젝트: ${projectId}`)\n      try {\n        const project = await ValidationUtils.getProjectInfo(projectId)\n        const [budgets, members, evidenceItems] = await Promise.all([\n          ValidationUtils.getProjectBudgets(projectId),\n          ValidationUtils.getProjectMembers(projectId),\n          ValidationUtils.getEvidenceItems(projectId)\n        ])\n\n        // 각 검증 실행\n        const validations = []\n\n        // 인건비 검증\n        for (const budget of budgets) {\n          const actualPersonnelCost = PersonnelCostValidator.calculateActualPersonnelCost(\n            members,\n            budget\n          )\n          const validation = PersonnelCostValidator.validatePersonnelCost(\n            budget,\n            actualPersonnelCost\n          )\n          validations.push({\n            type: 'personnel_cost',\n            period: budget.period_number,\n            validation\n          })\n        }\n\n        // 예산 일관성 검증\n        const budgetValidation = BudgetConsistencyValidator.validateBudgetConsistency(\n          project,\n          budgets\n        )\n        validations.push({\n          type: 'budget_consistency',\n          validation: budgetValidation\n        })\n\n        // 재직 기간 검증\n        for (const member of members) {\n          const validation = EmploymentPeriodValidator.validateMemberEmploymentPeriod(\n            member,\n            project\n          )\n          validations.push({\n            type: 'employment_period',\n            member: `${member.last_name}${member.first_name}`,\n            validation\n          })\n        }\n\n        // 참여율 검증\n        const participationValidation =\n          ParticipationRateValidator.validateParticipationRate(members)\n        validations.push({\n          type: 'participation_rate',\n          validation: participationValidation\n        })\n\n        // 사용률 검증\n        for (const budget of budgets) {\n          const validation = UsageRateValidator.validateUsageRate(budget, evidenceItems)\n          validations.push({\n            type: 'usage_rate',\n            period: budget.period_number,\n            validation\n          })\n        }\n\n        results.project = {\n          projectId,\n          projectTitle: project.title,\n          validations,\n          summary: {\n            total: validations.length,\n            valid: validations.filter(v => v.validation.isValid).length,\n            invalid: validations.filter(v => !v.validation.isValid).length\n          }\n        }\n      } catch (error) {\n        logger.error('프로젝트 검증 실패:', error)\n        results.project = { error: '프로젝트 검증 실패' }\n      }\n    }\n\n    // 전체 요약 계산\n    const allResults = [results.schema, results.coding, results.project].filter(r => r && !r.error)\n    results.summary.total = allResults.reduce((sum, r) => sum + (r.summary?.total || 0), 0)\n    results.summary.valid = allResults.reduce((sum, r) => sum + (r.summary?.valid || 0), 0)\n    results.summary.invalid = allResults.reduce((sum, r) => sum + (r.summary?.invalid || 0), 0)\n\n    // 이슈 수집\n    if (results.schema && !results.schema.error) {\n      results.summary.issues.push(\n        ...[\n          ...results.schema.database.filter((r: any) => !r.isValid).flatMap((r: any) => r.issues),\n          ...results.schema.naming.filter((r: any) => !r.isValid).flatMap((r: any) => r.issues)\n        ]\n      )\n    }\n\n    if (results.coding && !results.coding.error) {\n      results.summary.issues.push(\n        ...results.coding.sampleValidations\n          .filter((v: any) => !v.result.isValid)\n          .flatMap((v: any) => v.result.issues)\n      )\n    }\n\n    if (results.project && !results.project.error) {\n      results.summary.issues.push(\n        ...results.project.validations\n          .filter((v: any) => !v.validation.isValid)\n          .map((v: any) => v.validation.message)\n      )\n    }\n\n    logger.log(\n      `✅ [종합 검증] 완료 - ${results.summary.valid}/${results.summary.total}개 통과, ${results.summary.invalid}개 문제`\n    )\n\n    return json({\n      success: true,\n      validationScope,\n      projectId: projectId || null,\n      results,\n      generatedAt: new Date().toISOString()\n    })\n  } catch (error) {\n    logger.error('Comprehensive validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '종합 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { validationType, name, code, language, tableName, query } = await request.json()\n\n    logger.log(`🔍 [종합 검증] ${validationType} 검증 시작`)\n\n    let validationResult: any = null\n\n    // 검증 타입별 처리\n    switch (validationType) {\n      case 'column':\n        validationResult = AICodingValidator.validateColumnName(name)\n        break\n      case 'variable':\n        validationResult = AICodingValidator.validateVariableName(name)\n        break\n      case 'function':\n        validationResult = AICodingValidator.validateFunctionName(name)\n        break\n      case 'class':\n        validationResult = AICodingValidator.validateClassName(name)\n        break\n      case 'sql':\n        validationResult = AICodingValidator.validateSQLQuery(query)\n        break\n      case 'code':\n        validationResult = AICodingValidator.validateCode(code, language)\n        break\n      case 'query-columns':\n        if (!query || !tableName) {\n          return json({ error: '쿼리와 테이블명이 필요합니다.' }, { status: 400 })\n        }\n        validationResult = SchemaValidator.validateQueryColumns(query, tableName)\n        break\n      default:\n        return json({ error: '지원하지 않는 검증 타입입니다.' }, { status: 400 })\n    }\n\n    logger.log(`✅ [종합 검증] 완료 - ${validationResult.isValid ? '통과' : '실패'}`)\n\n    return json({\n      success: true,\n      validationType,\n      name: name || null,\n      code: code || null,\n      language: language || null,\n      tableName: tableName || null,\n      query: query || null,\n      validationResult,\n      generatedAt: new Date().toISOString()\n    })\n  } catch (error) {\n    logger.error('Comprehensive validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '종합 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/create-project/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":167,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":167,"endColumn":120},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":201,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":201,"endColumn":91},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6234,6237],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6234,6237],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6923,6926],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6923,6926],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'materialCost' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":250,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":250,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activityCost' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":254,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":254,"endColumn":23},{"ruleId":"no-redeclare","severity":2,"message":"'personnelCost' is already defined.","line":279,"column":11,"nodeType":"Identifier","messageId":"redeclared","endLine":279,"endColumn":24},{"ruleId":"no-redeclare","severity":2,"message":"'indirectCost' is already defined.","line":285,"column":11,"nodeType":"Identifier","messageId":"redeclared","endLine":285,"endColumn":23},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":313,"column":16,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":313,"endColumn":87},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10154,10157],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10154,10157],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":360,"column":16,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":360,"endColumn":85},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":367,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":367,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11477,11480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11477,11480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":446,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":446,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14067,14070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14067,14070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":483,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":483,"endColumn":125},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'runAutoValidationAndFix' is defined but never used. Allowed unused vars must match /^_/u.","line":493,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":493,"endColumn":39}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { formatDateForAPI } from '$lib/utils/date-calculator'\nimport { calculateBudgetAllocation } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport { Pool } from 'pg'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false }\n})\n\ninterface ProjectCreationRequest {\n  name: string\n  description: string\n  startDate: string\n  endDate: string\n  totalBudget: number\n  annualPeriods: {\n    periodNumber: number\n    startDate: string\n    endDate: string\n    budget: number\n  }[]\n  budgetCategories: {\n    name: string\n    percentage: number\n  }[]\n  members: {\n    employeeId: string\n    role: string\n    participationRate: number\n    monthlyAmount: number\n    startDate: string\n    endDate: string\n  }[]\n  evidenceSettings: {\n    autoGenerate: boolean\n    namingConvention: string\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  const client = await pool.connect()\n\n  try {\n    logger.log('🚀 [1단계] 프로젝트 생성 요청 시작')\n\n    const data: ProjectCreationRequest = await request.json()\n    logger.log('📋 [1단계] 요청 데이터:', JSON.stringify(data, null, 2))\n\n    // 입력 데이터 검증\n    logger.log('🔍 [2단계] 입력 데이터 검증 시작')\n    const validationResult = await validateProjectData(data)\n    if (!validationResult.isValid) {\n      logger.log('❌ [2단계] 검증 실패:', validationResult.errors)\n      return json({ success: false, errors: validationResult.errors }, { status: 400 })\n    }\n    logger.log('✅ [2단계] 입력 데이터 검증 완료')\n\n    await client.query('BEGIN')\n    logger.log('🔄 [3단계] 데이터베이스 트랜잭션 시작')\n\n    // 프로젝트 생성\n    logger.log('📝 [4단계] 프로젝트 기본 정보 생성')\n    const projectId = await createProject(client, data)\n    logger.log(`✅ [4단계] 프로젝트 생성 완료 - ID: ${projectId}`)\n\n    // 연차별 예산 생성\n    logger.log('💰 [5단계] 연차별 예산 생성')\n    const budgetIds = await createProjectBudgets(client, projectId, data)\n    logger.log(`✅ [5단계] 연차별 예산 생성 완료 - ${budgetIds.length}개 연차`)\n\n    // 참여연구원 생성\n    logger.log('👥 [6단계] 참여연구원 생성')\n    const memberIds = await createProjectMembers(client, projectId, data)\n    logger.log(`✅ [6단계] 참여연구원 생성 완료 - ${memberIds.length}명`)\n\n    // 증빙 항목 자동 생성 (설정된 경우)\n    if (data.evidenceSettings.autoGenerate) {\n      logger.log('📄 [7단계] 증빙 항목 자동 생성')\n      const evidenceIds = await createEvidenceItems(client, projectId, data)\n      logger.log(`✅ [7단계] 증빙 항목 자동 생성 완료 - ${evidenceIds.length}개 항목`)\n    } else {\n      logger.log('⏭️ [7단계] 증빙 항목 자동 생성 건너뜀 (설정 비활성화)')\n    }\n\n    // 검증 로직 실행\n    logger.log('🔍 [8단계] 생성된 데이터 검증')\n    const finalValidation = await validateCreatedProject(client, projectId)\n    if (!finalValidation.isValid) {\n      logger.log('❌ [8단계] 최종 검증 실패:', finalValidation.errors)\n      await client.query('ROLLBACK')\n      return json({ success: false, errors: finalValidation.errors }, { status: 400 })\n    }\n    logger.log('✅ [8단계] 최종 검증 완료')\n\n    // 자동 검증 및 수정 실행 (일시적으로 비활성화)\n    logger.log('⏭️ [9단계] 자동 검증 단계 건너뜀 (개발 중)')\n    const autoValidationResult = {\n      success: true,\n      results: [],\n      errors: [],\n      fixedIssues: 0\n    }\n\n    await client.query('COMMIT')\n    logger.log('✅ [10단계] 데이터베이스 트랜잭션 커밋 완료')\n\n    const result = {\n      success: true,\n      projectId,\n      budgetIds,\n      memberIds,\n      evidenceIds: data.evidenceSettings.autoGenerate\n        ? await createEvidenceItems(client, projectId, data)\n        : [],\n      validation: finalValidation,\n      autoValidation: autoValidationResult\n    }\n\n    logger.log('🎉 [완료] 프로젝트 생성 성공:', result)\n    return json(result)\n  } catch (error) {\n    logger.error('💥 [오류] 프로젝트 생성 중 오류 발생:', error)\n    await client.query('ROLLBACK')\n    return json({ success: false, error: error.message }, { status: 500 })\n  } finally {\n    client.release()\n  }\n}\n\n// 입력 데이터 검증 함수\nasync function validateProjectData(data: ProjectCreationRequest) {\n  const errors: string[] = []\n\n  logger.log('🔍 [검증] 프로젝트 기본 정보 검증')\n  if (!data.name || data.name.trim().length === 0) {\n    errors.push('프로젝트명은 필수입니다.')\n  }\n\n  if (!data.startDate || !data.endDate) {\n    errors.push('프로젝트 시작일과 종료일은 필수입니다.')\n  }\n\n  // UTC 기준으로 날짜 비교\n  const startUtc = new Date(data.startDate + 'T00:00:00.000Z')\n  const endUtc = new Date(data.endDate + 'T23:59:59.999Z')\n  if (startUtc >= endUtc) {\n    errors.push('프로젝트 종료일은 시작일보다 늦어야 합니다.')\n  }\n\n  logger.log('🔍 [검증] 연차별 예산 검증')\n  if (!data.annualPeriods || data.annualPeriods.length === 0) {\n    errors.push('연차별 예산 정보는 필수입니다.')\n  }\n\n  // 연차별 예산 합계 검증\n  const totalBudgetFromPeriods = data.annualPeriods.reduce((sum, period) => sum + period.budget, 0)\n  if (Math.abs(totalBudgetFromPeriods - data.totalBudget) > 1000) {\n    // 1000원 허용 오차\n    errors.push(\n      `연차별 예산 합계(${totalBudgetFromPeriods.toLocaleString()}원)와 총 예산(${data.totalBudget.toLocaleString()}원)이 일치하지 않습니다.`\n    )\n  }\n\n  logger.log('🔍 [검증] 참여연구원 검증')\n  if (!data.members || data.members.length === 0) {\n    errors.push('참여연구원 정보는 필수입니다.')\n  }\n\n  // 참여연구원 참여율 검증\n  for (const member of data.members) {\n    if (member.participationRate <= 0 || member.participationRate > 100) {\n      errors.push(`${member.employeeId}의 참여율은 0% 초과 100% 이하여야 합니다.`)\n    }\n  }\n\n  // 연차별 참여연구원 참여율 합계 검증\n  for (const period of data.annualPeriods) {\n    // UTC+9 타임존 적용된 날짜 비교\n    const periodStartUtc = new Date(period.startDate + 'T00:00:00.000Z')\n    const periodEndUtc = new Date(period.endDate + 'T23:59:59.999Z')\n\n    const periodMembers = data.members.filter(member => {\n      const memberStartUtc = new Date(member.startDate + 'T00:00:00.000Z')\n      const memberEndUtc = new Date(member.endDate + 'T23:59:59.999Z')\n      return memberStartUtc <= periodEndUtc && memberEndUtc >= periodStartUtc\n    })\n\n    const totalParticipationRate = periodMembers.reduce(\n      (sum, member) => sum + member.participationRate,\n      0\n    )\n    if (totalParticipationRate > 100) {\n      errors.push(\n        `${period.periodNumber}차년도 참여연구원 참여율 합계(${totalParticipationRate}%)가 100%를 초과합니다.`\n      )\n    }\n  }\n\n  return { isValid: errors.length === 0, errors }\n}\n\n// 프로젝트 생성 함수\nasync function createProject(client: any, data: ProjectCreationRequest) {\n  logger.log('📝 [생성] 프로젝트 기본 정보 삽입')\n\n  const projectQuery = `\n    INSERT INTO projects (\n      code, title, description, start_date, end_date, budget_total, \n      status, created_at, updated_at\n    ) VALUES ($1, $2, $3, $4, $5, $6, 'active', NOW(), NOW())\n    RETURNING id\n  `\n\n  const result = await client.query(projectQuery, [\n    `PRJ-${Date.now()}`, // 프로젝트 코드 자동 생성\n    data.name,\n    data.description,\n    data.startDate,\n    data.endDate,\n    data.totalBudget\n  ])\n\n  const projectId = result.rows[0].id\n  logger.log(`📝 [생성] 프로젝트 생성 완료 - ID: ${projectId}`)\n\n  return projectId\n}\n\n// 연차별 예산 생성 함수\nasync function createProjectBudgets(client: any, projectId: string, data: ProjectCreationRequest) {\n  logger.log('💰 [생성] 연차별 예산 삽입 시작')\n\n  const budgetIds: string[] = []\n\n  for (const period of data.annualPeriods) {\n    logger.log(`💰 [생성] ${period.periodNumber}차년도 예산 생성`)\n\n    // 예산 항목별 배분 계산 - 중앙화된 함수 사용\n    const personnelCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find(c => c.name === '인건비')?.percentage || 0\n    )\n    const materialCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find(c => c.name === '재료비')?.percentage || 0\n    )\n    const activityCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find(c => c.name === '연구활동비')?.percentage || 0\n    )\n    const indirectCost = calculateBudgetAllocation(\n      period.budget,\n      data.budgetCategories.find(c => c.name === '간접비')?.percentage || 0\n    )\n\n    const budgetQuery = `\n      INSERT INTO project_budgets (\n        project_id, period_number, start_date, end_date,\n        personnel_cost, research_material_cost, research_activity_cost, research_stipend, indirect_cost,\n        personnel_cost_cash, personnel_cost_in_kind,\n        research_material_cost_cash, research_material_cost_in_kind,\n        research_activity_cost_cash, research_activity_cost_in_kind,\n        research_stipend_cash, research_stipend_in_kind,\n        indirect_cost_cash, indirect_cost_in_kind,\n        government_funding_amount, company_cash_amount, company_in_kind_amount,\n        created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, NOW(), NOW())\n      RETURNING id\n    `\n\n    // 각 비목의 총합 계산 (현금 + 현물)\n    const personnelCost = (period.personnelCostCash || 0) + (period.personnelCostInKind || 0)\n    const researchMaterialCost =\n      (period.researchMaterialCostCash || 0) + (period.researchMaterialCostInKind || 0)\n    const researchActivityCost =\n      (period.researchActivityCostCash || 0) + (period.researchActivityCostInKind || 0)\n    const researchStipend = (period.researchStipendCash || 0) + (period.researchStipendInKind || 0)\n    const indirectCost = (period.indirectCostCash || 0) + (period.indirectCostInKind || 0)\n\n    const result = await client.query(budgetQuery, [\n      projectId,\n      period.periodNumber,\n      period.startDate,\n      period.endDate,\n      personnelCost,\n      researchMaterialCost,\n      researchActivityCost,\n      researchStipend,\n      indirectCost,\n      period.personnelCostCash || 0,\n      period.personnelCostInKind || 0,\n      period.researchMaterialCostCash || 0,\n      period.researchMaterialCostInKind || 0,\n      period.researchActivityCostCash || 0,\n      period.researchActivityCostInKind || 0,\n      period.researchStipendCash || 0,\n      period.researchStipendInKind || 0,\n      period.indirectCostCash || 0,\n      period.indirectCostInKind || 0,\n      period.governmentFundingAmount || 0,\n      period.companyCashAmount || 0,\n      period.companyInKindAmount || 0\n    ])\n\n    budgetIds.push(result.rows[0].id)\n    logger.log(`💰 [생성] ${period.periodNumber}차년도 예산 생성 완료 - ID: ${result.rows[0].id}`)\n  }\n\n  return budgetIds\n}\n\n// 참여연구원 생성 함수\nasync function createProjectMembers(client: any, projectId: string, data: ProjectCreationRequest) {\n  logger.log('👥 [생성] 참여연구원 삽입 시작')\n\n  const memberIds: string[] = []\n\n  for (const member of data.members) {\n    logger.log(`👥 [생성] 참여연구원 ${member.employeeId} 등록`)\n\n    // 참여연구원 날짜를 UTC 기준으로 변환하여 데이터베이스에 저장\n    const formatMemberDateToUtc = (dateStr: string) => {\n      if (!dateStr) return null\n\n      try {\n        // 중앙화된 날짜 변환 함수 사용 (UTC+9 타임존 적용)\n        return formatDateForAPI(dateStr)\n      } catch (error) {\n        logger.error('Date conversion error:', error)\n        return null\n      }\n    }\n\n    const memberQuery = `\n      INSERT INTO project_members (\n        project_id, employee_id, role, participation_rate, monthly_amount,\n        start_date, end_date, created_at, updated_at\n      ) VALUES ($1, $2, $3, $4, $5, $6, $7, NOW(), NOW())\n      RETURNING id\n    `\n\n    const result = await client.query(memberQuery, [\n      projectId,\n      member.employeeId,\n      member.role,\n      member.participationRate,\n      member.monthlyAmount,\n      formatMemberDateToUtc(member.startDate),\n      formatMemberDateToUtc(member.endDate)\n    ])\n\n    memberIds.push(result.rows[0].id)\n    logger.log(`👥 [생성] 참여연구원 ${member.employeeId} 등록 완료 - ID: ${result.rows[0].id}`)\n  }\n\n  return memberIds\n}\n\n// 증빙 항목 자동 생성 함수\nasync function createEvidenceItems(client: any, projectId: string, data: ProjectCreationRequest) {\n  logger.log('📄 [생성] 증빙 항목 자동 생성 시작')\n\n  const evidenceIds: string[] = []\n\n  // 각 연차별로 증빙 항목 생성\n  for (const period of data.annualPeriods) {\n    logger.log(`📄 [생성] ${period.periodNumber}차년도 증빙 항목 생성`)\n\n    // 해당 연차의 예산 ID 조회\n    const budgetResult = await client.query(\n      'SELECT id FROM project_budgets WHERE project_id = $1 AND period_number = $2',\n      [projectId, period.periodNumber]\n    )\n\n    if (budgetResult.rows.length === 0) {\n      logger.log(`❌ [생성] ${period.periodNumber}차년도 예산을 찾을 수 없습니다.`)\n      continue\n    }\n\n    const projectBudgetId = budgetResult.rows[0].id\n\n    // 예산 항목별로 증빙 항목 생성\n    for (const category of data.budgetCategories) {\n      if (category.percentage > 0) {\n        // 카테고리 ID 조회 (기본 카테고리 사용)\n        const categoryResult = await client.query(\n          'SELECT id FROM evidence_categories WHERE name = $1 LIMIT 1',\n          [category.name]\n        )\n\n        let categoryId = null\n        if (categoryResult.rows.length > 0) {\n          categoryId = categoryResult.rows[0].id\n        } else {\n          // 카테고리가 없으면 기본 카테고리 생성\n          const createCategoryResult = await client.query(\n            'INSERT INTO evidence_categories (name, description) VALUES ($1, $2) RETURNING id',\n            [category.name, `${category.name} 증빙 항목`]\n          )\n          categoryId = createCategoryResult.rows[0].id\n        }\n\n        const evidenceQuery = `\n          INSERT INTO evidence_items (\n            project_budget_id, category_id, name, budget_amount, spent_amount,\n            status, due_date, created_at, updated_at\n          ) VALUES ($1, $2, $3, $4, 0, 'planned', $5, NOW(), NOW())\n          RETURNING id\n        `\n\n        // UTC+9 타임존 적용된 연차 종료 후 1개월 계산\n        const periodEndUtc = new Date(period.endDate + 'T23:59:59.999Z')\n        const dueDate = new Date(periodEndUtc)\n        dueDate.setUTCMonth(dueDate.getUTCMonth() + 1) // 연차 종료 후 1개월\n\n        // 중앙화된 날짜 변환 함수 사용 (UTC+9 타임존 적용)\n        const formattedDueDate = formatDateForAPI(dueDate)\n\n        const result = await client.query(evidenceQuery, [\n          projectBudgetId,\n          categoryId,\n          `${category.name} 증빙`,\n          calculateBudgetAllocation(period.budget, category.percentage),\n          formattedDueDate\n        ])\n\n        evidenceIds.push(result.rows[0].id)\n        logger.log(\n          `📄 [생성] ${period.periodNumber}차년도 ${category.name} 증빙 항목 생성 완료 - ID: ${result.rows[0].id}`\n        )\n      }\n    }\n  }\n\n  return evidenceIds\n}\n\n// 생성된 프로젝트 검증 함수\nasync function validateCreatedProject(client: any, projectId: string) {\n  logger.log('🔍 [검증] 생성된 프로젝트 데이터 검증 시작')\n\n  const errors: string[] = []\n\n  // 프로젝트 기본 정보 확인\n  const projectResult = await client.query('SELECT * FROM projects WHERE id = $1', [projectId])\n  if (projectResult.rows.length === 0) {\n    errors.push('프로젝트가 생성되지 않았습니다.')\n  }\n\n  // 연차별 예산 확인\n  const budgetResult = await client.query(\n    'SELECT * FROM project_budgets WHERE project_id = $1 ORDER BY period_number',\n    [projectId]\n  )\n  if (budgetResult.rows.length === 0) {\n    errors.push('연차별 예산이 생성되지 않았습니다.')\n  }\n\n  // 참여연구원 확인\n  const memberResult = await client.query('SELECT * FROM project_members WHERE project_id = $1', [\n    projectId\n  ])\n  if (memberResult.rows.length === 0) {\n    errors.push('참여연구원이 등록되지 않았습니다.')\n  }\n\n  // 예산 합계 검증\n  const totalBudgetFromDB = budgetResult.rows.reduce(\n    (sum, budget) => sum + parseFloat(budget.total_budget),\n    0\n  )\n  const projectBudget = parseFloat(projectResult.rows[0].budget_total)\n\n  if (Math.abs(totalBudgetFromDB - projectBudget) > 1000) {\n    errors.push(\n      `데이터베이스의 연차별 예산 합계(${totalBudgetFromDB.toLocaleString()}원)와 프로젝트 총 예산(${projectBudget.toLocaleString()}원)이 일치하지 않습니다.`\n    )\n  }\n\n  logger.log('🔍 [검증] 생성된 프로젝트 데이터 검증 완료')\n\n  return { isValid: errors.length === 0, errors }\n}\n\n// 자동 검증 및 수정 실행 함수\nasync function runAutoValidationAndFix(projectId: string) {\n  try {\n    logger.log('🛡️ [자동검증] 프로젝트 검증 룰 실행 시작')\n\n    // 간단한 검증 API 호출\n    const response = await fetch(`http://localhost:5173/api/project-management/simple-validation`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        projectId: projectId\n      })\n    })\n\n    if (!response.ok) {\n      throw new Error(`검증 API 호출 실패: ${response.status}`)\n    }\n\n    const result = await response.json()\n    logger.log('🛡️ [자동검증] 검증 룰 실행 완료:', result)\n\n    return result\n  } catch (error) {\n    logger.error('💥 [자동검증] 오류:', error)\n    return {\n      success: false,\n      errors: [error instanceof Error ? error.message : '알 수 없는 오류'],\n      fixedIssues: 0\n    }\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/employees/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/employees/[id]/contract/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-categories/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-documents/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-items/[id]/update-name/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-items/validate-employment/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":90,"column":47,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":90,"endColumn":76},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":98,"column":45,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":98,"endColumn":67},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":112,"column":17,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":112,"endColumn":172},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":112,"column":49,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":112,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":112,"column":116,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":112,"endColumn":143},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":118,"column":17,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":118,"endColumn":172},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":118,"column":49,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":118,"endColumn":78},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":118,"column":116,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":118,"endColumn":143},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":126,"column":42,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":126,"endColumn":71},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":151,"column":15,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":151,"endColumn":60}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { formatDateForDisplay } from '$lib/utils/date-handler'\nimport { json } from '@sveltejs/kit'\nimport { Pool } from 'pg'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false }\n})\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { assigneeId, dueDate, projectBudgetId } = await request.json()\n\n    if (!assigneeId || !dueDate || !projectBudgetId) {\n      return json({ error: '담당자 ID, 기한, 프로젝트 예산 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    // 담당자의 재직 정보 조회\n    const employeeResult = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tid,\n\t\t\t\tfirst_name,\n\t\t\t\tlast_name,\n\t\t\t\thire_date,\n\t\t\t\ttermination_date,\n\t\t\t\tstatus\n\t\t\tFROM employees \n\t\t\tWHERE id = $1\n\t\t`,\n      [assigneeId]\n    )\n\n    if (employeeResult.rows.length === 0) {\n      return json({\n        success: false,\n        error: 'EMPLOYEE_NOT_FOUND',\n        message: '담당 직원을 찾을 수 없습니다.'\n      })\n    }\n\n    const employee = employeeResult.rows[0]\n    const dueDateObj = new Date(dueDate)\n    const hireDate = employee.hire_date ? new Date(employee.hire_date) : null\n    const terminationDate = employee.termination_date ? new Date(employee.termination_date) : null\n\n    // 프로젝트 예산 기간 조회\n    const budgetResult = await pool.query(\n      `\n\t\t\tSELECT \n\t\t\t\tstart_date,\n\t\t\t\tend_date,\n\t\t\t\tperiod_number,\n\t\t\t\tfiscal_year\n\t\t\tFROM project_budgets \n\t\t\tWHERE id = $1\n\t\t`,\n      [projectBudgetId]\n    )\n\n    if (budgetResult.rows.length === 0) {\n      return json({\n        success: false,\n        error: 'BUDGET_NOT_FOUND',\n        message: '프로젝트 예산 정보를 찾을 수 없습니다.'\n      })\n    }\n\n    const budget = budgetResult.rows[0]\n    const periodStartDate = new Date(budget.start_date)\n    const periodEndDate = new Date(budget.end_date)\n\n    // 재직 기간 검증\n    let isValid = true\n    let reason = 'VALID'\n    let message = '재직 기간이 유효합니다.'\n    const warnings = []\n\n    // 1. 퇴사한 직원인지 확인\n    if (employee.status === 'terminated' || terminationDate) {\n      if (terminationDate && dueDateObj > terminationDate) {\n        isValid = false\n        reason = 'TERMINATED_BEFORE_DUE_DATE'\n        message = `퇴사일(${formatDateForDisplay(terminationDate.toISOString(), 'KOREAN')}) 이후에 인건비를 집행할 수 없습니다.`\n      }\n    }\n\n    // 2. 입사 전에 인건비가 집행되었는지 확인\n    if (hireDate && dueDateObj < hireDate) {\n      isValid = false\n      reason = 'HIRED_AFTER_DUE_DATE'\n      message = `입사일(${formatDateForDisplay(hireDate.toISOString(), 'KOREAN')}) 이전에 인건비를 집행할 수 없습니다.`\n    }\n\n    // 3. 현재 비활성 상태인 직원인지 확인\n    if (employee.status === 'inactive') {\n      isValid = false\n      reason = 'INACTIVE_EMPLOYEE'\n      message = '비활성 상태인 직원에게 인건비를 집행할 수 없습니다.'\n    }\n\n    // 4. 프로젝트 기간과 재직 기간이 겹치는지 확인\n    if (hireDate && periodEndDate < hireDate) {\n      isValid = false\n      reason = 'HIRED_AFTER_PROJECT_PERIOD'\n      message = `프로젝트 기간(${formatDateForDisplay(periodStartDate.toISOString(), 'KOREAN')} ~ ${formatDateForDisplay(periodEndDate.toISOString(), 'KOREAN')}) 이후에 입사한 직원입니다.`\n    }\n\n    if (terminationDate && periodStartDate > terminationDate) {\n      isValid = false\n      reason = 'TERMINATED_BEFORE_PROJECT_PERIOD'\n      message = `프로젝트 기간(${formatDateForDisplay(periodStartDate.toISOString(), 'KOREAN')} ~ ${formatDateForDisplay(periodEndDate.toISOString(), 'KOREAN')}) 이전에 퇴사한 직원입니다.`\n    }\n\n    // 5. 경고사항 체크 (유효하지만 주의가 필요한 경우)\n    if (isValid) {\n      // 퇴사 예정인 직원\n      if (terminationDate && dueDateObj > terminationDate) {\n        warnings.push(\n          `퇴사 예정일(${formatDateForDisplay(terminationDate.toISOString(), 'KOREAN')}) 이후의 인건비입니다.`\n        )\n      }\n\n      // 입사한 지 얼마 안 된 직원\n      if (hireDate) {\n        const daysSinceHire = Math.floor(\n          (dueDateObj.getTime() - hireDate.getTime()) / (1000 * 60 * 60 * 24)\n        )\n        if (daysSinceHire < 30) {\n          warnings.push(`입사한 지 ${daysSinceHire}일밖에 안 된 직원입니다.`)\n        }\n      }\n    }\n\n    return json({\n      success: true,\n      validation: {\n        isValid,\n        reason,\n        message,\n        warnings\n      },\n      employee: {\n        id: employee.id,\n        name: `${employee.last_name}${employee.first_name}`,\n        hireDate: employee.hire_date,\n        terminationDate: employee.termination_date,\n        status: employee.status\n      },\n      projectPeriod: {\n        startDate: budget.start_date,\n        endDate: budget.end_date,\n        periodNumber: budget.period_number,\n        fiscalYear: budget.fiscal_year\n      },\n      dueDate: dueDate\n    })\n  } catch (error) {\n    logger.error('Employment validation error:', error)\n    return json(\n      {\n        success: false,\n        error: 'VALIDATION_ERROR',\n        message: '재직 기간 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-schedules/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence-types/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/evidence/[id]/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":170,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":170,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":189,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":194,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedItem' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":198,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":22}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 개별 증빙 항목 API\n// Individual Evidence Item API\n\nimport { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// 증빙 항목 상세 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 증빙 항목 상세 정보 조회\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tei.*,\n\t\t\t\tec.name as category_name,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as assignee_full_name,\n\t\t\t\tpb.period_number,\n\t\t\t\tpb.fiscal_year,\n\t\t\t\tpb.personnel_cost_cash,\n\t\t\t\tpb.personnel_cost_in_kind,\n\t\t\t\tpb.research_material_cost_cash,\n\t\t\t\tpb.research_material_cost_in_kind,\n\t\t\t\tpb.research_activity_cost_cash,\n\t\t\t\tpb.research_activity_cost_in_kind,\n\t\t\t\tpb.indirect_cost_cash,\n\t\t\t\tpb.indirect_cost_in_kind\n\t\t\tFROM evidence_items ei\n\t\t\tJOIN evidence_categories ec ON ei.category_id = ec.id\n\t\t\tLEFT JOIN employees e ON ei.assignee_id = e.id\n\t\t\tLEFT JOIN project_budgets pb ON ei.project_budget_id = pb.id\n\t\t\tWHERE ei.id = $1\n\t\t`,\n      [id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '증빙 항목을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const evidenceItem = result.rows[0]\n\n    // 증빙 서류 목록 조회\n    const documentsResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\ted.*,\n\t\t\t\tuploader.first_name || ' ' || uploader.last_name as uploader_name,\n\t\t\t\treviewer.first_name || ' ' || reviewer.last_name as reviewer_name\n\t\t\tFROM evidence_documents ed\n\t\t\tLEFT JOIN employees uploader ON ed.uploader_id = uploader.id\n\t\t\tLEFT JOIN employees reviewer ON ed.reviewer_id = reviewer.id\n\t\t\tWHERE ed.evidence_item_id = $1\n\t\t\tORDER BY ed.upload_date DESC\n\t\t`,\n      [id]\n    )\n\n    // 증빙 일정 목록 조회\n    const schedulesResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tes.*,\n\t\t\t\tCONCAT(assignee.last_name, assignee.first_name) as assignee_name\n\t\t\tFROM evidence_schedules es\n\t\t\tLEFT JOIN employees assignee ON es.assignee_id = assignee.id\n\t\t\tWHERE es.evidence_item_id = $1\n\t\t\tORDER BY es.due_date ASC\n\t\t`,\n      [id]\n    )\n\n    // 증빙 검토 이력 조회\n    const reviewHistoryResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\terh.*,\n\t\t\t\treviewer.first_name || ' ' || reviewer.last_name as reviewer_name\n\t\t\tFROM evidence_review_history erh\n\t\t\tLEFT JOIN employees reviewer ON erh.reviewer_id = reviewer.id\n\t\t\tWHERE erh.evidence_item_id = $1\n\t\t\tORDER BY erh.reviewed_at DESC\n\t\t`,\n      [id]\n    )\n\n    return json({\n      success: true,\n      data: {\n        ...evidenceItem,\n        documents: documentsResult.rows,\n        schedules: schedulesResult.rows,\n        reviewHistory: reviewHistoryResult.rows\n      }\n    })\n  } catch (error) {\n    logger.error('증빙 항목 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '증빙 항목 조회에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 증빙 항목 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const { id } = params\n    const data = await request.json()\n    const {\n      name,\n      description,\n      budgetAmount,\n      spentAmount,\n      assigneeId,\n      assigneeName,\n      progress,\n      status,\n      dueDate,\n      startDate,\n      endDate\n    } = data\n\n    // 증빙 항목 존재 확인\n    const existingItem = await query('SELECT id FROM evidence_items WHERE id = $1', [id])\n    if (existingItem.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '증빙 항목을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 업데이트할 필드들 동적 생성\n    const updateFields = []\n    const updateValues = []\n    let paramIndex = 1\n\n    const fieldsToUpdate = {\n      name,\n      description,\n      budget_amount: budgetAmount,\n      spent_amount: spentAmount,\n      assignee_id: assigneeId,\n      assignee_name: assigneeName,\n      progress,\n      status,\n      due_date: dueDate,\n      start_date: startDate,\n      end_date: endDate\n    }\n\n    Object.entries(fieldsToUpdate).forEach(([key, value]) => {\n      if (value !== undefined) {\n        updateFields.push(`${key} = $${paramIndex++}`)\n        updateValues.push(value)\n      }\n    })\n\n    if (updateFields.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '수정할 데이터가 없습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    updateValues.push(id) // Add id as the last parameter for WHERE clause\n\n    const result = await query(\n      `\n\t\t\tUPDATE evidence_items \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      updateValues\n    )\n\n    const updatedItem = result.rows[0]\n\n    // 업데이트된 증빙 항목의 상세 정보 조회\n    const detailResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tei.*,\n\t\t\t\tec.name as category_name,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as assignee_full_name,\n\t\t\t\tpb.period_number,\n\t\t\t\tpb.fiscal_year\n\t\t\tFROM evidence_items ei\n\t\t\tJOIN evidence_categories ec ON ei.category_id = ec.id\n\t\t\tLEFT JOIN employees e ON ei.assignee_id = e.id\n\t\t\tLEFT JOIN project_budgets pb ON ei.project_budget_id = pb.id\n\t\t\tWHERE ei.id = $1\n\t\t`,\n      [id]\n    )\n\n    return json({\n      success: true,\n      data: detailResult.rows[0],\n      message: '증빙 항목이 성공적으로 수정되었습니다.'\n    })\n  } catch (error) {\n    logger.error('증빙 항목 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '증빙 항목 수정에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 증빙 항목 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 증빙 항목 존재 확인\n    const existingItem = await query('SELECT id FROM evidence_items WHERE id = $1', [id])\n    if (existingItem.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '증빙 항목을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 증빙 항목 삭제 (CASCADE로 관련 데이터도 함께 삭제됨)\n    await query('DELETE FROM evidence_items WHERE id = $1', [id])\n\n    return json({\n      success: true,\n      message: '증빙 항목이 성공적으로 삭제되었습니다.'\n    })\n  } catch (error) {\n    logger.error('증빙 항목 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '증빙 항목 삭제에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/global-factors/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-add-research-stipend/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-budget-cash-kind/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-budget-simplified/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-participation-rate-decimal/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate-remove-salary-multiplier/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/migrate/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/participation-rates/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/participation-rates/summary/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-budgets/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'budgetCategoryId' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":11,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { transformArrayData, transformProjectBudgetData } from '$lib/utils/api-data-transformer'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// GET /api/project-management/project-budgets - 프로젝트 사업비 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n    const budgetCategoryId = url.searchParams.get('budgetCategoryId')\n\n    let sqlQuery = `\n\t\t\tSELECT \n\t\t\t\tpb.*,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_budgets pb\n\t\t\tJOIN projects p ON pb.project_id = p.id\n\t\t\tWHERE 1=1\n\t\t`\n\n    const params: unknown[] = []\n    let paramIndex = 1\n\n    if (projectId) {\n      sqlQuery += ` AND pb.project_id = $${paramIndex}`\n      params.push(projectId)\n      paramIndex++\n    }\n\n    sqlQuery += ` ORDER BY pb.period_number ASC, pb.created_at ASC`\n\n    const result = await query(sqlQuery, params)\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedData = transformArrayData(result.rows, transformProjectBudgetData)\n\n    return json({\n      success: true,\n      data: transformedData\n    })\n  } catch (error) {\n    logger.error('프로젝트 사업비 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 사업비를 불러오는데 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/project-management/project-budgets - 프로젝트 사업비 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n    const {\n      projectId,\n      periodNumber = 1,\n      startDate,\n      endDate,\n      // 현금 비목들\n      personnelCostCash = 0,\n      researchMaterialCostCash = 0,\n      researchActivityCostCash = 0,\n      researchStipendCash = 0,\n      indirectCostCash = 0,\n      // 현물 비목들\n      personnelCostInKind = 0,\n      researchMaterialCostInKind = 0,\n      researchActivityCostInKind = 0,\n      researchStipendInKind = 0,\n      indirectCostInKind = 0\n    } = data\n\n    // 필수 필드 검증\n    if (!projectId) {\n      return json(\n        {\n          success: false,\n          message: '필수 필드가 누락되었습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 검사\n    const existingBudget = await query(\n      'SELECT id FROM project_budgets WHERE project_id = $1 AND period_number = $2',\n      [projectId, periodNumber]\n    )\n\n    if (existingBudget.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          message: '해당 연차에 대한 예산이 이미 존재합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 각 비목의 총합 계산 (현금 + 현물) - 로직으로 계산하므로 DB에 저장하지 않음\n    const personnelCost = personnelCostCash + personnelCostInKind\n    const researchMaterialCost = researchMaterialCostCash + researchMaterialCostInKind\n    const researchActivityCost = researchActivityCostCash + researchActivityCostInKind\n    const researchStipend = researchStipendCash + researchStipendInKind\n    const indirectCost = indirectCostCash + indirectCostInKind\n\n    // 사업비 생성\n    const result = await query(\n      `\n\t\t\tINSERT INTO project_budgets (\n\t\t\t\tproject_id, period_number, start_date, end_date,\n\t\t\t\tpersonnel_cost, research_material_cost, research_activity_cost, research_stipend, indirect_cost,\n\t\t\t\tpersonnel_cost_cash, personnel_cost_in_kind,\n\t\t\t\tresearch_material_cost_cash, research_material_cost_in_kind,\n\t\t\t\tresearch_activity_cost_cash, research_activity_cost_in_kind,\n\t\t\t\tresearch_stipend_cash, research_stipend_in_kind,\n\t\t\t\tindirect_cost_cash, indirect_cost_in_kind\n\t\t\t)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)\n\t\t\tRETURNING *\n\t\t`,\n      [\n        projectId,\n        periodNumber,\n        startDate,\n        endDate,\n        personnelCost,\n        researchMaterialCost,\n        researchActivityCost,\n        researchStipend,\n        indirectCost,\n        personnelCostCash,\n        personnelCostInKind,\n        researchMaterialCostCash,\n        researchMaterialCostInKind,\n        researchActivityCostCash,\n        researchActivityCostInKind,\n        researchStipendCash,\n        researchStipendInKind,\n        indirectCostCash,\n        indirectCostInKind\n      ]\n    )\n\n    // 생성된 사업비 정보와 관련 정보 조회\n    const budgetWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpb.*,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_budgets pb\n\t\t\tJOIN projects p ON pb.project_id = p.id\n\t\t\tWHERE pb.id = $1\n\t\t`,\n      [result.rows[0].id]\n    )\n\n    return json({\n      success: true,\n      data: budgetWithDetails.rows[0],\n      message: '프로젝트 사업비가 성공적으로 생성되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 사업비 생성 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 사업비 생성에 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-budgets/[id]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":92,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":92,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// GET /api/project-management/project-budgets/[id] - 특정 프로젝트 사업비 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpb.*,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_budgets pb\n\t\t\tJOIN projects p ON pb.project_id = p.id\n\t\t\tWHERE pb.id = $1\n\t\t`,\n      [params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 사업비를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: result.rows[0]\n    })\n  } catch (error) {\n    logger.error('프로젝트 사업비 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 사업비를 불러오는데 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// PUT /api/project-management/project-budgets/[id] - 프로젝트 사업비 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n    const {\n      periodNumber = 1,\n      startDate,\n      endDate,\n      // 현금 비목들\n      personnelCostCash = 0,\n      researchMaterialCostCash = 0,\n      researchActivityCostCash = 0,\n      researchStipendCash = 0,\n      indirectCostCash = 0,\n      // 현물 비목들\n      personnelCostInKind = 0,\n      researchMaterialCostInKind = 0,\n      researchActivityCostInKind = 0,\n      researchStipendInKind = 0,\n      indirectCostInKind = 0\n    } = data\n\n    // 사업비 존재 확인\n    const existingBudget = await query('SELECT * FROM project_budgets WHERE id = $1', [params.id])\n\n    if (existingBudget.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 사업비를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 각 비목의 총합 계산 (현금 + 현물) - 로직으로 계산하므로 DB에 저장하지 않음\n    const personnelCost = personnelCostCash + personnelCostInKind\n    const researchMaterialCost = researchMaterialCostCash + researchMaterialCostInKind\n    const researchActivityCost = researchActivityCostCash + researchActivityCostInKind\n    const researchStipend = researchStipendCash + researchStipendInKind\n    const indirectCost = indirectCostCash + indirectCostInKind\n\n    // 사업비 수정\n    const result = await query(\n      `\n\t\t\tUPDATE project_budgets \n\t\t\tSET \n\t\t\t\tperiod_number = $1,\n\t\t\t\tstart_date = $2,\n\t\t\t\tend_date = $3,\n\t\t\t\tpersonnel_cost = $4,\n\t\t\t\tresearch_material_cost = $5,\n\t\t\t\tresearch_activity_cost = $6,\n\t\t\t\tresearch_stipend = $7,\n\t\t\t\tindirect_cost = $8,\n\t\t\t\tpersonnel_cost_cash = $9,\n\t\t\t\tpersonnel_cost_in_kind = $10,\n\t\t\t\tresearch_material_cost_cash = $11,\n\t\t\t\tresearch_material_cost_in_kind = $12,\n\t\t\t\tresearch_activity_cost_cash = $13,\n\t\t\t\tresearch_activity_cost_in_kind = $14,\n\t\t\t\tresearch_stipend_cash = $15,\n\t\t\t\tresearch_stipend_in_kind = $16,\n\t\t\t\tindirect_cost_cash = $17,\n\t\t\t\tindirect_cost_in_kind = $18,\n\t\t\t\tupdated_at = CURRENT_TIMESTAMP\n\t\t\tWHERE id = $19\n\t\t\tRETURNING *\n\t\t`,\n      [\n        periodNumber,\n        startDate,\n        endDate,\n        personnelCost,\n        researchMaterialCost,\n        researchActivityCost,\n        researchStipend,\n        indirectCost,\n        personnelCostCash,\n        personnelCostInKind,\n        researchMaterialCostCash,\n        researchMaterialCostInKind,\n        researchActivityCostCash,\n        researchActivityCostInKind,\n        researchStipendCash,\n        researchStipendInKind,\n        indirectCostCash,\n        indirectCostInKind,\n        params.id\n      ]\n    )\n\n    // 수정된 사업비 정보와 관련 정보 조회\n    const budgetWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpb.*,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_budgets pb\n\t\t\tJOIN projects p ON pb.project_id = p.id\n\t\t\tWHERE pb.id = $1\n\t\t`,\n      [params.id]\n    )\n\n    return json({\n      success: true,\n      data: budgetWithDetails.rows[0],\n      message: '프로젝트 사업비가 성공적으로 수정되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 사업비 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 사업비 수정에 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE /api/project-management/project-budgets/[id] - 프로젝트 사업비 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    // 사업비 존재 확인\n    const existingBudget = await query('SELECT * FROM project_budgets WHERE id = $1', [params.id])\n\n    if (existingBudget.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 사업비를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 사업비 삭제\n    await query('DELETE FROM project_budgets WHERE id = $1', [params.id])\n\n    return json({\n      success: true,\n      message: '프로젝트 사업비가 성공적으로 삭제되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 사업비 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 사업비 삭제에 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-members/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'finalContractAmount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":168,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":168,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projectEndDate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":195,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":195,"endColumn":29},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":201,"column":23,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":201,"endColumn":110}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { transformArrayData, transformProjectMemberData } from '$lib/utils/api-data-transformer'\nimport { formatDateForAPI, formatDateForKorean } from '$lib/utils/date-calculator'\nimport { calculateMonthlySalary } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// GET /api/project-management/project-members - 프로젝트 멤버 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n    const employeeId = url.searchParams.get('employeeId')\n    const status = url.searchParams.get('status')\n    const role = url.searchParams.get('role')\n\n    let sqlQuery = `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE 1=1\n\t\t`\n\n    const params: unknown[] = []\n    let paramIndex = 1\n\n    if (projectId) {\n      sqlQuery += ` AND pm.project_id = $${paramIndex}`\n      params.push(projectId)\n      paramIndex++\n    }\n\n    if (employeeId) {\n      sqlQuery += ` AND pm.employee_id = $${paramIndex}`\n      params.push(employeeId)\n      paramIndex++\n    }\n\n    if (status) {\n      sqlQuery += ` AND pm.status = $${paramIndex}`\n      params.push(status)\n      paramIndex++\n    }\n\n    if (role) {\n      sqlQuery += ` AND pm.role = $${paramIndex}`\n      params.push(role)\n      paramIndex++\n    }\n\n    sqlQuery += ` ORDER BY pm.created_at DESC`\n\n    const result = await query(sqlQuery, params)\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedData = transformArrayData(result.rows, transformProjectMemberData)\n\n    return json({\n      success: true,\n      data: transformedData\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버를 불러오는데 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// POST /api/project-management/project-members - 프로젝트 멤버 추가\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const data = await request.json()\n    const {\n      projectId,\n      employeeId,\n      role = 'researcher',\n      startDate,\n      endDate,\n      participationRate = 100,\n      contributionType = 'cash',\n      contractAmount = 0,\n      status = 'active'\n    } = data\n\n    // 필수 필드 검증\n    if (!projectId || !employeeId) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 ID와 직원 ID는 필수입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 참여율 검증 (0-100 사이)\n    if (participationRate < 0 || participationRate > 100) {\n      return json(\n        {\n          success: false,\n          message: '참여율은 0-100 사이의 값이어야 합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 중복 검사\n    const existingMember = await query(\n      'SELECT id FROM project_members WHERE project_id = $1 AND employee_id = $2',\n      [projectId, employeeId]\n    )\n\n    if (existingMember.rows.length > 0) {\n      return json(\n        {\n          success: false,\n          message: '해당 직원은 이미 이 프로젝트의 멤버입니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 해당 직원의 프로젝트 참여 기간에 유효한 급여 계약서 조회\n    // 프로젝트 참여 기간과 계약서 기간이 겹치는 경우를 찾음\n    const contractResult = await query(\n      `\n\t\t\tSELECT sc.annual_salary, sc.monthly_salary\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\t\tAND sc.status = 'active'\n\t\t\t\tAND (\n\t\t\t\t\t-- 계약서 시작일이 프로젝트 참여 기간 내에 있거나\n\t\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\t\tOR\n\t\t\t\t\t-- 프로젝트 참여 기간이 계약서 기간 내에 있거나\n\t\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t\t)\n\t\t\tORDER BY sc.start_date DESC\n\t\t\tLIMIT 1\n\t\t`,\n      [employeeId, startDate, endDate]\n    )\n\n    // 계약서에서 연봉을 가져오거나, 제공된 계약금액 사용\n    let finalContractAmount = contractAmount\n    if (contractResult.rows.length > 0) {\n      // 연봉을 월급으로 변환 (연봉 / 12)\n      finalContractAmount = contractResult.rows[0].annual_salary / 12\n    } else {\n      // 계약서가 없는 경우, 해당 직원의 모든 계약서 정보를 조회하여 안내 메시지 생성\n      const allContractsResult = await query(\n        `\n\t\t\t\tSELECT sc.start_date, sc.end_date, sc.annual_salary, sc.status\n\t\t\t\tFROM salary_contracts sc\n\t\t\t\tWHERE sc.employee_id = $1\n\t\t\t\tORDER BY sc.start_date DESC\n\t\t\t`,\n        [employeeId]\n      )\n\n      if (allContractsResult.rows.length === 0) {\n        return json(\n          {\n            success: false,\n            message:\n              '해당 직원의 급여 계약서가 등록되지 않았습니다. 급여 계약서를 먼저 등록해주세요.',\n            errorCode: 'NO_CONTRACT'\n          },\n          { status: 400 }\n        )\n      } else {\n        // 계약서는 있지만 기간이 맞지 않는 경우\n        const contracts = allContractsResult.rows\n        const projectStartDate = startDate ? new Date(startDate) : new Date()\n        const projectEndDate = endDate ? new Date(endDate) : new Date()\n\n        // 가장 가까운 계약서 찾기\n        const futureContracts = contracts.filter(c => new Date(c.start_date) > projectStartDate)\n        const pastContracts = contracts.filter(c => new Date(c.start_date) <= projectStartDate)\n\n        let message = `프로젝트 참여 기간(${startDate || '시작일 미정'} ~ ${endDate || '종료일 미정'})에 해당 직원이 재직 중이 아닙니다.\\n\\n`\n\n        if (futureContracts.length > 0) {\n          const nextContract = futureContracts[futureContracts.length - 1] // 가장 가까운 미래 계약\n          const contractStartDate = formatDateForKorean(nextContract.start_date)\n          message += `다음 계약 시작일: ${contractStartDate}\\n`\n          message += `해당 날짜부터 프로젝트 참여가 가능합니다.`\n        } else if (pastContracts.length > 0) {\n          const lastContract = pastContracts[0]\n          if (lastContract.end_date) {\n            const contractEndDate = formatDateForKorean(lastContract.end_date)\n            message += `마지막 계약 종료일: ${contractEndDate}\\n`\n            message += `해당 직원은 이미 퇴사한 상태입니다.`\n          } else {\n            message += `계약서 상태를 확인해주세요.`\n          }\n        }\n\n        return json(\n          {\n            success: false,\n            message: message,\n            errorCode: 'CONTRACT_PERIOD_MISMATCH',\n            contracts: contracts.map(c => ({\n              startDate: c.start_date,\n              endDate: c.end_date,\n              status: c.status\n            }))\n          },\n          { status: 400 }\n        )\n      }\n    }\n\n    // 실제 근로계약서에서 월급 가져오기\n    let contractMonthlySalary = 0\n    if (contractResult.rows.length > 0) {\n      const contract = contractResult.rows[0]\n      contractMonthlySalary = contract.monthly_salary || contract.annual_salary / 12\n    }\n\n    // 월간 금액 계산: 중앙화된 급여 계산 함수 사용\n    const monthlyAmount = calculateMonthlySalary(\n      contractMonthlySalary * 12, // 연봉으로 변환\n      participationRate\n    )\n\n    // 프로젝트 멤버 추가 (contract_amount 제거)\n    const result = await query(\n      `\n\t\t\tINSERT INTO project_members (project_id, employee_id, role, start_date, end_date, participation_rate, contribution_type, monthly_amount, status)\n\t\t\tVALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n\t\t\tRETURNING *\n\t\t`,\n      [\n        projectId,\n        employeeId,\n        role,\n        startDate,\n        endDate,\n        participationRate,\n        contributionType,\n        monthlyAmount,\n        status\n      ]\n    )\n\n    // 추가된 멤버 정보와 관련 정보 조회\n    const memberWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE pm.id = $1\n\t\t`,\n      [result.rows[0].id]\n    )\n\n    // TIMESTAMP 데이터를 YYYY-MM-DD 형식으로 변환 (중앙화된 함수 사용)\n    const memberData = memberWithDetails.rows[0]\n    const formattedMemberData = {\n      ...memberData,\n      start_date: formatDateForAPI(memberData.start_date),\n      end_date: formatDateForAPI(memberData.end_date)\n    }\n\n    return json({\n      success: true,\n      data: formattedMemberData,\n      message: '프로젝트 멤버가 성공적으로 추가되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 추가 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버 추가에 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/project-members/[id]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'result' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":287,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":17},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":288,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":293,"endColumn":4}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport {\n  calculateParticipationPeriod,\n  formatDateForAPI,\n  isValidDate,\n  isValidDateRange\n} from '$lib/utils/date-calculator'\nimport { calculateMonthlySalary } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// GET /api/project-management/project-members/[id] - 특정 프로젝트 멤버 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, ' ', e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE pm.id = $1\n\t\t`,\n      [params.id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 멤버를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // TIMESTAMP 데이터를 YYYY-MM-DD 형식으로 변환 (중앙화된 함수 사용)\n    const memberData = result.rows[0]\n    const formattedMemberData = {\n      ...memberData,\n      start_date: formatDateForAPI(memberData.start_date),\n      end_date: formatDateForAPI(memberData.end_date)\n    }\n\n    return json({\n      success: true,\n      data: formattedMemberData\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버를 불러오는데 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// PUT /api/project-management/project-members/[id] - 프로젝트 멤버 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const data = await request.json()\n    const {\n      role,\n      startDate,\n      endDate,\n      participationRate,\n      contributionType,\n      contractAmount,\n      status\n    } = data\n\n    // 필수 필드 검증\n    if (\n      role === undefined &&\n      startDate === undefined &&\n      endDate === undefined &&\n      participationRate === undefined &&\n      contributionType === undefined &&\n      contractAmount === undefined &&\n      status === undefined\n    ) {\n      return json(\n        {\n          success: false,\n          message: '수정할 필드가 없습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 참여율 검증 (0-100 사이)\n    if (participationRate !== undefined && (participationRate < 0 || participationRate > 100)) {\n      return json(\n        {\n          success: false,\n          message: '참여율은 0-100 사이의 값이어야 합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 멤버 존재 확인\n    const existingMember = await query('SELECT * FROM project_members WHERE id = $1', [params.id])\n\n    if (existingMember.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 멤버를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 멤버 수정\n    const updateFields = []\n    const updateValues = []\n    let paramIndex = 1\n\n    if (role !== undefined) {\n      updateFields.push(`role = $${paramIndex}`)\n      updateValues.push(role)\n      paramIndex++\n    }\n\n    // 참여기간 수정 시 UTC+9 타임존 적용 및 유효성 검증\n    if (startDate !== undefined) {\n      // 날짜 유효성 검증\n      if (!isValidDate(startDate)) {\n        return json(\n          {\n            success: false,\n            message: '유효하지 않은 시작일 형식입니다.'\n          },\n          { status: 400 }\n        )\n      }\n\n      // UTC+9 타임존 적용 (TIMESTAMP 타입으로 저장)\n      const formattedStartDate = new Date(startDate + 'T00:00:00.000+09:00')\n      updateFields.push(`start_date = $${paramIndex}`)\n      updateValues.push(formattedStartDate)\n      paramIndex++\n    }\n\n    if (endDate !== undefined) {\n      // 날짜 유효성 검증\n      if (!isValidDate(endDate)) {\n        return json(\n          {\n            success: false,\n            message: '유효하지 않은 종료일 형식입니다.'\n          },\n          { status: 400 }\n        )\n      }\n\n      // UTC+9 타임존 적용 (TIMESTAMP 타입으로 저장)\n      const formattedEndDate = new Date(endDate + 'T23:59:59.999+09:00')\n      updateFields.push(`end_date = $${paramIndex}`)\n      updateValues.push(formattedEndDate)\n      paramIndex++\n    }\n\n    // 시작일과 종료일이 모두 변경되는 경우 날짜 범위 검증\n    if (startDate !== undefined && endDate !== undefined) {\n      if (!isValidDateRange(startDate, endDate)) {\n        return json(\n          {\n            success: false,\n            message: '시작일이 종료일보다 늦을 수 없습니다.'\n          },\n          { status: 400 }\n        )\n      }\n\n      // 프로젝트 기간과의 겹침 검증\n      const currentMember = existingMember.rows[0]\n      const projectResult = await query('SELECT start_date, end_date FROM projects WHERE id = $1', [\n        currentMember.project_id\n      ])\n\n      if (projectResult.rows.length > 0) {\n        const project = projectResult.rows[0]\n        const participationValidation = calculateParticipationPeriod(\n          startDate,\n          endDate,\n          project.start_date,\n          project.end_date\n        )\n\n        if (!participationValidation.isValid) {\n          return json(\n            {\n              success: false,\n              message:\n                participationValidation.errorMessage || '참여기간이 프로젝트 기간과 맞지 않습니다.'\n            },\n            { status: 400 }\n          )\n        }\n      }\n    }\n\n    if (participationRate !== undefined) {\n      updateFields.push(`participation_rate = $${paramIndex}`)\n      updateValues.push(participationRate)\n      paramIndex++\n    }\n\n    if (contributionType !== undefined) {\n      updateFields.push(`contribution_type = $${paramIndex}`)\n      updateValues.push(contributionType)\n      paramIndex++\n    }\n\n    // contract_amount 필드 제거 - 실제 근로계약서에서 조회\n\n    if (status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`)\n      updateValues.push(status)\n      paramIndex++\n    }\n\n    // 참여율이 변경된 경우 월간금액 재계산\n    if (participationRate !== undefined) {\n      const currentMember = existingMember.rows[0]\n      const finalParticipationRate = participationRate\n\n      // 실제 근로계약서에서 최신 금액 조회\n      const contractResult = await query(\n        `\n\t\t\t\tSELECT sc.annual_salary, sc.monthly_salary\n\t\t\t\tFROM salary_contracts sc\n\t\t\t\tWHERE sc.employee_id = $1\n\t\t\t\t\tAND sc.status = 'active'\n\t\t\t\t\tAND (\n\t\t\t\t\t\t-- 계약서 시작일이 프로젝트 참여 기간 내에 있거나\n\t\t\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\t\t\tOR\n\t\t\t\t\t\t-- 프로젝트 참여 기간이 계약서 기간 내에 있거나\n\t\t\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t\t\t)\n\t\t\t\tORDER BY sc.start_date DESC\n\t\t\t\tLIMIT 1\n\t\t\t`,\n        [currentMember.employee_id, currentMember.start_date, currentMember.end_date]\n      )\n\n      let contractMonthlySalary = 0\n      if (contractResult.rows.length > 0) {\n        const contract = contractResult.rows[0]\n        contractMonthlySalary = contract.monthly_salary || contract.annual_salary / 12\n      }\n\n      // 월간 금액 계산: 중앙화된 급여 계산 함수 사용\n      const monthlyAmount = calculateMonthlySalary(\n        contractMonthlySalary * 12, // 연봉으로 변환\n        finalParticipationRate\n      )\n\n      updateFields.push(`monthly_amount = $${paramIndex}`)\n      updateValues.push(monthlyAmount)\n      paramIndex++\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    updateValues.push(params.id)\n\n    const result = await query(\n      `\n\t\t\tUPDATE project_members \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      updateValues\n    )\n\n    // 수정된 멤버 정보와 관련 정보 조회\n    const memberWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, ' ', e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position,\n\t\t\t\tp.title as project_title,\n\t\t\t\tp.code as project_code\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tJOIN projects p ON pm.project_id = p.id\n\t\t\tWHERE pm.id = $1\n\t\t`,\n      [params.id]\n    )\n\n    // TIMESTAMP 데이터를 YYYY-MM-DD 형식으로 변환 (중앙화된 함수 사용)\n    const memberData = memberWithDetails.rows[0]\n    const formattedMemberData = {\n      ...memberData,\n      start_date: formatDateForAPI(memberData.start_date),\n      end_date: formatDateForAPI(memberData.end_date)\n    }\n\n    return json({\n      success: true,\n      data: formattedMemberData,\n      message: '프로젝트 멤버가 성공적으로 수정되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버 수정에 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE /api/project-management/project-members/[id] - 프로젝트 멤버 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    // 멤버 존재 확인\n    const existingMember = await query('SELECT * FROM project_members WHERE id = $1', [params.id])\n\n    if (existingMember.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트 멤버를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 멤버 삭제\n    await query('DELETE FROM project_members WHERE id = $1', [params.id])\n\n    return json({\n      success: true,\n      message: '프로젝트 멤버가 성공적으로 삭제되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 멤버 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 멤버 삭제에 실패했습니다.',\n        error: (error as Error).message\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/projects/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/projects/[id]/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":207,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":207,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":226,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":231,"endColumn":4},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'updatedProject' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":235,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":235,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'project' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":293,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":18}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Project Management API - Individual Project\n// 개별 프로젝트 관련 API\n\nimport { query } from '$lib/database/connection'\nimport {\n  transformArrayData,\n  transformMilestoneData,\n  transformProjectBudgetData,\n  transformProjectData,\n  transformProjectMemberData,\n  transformRiskData\n} from '$lib/utils/api-data-transformer'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\n// 개별 프로젝트 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 프로젝트 기본 정보 조회\n    const projectResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tp.*,\n\t\t\t\te.first_name || ' ' || e.last_name as manager_name,\n\t\t\t\tCOUNT(pm.id) as member_count,\n\t\t\t\tCOALESCE(SUM(pm.participation_rate), 0) as total_participation_rate\n\t\t\tFROM projects p\n\t\t\tLEFT JOIN employees e ON p.manager_id = e.id\n\t\t\tLEFT JOIN project_members pm ON p.id = pm.project_id AND pm.status = 'active'\n\t\t\tWHERE p.id = $1\n\t\t\tGROUP BY p.id, e.first_name, e.last_name\n\t\t`,\n      [id]\n    )\n\n    if (projectResult.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const project = projectResult.rows[0]\n\n    // 프로젝트 멤버 목록 조회\n    const membersResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\te.first_name || ' ' || e.last_name as employee_name,\n\t\t\t\te.department\n\t\t\tFROM project_members pm\n\t\t\tLEFT JOIN employees e ON pm.employee_id = e.id\n\t\t\tWHERE pm.project_id = $1\n\t\t\tORDER BY pm.created_at DESC\n\t\t`,\n      [id]\n    )\n\n    // 프로젝트 사업비 조회\n    const budgetsResult = await query(\n      `\n\t\t\tSELECT * FROM project_budgets\n\t\t\tWHERE project_id = $1\n\t\t\tORDER BY period_number DESC\n\t\t`,\n      [id]\n    )\n\n    // 프로젝트 마일스톤 조회\n    const milestonesResult = await query(\n      `\n\t\t\tSELECT * FROM project_milestones\n\t\t\tWHERE project_id = $1\n\t\t\tORDER BY milestone_date ASC\n\t\t`,\n      [id]\n    )\n\n    // 프로젝트 위험 요소 조회\n    const risksResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpr.*,\n\t\t\t\te.first_name || ' ' || e.last_name as owner_name\n\t\t\tFROM project_risks pr\n\t\t\tLEFT JOIN employees e ON pr.owner_id = e.id\n\t\t\tWHERE pr.project_id = $1\n\t\t\tORDER BY pr.created_at DESC\n\t\t`,\n      [id]\n    )\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedProject = transformProjectData(project)\n    const transformedMembers = transformArrayData(membersResult.rows, transformProjectMemberData)\n    const transformedBudgets = transformArrayData(budgetsResult.rows, transformProjectBudgetData)\n    const transformedMilestones = transformArrayData(milestonesResult.rows, transformMilestoneData)\n    const transformedRisks = transformArrayData(risksResult.rows, transformRiskData)\n\n    return json({\n      success: true,\n      data: {\n        ...transformedProject,\n        members: transformedMembers,\n        budgets: transformedBudgets,\n        milestones: transformedMilestones,\n        risks: transformedRisks\n      }\n    })\n  } catch (error) {\n    logger.error('프로젝트 조회 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트를 불러오는데 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 프로젝트 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const { id } = params\n    const data = await request.json()\n    const {\n      code,\n      title,\n      description,\n      sponsor,\n      sponsorName,\n      sponsorType,\n      startDate,\n      endDate,\n      managerId,\n      budgetTotal,\n      researchType,\n      technologyArea,\n      priority,\n      status\n    } = data\n\n    // 프로젝트 존재 확인\n    const existingProject = await query('SELECT id FROM projects WHERE id = $1', [id])\n\n    if (existingProject.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    // 프로젝트 코드 중복 확인 (자신 제외)\n    if (code) {\n      const duplicateCheck = await query('SELECT id FROM projects WHERE code = $1 AND id != $2', [\n        code,\n        id\n      ])\n\n      if (duplicateCheck.rows.length > 0) {\n        return json(\n          {\n            success: false,\n            message: '이미 존재하는 프로젝트 코드입니다.'\n          },\n          { status: 400 }\n        )\n      }\n    }\n\n    // 업데이트할 필드들 동적 생성\n    const updateFields = []\n    const updateValues = []\n    let paramIndex = 1\n\n    const fieldsToUpdate = {\n      code,\n      title,\n      description,\n      sponsor,\n      sponsor_name: sponsorName,\n      sponsor_type: sponsorType,\n      start_date: startDate,\n      end_date: endDate,\n      manager_id: managerId,\n      budget_total: budgetTotal,\n      research_type: researchType,\n      technology_area: technologyArea,\n      priority,\n      status\n    }\n\n    Object.entries(fieldsToUpdate).forEach(([key, value]) => {\n      if (value !== undefined) {\n        updateFields.push(`${key} = $${paramIndex++}`)\n        updateValues.push(value)\n      }\n    })\n\n    if (updateFields.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '수정할 데이터가 없습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    updateValues.push(id)\n\n    const result = await query(\n      `\n\t\t\tUPDATE projects \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      updateValues\n    )\n\n    const updatedProject = result.rows[0]\n\n    // 업데이트된 프로젝트 정보와 함께 반환\n    const projectWithDetails = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tp.*,\n\t\t\t\te.first_name || ' ' || e.last_name as manager_name,\n\t\t\t\tCOUNT(pm.id) as member_count,\n\t\t\t\tCOALESCE(SUM(pm.participation_rate), 0) as total_participation_rate\n\t\t\tFROM projects p\n\t\t\tLEFT JOIN employees e ON p.manager_id = e.id\n\t\t\tLEFT JOIN project_members pm ON p.id = pm.project_id AND pm.status = 'active'\n\t\t\tWHERE p.id = $1\n\t\t\tGROUP BY p.id, e.first_name, e.last_name\n\t\t`,\n      [id]\n    )\n\n    // 데이터 변환: snake_case를 camelCase로 변환\n    const transformedProject = transformProjectData(projectWithDetails.rows[0])\n\n    return json({\n      success: true,\n      data: transformedProject,\n      message: '프로젝트가 성공적으로 수정되었습니다.'\n    })\n  } catch (error) {\n    logger.error('프로젝트 수정 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 수정에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 프로젝트 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    // 프로젝트 존재 확인\n    const existingProject = await query('SELECT id, status FROM projects WHERE id = $1', [id])\n\n    if (existingProject.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          message: '프로젝트를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const project = existingProject.rows[0]\n\n    // 프로젝트 삭제 가능 여부 확인 (모든 상태에서 삭제 가능)\n    // 프로젝트 삭제 요청 처리\n\n    // 트랜잭션으로 관련 데이터 모두 삭제\n    await query('BEGIN')\n\n    try {\n      // 1. evidence_items 먼저 삭제 (project_budgets를 참조)\n      await query(\n        `\n\t\t\t\tDELETE FROM evidence_items \n\t\t\t\tWHERE project_budget_id IN (\n\t\t\t\t\tSELECT id FROM project_budgets WHERE project_id = $1\n\t\t\t\t)\n\t\t\t`,\n        [id]\n      )\n\n      // 2. project_budgets 삭제\n      await query('DELETE FROM project_budgets WHERE project_id = $1', [id])\n\n      // 3. 기타 관련 데이터 삭제\n      await query('DELETE FROM participation_rate_history WHERE project_id = $1', [id])\n      await query('DELETE FROM participation_rates WHERE project_id = $1', [id])\n      await query('DELETE FROM project_members WHERE project_id = $1', [id])\n      await query('DELETE FROM project_milestones WHERE project_id = $1', [id])\n      await query('DELETE FROM project_risks WHERE project_id = $1', [id])\n\n      // 4. rd_projects 테이블에서 삭제 (외래키 제약조건 해결)\n      await query('DELETE FROM rd_projects WHERE project_id = $1', [id])\n\n      // 5. 마지막으로 프로젝트 삭제\n      await query('DELETE FROM projects WHERE id = $1', [id])\n\n      await query('COMMIT')\n\n      return json({\n        success: true,\n        message: '프로젝트가 성공적으로 삭제되었습니다.'\n      })\n    } catch (error) {\n      await query('ROLLBACK')\n      throw error\n    }\n  } catch (error) {\n    logger.error('프로젝트 삭제 실패:', error)\n    return json(\n      {\n        success: false,\n        message: '프로젝트 삭제에 실패했습니다.',\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/projects/[projectId]/annual-budgets/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/researcher-validation/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[826,829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[826,829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":103,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":103,"endColumn":112},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":161,"column":23,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":161,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":189,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":189,"endColumn":102},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":217,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":217,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5299,5302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5299,5302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":282,"column":18,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":282,"endColumn":122},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8417,8420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8417,8420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'project' is defined but never used. Allowed unused args must match /^_/u.","line":324,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":324,"endColumn":10},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":324,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":324,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8433,8436],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8433,8436],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":367,"column":32,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":367,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":380,"column":32,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":380,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":395,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":395,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10444,10447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10444,10447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":438,"column":21,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":438,"endColumn":54}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { getCurrentDateForAPI } from '$lib/utils/date-calculator'\nimport { calculateMonthlySalary } from '$lib/utils/salary-calculator'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\ninterface ValidationResult {\n  isValid: boolean\n  issues: ValidationIssue[]\n  summary: {\n    totalMembers: number\n    validMembers: number\n    invalidMembers: number\n    lastValidated: string\n  }\n}\n\ninterface ValidationIssue {\n  type:\n    | 'contract_missing'\n    | 'contract_period_mismatch'\n    | 'participation_rate_excess'\n    | 'amount_excess'\n    | 'duplicate_participation'\n  severity: 'error' | 'warning' | 'info'\n  message: string\n  memberId: string\n  memberName: string\n  suggestedFix?: string\n  data?: any\n}\n\n// GET: 참여연구원 검증 실행\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n\n    if (!projectId) {\n      return json(\n        {\n          success: false,\n          error: '프로젝트 ID가 필요합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    logger.log(`🔍 [참여연구원 검증] 프로젝트 ${projectId} 검증 시작`)\n\n    // 1. 프로젝트 기본 정보 조회\n    const projectResult = await query(\n      `\n\t\t\tSELECT id, title, code, start_date, end_date, budget_total\n\t\t\tFROM projects \n\t\t\tWHERE id = $1\n\t\t`,\n      [projectId]\n    )\n\n    if (projectResult.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '프로젝트를 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const project = projectResult.rows[0]\n\n    // 2. 참여연구원 목록 조회\n    const membersResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tpm.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN e.first_name ~ '^[가-힣]+$' AND e.last_name ~ '^[가-힣]+$' \n\t\t\t\t\tTHEN CONCAT(e.last_name, e.first_name)\n\t\t\t\t\tELSE CONCAT(e.first_name, ' ', e.last_name)\n\t\t\t\tEND as employee_name,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.email as employee_email,\n\t\t\t\te.department as employee_department,\n\t\t\t\te.position as employee_position\n\t\t\tFROM project_members pm\n\t\t\tJOIN employees e ON pm.employee_id = e.id\n\t\t\tWHERE pm.project_id = $1 AND pm.status = 'active'\n\t\t\tORDER BY pm.created_at DESC\n\t\t`,\n      [projectId]\n    )\n\n    const members = membersResult.rows\n    logger.log(`📋 참여연구원 ${members.length}명 검증 시작`)\n\n    // 3. 검증 실행\n    const validationResult = await performValidation(project, members)\n\n    logger.log(\n      `✅ [참여연구원 검증] 완료 - ${validationResult.isValid ? '✅ 통과' : '❌ 실패'} (${validationResult.issues.length}개 이슈)`\n    )\n\n    return json({\n      success: true,\n      data: {\n        project: {\n          id: project.id,\n          title: project.title,\n          code: project.code\n        },\n        validation: validationResult\n      }\n    })\n  } catch (error) {\n    logger.error('참여연구원 검증 오류:', error)\n    return json(\n      {\n        success: false,\n        error: '검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// POST: 자동 수정 실행\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { projectId, fixes } = await request.json()\n\n    if (!projectId) {\n      return json(\n        {\n          success: false,\n          error: '프로젝트 ID가 필요합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    logger.log(`🔧 [참여연구원 자동 수정] 프로젝트 ${projectId} 수정 시작`)\n\n    const appliedFixes = []\n\n    // 각 수정사항 적용\n    for (const fix of fixes || []) {\n      try {\n        switch (fix.type) {\n          case 'participation_rate_adjustment':\n            await query('UPDATE project_members SET participation_rate = $1 WHERE id = $2', [\n              fix.newValue,\n              fix.memberId\n            ])\n            appliedFixes.push({\n              memberId: fix.memberId,\n              type: fix.type,\n              action: `참여율 ${fix.oldValue}% → ${fix.newValue}%로 조정`,\n              success: true\n            })\n            break\n\n          // contract_amount_adjustment 케이스 제거 - 실제 근로계약서에서 조회하므로 불필요\n\n          default:\n            appliedFixes.push({\n              memberId: fix.memberId,\n              type: fix.type,\n              action: '지원하지 않는 수정 유형',\n              success: false\n            })\n        }\n      } catch (fixError) {\n        logger.error(`수정 실패 (${fix.type}):`, fixError)\n        appliedFixes.push({\n          memberId: fix.memberId,\n          type: fix.type,\n          action: '수정 실패',\n          success: false,\n          error: fixError instanceof Error ? fixError.message : 'Unknown error'\n        })\n      }\n    }\n\n    logger.log(\n      `✅ [참여연구원 자동 수정] 완료 - ${appliedFixes.filter(f => f.success).length}/${appliedFixes.length}개 성공`\n    )\n\n    return json({\n      success: true,\n      data: {\n        appliedFixes,\n        summary: {\n          total: appliedFixes.length,\n          successful: appliedFixes.filter(f => f.success).length,\n          failed: appliedFixes.filter(f => !f.success).length\n        }\n      }\n    })\n  } catch (error) {\n    logger.error('자동 수정 오류:', error)\n    return json(\n      {\n        success: false,\n        error: '자동 수정 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// 검증 로직 실행\nasync function performValidation(project: any, members: unknown[]): Promise<ValidationResult> {\n  const issues: ValidationIssue[] = []\n  let validMembers = 0\n\n  for (const member of members) {\n    let memberHasIssues = false\n\n    // 1. 근로계약서 검증\n    const contractValidation = await validateContract(member, project)\n    if (!contractValidation.isValid) {\n      issues.push(...contractValidation.issues)\n      memberHasIssues = true\n    }\n\n    // 2. 참여율 검증\n    const participationRate = parseFloat(member.participation_rate) || 0\n    if (participationRate > 100) {\n      issues.push({\n        type: 'participation_rate_excess',\n        severity: 'error',\n        message: `참여율이 100%를 초과합니다 (${participationRate}%)`,\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '참여율을 100% 이하로 조정하세요',\n        data: { participationRate }\n      })\n      memberHasIssues = true\n    }\n\n    // 3. 월간 금액 검증 (계약서 대비)\n    const monthlyAmount = parseFloat(member.monthly_amount) || 0\n\n    // 실제 근로계약서에서 연봉 가져오기\n    const contractResult = await query(\n      `\n\t\t\tSELECT sc.annual_salary, sc.monthly_salary, sc.start_date, sc.end_date, sc.status\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\t\tAND sc.status = 'active'\n\t\t\t\tAND (\n\t\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\t\tOR\n\t\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t\t)\n\t\t\tORDER BY sc.start_date DESC\n\t\t\tLIMIT 1\n\t\t`,\n      [member.employee_id, member.start_date, member.end_date]\n    )\n\n    let contractAmount = 0\n    if (contractResult.rows.length > 0) {\n      // 월급이 있으면 월급 기준, 없으면 연봉/12 기준\n      const contract = contractResult.rows[0]\n      contractAmount = contract.monthly_salary || contract.annual_salary / 12\n    }\n\n    // 예상 월간 금액 계산\n    const expectedMonthlyAmount = calculateMonthlySalary(contractAmount, participationRate)\n\n    if (monthlyAmount > expectedMonthlyAmount * 1.1) {\n      // 10% 허용 오차\n      issues.push({\n        type: 'amount_excess',\n        severity: 'warning',\n        message: `월간 금액이 예상 금액을 초과합니다 (${monthlyAmount.toLocaleString()}원 vs ${expectedMonthlyAmount.toLocaleString()}원)`,\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '계약 금액 또는 참여율을 확인하세요',\n        data: {\n          monthlyAmount,\n          expectedMonthlyAmount,\n          contractAmount,\n          participationRate,\n          salaryMultiplier\n        }\n      })\n      memberHasIssues = true\n    }\n\n    // 4. 중복 참여 검증 (동일 기간에 여러 프로젝트 참여)\n    const duplicateValidation = await validateDuplicateParticipation(member)\n    if (!duplicateValidation.isValid) {\n      issues.push(...duplicateValidation.issues)\n      memberHasIssues = true\n    }\n\n    if (!memberHasIssues) {\n      validMembers++\n    }\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues,\n    summary: {\n      totalMembers: members.length,\n      validMembers,\n      invalidMembers: members.length - validMembers,\n      lastValidated: getCurrentDateForAPI()\n    }\n  }\n}\n\n// 근로계약서 검증\nasync function validateContract(\n  member: any,\n  project: any\n): Promise<{ isValid: boolean; issues: ValidationIssue[] }> {\n  const issues: ValidationIssue[] = []\n\n  // 프로젝트 참여 기간과 겹치는 계약서 조회\n  const contractResult = await query(\n    `\n\t\tSELECT sc.annual_salary, sc.monthly_salary, sc.start_date, sc.end_date, sc.status\n\t\tFROM salary_contracts sc\n\t\tWHERE sc.employee_id = $1\n\t\t\tAND sc.status = 'active'\n\t\t\tAND (\n\t\t\t\t(sc.start_date <= COALESCE($3, CURRENT_DATE) AND (sc.end_date IS NULL OR sc.end_date >= COALESCE($2, CURRENT_DATE)))\n\t\t\t\tOR\n\t\t\t\t(COALESCE($2, CURRENT_DATE) <= sc.start_date AND COALESCE($3, CURRENT_DATE) >= sc.start_date)\n\t\t\t)\n\t\tORDER BY sc.start_date DESC\n\t\tLIMIT 1\n\t`,\n    [member.employee_id, member.start_date, member.end_date]\n  )\n\n  if (contractResult.rows.length === 0) {\n    // 계약서가 없는 경우\n    const allContractsResult = await query(\n      `\n\t\t\tSELECT sc.start_date, sc.end_date, sc.annual_salary, sc.status\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\tORDER BY sc.start_date DESC\n\t\t`,\n      [member.employee_id]\n    )\n\n    if (allContractsResult.rows.length === 0) {\n      issues.push({\n        type: 'contract_missing',\n        severity: 'error',\n        message: '해당 기간의 근로계약서가 없습니다',\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '급여 계약서를 등록하거나 프로젝트 참여 기간을 조정하세요',\n        data: {\n          participationPeriod: `${member.start_date} ~ ${member.end_date}`,\n          contracts: []\n        }\n      })\n    } else {\n      issues.push({\n        type: 'contract_period_mismatch',\n        severity: 'error',\n        message: '프로젝트 참여 기간에 해당하는 근로계약서가 없습니다',\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '근로계약서 기간을 확인하거나 프로젝트 참여 기간을 조정하세요',\n        data: {\n          participationPeriod: `${member.start_date} ~ ${member.end_date}`,\n          contracts: allContractsResult.rows\n        }\n      })\n    }\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues\n  }\n}\n\n// 중복 참여 검증\nasync function validateDuplicateParticipation(\n  member: any\n): Promise<{ isValid: boolean; issues: ValidationIssue[] }> {\n  const issues: ValidationIssue[] = []\n\n  // 동일 직원의 다른 프로젝트 참여 조회\n  const duplicateResult = await query(\n    `\n\t\tSELECT pm.id, pm.project_id, pm.start_date, pm.end_date, pm.participation_rate,\n\t\t\t   p.title as project_title\n\t\tFROM project_members pm\n\t\tJOIN projects p ON pm.project_id = p.id\n\t\tWHERE pm.employee_id = $1 \n\t\t\tAND pm.id != $2\n\t\t\tAND pm.status = 'active'\n\t\t\tAND (\n\t\t\t\t(pm.start_date <= COALESCE($4, CURRENT_DATE) AND (pm.end_date IS NULL OR pm.end_date >= COALESCE($3, CURRENT_DATE)))\n\t\t\t\tOR\n\t\t\t\t(COALESCE($3, CURRENT_DATE) <= pm.start_date AND COALESCE($4, CURRENT_DATE) >= pm.start_date)\n\t\t\t)\n\t`,\n    [member.employee_id, member.id, member.start_date, member.end_date]\n  )\n\n  if (duplicateResult.rows.length > 0) {\n    // 참여율 합계 계산\n    const totalParticipationRate =\n      duplicateResult.rows.reduce((sum, p) => sum + (parseFloat(p.participation_rate) || 0), 0) +\n      (parseFloat(member.participation_rate) || 0)\n\n    if (totalParticipationRate > 100) {\n      issues.push({\n        type: 'duplicate_participation',\n        severity: 'error',\n        message: `동일 기간에 여러 프로젝트 참여율 합계가 100%를 초과합니다 (${totalParticipationRate.toFixed(1)}%)`,\n        memberId: member.id,\n        memberName: member.employee_name,\n        suggestedFix: '참여율을 조정하거나 참여 기간을 변경하세요',\n        data: {\n          totalParticipationRate,\n          conflictingProjects: duplicateResult.rows.map(p => ({\n            projectId: p.project_id,\n            projectTitle: p.project_title,\n            participationRate: parseFloat(p.participation_rate) || 0,\n            period: `${p.start_date} ~ ${p.end_date}`\n          }))\n        }\n      })\n    }\n  }\n\n  return {\n    isValid: issues.length === 0,\n    issues\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/schema-validation/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":52,"column":22,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":52,"endColumn":46},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":71,"column":20,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":71,"endColumn":44},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":117,"column":20,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":117,"endColumn":44}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { SchemaValidator } from '$lib/utils/schema-validation'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const validationType = url.searchParams.get('type') || 'all'\n\n    logger.log(`🔍 [스키마 검증] ${validationType} 검증 시작`)\n\n    const results: unknown[] = []\n    const summary = {\n      total: 0,\n      valid: 0,\n      invalid: 0,\n      issues: [] as string[]\n    }\n\n    // 1. 데이터베이스 스키마 검증\n    if (validationType === 'all' || validationType === 'schema') {\n      logger.log('📋 [데이터베이스 스키마 검증] 시작')\n      const schemaResults = await SchemaValidator.validateDatabaseSchema()\n      results.push(\n        ...schemaResults.map(result => ({\n          ...result,\n          validationType: 'schema'\n        }))\n      )\n    }\n\n    // 2. 칼럼명 일관성 검증\n    if (validationType === 'all' || validationType === 'naming') {\n      logger.log('📝 [칼럼명 일관성 검증] 시작')\n      const namingResults = await SchemaValidator.validateColumnNamingConsistency()\n      results.push(\n        ...namingResults.map(result => ({\n          ...result,\n          validationType: 'naming'\n        }))\n      )\n    }\n\n    // 3. 스키마 규칙 조회\n    if (validationType === 'rules') {\n      logger.log('📚 [스키마 규칙 조회] 시작')\n      const rules = SchemaValidator.getSchemaRules()\n      return json({\n        success: true,\n        validationType: 'rules',\n        rules,\n        generatedAt: new Date().toISOString()\n      })\n    }\n\n    // 결과 요약\n    summary.total = results.length\n    summary.valid = results.filter(r => r.isValid).length\n    summary.invalid = results.filter(r => !r.isValid).length\n    summary.issues = results.filter(r => !r.isValid).flatMap(r => r.issues)\n\n    logger.log(\n      `✅ [스키마 검증] 완료 - ${summary.valid}/${summary.total}개 통과, ${summary.invalid}개 문제`\n    )\n\n    return json({\n      success: true,\n      validationType,\n      results,\n      summary,\n      generatedAt: new Date().toISOString()\n    })\n  } catch (error) {\n    logger.error('Schema validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '스키마 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { query, tableName, validationType = 'query' } = await request.json()\n\n    if (!query || !tableName) {\n      return json({ error: '쿼리와 테이블명이 필요합니다.' }, { status: 400 })\n    }\n\n    logger.log(`🔍 [쿼리 검증] 테이블 ${tableName} 쿼리 검증 시작`)\n\n    // 쿼리 칼럼 검증\n    const results = SchemaValidator.validateQueryColumns(query, tableName)\n\n    const summary = {\n      total: results.length,\n      valid: results.filter(r => r.isValid).length,\n      invalid: results.filter(r => !r.isValid).length,\n      issues: results.filter(r => !r.isValid).flatMap(r => r.issues)\n    }\n\n    logger.log(\n      `✅ [쿼리 검증] 완료 - ${summary.valid}/${summary.total}개 통과, ${summary.invalid}개 문제`\n    )\n\n    return json({\n      success: true,\n      validationType,\n      query,\n      tableName,\n      results,\n      summary,\n      generatedAt: new Date().toISOString()\n    })\n  } catch (error) {\n    logger.error('Query validation error:', error)\n    return json(\n      {\n        success: false,\n        error: '쿼리 검증 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/setup-evidence/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/setup-global-factors/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/setup/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/simple-validation/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2527,2530],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2527,2530],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4929,4932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4929,4932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":202,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":202,"endColumn":106},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5980,5983],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5980,5983],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6628,6631],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6628,6631],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { json } from '@sveltejs/kit'\nimport { Pool } from 'pg'\nimport type { RequestHandler } from './$types'\nimport { logger } from '$lib/utils/logger'\n\nconst pool = new Pool({\n  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',\n  port: 5432,\n  database: 'postgres',\n  user: 'postgres',\n  password: 'viahubdev',\n  ssl: { rejectUnauthorized: false }\n})\n\n// 간단한 프로젝트 검증 함수\nasync function validateProject(projectId: string): Promise<{\n  success: boolean\n  results: unknown[]\n  errors: string[]\n  fixedIssues: number\n}> {\n  const client = await pool.connect()\n  const results: unknown[] = []\n  const errors: string[] = []\n  let fixedIssues = 0\n\n  try {\n    logger.log(`🔍 [간단 검증] 프로젝트 검증 시작: ${projectId}`)\n\n    await client.query('BEGIN')\n\n    // 1. 인건비 검증 및 수정\n    logger.log('🔍 [인건비 검증] 시작')\n    const personnelResult = await validatePersonnelCost(client, projectId)\n    results.push(personnelResult)\n\n    if (personnelResult.hasIssues) {\n      logger.log('🔧 [인건비 수정] 자동 수정 시작')\n      const fixResult = await fixPersonnelCost(client, projectId, personnelResult.issues)\n      if (fixResult.success) {\n        fixedIssues += fixResult.fixedCount\n        logger.log(`✅ [인건비 수정] 완료: ${fixResult.fixedCount}개 연차 수정`)\n      } else {\n        errors.push(`인건비 수정 실패: ${fixResult.error}`)\n      }\n    }\n\n    // 2. 예산 일관성 검증 및 수정\n    logger.log('🔍 [예산 일관성 검증] 시작')\n    const budgetResult = await validateBudgetConsistency(client, projectId)\n    results.push(budgetResult)\n\n    if (budgetResult.hasIssues) {\n      logger.log('🔧 [예산 일관성 수정] 자동 수정 시작')\n      const fixResult = await fixBudgetConsistency(client, projectId, budgetResult.issues)\n      if (fixResult.success) {\n        fixedIssues += fixResult.fixedCount\n        logger.log(`✅ [예산 일관성 수정] 완료: ${fixResult.fixedCount}개 이슈 수정`)\n      } else {\n        errors.push(`예산 일관성 수정 실패: ${fixResult.error}`)\n      }\n    }\n\n    await client.query('COMMIT')\n    logger.log(`✅ [간단 검증] 완료 - ${fixedIssues}개 이슈 수정됨`)\n\n    return {\n      success: errors.length === 0,\n      results: results,\n      errors: errors,\n      fixedIssues: fixedIssues\n    }\n  } catch (error) {\n    await client.query('ROLLBACK')\n    const errorMsg = `프로젝트 검증 실패: ${error instanceof Error ? error.message : '알 수 없는 오류'}`\n    logger.error(`💥 ${errorMsg}`)\n    errors.push(errorMsg)\n\n    return {\n      success: false,\n      results: results,\n      errors: errors,\n      fixedIssues: fixedIssues\n    }\n  } finally {\n    client.release()\n  }\n}\n\n// 인건비 검증\nasync function validatePersonnelCost(client: any, projectId: string) {\n  const budgetResult = await client.query(\n    `\n\t\tSELECT * FROM project_budgets \n\t\tWHERE project_id = $1 \n\t\tORDER BY period_number\n\t`,\n    [projectId]\n  )\n\n  const memberResult = await client.query(\n    `\n\t\tSELECT pm.*, e.first_name, e.last_name\n\t\tFROM project_members pm\n\t\tLEFT JOIN employees e ON pm.employee_id = e.id\n\t\tWHERE pm.project_id = $1\n\t\tORDER BY pm.start_date\n\t`,\n    [projectId]\n  )\n\n  const issues = []\n\n  for (const budget of budgetResult.rows) {\n    const budgetStartDate = new Date(budget.start_date)\n    const budgetEndDate = new Date(budget.end_date)\n\n    // 해당 연차에 참여하는 연구원들 필터링\n    const periodMembers = memberResult.rows.filter(member => {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n      return memberStartDate <= budgetEndDate && memberEndDate >= budgetStartDate\n    })\n\n    // 실제 인건비 계산\n    let actualPersonnelCost = 0\n    for (const member of periodMembers) {\n      const memberStartDate = new Date(member.start_date)\n      const memberEndDate = new Date(member.end_date)\n\n      const actualStartDate = memberStartDate > budgetStartDate ? memberStartDate : budgetStartDate\n      const actualEndDate = memberEndDate < budgetEndDate ? memberEndDate : budgetEndDate\n\n      const monthsDiff =\n        (actualEndDate.getFullYear() - actualStartDate.getFullYear()) * 12 +\n        (actualEndDate.getMonth() - actualStartDate.getMonth()) +\n        1\n\n      const monthlyAmount = parseFloat(member.monthly_amount) || 0\n      const participationRate = parseFloat(member.participation_rate) || 0\n\n      actualPersonnelCost += monthlyAmount * monthsDiff * (participationRate / 100)\n    }\n\n    const budgetPersonnelCost = parseFloat(budget.personnel_cost) || 0\n    const difference = Math.abs(actualPersonnelCost - budgetPersonnelCost)\n\n    if (difference > 1000) {\n      // 1000원 허용 오차\n      issues.push({\n        periodNumber: budget.period_number,\n        budgetPersonnelCost: budgetPersonnelCost,\n        actualPersonnelCost: actualPersonnelCost,\n        difference: difference,\n        periodId: budget.id\n      })\n    }\n  }\n\n  return {\n    validationType: 'personnel_cost',\n    hasIssues: issues.length > 0,\n    issues: issues,\n    message:\n      issues.length > 0 ? `${issues.length}개 연차에서 인건비 불일치 발견` : '인건비 검증 통과'\n  }\n}\n\n// 예산 일관성 검증\nasync function validateBudgetConsistency(client: any, projectId: string) {\n  const projectResult = await client.query('SELECT budget_total FROM projects WHERE id = $1', [\n    projectId\n  ])\n  const budgetResult = await client.query(\n    `\n\t\tSELECT SUM(total_budget) as total_budget_sum\n\t\tFROM project_budgets \n\t\tWHERE project_id = $1\n\t`,\n    [projectId]\n  )\n\n  const projectTotal = parseFloat(projectResult.rows[0]?.budget_total) || 0\n  const budgetSum = parseFloat(budgetResult.rows[0]?.total_budget_sum) || 0\n  const difference = Math.abs(projectTotal - budgetSum)\n\n  const hasIssues = difference > 1000 // 1000원 허용 오차\n\n  return {\n    validationType: 'budget_consistency',\n    hasIssues: hasIssues,\n    issues: hasIssues\n      ? [\n          {\n            projectTotal: projectTotal,\n            budgetSum: budgetSum,\n            difference: difference\n          }\n        ]\n      : [],\n    message: hasIssues\n      ? `예산 불일치: 프로젝트 총 예산 ${projectTotal.toLocaleString()}원 vs 연차별 예산 합계 ${budgetSum.toLocaleString()}원`\n      : '예산 일관성 검증 통과'\n  }\n}\n\n// 인건비 자동 수정\nasync function fixPersonnelCost(client: any, projectId: string, issues: unknown[]) {\n  try {\n    let fixedCount = 0\n\n    for (const issue of issues) {\n      await client.query(\n        `\n\t\t\t\tUPDATE project_budgets \n\t\t\t\tSET personnel_cost = $1, updated_at = CURRENT_TIMESTAMP\n\t\t\t\tWHERE id = $2\n\t\t\t`,\n        [issue.actualPersonnelCost, issue.periodId]\n      )\n      fixedCount++\n    }\n\n    return {\n      success: true,\n      fixedCount: fixedCount,\n      error: null\n    }\n  } catch (error) {\n    return {\n      success: false,\n      fixedCount: 0,\n      error: error instanceof Error ? error.message : '알 수 없는 오류'\n    }\n  }\n}\n\n// 예산 일관성 자동 수정\nasync function fixBudgetConsistency(client: any, projectId: string, issues: unknown[]) {\n  try {\n    let fixedCount = 0\n\n    for (const issue of issues) {\n      await client.query(\n        `\n\t\t\t\tUPDATE projects \n\t\t\t\tSET budget_total = $1, updated_at = CURRENT_TIMESTAMP\n\t\t\t\tWHERE id = $2\n\t\t\t`,\n        [issue.budgetSum, projectId]\n      )\n      fixedCount++\n    }\n\n    return {\n      success: true,\n      fixedCount: fixedCount,\n      error: null\n    }\n  } catch (error) {\n    return {\n      success: false,\n      fixedCount: 0,\n      error: error instanceof Error ? error.message : '알 수 없는 오류'\n    }\n  }\n}\n\n// API 엔드포인트들\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    const projectId = url.searchParams.get('projectId')\n\n    if (!projectId) {\n      return json({ success: false, error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    const result = await validateProject(projectId)\n    return json(result)\n  } catch (error) {\n    logger.error('💥 [간단 검증] GET 오류:', error)\n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const { projectId } = await request.json()\n\n    if (!projectId) {\n      return json({ success: false, error: '프로젝트 ID가 필요합니다.' }, { status: 400 })\n    }\n\n    const result = await validateProject(projectId)\n    return json(result)\n  } catch (error) {\n    logger.error('💥 [간단 검증] POST 오류:', error)\n    return json(\n      {\n        success: false,\n        error: error instanceof Error ? error.message : '알 수 없는 오류'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/project-management/summary/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/projects/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/projects/[id]/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/projects/upload/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1489,1492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1489,1492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2840,2843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2840,2843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3239,3242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3239,3242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":124,"column":25,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":124,"endColumn":86},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3716,3719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3716,3719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":137,"column":25,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":137,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":141,"column":25,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":141,"endColumn":75},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":153,"column":27,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":153,"endColumn":75}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection.js'\nimport {\n  formatDateForDisplay,\n  getCurrentUTC,\n  isValidDate,\n  isValidDateRange,\n  toUTC\n} from '$lib/utils/date-handler'\nimport { json } from '@sveltejs/kit'\nimport * as ExcelJS from 'exceljs'\nimport { logger } from '$lib/utils/logger'\n\nexport async function POST({ request }) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n\n    if (!file) {\n      return json({ error: '파일이 선택되지 않았습니다.' }, { status: 400 })\n    }\n\n    // 파일 확장자 확인\n    const fileName = file.name.toLowerCase()\n    const isExcel = fileName.endsWith('.xlsx') || fileName.endsWith('.xls')\n    const isCSV = fileName.endsWith('.csv')\n\n    let data: unknown[] = []\n    let headers: string[] = []\n\n    if (isExcel) {\n      // Excel 파일 파싱\n      const buffer = await file.arrayBuffer()\n      const workbook = new ExcelJS.Workbook()\n      await workbook.xlsx.load(buffer)\n\n      const worksheet = workbook.worksheets[0]\n      if (!worksheet) {\n        return json({ error: 'Excel 파일에 워크시트가 없습니다.' }, { status: 400 })\n      }\n\n      const rows = worksheet.getRows()\n      if (!rows || rows.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // 헤더 추출 (첫 번째 행)\n      headers = rows[0].values.slice(1) as string[] // ExcelJS는 1-based indexing\n      logger.log('프로젝트 Excel 파싱된 헤더:', headers)\n\n      // 데이터 추출\n      data = rows.slice(1).map((row, index) => {\n        const rowData: any = {}\n        const rowValues = row.values.slice(1) as unknown[] // ExcelJS는 1-based indexing\n        headers.forEach((header, headerIndex) => {\n          rowData[header] = rowValues[headerIndex] || ''\n        })\n        logger.log(`프로젝트 Excel 행 ${index + 2} 파싱 결과:`, rowData)\n        return rowData\n      })\n    } else if (isCSV) {\n      // CSV 파일 파싱\n      const text = await file.text()\n      const lines = text.split('\\n').filter(line => line.trim())\n\n      if (lines.length < 2) {\n        return json({ error: '파일에 데이터가 없습니다.' }, { status: 400 })\n      }\n\n      // CSV 파싱 함수\n      function parseCSVLine(line: string): string[] {\n        const result: string[] = []\n        let current = ''\n        let inQuotes = false\n\n        for (let i = 0; i < line.length; i++) {\n          const char = line[i]\n\n          if (char === '\"') {\n            inQuotes = !inQuotes\n          } else if (char === ',' && !inQuotes) {\n            result.push(current.trim())\n            current = ''\n          } else {\n            current += char\n          }\n        }\n\n        result.push(current.trim())\n        return result\n      }\n\n      // 헤더 파싱\n      headers = parseCSVLine(lines[0])\n      logger.log('프로젝트 CSV 파싱된 헤더:', headers)\n\n      // 데이터 파싱\n      data = lines.slice(1).map((line, index) => {\n        const values = parseCSVLine(line)\n        const row: any = {}\n        headers.forEach((header, headerIndex) => {\n          row[header] = values[headerIndex] || ''\n        })\n        logger.log(`프로젝트 CSV 행 ${index + 2} 파싱 결과:`, row)\n        return row\n      })\n    } else {\n      return json(\n        { error: '지원하지 않는 파일 형식입니다. CSV 또는 Excel 파일을 업로드해주세요.' },\n        { status: 400 }\n      )\n    }\n\n    // 데이터 검증 및 변환\n    const projects = data.map((row: any, index: number) => {\n      const rowNumber = index + 2 // 헤더 행을 고려하여 +2\n\n      // 필수 필드 검증\n      const requiredFields = ['프로젝트명', '시작일', '종료일']\n      const missingFields = requiredFields.filter(\n        field => !row[field] || String(row[field]).trim() === ''\n      )\n\n      if (missingFields.length > 0) {\n        throw new Error(`행 ${rowNumber}: 필수 필드가 누락되었습니다: ${missingFields.join(', ')}`)\n      }\n\n      // 날짜 검증 (Excel 날짜 지원)\n      const parseExcelDate = (dateValue: any): Date => {\n        const utcDate = toUTC(dateValue)\n        return new Date(utcDate)\n      }\n\n      const startDate = parseExcelDate(row['시작일'])\n      const endDate = parseExcelDate(row['종료일'])\n\n      if (!isValidDate(startDate)) {\n        throw new Error(`행 ${rowNumber}: 올바르지 않은 시작일 형식입니다: ${row['시작일']}`)\n      }\n\n      if (!isValidDate(endDate)) {\n        throw new Error(`행 ${rowNumber}: 올바르지 않은 종료일 형식입니다: ${row['종료일']}`)\n      }\n\n      if (!isValidDateRange(startDate, endDate)) {\n        throw new Error(`행 ${rowNumber}: 시작일은 종료일보다 이전이어야 합니다.`)\n      }\n\n      // 예산 검증\n      let budget = 0\n      if (row['예산'] && String(row['예산']).trim() !== '') {\n        budget = parseFloat(String(row['예산']))\n        if (isNaN(budget) || budget < 0) {\n          throw new Error(`행 ${rowNumber}: 올바르지 않은 예산 형식입니다: ${row['예산']}`)\n        }\n      }\n\n      // 상태 검증\n      const validStatuses = ['planning', 'active', 'completed', 'cancelled', 'on_hold']\n      const status = row['상태'] || 'planning'\n      if (!validStatuses.includes(status)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 상태입니다: ${status}. 허용된 값: ${validStatuses.join(', ')}`\n        )\n      }\n\n      // 카테고리 검증\n      const validCategories = ['development', 'research', 'infrastructure', 'maintenance', 'other']\n      const category = row['카테고리'] || 'development'\n      if (!validCategories.includes(category)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 카테고리입니다: ${category}. 허용된 값: ${validCategories.join(', ')}`\n        )\n      }\n\n      // 우선순위 검증\n      const validPriorities = ['low', 'medium', 'high', 'urgent']\n      const priority = row['우선순위'] || 'medium'\n      if (!validPriorities.includes(priority)) {\n        throw new Error(\n          `행 ${rowNumber}: 올바르지 않은 우선순위입니다: ${priority}. 허용된 값: ${validPriorities.join(', ')}`\n        )\n      }\n\n      // 프로젝트 코드 생성 (프로젝트명 기반 + 타임스탬프)\n      const projectName = String(row['프로젝트명']).trim()\n      const timestamp = Date.now().toString().slice(-6)\n      const random = Math.random().toString(36).substr(2, 4)\n      const projectCode =\n        projectName.replace(/[^a-zA-Z0-9가-힣]/g, '').substring(0, 15) +\n        '_' +\n        timestamp +\n        '_' +\n        random\n\n      return {\n        code: projectCode,\n        title: projectName,\n        description: row['설명'] ? String(row['설명']).trim() : '',\n        start_date: formatDateForDisplay(toUTC(startDate), 'ISO'),\n        end_date: formatDateForDisplay(toUTC(endDate), 'ISO'),\n        budget_total: budget,\n        status: status,\n        sponsor: row['담당자'] ? String(row['담당자']).trim() : '',\n        sponsor_type: 'internal',\n        created_at: getCurrentUTC(),\n        updated_at: getCurrentUTC()\n      }\n    })\n\n    // 데이터베이스에 저장\n    let successCount = 0\n\n    for (const project of projects) {\n      try {\n        // UPSERT: 프로젝트 코드가 존재하면 UPDATE, 없으면 INSERT\n        await query(\n          `\n\t\t\t\t\tINSERT INTO projects (\n\t\t\t\t\t\tcode, title, description, start_date, end_date, \n\t\t\t\t\t\tbudget_total, status, sponsor, sponsor_type, \n\t\t\t\t\t\tcreated_at, updated_at\n\t\t\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n\t\t\t\t\tON CONFLICT (code) \n\t\t\t\t\tDO UPDATE SET\n\t\t\t\t\t\ttitle = EXCLUDED.title,\n\t\t\t\t\t\tdescription = EXCLUDED.description,\n\t\t\t\t\t\tstart_date = EXCLUDED.start_date,\n\t\t\t\t\t\tend_date = EXCLUDED.end_date,\n\t\t\t\t\t\tbudget_total = EXCLUDED.budget_total,\n\t\t\t\t\t\tstatus = EXCLUDED.status,\n\t\t\t\t\t\tsponsor = EXCLUDED.sponsor,\n\t\t\t\t\t\tsponsor_type = EXCLUDED.sponsor_type,\n\t\t\t\t\t\tupdated_at = EXCLUDED.updated_at\n\t\t\t\t`,\n          [\n            project.code,\n            project.title,\n            project.description,\n            project.start_date,\n            project.end_date,\n            project.budget_total,\n            project.status,\n            project.sponsor,\n            project.sponsor_type,\n            project.created_at,\n            project.updated_at\n          ]\n        )\n        successCount++\n      } catch (error) {\n        logger.error('프로젝트 저장 실패:', error)\n      }\n    }\n\n    return json({\n      success: true,\n      count: successCount,\n      total: projects.length,\n      message: `${successCount}개의 프로젝트가 성공적으로 업로드되었습니다.`\n    })\n  } catch (error) {\n    logger.error('업로드 에러:', error)\n    return json(\n      {\n        error: error instanceof Error ? error.message : '업로드 중 오류가 발생했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":167,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":167,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":242,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":242,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 급여 계약 관리 API 엔드포인트\n\nimport { query } from '$lib/database/connection.js'\nimport type {\n  CreateSalaryContractRequest,\n  PaginatedResponse,\n  SalaryContract\n} from '$lib/types/salary-contracts'\nimport { formatDateForDisplay, toUTC } from '$lib/utils/date-handler.js'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// GET: 급여 계약 목록 조회\nexport const GET: RequestHandler = async ({ url }) => {\n  try {\n    // 쿼리 파라미터 파싱\n    const page = parseInt(url.searchParams.get('page') || '1')\n    const limit = parseInt(url.searchParams.get('limit') || '50')\n    const employeeId = url.searchParams.get('employeeId') || ''\n    const department = url.searchParams.get('department') || ''\n    const position = url.searchParams.get('position') || ''\n    const contractType = url.searchParams.get('contractType') || ''\n    const status = url.searchParams.get('status') || ''\n    const startDateFrom = url.searchParams.get('startDateFrom') || ''\n    const startDateTo = url.searchParams.get('startDateTo') || ''\n    const search = url.searchParams.get('search') || ''\n\n    // WHERE 조건 구성\n    const conditions: string[] = []\n    const params: unknown[] = []\n    let paramIndex = 1\n\n    if (employeeId) {\n      conditions.push(`sc.employee_id = $${paramIndex}`)\n      params.push(employeeId)\n      paramIndex++\n    }\n\n    if (department) {\n      conditions.push(`e.department = $${paramIndex}`)\n      params.push(department)\n      paramIndex++\n    }\n\n    if (position) {\n      conditions.push(`e.position = $${paramIndex}`)\n      params.push(position)\n      paramIndex++\n    }\n\n    if (contractType) {\n      conditions.push(`sc.contract_type = $${paramIndex}`)\n      params.push(contractType)\n      paramIndex++\n    }\n\n    if (status) {\n      conditions.push(`sc.status = $${paramIndex}`)\n      params.push(status)\n      paramIndex++\n    }\n\n    if (startDateFrom) {\n      conditions.push(`sc.start_date >= $${paramIndex}`)\n      params.push(startDateFrom)\n      paramIndex++\n    }\n\n    if (startDateTo) {\n      conditions.push(`sc.start_date <= $${paramIndex}`)\n      params.push(startDateTo)\n      paramIndex++\n    }\n\n    if (search) {\n      conditions.push(`(\n\t\t\t\tCONCAT(e.last_name, e.first_name) ILIKE $${paramIndex} OR \n\t\t\t\te.employee_id ILIKE $${paramIndex} OR \n\t\t\t\te.department ILIKE $${paramIndex} OR\n\t\t\t\te.position ILIKE $${paramIndex}\n\t\t\t)`)\n      params.push(`%${search}%`)\n      paramIndex++\n    }\n\n    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : ''\n\n    // 전체 개수 조회\n    const countResult = await query(\n      `\n\t\t\tSELECT COUNT(*) as total\n\t\t\tFROM salary_contracts sc\n\t\t\tJOIN employees e ON sc.employee_id = e.id\n\t\t\t${whereClause}\n\t\t`,\n      params\n    )\n\n    const total = parseInt(countResult.rows[0]?.total || '0')\n    const totalPages = Math.ceil(total / limit)\n    const offset = (page - 1) * limit\n\n    // 급여 계약 목록 조회 (최적화된 쿼리)\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tsc.id,\n\t\t\t\tsc.employee_id,\n\t\t\t\tsc.start_date,\n\t\t\t\tsc.end_date,\n\t\t\t\tsc.annual_salary,\n\t\t\t\tsc.monthly_salary,\n\t\t\t\tsc.contract_type,\n\t\t\t\tsc.status,\n\t\t\t\tsc.notes,\n\t\t\t\tsc.created_at,\n\t\t\t\tsc.updated_at,\n\t\t\t\tsc.created_by,\n\t\t\t\te.last_name || e.first_name as employee_name,\n\t\t\t\te.employee_id as employee_id_number,\n\t\t\t\te.department,\n\t\t\t\te.position\n\t\t\tFROM salary_contracts sc\n\t\t\tINNER JOIN employees e ON sc.employee_id = e.id\n\t\t\t${whereClause}\n\t\t\tORDER BY sc.start_date DESC, sc.created_at DESC\n\t\t\tLIMIT $${paramIndex} OFFSET $${paramIndex + 1}\n\t\t`,\n      [...params, limit, offset]\n    )\n\n    const contracts: SalaryContract[] = result.rows.map(row => {\n      return {\n        id: row.id,\n        employeeId: row.employee_id,\n        startDate: row.start_date ? formatDateForDisplay(row.start_date, 'ISO') : '',\n        endDate: row.end_date ? formatDateForDisplay(row.end_date, 'ISO') : '',\n        annualSalary: parseFloat(row.annual_salary),\n        monthlySalary: parseFloat(row.monthly_salary),\n        contractType: row.contract_type,\n        status: row.status,\n        notes: row.notes,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        createdBy: row.created_by,\n        employeeName: row.employee_name,\n        employeeIdNumber: row.employee_id_number,\n        department: row.department,\n        position: row.position,\n        contractEndDisplay: row.contract_end_display,\n        statusDisplay: row.status_display\n      }\n    })\n\n    const response: PaginatedResponse<SalaryContract> = {\n      data: contracts,\n      total,\n      page,\n      limit,\n      totalPages\n    }\n\n    return json({\n      success: true,\n      data: response\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 목록을 가져오는데 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// POST: 급여 계약 생성\nexport const POST: RequestHandler = async ({ request }) => {\n  try {\n    const contractData: CreateSalaryContractRequest = await request.json()\n\n    // 필수 필드 검증\n    if (\n      !contractData.employeeId ||\n      !contractData.startDate ||\n      !contractData.annualSalary ||\n      !contractData.monthlySalary\n    ) {\n      return json(\n        {\n          success: false,\n          error: '필수 필드가 누락되었습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 급여 계약 생성\n    const result = await query(\n      `\n\t\t\tINSERT INTO salary_contracts (\n\t\t\t\temployee_id, start_date, end_date, annual_salary, monthly_salary,\n\t\t\t\tcontract_type, status, notes, created_by\n\t\t\t) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)\n\t\t\tRETURNING *\n\t\t`,\n      [\n        contractData.employeeId,\n        contractData.startDate ? toUTC(contractData.startDate).split('T')[0] : null,\n        contractData.endDate ? toUTC(contractData.endDate).split('T')[0] : null,\n        contractData.annualSalary,\n        contractData.monthlySalary,\n        contractData.contractType || 'full_time',\n        contractData.status || 'active',\n        contractData.notes || null,\n        'system'\n      ]\n    )\n\n    const newContract = result.rows[0]\n\n    return json({\n      success: true,\n      data: {\n        id: newContract.id,\n        employeeId: newContract.employee_id,\n        startDate: newContract.start_date\n          ? formatDateForDisplay(newContract.start_date, 'ISO')\n          : null,\n        endDate: newContract.end_date ? formatDateForDisplay(newContract.end_date, 'ISO') : null,\n        annualSalary: parseFloat(newContract.annual_salary),\n        monthlySalary: parseFloat(newContract.monthly_salary),\n        contractType: newContract.contract_type,\n        status: newContract.status,\n        notes: newContract.notes,\n        createdAt: newContract.created_at,\n        updatedAt: newContract.updated_at,\n        createdBy: newContract.created_by\n      }\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 생성에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/[id]/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":56,"column":14,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":56,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":84,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":17},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":163,"column":7,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":168,"endColumn":4},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":190,"column":14,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":190,"endColumn":35},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":210,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":210,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":249,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":249,"endColumn":17}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 개별 급여 계약 관리 API 엔드포인트\n\nimport { query } from '$lib/database/connection.js'\nimport type { SalaryContract, UpdateSalaryContractRequest } from '$lib/types/salary-contracts'\nimport { json } from '@sveltejs/kit'\nimport type { RequestHandler } from './$types'\n\n// GET: 특정 급여 계약 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    const result = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tsc.*,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as employee_name,\n\t\t\t\te.employee_id as employee_id_number,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.end_date IS NULL THEN '무기한'\n\t\t\t\t\tELSE TO_CHAR(sc.end_date, 'YYYY-MM-DD')\n\t\t\t\tEND as contract_end_display,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date IS NULL THEN '진행중 (무기한)'\n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date >= CURRENT_DATE THEN '진행중'\n\t\t\t\t\tWHEN sc.status = 'expired' OR sc.end_date < CURRENT_DATE THEN '만료됨'\n\t\t\t\t\tELSE sc.status\n\t\t\t\tEND as status_display\n\t\t\tFROM salary_contracts sc\n\t\t\tJOIN employees e ON sc.employee_id = e.id\n\t\t\tWHERE sc.id = $1\n\t\t`,\n      [id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '급여 계약을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const contract = result.rows[0]\n\n    // 날짜를 KST로 변환\n    const convertToKST = (dateString: string) => {\n      if (!dateString) return null\n      const date = new Date(dateString)\n      // UTC+9 (KST)로 변환\n      const kstDate = new Date(date.getTime() + 9 * 60 * 60 * 1000)\n      return kstDate.toISOString().split('T')[0] // YYYY-MM-DD 형식으로 반환\n    }\n\n    const salaryContract: SalaryContract = {\n      id: contract.id,\n      employeeId: contract.employee_id,\n      startDate: convertToKST(contract.start_date),\n      endDate: convertToKST(contract.end_date),\n      annualSalary: parseFloat(contract.annual_salary),\n      monthlySalary: parseFloat(contract.monthly_salary),\n      contractType: contract.contract_type,\n      status: contract.status,\n      notes: contract.notes,\n      createdAt: contract.created_at,\n      updatedAt: contract.updated_at,\n      createdBy: contract.created_by,\n      employeeName: contract.employee_name,\n      employeeIdNumber: contract.employee_id_number,\n      department: contract.department,\n      position: contract.position,\n      contractEndDisplay: contract.contract_end_display,\n      statusDisplay: contract.status_display\n    }\n\n    return json({\n      success: true,\n      data: salaryContract\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 조회에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// PUT: 급여 계약 수정\nexport const PUT: RequestHandler = async ({ params, request }) => {\n  try {\n    const { id } = params\n    const updateData: UpdateSalaryContractRequest = await request.json()\n\n    // 업데이트할 필드 구성\n    const updateFields: string[] = []\n    const queryParams: unknown[] = []\n    let paramIndex = 1\n\n    if (updateData.startDate !== undefined) {\n      updateFields.push(`start_date = $${paramIndex}`)\n      queryParams.push(updateData.startDate)\n      paramIndex++\n    }\n\n    if (updateData.endDate !== undefined) {\n      updateFields.push(`end_date = $${paramIndex}`)\n      queryParams.push(updateData.endDate || null)\n      paramIndex++\n    }\n\n    if (updateData.annualSalary !== undefined) {\n      updateFields.push(`annual_salary = $${paramIndex}`)\n      queryParams.push(updateData.annualSalary)\n      paramIndex++\n    }\n\n    if (updateData.monthlySalary !== undefined) {\n      updateFields.push(`monthly_salary = $${paramIndex}`)\n      queryParams.push(updateData.monthlySalary)\n      paramIndex++\n    }\n\n    if (updateData.contractType !== undefined) {\n      updateFields.push(`contract_type = $${paramIndex}`)\n      queryParams.push(updateData.contractType)\n      paramIndex++\n    }\n\n    if (updateData.status !== undefined) {\n      updateFields.push(`status = $${paramIndex}`)\n      queryParams.push(updateData.status)\n      paramIndex++\n    }\n\n    if (updateData.notes !== undefined) {\n      updateFields.push(`notes = $${paramIndex}`)\n      queryParams.push(updateData.notes || null)\n      paramIndex++\n    }\n\n    if (updateFields.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '업데이트할 필드가 없습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // updated_at 자동 업데이트\n    updateFields.push(`updated_at = CURRENT_TIMESTAMP`)\n    queryParams.push(id)\n\n    const result = await query(\n      `\n\t\t\tUPDATE salary_contracts \n\t\t\tSET ${updateFields.join(', ')}\n\t\t\tWHERE id = $${paramIndex}\n\t\t\tRETURNING *\n\t\t`,\n      queryParams\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '급여 계약을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const updatedContract = result.rows[0]\n\n    // 날짜를 KST로 변환\n    const convertToKST = (dateString: string) => {\n      if (!dateString) return null\n      const date = new Date(dateString)\n      // UTC+9 (KST)로 변환\n      const kstDate = new Date(date.getTime() + 9 * 60 * 60 * 1000)\n      return kstDate.toISOString().split('T')[0] // YYYY-MM-DD 형식으로 반환\n    }\n\n    return json({\n      success: true,\n      data: {\n        id: updatedContract.id,\n        employeeId: updatedContract.employee_id,\n        startDate: convertToKST(updatedContract.start_date),\n        endDate: convertToKST(updatedContract.end_date),\n        annualSalary: parseFloat(updatedContract.annual_salary),\n        monthlySalary: parseFloat(updatedContract.monthly_salary),\n        contractType: updatedContract.contract_type,\n        status: updatedContract.status,\n        notes: updatedContract.notes,\n        createdAt: updatedContract.created_at,\n        updatedAt: updatedContract.updated_at,\n        createdBy: updatedContract.created_by\n      }\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 수정에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n\n// DELETE: 급여 계약 삭제\nexport const DELETE: RequestHandler = async ({ params }) => {\n  try {\n    const { id } = params\n\n    const result = await query(\n      `\n\t\t\tDELETE FROM salary_contracts \n\t\t\tWHERE id = $1\n\t\t\tRETURNING id\n\t\t`,\n      [id]\n    )\n\n    if (result.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '급여 계약을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    return json({\n      success: true,\n      data: { id }\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 삭제에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/employee/[employeeId]/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":143,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":143,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 직원별 급여 계약 정보 API 엔드포인트\n\nimport { json } from '@sveltejs/kit'\nimport { query } from '$lib/database/connection.js'\nimport type { RequestHandler } from './$types'\nimport type { CurrentSalaryInfo, SalaryContract } from '$lib/types/salary-contracts'\n\n// GET: 특정 직원의 급여 계약 정보 조회\nexport const GET: RequestHandler = async ({ params }) => {\n  try {\n    const { employeeId } = params\n\n    // 직원 기본 정보 조회\n    const employeeResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id,\n\t\t\t\te.employee_id,\n\t\t\t\tCONCAT(e.last_name, e.first_name) as employee_name,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.status\n\t\t\tFROM employees e\n\t\t\tWHERE e.id = $1\n\t\t`,\n      [employeeId]\n    )\n\n    if (employeeResult.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직원을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const employee = employeeResult.rows[0]\n\n    // 현재 유효한 급여 계약 조회\n    const currentContractResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tsc.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.end_date IS NULL THEN '무기한'\n\t\t\t\t\tELSE TO_CHAR(sc.end_date, 'YYYY-MM-DD')\n\t\t\t\tEND as contract_end_display,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date IS NULL THEN '진행중 (무기한)'\n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date >= CURRENT_DATE THEN '진행중'\n\t\t\t\t\tWHEN sc.status = 'expired' OR sc.end_date < CURRENT_DATE THEN '만료됨'\n\t\t\t\t\tELSE sc.status\n\t\t\t\tEND as status_display\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1 \n\t\t\t\tAND sc.status = 'active' \n\t\t\t\tAND sc.start_date <= CURRENT_DATE \n\t\t\t\tAND (sc.end_date IS NULL OR sc.end_date >= CURRENT_DATE)\n\t\t\tORDER BY sc.start_date DESC\n\t\t\tLIMIT 1\n\t\t`,\n      [employeeId]\n    )\n\n    // 급여 계약 이력 조회\n    const historyResult = await query(\n      `\n\t\t\tSELECT \n\t\t\t\tsc.*,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.end_date IS NULL THEN '무기한'\n\t\t\t\t\tELSE TO_CHAR(sc.end_date, 'YYYY-MM-DD')\n\t\t\t\tEND as contract_end_display,\n\t\t\t\tCASE \n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date IS NULL THEN '진행중 (무기한)'\n\t\t\t\t\tWHEN sc.status = 'active' AND sc.end_date >= CURRENT_DATE THEN '진행중'\n\t\t\t\t\tWHEN sc.status = 'expired' OR sc.end_date < CURRENT_DATE THEN '만료됨'\n\t\t\t\t\tELSE sc.status\n\t\t\t\tEND as status_display\n\t\t\tFROM salary_contracts sc\n\t\t\tWHERE sc.employee_id = $1\n\t\t\tORDER BY sc.start_date DESC\n\t\t`,\n      [employeeId]\n    )\n\n    // 현재 계약 데이터 변환\n    let currentContract: SalaryContract | null = null\n    if (currentContractResult.rows.length > 0) {\n      const contract = currentContractResult.rows[0]\n      currentContract = {\n        id: contract.id,\n        employeeId: contract.employee_id,\n        startDate: contract.start_date,\n        endDate: contract.end_date,\n        annualSalary: parseFloat(contract.annual_salary),\n        monthlySalary: parseFloat(contract.monthly_salary),\n        contractType: contract.contract_type,\n        status: contract.status,\n        notes: contract.notes,\n        createdAt: contract.created_at,\n        updatedAt: contract.updated_at,\n        createdBy: contract.created_by,\n        contractEndDisplay: contract.contract_end_display,\n        statusDisplay: contract.status_display\n      }\n    }\n\n    // 계약 이력 데이터 변환\n    const contractHistory: SalaryContract[] = historyResult.rows.map(contract => ({\n      id: contract.id,\n      employeeId: contract.employee_id,\n      startDate: contract.start_date,\n      endDate: contract.end_date,\n      annualSalary: parseFloat(contract.annual_salary),\n      monthlySalary: parseFloat(contract.monthly_salary),\n      contractType: contract.contract_type,\n      status: contract.status,\n      notes: contract.notes,\n      createdAt: contract.created_at,\n      updatedAt: contract.updated_at,\n      createdBy: contract.created_by,\n      contractEndDisplay: contract.contract_end_display,\n      statusDisplay: contract.status_display\n    }))\n\n    const currentSalaryInfo: CurrentSalaryInfo = {\n      employeeId: employee.id,\n      employeeName: employee.employee_name,\n      employeeIdNumber: employee.employee_id,\n      department: employee.department,\n      position: employee.position,\n      currentContract: currentContract!,\n      contractHistory\n    }\n\n    return json({\n      success: true,\n      data: currentSalaryInfo\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '직원 급여 정보 조회에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/contracts/stats/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used. Allowed unused caught errors must match /^_/u.","line":78,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 급여 계약 통계 API 엔드포인트\n\nimport { json } from '@sveltejs/kit'\nimport { query } from '$lib/database/connection.js'\nimport type { RequestHandler } from './$types'\nimport type { SalaryContractStats } from '$lib/types/salary-contracts'\n\n// GET: 급여 계약 통계 조회\nexport const GET: RequestHandler = async () => {\n  try {\n    // 기본 통계 조회\n    const statsResult = await query(`\n\t\t\tSELECT \n\t\t\t\tCOUNT(*) as total_contracts,\n\t\t\t\tCOUNT(CASE WHEN sc.status = 'active' THEN 1 END) as active_contracts,\n\t\t\t\tCOUNT(CASE WHEN sc.status = 'expired' OR (sc.status = 'active' AND sc.end_date < CURRENT_DATE) THEN 1 END) as expired_contracts,\n\t\t\t\tAVG(sc.annual_salary) as average_annual_salary,\n\t\t\t\tAVG(sc.monthly_salary) as average_monthly_salary,\n\t\t\t\tSUM(sc.annual_salary) as total_annual_salary,\n\t\t\t\tSUM(sc.monthly_salary) as total_monthly_salary\n\t\t\tFROM salary_contracts sc\n\t\t\tJOIN employees e ON sc.employee_id = e.id\n\t\t\tWHERE e.status = 'active'\n\t\t`)\n\n    // 계약 유형별 통계\n    const typeStatsResult = await query(`\n\t\t\tSELECT \n\t\t\t\tsc.contract_type,\n\t\t\t\tCOUNT(*) as count\n\t\t\tFROM salary_contracts sc\n\t\t\tJOIN employees e ON sc.employee_id = e.id\n\t\t\tWHERE e.status = 'active'\n\t\t\tGROUP BY sc.contract_type\n\t\t`)\n\n    // 부서별 통계\n    const deptStatsResult = await query(`\n\t\t\tSELECT \n\t\t\t\tCOALESCE(e.department, '부서없음') as department,\n\t\t\t\tCOUNT(*) as count\n\t\t\tFROM salary_contracts sc\n\t\t\tJOIN employees e ON sc.employee_id = e.id\n\t\t\tWHERE e.status = 'active'\n\t\t\tGROUP BY e.department\n\t\t`)\n\n    const stats = statsResult.rows[0]\n    const contractsByType: Record<string, number> = {}\n    const contractsByDepartment: Record<string, number> = {}\n\n    // 계약 유형별 데이터 변환\n    typeStatsResult.rows.forEach(row => {\n      contractsByType[row.contract_type] = parseInt(row.count)\n    })\n\n    // 부서별 데이터 변환\n    deptStatsResult.rows.forEach(row => {\n      contractsByDepartment[row.department] = parseInt(row.count)\n    })\n\n    const salaryContractStats: SalaryContractStats = {\n      totalContracts: parseInt(stats.total_contracts) || 0,\n      activeContracts: parseInt(stats.active_contracts) || 0,\n      expiredContracts: parseInt(stats.expired_contracts) || 0,\n      averageAnnualSalary: Math.ceil(parseFloat(stats.average_annual_salary) || 0),\n      averageMonthlySalary: Math.ceil(parseFloat(stats.average_monthly_salary) || 0),\n      totalAnnualSalary: parseFloat(stats.total_annual_salary) || 0,\n      totalMonthlySalary: parseFloat(stats.total_monthly_salary) || 0,\n      contractsByType,\n      contractsByDepartment\n    }\n\n    return json({\n      success: true,\n      data: salaryContractStats\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여 계약 통계 조회에 실패했습니다.'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":111,"column":28,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":111,"endColumn":66},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":112,"column":26,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":112,"endColumn":84}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\n\n// 새로운 단순화된 payslips API (기존 API 교체)\nexport async function GET({ url }) {\n  try {\n    const employeeId = url.searchParams.get('employeeId')\n    const period = url.searchParams.get('period') // YYYY-MM 형식\n    const status = url.searchParams.get('status')\n\n    const conditions: string[] = []\n    const params: (string | number)[] = []\n    let paramIndex = 1\n\n    if (employeeId) {\n      conditions.push(`p.employee_id = $${paramIndex}`)\n      params.push(employeeId)\n      paramIndex++\n    }\n\n    if (period) {\n      conditions.push(`p.period = $${paramIndex}`)\n      params.push(period)\n      paramIndex++\n    }\n\n    if (status) {\n      conditions.push(`p.status = $${paramIndex}`)\n      params.push(status)\n      paramIndex++\n    }\n\n    const whereClause = conditions.length > 0 ? `WHERE ${conditions.join(' AND ')}` : ''\n\n    // 기존 payslips 테이블 사용 (마이그레이션 전)\n    const { rows } = await query(\n      `\n\t\t\tSELECT\n\t\t\t\tp.id,\n\t\t\t\tp.employee_id AS \"employeeId\",\n\t\t\t\tp.period,\n\t\t\t\tp.pay_date AS \"payDate\",\n\t\t\t\tp.base_salary AS \"baseSalary\",\n\t\t\t\tp.total_payments AS \"totalPayments\",\n\t\t\t\tp.total_deductions AS \"totalDeductions\",\n\t\t\t\tp.net_salary AS \"netSalary\",\n\t\t\t\tp.payments,\n\t\t\t\tp.deductions,\n\t\t\t\tp.status,\n\t\t\t\tp.is_generated AS \"isGenerated\",\n\t\t\t\tp.created_at AS \"createdAt\",\n\t\t\t\tp.updated_at AS \"updatedAt\",\n\t\t\t\t-- 직원 정보 조인\n\t\t\t\te.first_name || e.last_name AS \"employeeName\",\n\t\t\t\te.employee_id AS \"employeeIdNumber\",\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.hire_date AS \"hireDate\"\n\t\t\tFROM payslips p\n\t\t\tJOIN employees e ON p.employee_id = e.id\n\t\t\t${whereClause}\n\t\t\tORDER BY p.period DESC, p.created_at DESC\n\t\t\t`,\n      params\n    )\n\n    return json({ success: true, data: rows })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여명세서 목록을 가져오는데 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function POST({ request }) {\n  try {\n    const payslipData = await request.json()\n\n    const {\n      employeeId,\n      period,\n      payDate,\n      baseSalary,\n      totalPayments,\n      totalDeductions,\n      netSalary,\n      payments,\n      deductions,\n      status = 'draft',\n      isGenerated = false\n    } = payslipData\n\n    // 필수 필드 검증\n    if (!employeeId || !period || !payDate) {\n      return json(\n        {\n          success: false,\n          error: '필수 필드가 누락되었습니다. (employeeId, period, payDate)'\n        },\n        { status: 400 }\n      )\n    }\n\n    // period에서 시작일과 종료일 계산 (예: \"2025-09\" -> \"2025-09-01\", \"2025-09-30\")\n    const [year, month] = period.split('-')\n    const payPeriodStart = `${year}-${month.padStart(2, '0')}-01`\n    const payPeriodEnd = new Date(parseInt(year), parseInt(month), 0).toISOString().split('T')[0] // 해당 월의 마지막 날\n\n    // 기존 급여명세서가 있는지 확인\n    const existingPayslip = await query(\n      'SELECT id FROM payslips WHERE employee_id = $1 AND period = $2',\n      [employeeId, period]\n    )\n\n    let result\n    if (existingPayslip.rows.length > 0) {\n      // 기존 급여명세서 업데이트\n      result = await query(\n        `\n\t\t\t\tUPDATE payslips SET\n\t\t\t\t\tpay_date = $3,\n\t\t\t\t\tpay_period_start = $4,\n\t\t\t\t\tpay_period_end = $5,\n\t\t\t\t\tbase_salary = $6,\n\t\t\t\t\ttotal_payments = $7,\n\t\t\t\t\ttotal_deductions = $8,\n\t\t\t\t\tnet_salary = $9,\n\t\t\t\t\ttotal_amount = $10,\n\t\t\t\t\tpayments = $11,\n\t\t\t\t\tdeductions = $12,\n\t\t\t\t\tstatus = $13,\n\t\t\t\t\tis_generated = $14,\n\t\t\t\t\tupdated_at = CURRENT_TIMESTAMP\n\t\t\t\tWHERE employee_id = $1 AND period = $2\n\t\t\t\tRETURNING *\n\t\t\t\t`,\n        [\n          employeeId,\n          period,\n          payDate,\n          payPeriodStart,\n          payPeriodEnd,\n          baseSalary,\n          totalPayments,\n          totalDeductions,\n          netSalary,\n          totalPayments,\n          JSON.stringify(payments),\n          JSON.stringify(deductions),\n          status,\n          isGenerated\n        ]\n      )\n    } else {\n      // 새 급여명세서 생성\n      result = await query(\n        `\n\t\t\t\tINSERT INTO payslips (\n\t\t\t\t\temployee_id, period, pay_date, pay_period_start, pay_period_end,\n\t\t\t\t\tbase_salary, total_payments, total_deductions, net_salary, total_amount,\n\t\t\t\t\tpayments, deductions, status, is_generated\n\t\t\t\t) VALUES (\n\t\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14\n\t\t\t\t) RETURNING *\n\t\t\t\t`,\n        [\n          employeeId,\n          period,\n          payDate,\n          payPeriodStart,\n          payPeriodEnd,\n          baseSalary,\n          totalPayments,\n          totalDeductions,\n          netSalary,\n          totalPayments,\n          JSON.stringify(payments),\n          JSON.stringify(deductions),\n          status,\n          isGenerated\n        ]\n      )\n    }\n\n    return json({ success: true, data: result.rows[0] })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '급여명세서 저장에 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/employee/[employeeId]/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":173,"column":37,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":173,"endColumn":61},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":179,"column":16,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":179,"endColumn":40},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":180,"column":21,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":180,"endColumn":56}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\n\nexport async function GET({ params, url }) {\n  try {\n    const { employeeId } = params\n    const period = url.searchParams.get('period') // YYYY-MM 형식\n    const year = url.searchParams.get('year') // YYYY 형식\n\n    if (!employeeId) {\n      return json(\n        {\n          success: false,\n          error: '직원 ID가 필요합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 연도별 데이터 요청인 경우\n    if (year) {\n      const { rows } = await query(\n        `\n\t\t\t\tSELECT\n\t\t\t\t\tp.id,\n\t\t\t\t\tp.employee_id AS \"employeeId\",\n\t\t\t\t\tp.period,\n\t\t\t\t\tp.pay_date AS \"payDate\",\n\t\t\t\t\tp.base_salary AS \"baseSalary\",\n\t\t\t\t\tp.total_payments AS \"totalPayments\",\n\t\t\t\t\tp.total_deductions AS \"totalDeductions\",\n\t\t\t\t\tp.net_salary AS \"netSalary\",\n\t\t\t\t\tp.payments,\n\t\t\t\t\tp.deductions,\n\t\t\t\t\tp.status,\n\t\t\t\t\tp.is_generated AS \"isGenerated\",\n\t\t\t\t\tp.created_at AS \"createdAt\",\n\t\t\t\t\tp.updated_at AS \"updatedAt\",\n\t\t\t\t\t-- 직원 정보\n\t\t\t\t\te.first_name || e.last_name AS \"employeeName\",\n\t\t\t\t\te.employee_id AS \"employeeIdNumber\",\n\t\t\t\t\te.department,\n\t\t\t\t\te.position,\n\t\t\t\t\te.hire_date AS \"hireDate\"\n\t\t\t\tFROM payslips p\n\t\t\t\tJOIN employees e ON p.employee_id = e.id\n\t\t\t\tWHERE p.employee_id = $1 AND p.period LIKE $2\n\t\t\t\tORDER BY p.period DESC\n\t\t\t\t`,\n        [employeeId, `${year}-%`]\n      )\n\n      return json({\n        success: true,\n        data: rows,\n        source: 'yearly'\n      })\n    }\n\n    // 1. 이번달 급여명세서가 있는지 확인\n    if (period) {\n      const currentPayslip = await query(\n        `\n\t\t\t\tSELECT\n\t\t\t\t\tp.id,\n\t\t\t\t\tp.employee_id AS \"employeeId\",\n\t\t\t\t\tp.period,\n\t\t\t\t\tp.pay_date AS \"payDate\",\n\t\t\t\t\tp.base_salary AS \"baseSalary\",\n\t\t\t\t\tp.total_payments AS \"totalPayments\",\n\t\t\t\t\tp.total_deductions AS \"totalDeductions\",\n\t\t\t\t\tp.net_salary AS \"netSalary\",\n\t\t\t\t\tp.payments,\n\t\t\t\t\tp.deductions,\n\t\t\t\t\tp.status,\n\t\t\t\t\tp.is_generated AS \"isGenerated\",\n\t\t\t\t\tp.created_at AS \"createdAt\",\n\t\t\t\t\tp.updated_at AS \"updatedAt\",\n\t\t\t\t\t-- 직원 정보\n\t\t\t\t\te.first_name || e.last_name AS \"employeeName\",\n\t\t\t\t\te.employee_id AS \"employeeIdNumber\",\n\t\t\t\t\te.department,\n\t\t\t\t\te.position,\n\t\t\t\t\te.hire_date AS \"hireDate\"\n\t\t\t\tFROM payslips p\n\t\t\t\tJOIN employees e ON p.employee_id = e.id\n\t\t\t\tWHERE p.employee_id = $1 AND p.period = $2\n\t\t\t\t`,\n        [employeeId, period]\n      )\n\n      if (currentPayslip.rows.length > 0) {\n        return json({\n          success: true,\n          data: currentPayslip.rows[0],\n          source: 'current'\n        })\n      }\n    }\n\n    // 2. 지난달 급여명세서가 있는지 확인\n    const previousPayslip = await query(\n      `\n\t\t\tSELECT\n\t\t\t\tp.id,\n\t\t\t\tp.employee_id AS \"employeeId\",\n\t\t\t\tp.period,\n\t\t\t\tp.pay_date AS \"payDate\",\n\t\t\t\tp.base_salary AS \"baseSalary\",\n\t\t\t\tp.total_payments AS \"totalPayments\",\n\t\t\t\tp.total_deductions AS \"totalDeductions\",\n\t\t\t\tp.net_salary AS \"netSalary\",\n\t\t\t\tp.payments,\n\t\t\t\tp.deductions,\n\t\t\t\tp.status,\n\t\t\t\tp.is_generated AS \"isGenerated\",\n\t\t\t\tp.created_at AS \"createdAt\",\n\t\t\t\tp.updated_at AS \"updatedAt\",\n\t\t\t\t-- 직원 정보\n\t\t\t\te.first_name || e.last_name AS \"employeeName\",\n\t\t\t\te.employee_id AS \"employeeIdNumber\",\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.hire_date AS \"hireDate\"\n\t\t\tFROM payslips p\n\t\t\tJOIN employees e ON p.employee_id = e.id\n\t\t\tWHERE p.employee_id = $1\n\t\t\tORDER BY p.period DESC\n\t\t\tLIMIT 1\n\t\t\t`,\n      [employeeId]\n    )\n\n    if (previousPayslip.rows.length > 0) {\n      return json({\n        success: true,\n        data: previousPayslip.rows[0],\n        source: 'previous'\n      })\n    }\n\n    // 3. 기본 템플릿 생성 (처음인 경우)\n    const employee = await query(\n      `\n\t\t\tSELECT\n\t\t\t\te.id,\n\t\t\t\te.employee_id,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.hire_date,\n\t\t\t\tsc.annual_salary\n\t\t\tFROM employees e\n\t\t\tLEFT JOIN salary_contracts sc ON e.id = sc.employee_id AND sc.status = 'active'\n\t\t\tWHERE e.id = $1\n\t\t\t`,\n      [employeeId]\n    )\n\n    if (employee.rows.length === 0) {\n      return json(\n        {\n          success: false,\n          error: '직원을 찾을 수 없습니다.'\n        },\n        { status: 404 }\n      )\n    }\n\n    const emp = employee.rows[0]\n    const baseSalary = emp.annual_salary ? Math.round(emp.annual_salary / 12) : 3000000\n    const currentPeriod = period || new Date().toISOString().slice(0, 7)\n\n    // 기본 급여명세서 템플릿 생성\n    const defaultPayslip = {\n      employeeId: emp.id,\n      period: currentPeriod,\n      payDate: new Date().toISOString().split('T')[0],\n      employeeName: `${emp.last_name}${emp.first_name}`,\n      employeeIdNumber: emp.employee_id,\n      department: emp.department || '부서없음',\n      position: emp.position || '연구원',\n      hireDate: emp.hire_date,\n      baseSalary: baseSalary,\n      totalPayments: baseSalary + 500000, // 기본급 + 기본 수당\n      totalDeductions: 0,\n      netSalary: baseSalary + 500000,\n      payments: [\n        { id: 'basic_salary', name: '기본급', amount: baseSalary, type: 'basic', isTaxable: true },\n        {\n          id: 'position_allowance',\n          name: '직책수당',\n          amount: Math.round(baseSalary * 0.1),\n          type: 'allowance',\n          isTaxable: true\n        },\n        { id: 'bonus', name: '상여금', amount: 0, type: 'bonus', isTaxable: true },\n        { id: 'meal_allowance', name: '식대', amount: 300000, type: 'allowance', isTaxable: false },\n        {\n          id: 'vehicle_maintenance',\n          name: '차량유지',\n          amount: 200000,\n          type: 'allowance',\n          isTaxable: false\n        },\n        {\n          id: 'annual_leave_allowance',\n          name: '연차수당',\n          amount: 0,\n          type: 'allowance',\n          isTaxable: true\n        },\n        {\n          id: 'year_end_settlement',\n          name: '연말정산',\n          amount: 0,\n          type: 'settlement',\n          isTaxable: true\n        }\n      ],\n      deductions: [\n        {\n          id: 'health_insurance',\n          name: '건강보험',\n          rate: 0.034,\n          type: 'insurance',\n          amount: 0,\n          isMandatory: true\n        },\n        {\n          id: 'long_term_care',\n          name: '장기요양보험',\n          rate: 0.0034,\n          type: 'insurance',\n          amount: 0,\n          isMandatory: true\n        },\n        {\n          id: 'national_pension',\n          name: '국민연금',\n          rate: 0.045,\n          type: 'pension',\n          amount: 0,\n          isMandatory: true\n        },\n        {\n          id: 'employment_insurance',\n          name: '고용보험',\n          rate: 0.008,\n          type: 'insurance',\n          amount: 0,\n          isMandatory: true\n        },\n        { id: 'income_tax', name: '갑근세', rate: 0.13, type: 'tax', amount: 0, isMandatory: true },\n        { id: 'local_tax', name: '주민세', rate: 0.013, type: 'tax', amount: 0, isMandatory: true },\n        { id: 'other', name: '기타', rate: 0, type: 'other', amount: 0, isMandatory: false }\n      ],\n      status: 'draft',\n      isGenerated: false\n    }\n\n    return json({\n      success: true,\n      data: defaultPayslip,\n      source: 'default'\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '직원 급여명세서를 가져오는데 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/template/+server.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1832,1835],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1832,1835],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-restricted-syntax","severity":2,"message":"UTC 변환 시 toUTC 함수를 사용하세요.","line":84,"column":11,"nodeType":"CallExpression","messageId":"restrictedSyntax","endLine":84,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":89,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":89,"endColumn":54},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":107,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":107,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":108,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":108,"endColumn":62},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":109,"column":9,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":109,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rowNumber' is defined but never used. Allowed unused args must match /^_/u.","line":122,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":38},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'colNumber' is defined but never used. Allowed unused args must match /^_/u.","line":123,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":36},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":173,"column":22,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":173,"endColumn":56}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport ExcelJS from 'exceljs'\n\nexport async function GET({ url }) {\n  try {\n    const year = url.searchParams.get('year') || new Date().getFullYear().toString()\n    const month = url.searchParams.get('month') || (new Date().getMonth() + 1).toString()\n\n    // 모든 직원 정보 조회\n    const { rows: employees } = await query(\n      `\n\t\t\tSELECT \n\t\t\t\te.id,\n\t\t\t\te.employee_id,\n\t\t\t\te.first_name,\n\t\t\t\te.last_name,\n\t\t\t\te.department,\n\t\t\t\te.position,\n\t\t\t\te.hire_date,\n\t\t\t\tsc.annual_salary\n\t\t\tFROM employees e\n\t\t\tLEFT JOIN salary_contracts sc ON e.id = sc.employee_id AND sc.status = 'active'\n\t\t\tWHERE e.status = 'active'\n\t\t\tORDER BY e.department, e.employee_id\n\t\t\t`\n    )\n\n    // 엑셀 워크북 생성\n    const workbook = new ExcelJS.Workbook()\n    const worksheet = workbook.addWorksheet('급여명세서')\n\n    // 헤더 설정\n    const headers = [\n      '사번',\n      '성명',\n      '부서',\n      '직위',\n      '입사일',\n      '기본급',\n      '직책수당',\n      '상여금',\n      '식대',\n      '차량유지',\n      '연차수당',\n      '연말정산',\n      '건강보험',\n      '장기요양보험',\n      '국민연금',\n      '고용보험',\n      '갑근세',\n      '주민세',\n      '기타',\n      '지급총액',\n      '공제총액',\n      '실지급액'\n    ]\n\n    // 헤더 행 추가\n    worksheet.addRow(headers)\n\n    // 헤더 스타일링\n    const headerRow = worksheet.getRow(1)\n    headerRow.font = { bold: true, color: { argb: 'FFFFFF' } }\n    headerRow.fill = {\n      type: 'pattern',\n      pattern: 'solid',\n      fgColor: { argb: '366092' }\n    }\n    headerRow.alignment = { horizontal: 'center', vertical: 'middle' }\n\n    // 열 너비 설정\n    const columnWidths = [\n      10, 12, 15, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12\n    ]\n    columnWidths.forEach((width, index) => {\n      worksheet.getColumn(index + 1).width = width\n    })\n\n    // 데이터 행 추가\n    employees.forEach((employee: any) => {\n      const baseSalary = employee.annual_salary ? Math.round(employee.annual_salary / 12) : 3000000\n      const hireDate = employee.hire_date\n        ? new Date(employee.hire_date).toISOString().split('T')[0]\n        : ''\n\n      const row = [\n        employee.employee_id,\n        `${employee.last_name}${employee.first_name}`,\n        employee.department || '부서없음',\n        employee.position || '연구원',\n        hireDate,\n        baseSalary, // 기본급\n        0, // 직책수당\n        0, // 상여금\n        300000, // 식대\n        200000, // 차량유지\n        0, // 연차수당\n        0, // 연말정산\n        0, // 건강보험\n        0, // 장기요양보험\n        0, // 국민연금\n        0, // 고용보험\n        0, // 갑근세\n        0, // 주민세\n        0, // 기타\n        `=SUM(F${worksheet.rowCount}:L${worksheet.rowCount})`, // 지급총액\n        `=SUM(M${worksheet.rowCount}:S${worksheet.rowCount})`, // 공제총액\n        `=T${worksheet.rowCount}-U${worksheet.rowCount}` // 실지급액\n      ]\n\n      worksheet.addRow(row)\n    })\n\n    // 숫자 형식 설정\n    const numberColumns = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22] // F~V열\n    numberColumns.forEach(colIndex => {\n      worksheet.getColumn(colIndex).numFmt = '#,##0'\n    })\n\n    // 테두리 설정\n    worksheet.eachRow((row, rowNumber) => {\n      row.eachCell((cell, colNumber) => {\n        cell.border = {\n          top: { style: 'thin' },\n          left: { style: 'thin' },\n          bottom: { style: 'thin' },\n          right: { style: 'thin' }\n        }\n      })\n    })\n\n    // 설명 시트 추가\n    const instructionSheet = workbook.addWorksheet('작성 가이드')\n    instructionSheet.addRow(['급여명세서 엑셀 업로드 가이드'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['1. 기본 정보'])\n    instructionSheet.addRow(['- 사번, 성명, 부서, 직위, 입사일은 수정하지 마세요'])\n    instructionSheet.addRow(['- 기본급은 연봉/12로 자동 계산됩니다'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['2. 지급사항 (F~L열)'])\n    instructionSheet.addRow(['- 기본급: 기본 급여 (자동 계산)'])\n    instructionSheet.addRow(['- 직책수당: 직책에 따른 수당'])\n    instructionSheet.addRow(['- 상여금: 성과급, 보너스 등'])\n    instructionSheet.addRow(['- 식대: 식비 지원 (비과세)'])\n    instructionSheet.addRow(['- 차량유지: 차량 관련 비용 (비과세)'])\n    instructionSheet.addRow(['- 연차수당: 연차 사용 시 지급'])\n    instructionSheet.addRow(['- 연말정산: 연말정산 관련 지급'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['3. 공제사항 (M~S열)'])\n    instructionSheet.addRow(['- 건강보험: 건강보험료 (3.4%)'])\n    instructionSheet.addRow(['- 장기요양보험: 장기요양보험료 (0.34%)'])\n    instructionSheet.addRow(['- 국민연금: 국민연금 (4.5%)'])\n    instructionSheet.addRow(['- 고용보험: 고용보험료 (0.8%)'])\n    instructionSheet.addRow(['- 갑근세: 소득세 (13%)'])\n    instructionSheet.addRow(['- 주민세: 지방소득세 (1.3%)'])\n    instructionSheet.addRow(['- 기타: 기타 공제사항'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['4. 자동 계산'])\n    instructionSheet.addRow(['- 지급총액: 지급사항 합계 (자동 계산)'])\n    instructionSheet.addRow(['- 공제총액: 공제사항 합계 (자동 계산)'])\n    instructionSheet.addRow(['- 실지급액: 지급총액 - 공제총액 (자동 계산)'])\n    instructionSheet.addRow([''])\n    instructionSheet.addRow(['5. 주의사항'])\n    instructionSheet.addRow(['- 숫자만 입력하세요 (콤마, 원화 표시 제외)'])\n    instructionSheet.addRow(['- 빈 셀은 0으로 처리됩니다'])\n    instructionSheet.addRow(['- 파일을 저장한 후 업로드하세요'])\n\n    // 엑셀 파일 생성\n    const buffer = await workbook.xlsx.writeBuffer()\n\n    // 한글 파일명을 URL 인코딩\n    const fileName = `급여명세서_${year}년${month}월_템플릿.xlsx`\n    const encodedFileName = encodeURIComponent(fileName)\n\n    return new Response(buffer, {\n      headers: {\n        'Content-Type': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n        'Content-Disposition': `attachment; filename*=UTF-8''${encodedFileName}`\n      }\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '엑셀 템플릿 생성에 실패했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/salary/payslips/upload/+server.ts","messages":[{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":88,"column":13,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":88,"endColumn":68},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":178,"column":15,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":178,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":205,"column":15,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":205,"endColumn":53},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":230,"column":11,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":230,"endColumn":84},{"ruleId":"no-restricted-syntax","severity":2,"message":"이름 조합 시 formatEmployeeName 또는 formatKoreanNameStandard 함수를 사용하세요.","line":244,"column":16,"nodeType":"TemplateLiteral","messageId":"restrictedSyntax","endLine":244,"endColumn":70}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { query } from '$lib/database/connection'\nimport { json } from '@sveltejs/kit'\nimport ExcelJS from 'exceljs'\n\nexport async function POST({ request }) {\n  try {\n    const formData = await request.formData()\n    const file = formData.get('file') as File\n    const period = formData.get('period') as string // YYYY-MM 형식\n\n    if (!file) {\n      return json(\n        {\n          success: false,\n          error: '파일이 선택되지 않았습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    if (!period) {\n      return json(\n        {\n          success: false,\n          error: '급여 기간이 지정되지 않았습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 파일 확장자 검증\n    if (!file.name.endsWith('.xlsx') && !file.name.endsWith('.xls')) {\n      return json(\n        {\n          success: false,\n          error: '엑셀 파일(.xlsx, .xls)만 업로드 가능합니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    // 엑셀 파일 읽기\n    const buffer = await file.arrayBuffer()\n    const workbook = new ExcelJS.Workbook()\n    await workbook.xlsx.load(buffer)\n\n    const worksheet = workbook.getWorksheet('급여명세서')\n    if (!worksheet) {\n      return json(\n        {\n          success: false,\n          error: '급여명세서 시트를 찾을 수 없습니다.'\n        },\n        { status: 400 }\n      )\n    }\n\n    const results = {\n      success: 0,\n      failed: 0,\n      errors: [] as string[],\n      details: [] as unknown[]\n    }\n\n    // 헤더 행 건너뛰고 데이터 행 처리\n    for (let rowNumber = 2; rowNumber <= worksheet.rowCount; rowNumber++) {\n      const row = worksheet.getRow(rowNumber)\n\n      try {\n        // 필수 데이터 추출\n        const employeeId = row.getCell(1).value?.toString()\n        const name = row.getCell(2).value?.toString()\n\n        if (!employeeId || !name) {\n          results.failed++\n          results.errors.push(`행 ${rowNumber}: 사번 또는 성명이 없습니다.`)\n          continue\n        }\n\n        // 직원 ID로 실제 직원 찾기\n        const employeeResult = await query('SELECT id FROM employees WHERE employee_id = $1', [\n          employeeId\n        ])\n\n        if (employeeResult.rows.length === 0) {\n          results.failed++\n          results.errors.push(\n            `행 ${rowNumber}: 사번 ${employeeId}에 해당하는 직원을 찾을 수 없습니다.`\n          )\n          continue\n        }\n\n        const employeeDbId = employeeResult.rows[0].id\n\n        // 지급사항 데이터 추출\n        const allowances = [\n          { id: 'basic_salary', name: '기본급', amount: Number(row.getCell(6).value) || 0 },\n          { id: 'position_allowance', name: '직책수당', amount: Number(row.getCell(7).value) || 0 },\n          { id: 'bonus', name: '상여금', amount: Number(row.getCell(8).value) || 0 },\n          { id: 'meal_allowance', name: '식대', amount: Number(row.getCell(9).value) || 0 },\n          {\n            id: 'vehicle_maintenance',\n            name: '차량유지',\n            amount: Number(row.getCell(10).value) || 0\n          },\n          {\n            id: 'annual_leave_allowance',\n            name: '연차수당',\n            amount: Number(row.getCell(11).value) || 0\n          },\n          {\n            id: 'year_end_settlement',\n            name: '연말정산',\n            amount: Number(row.getCell(12).value) || 0\n          }\n        ]\n\n        // 공제사항 데이터 추출\n        const deductions = [\n          { id: 'health_insurance', name: '건강보험', amount: Number(row.getCell(13).value) || 0 },\n          {\n            id: 'long_term_care',\n            name: '장기요양보험',\n            amount: Number(row.getCell(14).value) || 0\n          },\n          { id: 'national_pension', name: '국민연금', amount: Number(row.getCell(15).value) || 0 },\n          {\n            id: 'employment_insurance',\n            name: '고용보험',\n            amount: Number(row.getCell(16).value) || 0\n          },\n          { id: 'income_tax', name: '갑근세', amount: Number(row.getCell(17).value) || 0 },\n          { id: 'local_tax', name: '주민세', amount: Number(row.getCell(18).value) || 0 },\n          { id: 'other', name: '기타', amount: Number(row.getCell(19).value) || 0 }\n        ]\n\n        // 총액 계산\n        const totalPayments = allowances.reduce((sum, item) => sum + item.amount, 0)\n        const totalDeductions = deductions.reduce((sum, item) => sum + item.amount, 0)\n        const netSalary = totalPayments - totalDeductions\n        const baseSalary = allowances.find(a => a.id === 'basic_salary')?.amount || 0\n\n        // 지급일 설정 (해당 월의 마지막 날)\n        const [year, month] = period.split('-')\n        const lastDay = new Date(parseInt(year), parseInt(month), 0).getDate()\n        const payDate = `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`\n\n        // 기존 급여명세서 확인\n        const existingPayslip = await query(\n          'SELECT id FROM payslips WHERE employee_id = $1 AND period = $2',\n          [employeeDbId, period]\n        )\n\n        if (existingPayslip.rows.length > 0) {\n          // 기존 급여명세서 업데이트\n          await query(\n            `\n\t\t\t\t\t\tUPDATE payslips SET\n\t\t\t\t\t\t\tpay_date = $3,\n\t\t\t\t\t\t\tpay_period_start = $4,\n\t\t\t\t\t\t\tpay_period_end = $5,\n\t\t\t\t\t\t\tbase_salary = $6,\n\t\t\t\t\t\t\ttotal_payments = $7,\n\t\t\t\t\t\t\ttotal_deductions = $8,\n\t\t\t\t\t\t\tnet_salary = $9,\n\t\t\t\t\t\t\ttotal_amount = $10,\n\t\t\t\t\t\t\tpayments = $11,\n\t\t\t\t\t\t\tdeductions = $12,\n\t\t\t\t\t\t\tstatus = 'draft',\n\t\t\t\t\t\t\tis_generated = false,\n\t\t\t\t\t\t\tupdated_at = CURRENT_TIMESTAMP\n\t\t\t\t\t\tWHERE employee_id = $1 AND period = $2\n\t\t\t\t\t\t`,\n            [\n              employeeDbId,\n              period,\n              payDate,\n              `${year}-${month.padStart(2, '0')}-01`,\n              `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`,\n              baseSalary,\n              totalPayments,\n              totalDeductions,\n              netSalary,\n              totalPayments,\n              JSON.stringify(allowances),\n              JSON.stringify(deductions)\n            ]\n          )\n        } else {\n          // 새 급여명세서 생성\n          await query(\n            `\n\t\t\t\t\t\tINSERT INTO payslips (\n\t\t\t\t\t\t\temployee_id, period, pay_date, pay_period_start, pay_period_end,\n\t\t\t\t\t\t\tbase_salary, total_payments, total_deductions, net_salary, total_amount,\n\t\t\t\t\t\t\tpayments, deductions, status, is_generated\n\t\t\t\t\t\t) VALUES (\n\t\t\t\t\t\t\t$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, 'draft', false\n\t\t\t\t\t\t)\n\t\t\t\t\t\t`,\n            [\n              employeeDbId,\n              period,\n              payDate,\n              `${year}-${month.padStart(2, '0')}-01`,\n              `${year}-${month.padStart(2, '0')}-${lastDay.toString().padStart(2, '0')}`,\n              baseSalary,\n              totalPayments,\n              totalDeductions,\n              netSalary,\n              totalPayments,\n              JSON.stringify(allowances),\n              JSON.stringify(deductions)\n            ]\n          )\n        }\n\n        results.success++\n        results.details.push({\n          row: rowNumber,\n          employeeId,\n          name,\n          status: 'success',\n          totalPayments,\n          netSalary\n        })\n      } catch (error) {\n        results.failed++\n        results.errors.push(\n          `행 ${rowNumber}: ${error instanceof Error ? error.message : '알 수 없는 오류'}`\n        )\n        results.details.push({\n          row: rowNumber,\n          employeeId: row.getCell(1).value?.toString() || 'N/A',\n          name: row.getCell(2).value?.toString() || 'N/A',\n          status: 'failed',\n          error: error instanceof Error ? error.message : '알 수 없는 오류'\n        })\n      }\n    }\n\n    return json({\n      success: true,\n      message: `처리 완료: 성공 ${results.success}건, 실패 ${results.failed}건`,\n      results\n    })\n  } catch (error) {\n    return json(\n      {\n        success: false,\n        error: '파일 업로드 처리 중 오류가 발생했습니다.',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    )\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/templates/employees/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/api/templates/projects/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/crm/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/dashboard/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/expenses/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":179,"column":51,"nodeType":"Identifier","messageId":"unusedVar","endLine":179,"endColumn":52,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[5878,5879],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { formatKRW } from '$lib/utils/format'\n  import {\n    expenseDocsStore,\n    updateExpenseStatus,\n    expenseHistories,\n    addExpenseHistory\n  } from '$lib/stores/rnd'\n  import { pushToast } from '$lib/stores/toasts'\n  import { page } from '$app/state'\n  import { goto } from '$app/navigation'\n  import type { ExpenseDocument } from '$lib/types'\n\n  let status = $state((page.url.searchParams.get('status') as '' | '대기' | '승인' | '반려') || '')\n  let query = $state(page.url.searchParams.get('q') || '')\n  let selectedId = $state<string | null>(null)\n\n  const all = $derived($expenseDocsStore)\n  const filtered = $derived(\n    all.filter(\n      d =>\n        (status ? d.status === status : true) &&\n          (query ? d.title.includes(query) || d.id.includes(query) : true)\n    )\n  )\n  const selected = $derived(all.find(d => d.id === selectedId))\n\n  let reason = $state('')\n  function approve() {\n    if (selected) {\n      updateExpenseStatus(selected.id, '승인')\n      addExpenseHistory(selected.id, '승인', reason || undefined)\n      reason = ''\n      pushToast('문서가 승인되었습니다.', 'success')\n    }\n  }\n  function reject() {\n    if (selected) {\n      updateExpenseStatus(selected.id, '반려')\n      addExpenseHistory(selected.id, '반려', reason || undefined)\n      reason = ''\n      pushToast('문서가 반려되었습니다.', 'error')\n    }\n  }\n\n  // URL 동기화\n  $effect(() => {\n    const sp = new URLSearchParams(page.url.searchParams)\n    if (query) sp.set('q', query)\n    else sp.delete('q')\n    if (status) sp.set('status', status)\n    else sp.delete('status')\n    const newUrl = `/expenses?${sp.toString()}`\n    if (newUrl !== page.url.pathname + (page.url.search ? page.url.search : '')) {\n      goto(newUrl, { replaceState: true, noScroll: true, keepFocus: true })\n    }\n  })\n\n  // 간단한 컴플라이언스 검증: 카테고리별 최소 첨부 개수 요구\n  const requiredAttachments: Record<string, number> = {\n    인건비: 2,\n    재료비: 1,\n    연구활동비: 1,\n    여비: 2\n  }\n  const requiredDocNames: Record<string, string[]> = {\n    인건비: ['급여명세서', '4대보험 납부확인'],\n    재료비: ['세금계산서'],\n    연구활동비: ['증빙서류'],\n    여비: ['영수증', '출장보고서']\n  }\n  function isCompliant(d: ExpenseDocument): boolean {\n    const min = requiredAttachments[d.category] ?? 0\n    return (d.attachments ?? 0) >= min\n  }\n  function missingDocs(d: ExpenseDocument): string[] {\n    const req = requiredDocNames[d.category] ?? []\n    const have = d.attachments ?? 0\n    return have >= req.length ? [] : req.slice(have)\n  }\n</script>\n\n<Card header=\"R&D 비용 증빙 문서\">\n  <div class=\"mb-3 flex flex-col sm:flex-row gap-2 sm:items-center\">\n    <input\n      class=\"w-full sm:w-64 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-primary/30\"\n      placeholder=\"문서 검색\"\n      bind:value={query}\n    />\n    <select\n      class=\"w-full sm:w-48 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={status}\n    >\n      <option value=\"\">상태: 전체</option>\n      <option value=\"대기\">대기</option>\n      <option value=\"승인\">승인</option>\n      <option value=\"반려\">반려</option>\n    </select>\n  </div>\n  <div class=\"overflow-auto\">\n    <table class=\"min-w-full text-sm\">\n      <thead class=\"bg-gray-50 text-left text-gray-600\">\n        <tr>\n          <th class=\"px-3 py-2\">문서번호</th>\n          <th class=\"px-3 py-2\">제목</th>\n          <th class=\"px-3 py-2\">분류</th>\n          <th class=\"px-3 py-2\">분기</th>\n          <th class=\"px-3 py-2\">금액</th>\n          <th class=\"px-3 py-2\">첨부</th>\n          <th class=\"px-3 py-2\">상태</th>\n        </tr>\n      </thead>\n      <tbody class=\"divide-y\">\n        {#each filtered as d, i (i)}\n          <tr class=\"hover:bg-gray-50 cursor-pointer\" onclick={() => (selectedId = d.id)}>\n            <td class=\"px-3 py-2\">{d.id}</td>\n            <td class=\"px-3 py-2\">{d.title}</td>\n            <td class=\"px-3 py-2\">{d.category}</td>\n            <td class=\"px-3 py-2\">{d.quarter}Q</td>\n            <td class=\"px-3 py-2\">{d.amountKRW ? formatKRW(d.amountKRW) : '-'}</td>\n            <td class=\"px-3 py-2\">{d.attachments}</td>\n            <td class=\"px-3 py-2\">\n              <Badge\n                color={!isCompliant(d)\n                  ? 'red'\n                  : d.status === '대기'\n                  ? 'yellow'\n                  : d.status === '반려'\n                  ? 'red'\n                  : 'green'}\n              >\n                {!isCompliant(d) ? '미비' : d.status}\n              </Badge>\n            </td>\n          </tr>\n        {/each}\n      </tbody>\n    </table>\n  </div>\n</Card>\n\n<Modal open={!!selected} title={selected?.title ?? ''} onClose={() => (selectedId = null)}>\n  {#if selected}\n    <div class=\"space-y-3 text-sm\">\n      <div class=\"flex items-center justify-between\">\n        <Badge\n          color={selected.status === '대기'\n            ? 'yellow'\n            : selected.status === '반려'\n            ? 'red'\n            : 'green'}>{selected.status}</Badge\n        >\n        <div>{selected.quarter}Q · {selected.category}</div>\n      </div>\n      <div class=\"grid grid-cols-2 gap-3\">\n        <div>\n          <div class=\"text-caption\">금액</div>\n          <div class=\"font-semibold\">\n            {selected.amountKRW ? formatKRW(selected.amountKRW) : '-'}\n          </div>\n        </div>\n        <div>\n          <div class=\"text-caption\">첨부</div>\n          <div class=\"font-semibold\">{selected.attachments}개</div>\n        </div>\n        <div class=\"col-span-2\">\n          <div class=\"text-caption\">결재선</div>\n          <div>{selected.appRoute.join(' → ')}</div>\n        </div>\n      </div>\n\n      <div>\n        <div class=\"text-caption mb-1\">첨부 미리보기</div>\n        {#if (selected.attachments ?? 0) > 0}\n          <div class=\"grid grid-cols-2 sm:grid-cols-4 gap-2\">\n            {#each Array(selected.attachments) as _, idx (idx)}\n              <!-- TODO: replace index key with a stable id when model provides one -->\n              <button\n                type=\"button\"\n                class=\"block rounded overflow-hidden border hover:ring-2 hover:ring-primary/40\"\n                aria-label={`첨부 ${idx + 1} 미리보기`}\n              >\n                <img\n                  src={`https://placehold.co/240x160?text=${encodeURIComponent(selected.id)}-${idx + 1}`}\n                  alt={`Attachment ${idx + 1}`}\n                  class=\"w-full h-24 object-cover\"\n                />\n              </button>\n            {/each}\n          </div>\n        {:else}\n          <div class=\"text-xs text-gray-500\">첨부 없음</div>\n        {/if}\n      </div>\n\n      {#if !isCompliant(selected)}\n        <div class=\"text-xs text-red-700 bg-red-50 border border-red-200 rounded p-2\">\n          필수 서류 미비: {missingDocs(selected).join(', ')}\n        </div>\n      {/if}\n      <div>\n        <div class=\"text-caption mb-1\">결재 이력</div>\n        {#if $expenseHistories[selected.id]?.length}\n          <ul class=\"space-y-1\">\n            {#each $expenseHistories[selected.id] as h (h.id)}\n              <li class=\"flex items-center justify-between\">\n                <span>{new Date(h.at).toLocaleString('ko-KR')}</span>\n                <Badge color={h.status === '반려' ? 'red' : h.status === '대기' ? 'yellow' : 'green'}\n                >{h.status}</Badge\n                >\n              </li>\n              {#if h.reason}\n                <div class=\"text-xs text-gray-500\">사유: {h.reason}</div>\n              {/if}\n            {/each}\n          </ul>\n        {:else}\n          <div class=\"text-xs text-gray-500\">이력이 없습니다</div>\n        {/if}\n      </div>\n      {#if selected.status === '대기'}\n        <div class=\"pt-2 flex items-center gap-2\">\n          <input\n            class=\"flex-1 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm\"\n            placeholder=\"사유(선택)\"\n            bind:value={reason}\n          />\n          <button\n            type=\"button\"\n            class=\"px-3 py-1.5 rounded-md bg-success text-white hover:brightness-95\"\n            onclick={approve}>승인</button\n          >\n          <button\n            type=\"button\"\n            class=\"px-3 py-1.5 rounded-md bg-danger text-white hover:brightness-95\"\n            onclick={reject}>반려</button\n          >\n        </div>\n      {/if}\n    </div>\n  {/if}\n</Modal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/finance/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/health/+server.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/hr/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getJobTitlesByLevel' is defined but never used.","line":187,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":187,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"getJobTitlesByLevel"},"fix":{"range":[5614,5867],"text":""},"desc":"Remove unused variable 'getJobTitlesByLevel'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'totalAllEmployees' is assigned a value but never used.","line":214,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":214,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'totalTO' is assigned a value but never used.","line":219,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":219,"endColumn":14},{"ruleId":"no-unused-vars","severity":2,"message":"'totalDepartments' is assigned a value but never used.","line":227,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":227,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'showExecutiveModal' is assigned a value but never used.","line":308,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":308,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'showJobTitleModal' is assigned a value but never used.","line":309,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":309,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedExecutive' is assigned a value but never used.","line":310,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":310,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedJobTitle' is assigned a value but never used.","line":311,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":311,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'jobTitleLoading' is assigned a value but never used.","line":313,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":313,"endColumn":22},{"ruleId":"no-unused-vars","severity":2,"message":"'groupedEmployees' is assigned a value but never used.","line":355,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":355,"endColumn":23},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":1563,"column":17,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":1882,"endColumn":24},{"ruleId":"svelte/require-optimized-style-attribute","severity":1,"message":"It cannot be optimized because too complex.","line":1597,"column":33,"nodeType":"SvelteAttribute","messageId":"complex","endLine":1604,"endColumn":111},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":1896,"column":19,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":1904,"endColumn":26},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":2151,"column":13,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":2262,"endColumn":20}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import PageLayout from '$lib/components/layout/PageLayout.svelte'\n  import DeleteConfirmModal from '$lib/components/ui/DeleteConfirmModal.svelte'\n  import DepartmentModal from '$lib/components/ui/DepartmentModal.svelte'\n  import EmployeeModal from '$lib/components/ui/EmployeeModal.svelte'\n  import OrganizationChart from '$lib/components/ui/OrganizationChart.svelte'\n  import PositionModal from '$lib/components/ui/PositionModal.svelte'\n  import ThemeActivityItem from '$lib/components/ui/ThemeActivityItem.svelte'\n  import ThemeBadge from '$lib/components/ui/ThemeBadge.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeChartPlaceholder from '$lib/components/ui/ThemeChartPlaceholder.svelte'\n  import ThemeGrid from '$lib/components/ui/ThemeGrid.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import ThemeSpacer from '$lib/components/ui/ThemeSpacer.svelte'\n  import ThemeTabs from '$lib/components/ui/ThemeTabs.svelte'\n  import { formatDateForDisplay, getCurrentUTC, getDateDifference } from '$lib/utils/date-handler'\n  import { formatDate, formatEmployeeName } from '$lib/utils/format'\n  import {\n    AlertCircleIcon,\n    BarChart3Icon,\n    BriefcaseIcon,\n    BuildingIcon,\n    CalendarIcon,\n    CheckCircleIcon,\n    CrownIcon,\n    DollarSignIcon,\n    DownloadIcon,\n    EditIcon,\n    EyeIcon,\n    FileSpreadsheetIcon,\n    FileTextIcon,\n    FlaskConicalIcon,\n    MailIcon,\n    PhoneIcon,\n    PlusIcon,\n    TagIcon,\n    TrashIcon,\n    TrendingUpIcon,\n    UserCheckIcon,\n    UserMinusIcon,\n    UserPlusIcon,\n    UsersIcon\n  } from '@lucide/svelte'\n  // HR 스토어들\n\n  import { jobPostings } from '$lib/stores/recruitment'\n  // 급여 계약 스토어\n  import { contracts, loadContracts } from '$lib/stores/salary/contract-store'\n\n  // 데이터베이스 직원 데이터\n  let employees = $state<any[]>([])\n  let loading = $state(true)\n  let error = $state<string | null>(null)\n\n  // 직원별 현재 급여 정보 가져오기\n  function getCurrentSalary(\n    employeeId: string\n  ): { annualSalary: number; monthlySalary: number; contractType: string } | null {\n    const activeContract = $contracts.find(\n      contract =>\n        contract.employeeId === employeeId &&\n          contract.status === 'active' &&\n          (!contract.endDate || new Date(contract.endDate) > new Date(getCurrentUTC()))\n    )\n\n    if (activeContract) {\n      return {\n        annualSalary: activeContract.annualSalary,\n        monthlySalary: activeContract.monthlySalary,\n        contractType: activeContract.contractType\n      }\n    }\n    return null\n  }\n\n  // 사번 포맷팅 함수 (새로운 사번 형식 1001, 1002 등 표시)\n  function formatEmployeeIdDisplay(employeeId: string, index: number): string {\n    // 새로운 사번 형식 (1001, 1002 등)을 그대로 표시\n    if (employeeId.match(/^\\d{4}$/)) {\n      return employeeId\n    }\n    // 기존 V 형식 사번도 그대로 표시\n    if (employeeId.startsWith('V')) {\n      return employeeId\n    }\n    // 기타 형식의 경우 순서대로 표시\n    return employeeId || `V${(index + 1).toString().padStart(5, '0')}`\n  }\n\n  // 직원 데이터 가져오기 (모든 직원 - 재직자 + 퇴사자)\n  async function fetchEmployees() {\n    try {\n      loading = true\n      error = null\n      const response = await fetch('/api/employees?status=all')\n      if (response.ok) {\n        const result = await response.json()\n        employees = result.data || result.employees || []\n      } else {\n        error = '직원 데이터를 불러오는데 실패했습니다.'\n      }\n    } catch (err) {\n      error = '직원 데이터를 불러오는데 실패했습니다.'\n      logger.error('Error fetching employees:', err)\n    } finally {\n      loading = false\n    }\n  }\n\n  // 부서 데이터 가져오기\n  async function fetchDepartments() {\n    try {\n      const response = await fetch('/api/departments')\n      if (response.ok) {\n        const result = await response.json()\n        departments = result.data || result.departments || []\n      }\n    } catch (err) {\n      logger.error('Error fetching departments:', err)\n    }\n  }\n\n  // 생성일 순으로 정렬된 부서 목록\n  let sortedDepartments = $derived(() => {\n    return [...departments].sort(\n      (a: any, b: any) => new Date(a.created_at).getTime() - new Date(b.created_at).getTime()\n    )\n  })\n\n  // 직급 데이터 가져오기\n  async function fetchPositions() {\n    try {\n      const response = await fetch('/api/positions')\n      if (response.ok) {\n        const result = await response.json()\n        positions = result.data || result.positions || []\n      }\n    } catch (err) {\n      logger.error('Error fetching positions:', err)\n    }\n  }\n\n  // 이사 데이터 가져오기\n  async function fetchExecutives() {\n    try {\n      executiveLoading = true\n      const response = await fetch('/api/executives')\n      if (response.ok) {\n        const result = await response.json()\n        executives = result.data || result.executives || []\n      }\n    } catch (err) {\n      logger.error('Error fetching executives:', err)\n    } finally {\n      executiveLoading = false\n    }\n  }\n\n  // 직책 데이터 가져오기\n  async function fetchJobTitles() {\n    try {\n      jobTitleLoading = true\n      const response = await fetch('/api/job-titles')\n      if (response.ok) {\n        const result = await response.json()\n        jobTitles = result.data || result.jobTitles || []\n      }\n    } catch (err) {\n      logger.error('Error fetching job titles:', err)\n    } finally {\n      jobTitleLoading = false\n    }\n  }\n\n  // 직급을 카테고리별로 분류\n  function getPositionsByCategory() {\n    const categories = {\n      연구원: positions.filter(p => p.department === '연구개발'),\n      디자이너: positions.filter(p => p.department === '디자인'),\n      행정원: positions.filter(p => p.department === '행정')\n    }\n    return categories\n  }\n\n  // 직책을 레벨별로 분류\n  function getJobTitlesByLevel() {\n    const levels = {\n      'C-Level': jobTitles.filter(jt => jt.level === 1),\n      Management: jobTitles.filter(jt => jt.level === 2),\n      Specialist: jobTitles.filter(jt => jt.level === 3)\n    }\n    return levels\n  }\n\n  // T/O (정원) 정보 - 데이터베이스에서 가져옴\n  let teamTO = $derived(() => {\n    const toMap: any = {}\n    if (departments) {\n      departments.forEach((dept: any) => {\n        toMap[dept.name] = dept.max_employees || 0\n      })\n    }\n    return toMap\n  })\n\n  // 반응형 데이터 (데이터베이스 기반)\n  let totalEmployees = $derived(() => {\n    // 재직중인 직원만 카운트 (이사 제외)\n    const activeEmployeeCount = employees?.filter((emp: any) => emp.status === 'active').length || 0\n    return activeEmployeeCount\n  })\n\n  let totalAllEmployees = $derived(() => {\n    // 모든 직원 카운트 (재직자 + 퇴사자, 이사 제외)\n    return employees?.length || 0\n  })\n\n  let totalTO = $derived(() => {\n    // 부서별 T/O 카운트를 단순히 합산\n    return Object.values(teamTO() as Record<string, number>).reduce(\n      (sum: number, to: number) => sum + to,\n      0\n    )\n  })\n\n  let totalDepartments = $derived(\n    () => [...new Set(employees?.map((emp: any) => emp.department) || [])].length\n  )\n  let activeRecruitments = $derived(\n    () => $jobPostings.filter(job => job.status === 'published').length\n  )\n\n  // 탭 정의\n  const tabs = [\n    {\n      id: 'overview',\n      label: '개요',\n      icon: BarChart3Icon\n    },\n    {\n      id: 'employees',\n      label: '직원관리',\n      icon: UsersIcon\n    },\n    {\n      id: 'recruitment',\n      label: '채용관리',\n      icon: UserPlusIcon\n    },\n    {\n      id: 'departments',\n      label: '부서관리',\n      icon: BuildingIcon\n    },\n    {\n      id: 'positions',\n      label: '직급관리',\n      icon: UserCheckIcon\n    },\n    {\n      id: 'executives',\n      label: '이사관리',\n      icon: CrownIcon\n    },\n    {\n      id: 'job-titles',\n      label: '직책관리',\n      icon: BriefcaseIcon\n    },\n    {\n      id: 'org-chart',\n      label: '조직도',\n      icon: BuildingIcon\n    }\n  ]\n\n  let activeTab = $state('overview')\n\n  // 업로드 관련 상태\n  let showUploadModal = $state(false)\n  let uploadFile = $state<File | null>(null)\n  let uploadStatus = $state<'idle' | 'uploading' | 'success' | 'error'>('idle')\n  let uploadMessage = $state('')\n  let uploadProgress = $state(0)\n  let isDragOver = $state(false)\n\n  // 직원 관리 관련 상태\n  let showEmployeeModal = $state(false)\n  let showDeleteModal = $state(false)\n  let selectedEmployee = $state<any>(null)\n  let employeeLoading = $state(false)\n  let deleteLoading = $state(false)\n\n  // 조직 관리 관련 상태\n  let departments = $state<any[]>([])\n  let positions = $state<any[]>([])\n  let showDepartmentModal = $state(false)\n  let showPositionModal = $state(false)\n  let selectedDepartment = $state<any>(null)\n  let selectedPosition = $state<any>(null)\n  let departmentLoading = $state(false)\n  let positionLoading = $state(false)\n\n  // 이사 관리 관련 상태\n  let executives = $state<any[]>([])\n  let jobTitles = $state<any[]>([])\n  let showExecutiveModal = $state(false)\n  let showJobTitleModal = $state(false)\n  let selectedExecutive = $state<any>(null)\n  let selectedJobTitle = $state<any>(null)\n  let executiveLoading = $state(false)\n  let jobTitleLoading = $state(false)\n\n  // 직원 검색 및 필터링 상태\n  let searchQuery = $state('')\n  let departmentFilter = $state('')\n  let statusFilter = $state('active') // 기본값: 재직중\n  let currentPage = $state(1)\n  let itemsPerPage = 20\n\n  // 필터링된 직원 목록\n  let filteredEmployees = $derived(\n    (() => {\n      let filtered = employees || []\n\n      // 검색 필터\n      if (searchQuery) {\n        const query = searchQuery.toLowerCase()\n        filtered = filtered.filter(\n          emp =>\n            formatEmployeeName(emp).toLowerCase().includes(query) ||\n              emp.email.toLowerCase().includes(query) ||\n              emp.employee_id.toLowerCase().includes(query) ||\n              emp.department.toLowerCase().includes(query) ||\n              emp.position.toLowerCase().includes(query)\n        )\n      }\n\n      // 부서 필터\n      if (departmentFilter) {\n        filtered = filtered.filter(emp => emp.department === departmentFilter)\n      }\n\n      // 상태 필터\n      if (statusFilter) {\n        filtered = filtered.filter(emp => emp.status === statusFilter)\n      }\n\n      return filtered\n    })()\n  )\n\n  // 팀별로 그룹화된 직원 목록\n  let groupedEmployees = $derived(\n    (() => {\n      const groups: { [key: string]: any[] } = {}\n\n      filteredEmployees.forEach((employee: any) => {\n        const team = employee.department || '기타'\n        if (!groups[team]) {\n          groups[team] = []\n        }\n        groups[team].push(employee)\n      })\n\n      return groups\n    })()\n  )\n\n  // 페이지네이션 계산 (직원 수 기준)\n  let totalPages = $derived(Math.ceil(filteredEmployees.length / itemsPerPage))\n  let paginatedEmployees = $derived(\n    (() => {\n      const start = (currentPage - 1) * itemsPerPage\n      const end = start + itemsPerPage\n      return filteredEmployees.slice(start, end)\n    })()\n  )\n\n  // 팀 리더 및 임원인지 확인하는 함수\n  function isTeamLead(employee: any): boolean {\n    const leadershipPositions = [\n      'Team Lead',\n      'CEO',\n      'CFO',\n      'CTO',\n      '대표이사',\n      '재무이사',\n      '기술이사',\n      '연구소장',\n      '상무'\n    ]\n    return (\n      leadershipPositions.includes(employee.job_title_name) ||\n      leadershipPositions.includes(employee.position)\n    )\n  }\n\n  // 직원을 정렬하는 함수 (임원/팀 리더 우선, 퇴사자는 퇴사일 역순)\n  function sortEmployees(employees: any[]): any[] {\n    return employees.sort((a, b) => {\n      // 퇴사자인 경우 퇴사일 역순으로 정렬\n      if (a.status === 'terminated' && b.status === 'terminated') {\n        const aTerminationDate = a.termination_date ? new Date(a.termination_date).getTime() : 0\n        const bTerminationDate = b.termination_date ? new Date(b.termination_date).getTime() : 0\n        return bTerminationDate - aTerminationDate // 최신 퇴사일이 먼저\n      }\n\n      // 퇴사자와 재직자 구분 (재직자가 먼저)\n      if (a.status === 'terminated' && b.status !== 'terminated') return 1\n      if (a.status !== 'terminated' && b.status === 'terminated') return -1\n\n      // 재직자인 경우 기존 로직 적용\n      const aIsLeader = isTeamLead(a)\n      const bIsLeader = isTeamLead(b)\n\n      // 임원/팀 리더가 아닌 직원보다 임원/팀 리더를 앞에 배치\n      if (aIsLeader && !bIsLeader) return -1\n      if (!aIsLeader && bIsLeader) return 1\n\n      // 둘 다 임원/팀 리더이거나 둘 다 일반 직원인 경우 이름순 정렬\n      const aName = formatEmployeeName(a)\n      const bName = formatEmployeeName(b)\n      return aName.localeCompare(bName)\n    })\n  }\n\n  // 페이지네이션된 직원들을 팀별로 그룹화 (임원/팀 리더 우선 정렬)\n  let paginatedGroupedEmployees = $derived(\n    (() => {\n      const groups: { [key: string]: any[] } = {}\n\n      paginatedEmployees.forEach((employee: any) => {\n        const team = employee.department || '기타'\n        if (!groups[team]) {\n          groups[team] = []\n        }\n        groups[team].push(employee)\n      })\n\n      // 각 팀 내에서 팀 리더를 우선 정렬\n      Object.keys(groups).forEach(team => {\n        groups[team] = sortEmployees(groups[team])\n      })\n\n      // 부서별 정렬 순서 적용\n      const departmentOrder: { [key: string]: number } = {\n        대표: 1,\n        전략기획실: 2,\n        연구소: 3,\n        부서없음: 999\n      }\n\n      // 정렬된 그룹 객체 생성\n      const sortedGroups: { [key: string]: any[] } = {}\n      const sortedTeamNames = Object.keys(groups).sort((a, b) => {\n        const aOrder = departmentOrder[a] || 100\n        const bOrder = departmentOrder[b] || 100\n\n        if (aOrder !== bOrder) {\n          return aOrder - bOrder\n        }\n\n        // 같은 우선순위 내에서는 알파벳 순\n        return a.localeCompare(b)\n      })\n\n      sortedTeamNames.forEach(teamName => {\n        sortedGroups[teamName] = groups[teamName]\n      })\n\n      return sortedGroups\n    })()\n  )\n\n  // 통계 데이터\n  let stats = $derived(\n    (() => {\n      const statsData = [\n        {\n          title: '직원 수',\n          value: `${totalEmployees()}`,\n          change: '+5%',\n          changeType: 'positive' as const,\n          icon: UsersIcon\n        },\n        {\n          title: '진행중인 채용',\n          value: activeRecruitments(),\n          change: '+2',\n          changeType: 'positive' as const,\n          icon: UserPlusIcon\n        }\n      ]\n\n      return statsData\n    })()\n  )\n\n  // 액션 버튼들\n  const actions = [\n    {\n      label: '직원 추가',\n      icon: PlusIcon,\n      onclick: () => openAddEmployeeModal(),\n      variant: 'primary' as const\n    },\n    {\n      label: '채용 공고',\n      icon: FileTextIcon,\n      onclick: () => {\n        // 채용 공고 탭으로 이동\n        activeTab = 'recruitment'\n      },\n      variant: 'success' as const\n    }\n  ]\n\n  // 최근 활동 데이터\n  let recentActivities = $derived(() => {\n    const activities: Array<{\n      type: string\n      title: string\n      description: string\n      time: string\n      icon: any\n      color: string\n      metadata?: any\n    }> = []\n\n    // 최근 입사자 (최근 3개월 이내)\n    const threeMonthsAgo = new Date(getCurrentUTC())\n    threeMonthsAgo.setMonth(threeMonthsAgo.getMonth() - 3)\n\n    employees\n      .filter(\n        (emp: any) =>\n          emp.status === 'active' && emp.hire_date && new Date(emp.hire_date) >= threeMonthsAgo\n      )\n      .sort((a: any, b: any) => new Date(b.hire_date).getTime() - new Date(a.hire_date).getTime())\n      .slice(0, 3)\n      .forEach((emp: any) => {\n        const daysSinceHire = getDateDifference(emp.hire_date, getCurrentUTC())\n        const hireDate = formatDateForDisplay(emp.hire_date, 'KOREAN')\n        activities.push({\n          type: 'hire',\n          title: '신규 입사',\n          description: `${formatEmployeeName(emp)}님이 ${hireDate}에 ${emp.department} ${emp.position}로 입사했습니다. (${daysSinceHire}일 경과)`,\n          time: emp.hire_date,\n          icon: UserPlusIcon,\n          color: 'text-green-600',\n          metadata: {\n            daysSinceHire,\n            department: emp.department,\n            position: emp.position,\n            employeeName: formatEmployeeName(emp)\n          }\n        })\n      })\n\n    // 퇴직 예정자 (1개월 이내)\n    const oneMonthFromNow = new Date(getCurrentUTC())\n    oneMonthFromNow.setMonth(oneMonthFromNow.getMonth() + 1)\n\n    employees\n      .filter(\n        (emp: any) =>\n          emp.status === 'active' &&\n            emp.termination_date &&\n            new Date(emp.termination_date) > new Date() && // 미래 날짜\n            new Date(emp.termination_date) <= oneMonthFromNow // 1개월 이내\n      )\n      .sort(\n        (a: any, b: any) =>\n          new Date(a.termination_date).getTime() - new Date(b.termination_date).getTime()\n      )\n      .slice(0, 3)\n      .forEach((emp: any) => {\n        const daysLeft = Math.ceil(getDateDifference(getCurrentUTC(), emp.termination_date))\n        const isContract = emp.employment_type === 'contract'\n        const terminationDate = formatDateForDisplay(emp.termination_date, 'KOREAN')\n        activities.push({\n          type: 'termination_pending',\n          title: isContract ? '계약 만료 예정' : '퇴직 예정',\n          description: `${formatEmployeeName(emp)}님(${emp.department} ${emp.position})이 ${terminationDate}에 ${isContract ? '계약 만료' : '퇴직'} 예정입니다. (${daysLeft}일 남음)`,\n          time: emp.termination_date,\n          icon: CalendarIcon,\n          color: 'text-orange-600',\n          metadata: {\n            daysLeft,\n            employmentType: emp.employment_type,\n            department: emp.department,\n            employeeName: formatEmployeeName(emp),\n            position: emp.position\n          }\n        })\n      })\n\n    // 최근 퇴사자 (최근 3개월 이내)\n    const threeMonthsAgoForTermination = new Date(getCurrentUTC())\n    threeMonthsAgoForTermination.setMonth(threeMonthsAgoForTermination.getMonth() - 3)\n\n    employees\n      .filter(\n        (emp: any) =>\n          emp.status === 'terminated' &&\n            emp.termination_date &&\n            new Date(emp.termination_date) >= threeMonthsAgoForTermination\n      )\n      .sort(\n        (a: any, b: any) =>\n          new Date(b.termination_date).getTime() - new Date(a.termination_date).getTime()\n      )\n      .slice(0, 3)\n      .forEach((emp: any) => {\n        const daysSinceTermination = getDateDifference(emp.termination_date, getCurrentUTC())\n        const terminationDate = formatDateForDisplay(emp.termination_date, 'KOREAN')\n        activities.push({\n          type: 'termination',\n          title: '퇴사 완료',\n          description: `${formatEmployeeName(emp)}님(${emp.department} ${emp.position})이 ${terminationDate}에 퇴사했습니다. (${daysSinceTermination}일 경과)`,\n          time: emp.termination_date,\n          icon: UserMinusIcon,\n          color: 'text-red-600',\n          metadata: {\n            daysSinceTermination,\n            department: emp.department,\n            employeeName: formatEmployeeName(emp),\n            position: emp.position\n          }\n        })\n      })\n\n    // 부서별 인원 변화 (최근 입사/퇴사로 인한 변화)\n    const departmentChanges = employees.reduce((acc: any, emp: any) => {\n      if (!acc[emp.department]) {\n        acc[emp.department] = { hires: [], terminations: [] }\n      }\n\n      if (emp.status === 'active' && emp.hire_date && new Date(emp.hire_date) >= threeMonthsAgo) {\n        acc[emp.department].hires.push(formatEmployeeName(emp))\n      }\n      if (\n        emp.status === 'terminated' &&\n        emp.termination_date &&\n        new Date(emp.termination_date) >= threeMonthsAgoForTermination\n      ) {\n        acc[emp.department].terminations.push(formatEmployeeName(emp))\n      }\n\n      return acc\n    }, {})\n\n    // 변화가 있는 부서 정보 추가\n    Object.entries(departmentChanges).forEach(([dept, changes]: [string, any]) => {\n      if (changes.hires.length > 0 || changes.terminations.length > 0) {\n        const netChange = changes.hires.length - changes.terminations.length\n        if (netChange !== 0) {\n          let description = `${dept} 부서: `\n          if (changes.hires.length > 0) {\n            description += `입사 ${changes.hires.length}명(${changes.hires.join(', ')})`\n          }\n          if (changes.terminations.length > 0) {\n            if (changes.hires.length > 0) description += ', '\n            description += `퇴사 ${changes.terminations.length}명(${changes.terminations.join(', ')})`\n          }\n          description += ` (순증감: ${netChange > 0 ? '+' : ''}${netChange}명)`\n\n          activities.push({\n            type: 'department_change',\n            title: '부서 인원 변화',\n            description: description,\n            time: new Date().toISOString(),\n            icon: BuildingIcon,\n            color: netChange > 0 ? 'text-blue-600' : 'text-red-600',\n            metadata: {\n              department: dept,\n              netChange,\n              hires: changes.hires,\n              terminations: changes.terminations\n            }\n          })\n        }\n      }\n    })\n\n    // 시간순 정렬 후 최대 8개 반환\n    return activities\n      .sort((a, b) => new Date(b.time).getTime() - new Date(a.time).getTime())\n      .slice(0, 8)\n  })\n\n  // 부서별 직원 데이터 (T/O 포함)\n  let departmentData = $derived(() => {\n    if (!employees || employees.length === 0 || !departments || departments.length === 0) return []\n\n    // 모든 직원 카운트 (이사 포함)\n    const deptCounts = employees.reduce(\n      (acc: any, emp: any) => {\n        acc[emp.department] = (acc[emp.department] || 0) + 1\n        return acc\n      },\n      {} as Record<string, number>\n    )\n\n    // departments 데이터를 기반으로 부서별 데이터 생성 (부서없음 포함)\n    const deptData = departments.map((dept: any) => {\n      const currentCount = deptCounts[dept.name] || 0\n      const departmentTO = teamTO()[dept.name] || 0\n      const percentage = Math.round((currentCount / totalEmployees()) * 100)\n\n      return {\n        department: dept.name,\n        count: currentCount,\n        to: departmentTO,\n        percentage,\n        // T/O 대비 현재 인원 비율\n        toPercentage: departmentTO > 0 ? Math.round((currentCount / departmentTO) * 100) : 0,\n        // T/O 상태 (여유/충족/초과)\n        toStatus:\n          departmentTO === 0\n            ? 'unlimited'\n            : currentCount > departmentTO\n            ? 'over'\n            : currentCount === departmentTO\n            ? 'full'\n            : 'available'\n      }\n    })\n\n    // 부서 정렬 순서: 대표 → 전략기획실 → 연구소 → 각 팀들 → 부서없음\n    return deptData.sort((a, b) => {\n      const order: { [key: string]: number } = {\n        대표: 1,\n        전략기획실: 2,\n        연구소: 3,\n        부서없음: 999\n      }\n\n      const aOrder = order[a.department] || 100\n      const bOrder = order[b.department] || 100\n\n      if (aOrder !== bOrder) {\n        return aOrder - bOrder\n      }\n\n      // 같은 우선순위 내에서는 알파벳 순\n      return a.department.localeCompare(b.department)\n    })\n  })\n\n  // 최근 채용 공고\n  let recentJobPostings = $derived(() => {\n    return $jobPostings\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n      .slice(0, 5)\n  })\n\n  // 컴포넌트 마운트 시 데이터 로드\n  $effect(() => {\n    fetchEmployees()\n    fetchDepartments()\n    fetchPositions()\n    fetchExecutives()\n    fetchJobTitles()\n    loadContracts() // 급여 계약 데이터 로드\n  })\n\n  // 탭 변경 시 해당 탭의 데이터 로드\n  $effect(() => {\n    // activeTab 변경을 감지하여 데이터 로드\n    const currentTab = activeTab\n    logger.log('HR Tab changed to:', currentTab)\n\n    switch (currentTab) {\n      case 'employees':\n        logger.log('Loading employees data...')\n        fetchEmployees()\n        break\n      case 'departments':\n        logger.log('Loading departments data...')\n        fetchDepartments()\n        break\n      case 'positions':\n        logger.log('Loading positions data...')\n        fetchPositions()\n        break\n      case 'executives':\n        logger.log('Loading executives data...')\n        fetchExecutives()\n        break\n      case 'job-titles':\n        logger.log('Loading job titles data...')\n        fetchJobTitles()\n        break\n    }\n  })\n\n  // 탭 변경 핸들러\n  function handleTabChange(tabId: string) {\n    logger.log('HR Tab change requested:', tabId)\n    activeTab = tabId\n  }\n\n  // 파일 업로드 처리\n  function handleFileSelect(event: Event) {\n    const target = event.target as HTMLInputElement\n    const file = target.files?.[0]\n    if (file) {\n      validateAndSetFile(file)\n    }\n  }\n\n  // 드래그 앤 드롭 핸들러\n  function handleDragOver(event: DragEvent) {\n    event.preventDefault()\n    isDragOver = true\n  }\n\n  function handleDragLeave(event: DragEvent) {\n    event.preventDefault()\n    isDragOver = false\n  }\n\n  function handleDrop(event: DragEvent) {\n    event.preventDefault()\n    isDragOver = false\n\n    const files = event.dataTransfer?.files\n    if (files && files.length > 0) {\n      const file = files[0]\n      validateAndSetFile(file)\n    }\n  }\n\n  // 파일 검증 및 설정\n  function validateAndSetFile(file: File) {\n    // 파일 크기 검증 (10MB 제한)\n    const maxSize = 10 * 1024 * 1024 // 10MB\n    if (file.size > maxSize) {\n      uploadMessage = '파일 크기는 10MB를 초과할 수 없습니다.'\n      uploadStatus = 'error'\n      return\n    }\n\n    // 파일 형식 검증\n    const allowedTypes = [\n      'text/csv',\n      'application/vnd.ms-excel',\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    ]\n    const allowedExtensions = ['.csv', '.xlsx', '.xls']\n\n    const isValidType = allowedTypes.includes(file.type)\n    const isValidExtension = allowedExtensions.some(ext => file.name.toLowerCase().endsWith(ext))\n\n    if (!isValidType && !isValidExtension) {\n      uploadMessage = 'CSV 또는 Excel 파일만 업로드 가능합니다.'\n      uploadStatus = 'error'\n      return\n    }\n\n    uploadFile = file\n    uploadStatus = 'idle'\n    uploadMessage = ''\n  }\n\n  // 엑셀 업로드 실행\n  async function uploadExcel() {\n    if (!uploadFile) return\n\n    uploadStatus = 'uploading'\n    uploadProgress = 0\n    uploadMessage = '파일을 업로드하는 중...'\n\n    try {\n      const formData = new FormData()\n      formData.append('file', uploadFile)\n\n      // 업로드 진행률 시뮬레이션\n      const progressInterval = setInterval(() => {\n        uploadProgress += 10\n        if (uploadProgress >= 90) {\n          clearInterval(progressInterval)\n        }\n      }, 200)\n\n      const response = await fetch('/api/employees/upload', {\n        method: 'POST',\n        body: formData\n      })\n\n      clearInterval(progressInterval)\n      uploadProgress = 100\n\n      if (response.ok) {\n        const result = await response.json()\n        uploadStatus = 'success'\n        uploadMessage = `성공적으로 ${result.count}명의 직원이 업로드되었습니다.`\n\n        // 직원 목록 새로고침\n        await fetchEmployees()\n\n        setTimeout(() => {\n          showUploadModal = false\n          uploadStatus = 'idle'\n          uploadFile = null\n          uploadProgress = 0\n          uploadMessage = ''\n        }, 2000)\n      } else {\n        throw new Error('업로드 실패')\n      }\n    } catch (error) {\n      uploadStatus = 'error'\n      uploadMessage = '업로드 중 오류가 발생했습니다. 파일 형식을 확인해주세요.'\n      logger.error('Upload error:', error)\n    }\n  }\n\n  // 업로드 모달 열기\n  function openUploadModal() {\n    showUploadModal = true\n    uploadStatus = 'idle'\n    uploadFile = null\n    uploadProgress = 0\n    uploadMessage = ''\n  }\n\n  // 업로드 모달 닫기\n  function closeUploadModal() {\n    showUploadModal = false\n    uploadStatus = 'idle'\n    uploadFile = null\n    uploadProgress = 0\n    uploadMessage = ''\n  }\n\n  // 직원 추가/수정\n  async function handleEmployeeSave(event: any) {\n    try {\n      const employeeData = event.detail\n      employeeLoading = true\n\n      const url = '/api/employees'\n      const method = selectedEmployee?.id ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(employeeData)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchEmployees() // 데이터 새로고침\n        showEmployeeModal = false\n        selectedEmployee = null\n      } else {\n        alert(result.error || '직원 저장에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error saving employee:', error)\n      alert('직원 저장 중 오류가 발생했습니다.')\n    } finally {\n      employeeLoading = false\n    }\n  }\n\n  // 직원 삭제/아카이브\n  async function handleEmployeeDelete(action: 'delete' | 'archive') {\n    if (!selectedEmployee) return\n\n    try {\n      deleteLoading = true\n\n      const url = `/api/employees/${selectedEmployee.id}${action === 'archive' ? '?archive=true' : ''}`\n      const response = await fetch(url, {\n        method: 'DELETE'\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchEmployees() // 데이터 새로고침\n        showDeleteModal = false\n        selectedEmployee = null\n      } else {\n        alert(result.error || '직원 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error deleting employee:', error)\n      alert('직원 삭제 중 오류가 발생했습니다.')\n    } finally {\n      deleteLoading = false\n    }\n  }\n\n  // 페이지네이션 함수들\n  function setCurrentPage(page: number) {\n    currentPage = page\n  }\n\n  // 검색/필터 변경 시 첫 페이지로 이동\n  $effect(() => {\n    searchQuery\n    departmentFilter\n    statusFilter\n    currentPage = 1\n  })\n\n  // 직원 추가 모달 열기\n  function openAddEmployeeModal() {\n    selectedEmployee = null\n    showEmployeeModal = true\n  }\n\n  // 직원 수정 모달 열기\n  function openEditEmployeeModal(employee: any) {\n    selectedEmployee = employee\n    showEmployeeModal = true\n  }\n\n  // 직원 삭제 모달 열기\n  function openDeleteEmployeeModal(employee: any) {\n    selectedEmployee = employee\n    showDeleteModal = true\n  }\n\n  // 직원 템플릿 다운로드\n  async function downloadEmployeeTemplate() {\n    try {\n      const response = await fetch('/api/templates/employees')\n      if (response.ok) {\n        const blob = await response.blob()\n        const url = window.URL.createObjectURL(blob)\n        const a = document.createElement('a')\n        a.href = url\n        a.download = 'employee_template.csv'\n        document.body.appendChild(a)\n        a.click()\n        window.URL.revokeObjectURL(url)\n        document.body.removeChild(a)\n      } else {\n        alert('템플릿 다운로드에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('템플릿 다운로드 에러:', error)\n      alert('템플릿 다운로드 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 부서 관리 함수들\n  async function handleDepartmentSave(event: any) {\n    try {\n      const departmentData = event.detail\n      departmentLoading = true\n\n      const url = selectedDepartment?.id\n        ? `/api/departments/${selectedDepartment.id}`\n        : '/api/departments'\n      const method = selectedDepartment?.id ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(departmentData)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchDepartments()\n        showDepartmentModal = false\n        selectedDepartment = null\n      } else {\n        alert(result.error || '부서 저장에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error saving department:', error)\n      alert('부서 저장 중 오류가 발생했습니다.')\n    } finally {\n      departmentLoading = false\n    }\n  }\n\n  async function handleDepartmentDelete(department: any, hardDelete = false) {\n    try {\n      const url = `/api/departments/${department.id}${hardDelete ? '?hard=true' : ''}`\n      const response = await fetch(url, {\n        method: 'DELETE'\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchDepartments()\n      } else {\n        alert(result.error || '부서 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error deleting department:', error)\n      alert('부서 삭제 중 오류가 발생했습니다.')\n    }\n  }\n\n  function openAddDepartmentModal() {\n    selectedDepartment = null\n    showDepartmentModal = true\n  }\n\n  function openEditDepartmentModal(department: any) {\n    selectedDepartment = department\n    showDepartmentModal = true\n  }\n\n  // 직급 관리 함수들\n  async function handlePositionSave(event: any) {\n    try {\n      const positionData = event.detail\n      positionLoading = true\n\n      const url = selectedPosition?.id ? `/api/positions/${selectedPosition.id}` : '/api/positions'\n      const method = selectedPosition?.id ? 'PUT' : 'POST'\n\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(positionData)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchPositions()\n        showPositionModal = false\n        selectedPosition = null\n      } else {\n        alert(result.error || '직급 저장에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error saving position:', error)\n      alert('직급 저장 중 오류가 발생했습니다.')\n    } finally {\n      positionLoading = false\n    }\n  }\n\n  async function handlePositionDelete(position: any, hardDelete = false) {\n    try {\n      const url = `/api/positions/${position.id}${hardDelete ? '?hard=true' : ''}`\n      const response = await fetch(url, {\n        method: 'DELETE'\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await fetchPositions()\n      } else {\n        alert(result.error || '직급 삭제에 실패했습니다.')\n      }\n    } catch (error) {\n      logger.error('Error deleting position:', error)\n      alert('직급 삭제 중 오류가 발생했습니다.')\n    }\n  }\n\n  function openAddPositionModal(category?: string) {\n    selectedPosition = null\n    showPositionModal = true\n    // 카테고리 정보를 모달에 전달할 수 있도록 설정\n    if (category) {\n    // 모달에서 카테고리 정보를 사용할 수 있도록 상태 설정\n      // 이는 PositionModal 컴포넌트에서 활용할 수 있습니다\n    }\n  }\n\n  // 이사 관리 함수들\n  function openAddExecutiveModal() {\n    selectedExecutive = null\n    showExecutiveModal = true\n  }\n\n  function openEditExecutiveModal(executive: any) {\n    selectedExecutive = executive\n    showExecutiveModal = true\n  }\n\n  async function handleExecutiveDelete(executive: any) {\n    if (confirm(`정말로 ${formatEmployeeName(executive)} 이사를 삭제하시겠습니까?`)) {\n      try {\n        const response = await fetch(`/api/executives/${executive.id}`, {\n          method: 'DELETE'\n        })\n\n        if (response.ok) {\n          await fetchExecutives()\n          alert('이사가 성공적으로 삭제되었습니다.')\n        } else {\n          const result = await response.json()\n          alert(result.error || '이사 삭제 중 오류가 발생했습니다.')\n        }\n      } catch (error) {\n        logger.error('Error deleting executive:', error)\n        alert('이사 삭제 중 오류가 발생했습니다.')\n      }\n    }\n  }\n\n  // 직책 관리 함수들\n  function openAddJobTitleModal(level?: string) {\n    selectedJobTitle = null\n    showJobTitleModal = true\n    // 레벨 정보를 모달에 전달할 수 있도록 설정\n    if (level) {\n    // 모달에서 레벨 정보를 사용할 수 있도록 상태 설정\n    }\n  }\n\n  function openEditJobTitleModal(jobTitle: any) {\n    selectedJobTitle = jobTitle\n    showJobTitleModal = true\n  }\n\n  async function handleJobTitleDelete(jobTitle: any) {\n    if (confirm(`정말로 ${jobTitle.name} 직책을 삭제하시겠습니까?`)) {\n      try {\n        const response = await fetch(`/api/job-titles/${jobTitle.id}`, {\n          method: 'DELETE'\n        })\n\n        if (response.ok) {\n          await fetchJobTitles()\n          alert('직책이 성공적으로 삭제되었습니다.')\n        } else {\n          const result = await response.json()\n          alert(result.error || '직책 삭제 중 오류가 발생했습니다.')\n        }\n      } catch (error) {\n        logger.error('Error deleting job title:', error)\n        alert('직책 삭제 중 오류가 발생했습니다.')\n      }\n    }\n  }\n\n  function openEditPositionModal(position: any) {\n    selectedPosition = position\n    showPositionModal = true\n  }\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<PageLayout\n  title=\"인사관리\"\n  subtitle=\"직원 정보, 채용, 성과 관리\"\n  {stats}\n  {actions}\n  searchPlaceholder=\"직원명, 부서, 직급으로 검색...\"\n>\n  <!-- 탭 시스템 -->\n  <ThemeTabs\n    {tabs}\n    bind:activeTab\n    variant=\"underline\"\n    size=\"md\"\n    class=\"mb-6\"\n    onTabChange={handleTabChange}\n  >\n    {#snippet children(tab: any)}\n      {#if tab.id === 'overview'}\n        <!-- 개요 탭 -->\n        <ThemeSpacer size={6}>\n          <!-- 메인 대시보드 -->\n          <ThemeGrid cols={1} lgCols={2} gap={6}>\n            <!-- 부서별 직원 현황 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                  부서별 직원 현황 (T/O)\n                </h3>\n                <p class=\"text-sm mt-1\" style:color=\"var(--color-text-secondary)\">\n                  현재 인원 / 정원 (T/O) • 색상: 🟢여유 🟡충족 🔴초과 ⚪미설정\n                </p>\n              </div>\n              <ThemeSpacer size={4}>\n                {#each departmentData() as dept, idx (idx)}\n                  <!-- TODO: replace index key with a stable id when model provides one -->\n                  <div\n                    class=\"flex items-center justify-between p-3 rounded-lg\"\n                    style:background=\"var(--color-surface-elevated)\"\n                  >\n                    <div class=\"flex items-center gap-3\">\n                      <BuildingIcon size={20} style=\"color: var(--color-primary);\" />\n                      <div>\n                        <h4 class=\"font-medium\" style:color=\"var(--color-text)\">\n                          {dept.department}\n                        </h4>\n                        <div class=\"flex items-center gap-2\">\n                          <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                            {dept.count}명\n                            {#if dept.to > 0}\n                              / {dept.to}명\n                            {:else}\n                              / ∞\n                            {/if}\n                          </p>\n                          <!-- T/O 상태 표시 -->\n                          {#if dept.toStatus === 'over'}\n                            <div class=\"w-2 h-2 rounded-full bg-red-500\" title=\"정원 초과\"></div>\n                          {:else if dept.toStatus === 'full'}\n                            <div class=\"w-2 h-2 rounded-full bg-yellow-500\" title=\"정원 충족\"></div>\n                          {:else if dept.toStatus === 'available'}\n                            <div class=\"w-2 h-2 rounded-full bg-green-500\" title=\"여유 있음\"></div>\n                          {:else}\n                            <div class=\"w-2 h-2 rounded-full bg-gray-400\" title=\"T/O 미설정\"></div>\n                          {/if}\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"flex items-center gap-2\">\n                      <!-- T/O 대비 비율 -->\n                      {#if dept.to > 0}\n                        <ThemeBadge\n                          variant={dept.toStatus === 'over'\n                            ? 'error'\n                            : dept.toStatus === 'full'\n                            ? 'warning'\n                            : 'success'}\n                          size=\"sm\"\n                        >\n                          {dept.toPercentage}%\n                        </ThemeBadge>\n                      {/if}\n                      <!-- 전체 대비 비율 -->\n                      <ThemeBadge variant=\"info\" size=\"sm\">{dept.percentage}%</ThemeBadge>\n                    </div>\n                  </div>\n                {/each}\n              </ThemeSpacer>\n            </ThemeCard>\n\n            <!-- 최근 활동 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">최근 활동</h3>\n              </div>\n              <ThemeSpacer size={4}>\n                {#each recentActivities() as activity, idx (idx)}\n                  <!-- TODO: replace index key with a stable id when model provides one -->\n                  <ThemeActivityItem\n                    title={activity.title}\n                    time={activity.time}\n                    description={activity.description}\n                    icon={activity.icon}\n                  />\n                {/each}\n              </ThemeSpacer>\n            </ThemeCard>\n          </ThemeGrid>\n\n          <!-- 차트 섹션 -->\n          <ThemeGrid cols={1} lgCols={2} gap={6}>\n            <!-- 부서별 분포 차트 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                  부서별 직원 분포\n                </h3>\n              </div>\n              <ThemeChartPlaceholder title=\"부서별 직원 수\" icon={TrendingUpIcon} />\n            </ThemeCard>\n\n            <!-- 채용 현황 차트 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">채용 현황</h3>\n              </div>\n              <ThemeChartPlaceholder title=\"월별 채용 현황\" icon={UserPlusIcon} />\n            </ThemeCard>\n          </ThemeGrid>\n\n          <!-- 최근 채용 공고 -->\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">최근 채용 공고</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={() => {\n                  // 채용관리 탭으로 이동\n                  activeTab = 'recruitment'\n                }}\n              >\n                <PlusIcon size={16} />\n                새 공고\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-4\">\n              {#each recentJobPostings() as job, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex-1\">\n                    <h4 class=\"font-medium\" style:color=\"var(--color-text)\">{job.title}</h4>\n                    <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                      {job.department} • {job.employmentType}\n                    </p>\n                    <div class=\"flex items-center gap-2 mt-2\">\n                      <ThemeBadge variant={job.status === 'published' ? 'success' : 'warning'}>\n                        {job.status === 'published' ? '모집중' : '마감'}\n                      </ThemeBadge>\n                      <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                        {formatDate(job.createdAt)}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 상세 보기\n                        alert('채용 공고 상세 보기 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EyeIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 수정\n                        alert('채용 공고 수정 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EditIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 삭제\n                        alert('채용 공고 삭제 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <TrashIcon size={16} />\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'employees'}\n        <!-- 직원관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">직원 목록</h3>\n              <div class=\"flex items-center gap-2\">\n                <ThemeButton\n                  variant=\"primary\"\n                  size=\"sm\"\n                  class=\"flex items-center gap-2\"\n                  onclick={openAddEmployeeModal}\n                >\n                  <PlusIcon size={16} />\n                  직원 추가\n                </ThemeButton>\n                <button\n                  type=\"button\"\n                  onclick={openUploadModal}\n                  class=\"px-3 py-2 bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-gray-100 rounded-md text-sm font-medium hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors flex items-center gap-2\"\n                >\n                  <FileSpreadsheetIcon size={16} />\n                  엑셀 업로드\n                </button>\n              </div>\n            </div>\n\n            {#if loading}\n              <div class=\"flex items-center justify-center py-8\">\n                <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                  직원 데이터를 불러오는 중...\n                </div>\n              </div>\n            {:else if error}\n              <div class=\"flex items-center justify-center py-8\">\n                <div class=\"text-sm text-red-500\">{error}</div>\n              </div>\n            {:else if !employees || employees.length === 0}\n              <div class=\"flex items-center justify-center py-8\">\n                <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                  등록된 직원이 없습니다.\n                </div>\n              </div>\n            {:else}\n              <!-- 검색 및 필터 -->\n              <div class=\"mb-6 space-y-4\">\n                <div class=\"flex flex-col sm:flex-row gap-4\">\n                  <div class=\"flex-1\">\n                    <input\n                      type=\"text\"\n                      bind:value={searchQuery}\n                      placeholder=\"이름, 이메일, 부서로 검색...\"\n                      class=\"w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-input-background)\"\n                      style:color=\"var(--color-text)\"\n                    />\n                  </div>\n                  <div class=\"flex gap-2\">\n                    <select\n                      bind:value={departmentFilter}\n                      class=\"px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-input-background)\"\n                      style:color=\"var(--color-text)\"\n                    >\n                      <option value=\"\">전체 부서</option>\n                      <option value=\"대표\">대표</option>\n                      <option value=\"전략기획실\">전략기획실</option>\n                      <option value=\"연구소\">연구소</option>\n                      {#each departments.filter(d => !['대표', '전략기획실', '연구소', '부서없음'].includes(d.name)) as dept, idx (idx)}\n                        <!-- TODO: replace index key with a stable id when model provides one -->\n                        <option value={dept.name}>{dept.name}</option>\n                      {/each}\n                      <option value=\"부서없음\">부서없음</option>\n                    </select>\n                    <select\n                      bind:value={statusFilter}\n                      class=\"px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-input-background)\"\n                      style:color=\"var(--color-text)\"\n                    >\n                      <option value=\"\">전체 상태</option>\n                      <option value=\"active\">재직중</option>\n                      <option value=\"on-leave\">휴직중</option>\n                      <option value=\"terminated\">퇴사</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n\n              <!-- 팀별 직원 카드 그리드 -->\n              <div class=\"space-y-8\">\n                {#each Object.keys(paginatedGroupedEmployees) as teamName}\n                  <div class=\"space-y-4\">\n                    <!-- 팀 헤더 -->\n                    <div\n                      class=\"flex items-center gap-3 pb-2 border-b\"\n                      style:border-color=\"var(--color-border)\"\n                    >\n                      <BuildingIcon size={20} style=\"color: var(--color-primary);\" />\n                      <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                        {teamName}\n                      </h3>\n                      <span\n                        class=\"text-sm px-2 py-1 rounded-full\"\n                        style:background=\"var(--color-primary-light)\"\n                        style:color=\"var(--color-primary)\"\n                      >\n                        {paginatedGroupedEmployees[teamName]?.length || 0}명\n                      </span>\n                    </div>\n\n                    <!-- 팀 내 직원 카드 그리드 -->\n                    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {#each paginatedGroupedEmployees[teamName] || [] as employee, i (i)}\n                        <div\n                          class=\"p-4 rounded-lg border transition-all duration-300 hover:shadow-lg hover:scale-[1.02] overflow-hidden {isTeamLead(\n                            employee\n                          )\n                            ? 'ring-2 ring-yellow-400/50 shadow-lg'\n                            : employee.employment_type === 'contract'\n                            ? 'ring-2 ring-purple-400/50 shadow-md'\n                            : employee.termination_date &&\n                              new Date(employee.termination_date) > new Date()\n                            ? 'ring-2 ring-red-400/50 shadow-md'\n                            : ''}\"\n                          style={isTeamLead(employee)\n                            ? 'border-color: var(--color-warning); background: linear-gradient(135deg, var(--color-surface-elevated) 0%, rgba(251, 191, 36, 0.05) 100%);'\n                            : employee.employment_type === 'contract'\n                            ? 'border-color: var(--color-primary); background: linear-gradient(135deg, var(--color-surface-elevated) 0%, rgba(147, 51, 234, 0.05) 100%);'\n                            : employee.termination_date &&\n                              new Date(employee.termination_date) > new Date()\n                            ? 'border-color: #dc2626; background: linear-gradient(135deg, var(--color-surface-elevated) 0%, rgba(220, 38, 38, 0.08) 100%);'\n                            : 'border-color: var(--color-border); background: var(--color-surface-elevated);'}\n                        >\n                          <!-- 직원 헤더 -->\n                          <div class=\"flex items-start justify-between mb-3 min-w-0\">\n                            <div class=\"flex items-center gap-3 min-w-0 flex-1\">\n                              <div\n                                class=\"w-12 h-12 rounded-full bg-gradient-to-br {employee.employment_type ===\n                                  'contract'\n                                  ? 'from-purple-500 to-pink-600'\n                                  : employee.termination_date &&\n                                    new Date(employee.termination_date) > new Date()\n                                  ? 'from-red-500 to-red-700'\n                                  : 'from-blue-500 to-purple-600'} flex items-center justify-center text-white font-semibold flex-shrink-0 shadow-md\"\n                              >\n                                {employee.last_name.charAt(0)}\n                              </div>\n                              <div class=\"min-w-0 flex-1\">\n                                <div class=\"flex items-center gap-2 min-w-0\">\n                                  <h4\n                                    class=\"font-semibold text-lg truncate\"\n                                    style:color=\"var(--color-text)\"\n                                  >\n                                    {formatEmployeeName(employee)}\n                                  </h4>\n                                  {#if isTeamLead(employee)}\n                                    <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-yellow-400 to-orange-500 text-white shadow-sm flex-shrink-0\"\n                                    >\n                                      👑 팀 리더\n                                    </span>\n                                  {/if}\n                                  {#if employee.employment_type === 'contract'}\n                                    <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-purple-500 to-pink-500 text-white shadow-md flex-shrink-0 animate-pulse\"\n                                    >\n                                      📋 계약직\n                                    </span>\n                                  {/if}\n                                  {#if employee.termination_date && new Date(employee.termination_date) > new Date()}\n                                    <span class=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gradient-to-r from-red-500 to-red-600 text-white shadow-md flex-shrink-0 animate-pulse\"\n                                    >\n                                      ⚠️ 퇴사 예정\n                                    </span>\n                                  {/if}\n                                </div>\n                                <p\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\"\n                                >\n                                  {formatEmployeeIdDisplay(\n                                    employee.employee_id,\n                                    employees.indexOf(employee)\n                                  )}\n                                </p>\n                              </div>\n                            </div>\n                            <div class=\"flex flex-col gap-1 items-end flex-shrink-0 ml-2\">\n                              <ThemeBadge\n                                variant={employee.status === 'active'\n                                  ? 'success'\n                                  : employee.status === 'terminated'\n                                  ? 'error'\n                                  : 'warning'}\n                                size=\"sm\"\n                                shape=\"pill\"\n                              >\n                                {employee.status === 'active'\n                                  ? '재직중'\n                                  : employee.status === 'terminated'\n                                  ? '퇴사'\n                                  : employee.status === 'on-leave'\n                                  ? '휴직'\n                                  : '비활성'}\n                              </ThemeBadge>\n                            </div>\n                          </div>\n\n                          <!-- 직원 정보 -->\n                          <div class=\"space-y-2 mb-4\">\n                            <div class=\"flex items-center gap-2 min-w-0\">\n                              <BuildingIcon\n                                size={16}\n                                style=\"color: var(--color-text-secondary);\"\n                                class=\"flex-shrink-0\"\n                              />\n                              <span\n                                class=\"text-sm truncate\"\n                                style:color=\"var(--color-text)\"\n                              >{employee.department}</span\n                              >\n                            </div>\n                            <div class=\"flex items-center gap-2 min-w-0\">\n                              <UserCheckIcon\n                                size={16}\n                                style=\"color: var(--color-text-secondary);\"\n                                class=\"flex-shrink-0\"\n                              />\n                              <span class=\"text-sm truncate\" style:color=\"var(--color-text)\">\n                                {employee.job_title_name || employee.position}\n                              </span>\n                            </div>\n                            <div class=\"flex items-center gap-2 min-w-0\">\n                              <MailIcon\n                                size={16}\n                                style=\"color: var(--color-text-secondary);\"\n                                class=\"flex-shrink-0\"\n                              />\n                              <span\n                                class=\"text-sm truncate\"\n                                style:color=\"var(--color-text-secondary)\">{employee.email}</span\n                              >\n                            </div>\n                            {#if employee.phone}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <PhoneIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\">{employee.phone}</span\n                                >\n                              </div>\n                            {/if}\n                            {#if getCurrentSalary(employee.id)}\n                              {@const currentSalary = getCurrentSalary(employee.id)}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <DollarSignIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm font-medium truncate\"\n                                  style:color=\"var(--color-primary)\"\n                                >\n                                  {Math.round(currentSalary.annualSalary / 10000)}만원\n                                </span>\n                                <span class=\"text-xs text-gray-500\">\n                                  ({currentSalary.contractType === 'full_time'\n                                    ? '정규직'\n                                    : currentSalary.contractType === 'contractor'\n                                    ? '계약직'\n                                    : currentSalary.contractType === 'part_time'\n                                    ? '파트타임'\n                                    : currentSalary.contractType === 'intern'\n                                    ? '인턴'\n                                    : currentSalary.contractType})\n                                </span>\n                              </div>\n                            {:else}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <DollarSignIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span class=\"text-sm text-gray-400 truncate\"> 계약 정보 없음 </span>\n                              </div>\n                            {/if}\n                            {#if employee.hire_date}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <CalendarIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\"\n                                >\n                                  입사일: {formatDate(employee.hire_date)}\n                                </span>\n                              </div>\n                            {/if}\n                            {#if employee.birth_date}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <CalendarIcon\n                                  size={16}\n                                  style=\"color: var(--color-text-secondary);\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color=\"var(--color-text-secondary)\"\n                                >\n                                  생일: {formatDate(employee.birth_date)}\n                                </span>\n                              </div>\n                            {/if}\n                            {#if employee.termination_date}\n                              {@const terminationDate = new Date(employee.termination_date)}\n                              {@const today = new Date()}\n                              {@const isFuture = terminationDate > today}\n                              {@const daysLeft = isFuture\n                                ? Math.ceil(\n                                  (terminationDate.getTime() - today.getTime()) /\n                                  (1000 * 60 * 60 * 24)\n                                )\n                                : null}\n                              <div class=\"flex items-center gap-2 min-w-0\">\n                                <CalendarIcon\n                                  size={16}\n                                  style=\"color: {isFuture\n                                    ? 'var(--color-warning)'\n                                    : 'var(--color-error)'};\"\n                                  class=\"flex-shrink-0\"\n                                />\n                                <span\n                                  class=\"text-sm truncate\"\n                                  style:color={isFuture\n                                    ? 'var(--color-warning)'\n                                    : 'var(--color-error)'}\n                                >\n                                  {isFuture ? '퇴사(예정)일' : '퇴사일'}: {formatDate(\n                                    employee.termination_date\n                                  )}\n                                  {#if isFuture && daysLeft !== null}\n                                    <span class=\"ml-1 font-medium\">({daysLeft}일 남음)</span>\n                                  {/if}\n                                </span>\n                              </div>\n                            {/if}\n                            <!-- 재직 상태 정보 -->\n                            <div\n                              class=\"flex items-center gap-2 pt-2 border-t min-w-0\"\n                              style:border-color=\"var(--color-border)\"\n                            >\n                              <div\n                                class=\"w-2 h-2 rounded-full flex-shrink-0\"\n                                style:background={employee.status === 'active'\n                                  ? 'var(--color-success)'\n                                  : employee.status === 'terminated'\n                                  ? 'var(--color-error)'\n                                  : 'var(--color-warning)'}\n                              ></div>\n                              <span\n                                class=\"text-xs font-medium truncate\"\n                                style:color=\"var(--color-text-secondary)\"\n                              >\n                                {employee.status === 'active'\n                                  ? '재직중'\n                                  : employee.status === 'terminated'\n                                  ? '퇴사'\n                                  : employee.status === 'on-leave'\n                                  ? '휴직중'\n                                  : '비활성'}\n                              </span>\n                            </div>\n                          </div>\n\n                          <!-- 액션 버튼 -->\n                          <div\n                            class=\"flex items-center gap-2 pt-3 border-t min-w-0\"\n                            style:border-color=\"var(--color-border)\"\n                          >\n                            <ThemeButton\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              class=\"flex-1 min-w-0\"\n                              onclick={() => openEditEmployeeModal(employee)}\n                            >\n                              <EditIcon size={16} />\n                              수정\n                            </ThemeButton>\n                            <ThemeButton\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              class=\"flex-1 min-w-0\"\n                              onclick={() => openDeleteEmployeeModal(employee)}\n                            >\n                              <TrashIcon size={16} />\n                              삭제\n                            </ThemeButton>\n                          </div>\n                        </div>\n                      {/each}\n                    </div>\n                  </div>\n                {/each}\n              </div>\n\n              <!-- 페이지네이션 -->\n              {#if totalPages > 1}\n                <div class=\"flex items-center justify-center gap-2 mt-6\">\n                  <ThemeButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={currentPage === 1}\n                    onclick={() => setCurrentPage(currentPage - 1)}\n                  >\n                    이전\n                  </ThemeButton>\n                  {#each Array.from({ length: totalPages }, (_, i) => i + 1) as page}\n                    <ThemeButton\n                      variant={page === currentPage ? 'primary' : 'ghost'}\n                      size=\"sm\"\n                      onclick={() => setCurrentPage(page)}\n                    >\n                      {page}\n                    </ThemeButton>\n                  {/each}\n                  <ThemeButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    disabled={currentPage === totalPages}\n                    onclick={() => setCurrentPage(currentPage + 1)}\n                  >\n                    다음\n                  </ThemeButton>\n                </div>\n              {/if}\n            {/if}\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'recruitment'}\n        <!-- 채용관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">채용 공고</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={() => {\n                  // TODO: 채용 공고 등록 모달 열기\n                  alert('채용 공고 등록 기능은 준비 중입니다.')\n                }}\n              >\n                <PlusIcon size={16} />\n                공고 등록\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-4\">\n              {#each recentJobPostings() as job, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex-1\">\n                    <h4 class=\"font-medium\" style:color=\"var(--color-text)\">{job.title}</h4>\n                    <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                      {job.department} • {job.employmentType}\n                    </p>\n                    <div class=\"flex items-center gap-2 mt-2\">\n                      <ThemeBadge variant={job.status === 'published' ? 'success' : 'warning'}>\n                        {job.status === 'published' ? '모집중' : '마감'}\n                      </ThemeBadge>\n                      <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                        {formatDate(job.createdAt)}\n                      </span>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 상세 보기\n                        alert('채용 공고 상세 보기 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EyeIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => {\n                        // TODO: 채용 공고 수정\n                        alert('채용 공고 수정 기능은 준비 중입니다.')\n                      }}\n                    >\n                      <EditIcon size={16} />\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'departments'}\n        <!-- 부서관리 탭 -->\n        <ThemeSpacer size={6}>\n          <!-- 부서 관리 -->\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">부서 관리</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={openAddDepartmentModal}\n              >\n                <PlusIcon size={16} />\n                부서 추가\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-3\">\n              {#each sortedDepartments() as department (department.id)}\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex items-center gap-4\">\n                    <BuildingIcon size={24} style=\"color: var(--color-primary);\" />\n                    <div class=\"flex-1\">\n                      <div class=\"flex items-center gap-3 mb-1\">\n                        <h4 class=\"font-semibold text-lg\" style:color=\"var(--color-text)\">\n                          {department.name}\n                        </h4>\n                        <ThemeBadge variant={department.status === 'active' ? 'success' : 'warning'}\n                        >\n                          {department.status === 'active' ? '활성' : '비활성'}\n                        </ThemeBadge>\n                      </div>\n                      {#if department.description}\n                        <p class=\"text-sm mb-2\" style:color=\"var(--color-text-secondary)\">\n                          {department.description}\n                        </p>\n                      {/if}\n                      <!-- 부서 정보 -->\n                      <div class=\"flex items-center gap-4\">\n                        <div class=\"flex items-center gap-2\">\n                          <CalendarIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            생성일: {formatDate(department.created_at)}\n                          </span>\n                        </div>\n                      </div>\n                      <!-- T/O 정보 -->\n                      <div class=\"flex items-center gap-4 mt-2\">\n                        <div class=\"flex items-center gap-2\">\n                          <UsersIcon size={16} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-sm font-medium\" style:color=\"var(--color-text)\">\n                            {employees?.filter(\n                              (emp: any) =>\n                                emp.status === 'active' && emp.department === department.name\n                            ).length || 0}\n                            {#if department.max_employees !== undefined && department.max_employees > 0}\n                              / {department.max_employees}\n                            {:else}\n                              / ∞\n                            {/if}\n                          </span>\n                        </div>\n                        {#if department.max_employees !== undefined && department.max_employees > 0}\n                          {@const currentCount =\n                            employees?.filter(\n                              (emp: any) =>\n                                emp.status === 'active' && emp.department === department.name\n                            ).length || 0}\n                          {@const maxCount = department.max_employees}\n                          <div class=\"flex items-center gap-2\">\n                            <div\n                              class=\"w-2 h-2 rounded-full\"\n                              style:background-color={currentCount > maxCount\n                                ? 'var(--color-error)'\n                                : currentCount === maxCount\n                                ? 'var(--color-warning)'\n                                : 'var(--color-success)'}\n                            ></div>\n                            <span\n                              class=\"text-xs font-medium\"\n                              style:color=\"var(--color-text-secondary)\"\n                            >\n                              {currentCount > maxCount\n                                ? '정원초과'\n                                : currentCount === maxCount\n                                ? '정원충족'\n                                : '여유'}\n                            </span>\n                          </div>\n                        {/if}\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => openEditDepartmentModal(department)}\n                    >\n                      <EditIcon size={16} />\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => handleDepartmentDelete(department)}\n                    >\n                      <TrashIcon size={16} />\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n\n              {#if departments.length === 0}\n                <div class=\"text-center py-12\">\n                  <BuildingIcon\n                    size={64}\n                    class=\"mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <h3 class=\"text-lg font-medium mb-2\" style:color=\"var(--color-text)\">\n                    등록된 부서가 없습니다\n                  </h3>\n                  <p class=\"text-sm mb-4\" style:color=\"var(--color-text-secondary)\">\n                    새 부서를 추가하여 조직을 구성해보세요.\n                  </p>\n                  <ThemeButton\n                    variant=\"primary\"\n                    onclick={openAddDepartmentModal}\n                    class=\"flex items-center gap-2\"\n                  >\n                    <PlusIcon size={16} />\n                    첫 부서 추가하기\n                  </ThemeButton>\n                </div>\n              {/if}\n            </div>\n          </ThemeCard>\n\n          <!-- 부서 관리 안내 -->\n          <ThemeCard class=\"p-6\">\n            <div class=\"mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">부서 관리 안내</h3>\n            </div>\n            <div class=\"space-y-3\">\n              <h4 class=\"font-medium\" style:color=\"var(--color-text)\">부서 관리 규칙</h4>\n              <ul class=\"text-sm space-y-2\" style:color=\"var(--color-text-secondary)\">\n                <li>• 부서명은 중복될 수 없습니다</li>\n                <li>• 부서를 삭제하면 해당 부서의 직원들에게 영향을 줄 수 있습니다</li>\n                <li>• 비활성화된 부서는 새 직원 배치 시 선택할 수 없습니다</li>\n                <li>• 부서 설명은 선택사항이며, 부서의 역할과 책임을 명시할 수 있습니다</li>\n              </ul>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'positions'}\n        <!-- 직급관리 탭 -->\n        <ThemeSpacer size={6}>\n          <div class=\"space-y-6\">\n            <!-- 직급 카테고리별 관리 -->\n            {#each Object.entries(getPositionsByCategory()) as [category, categoryPositions]}\n              <ThemeCard class=\"p-6\">\n                <div class=\"flex items-center justify-between mb-6\">\n                  <div class=\"flex items-center gap-3\">\n                    {#if category === '연구원'}\n                      <FlaskConicalIcon size={24} style=\"color: var(--color-primary);\" />\n                    {:else if category === '디자이너'}\n                      <UsersIcon size={24} style=\"color: var(--color-primary);\" />\n                    {:else if category === '행정원'}\n                      <BuildingIcon size={24} style=\"color: var(--color-primary);\" />\n                    {/if}\n                    <div>\n                      <h3 class=\"text-xl font-semibold\" style:color=\"var(--color-text)\">\n                        {category} 직급 관리\n                      </h3>\n                      <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                        {categoryPositions.length}개 직급\n                      </p>\n                    </div>\n                  </div>\n                  <ThemeButton\n                    variant=\"primary\"\n                    size=\"sm\"\n                    class=\"flex items-center gap-2\"\n                    onclick={() => openAddPositionModal(category)}\n                  >\n                    <PlusIcon size={16} />\n                    {category} 직급 추가\n                  </ThemeButton>\n                </div>\n\n                <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {#each categoryPositions as position, i (i)}\n                    <div\n                      class=\"p-4 rounded-lg border\"\n                      style:border-color=\"var(--color-border)\"\n                      style:background=\"var(--color-surface-elevated)\"\n                    >\n                      <div class=\"flex items-start justify-between mb-3\">\n                        <div class=\"flex-1\">\n                          <h4 class=\"font-medium\" style:color=\"var(--color-text)\">\n                            {position.name}\n                          </h4>\n                          <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                            {position.department}\n                          </p>\n                          <div class=\"flex items-center gap-2 mt-2\">\n                            <ThemeBadge variant=\"default\" size=\"sm\">\n                              레벨 {position.level}\n                            </ThemeBadge>\n                            <ThemeBadge\n                              variant={position.status === 'active' ? 'success' : 'warning'}\n                              size=\"sm\"\n                            >\n                              {position.status === 'active' ? '활성' : '비활성'}\n                            </ThemeBadge>\n                          </div>\n                        </div>\n                        <div class=\"flex items-center gap-1\">\n                          <ThemeButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onclick={() => openEditPositionModal(position)}\n                          >\n                            <EditIcon size={14} />\n                          </ThemeButton>\n                          <ThemeButton\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onclick={() => handlePositionDelete(position)}\n                          >\n                            <TrashIcon size={14} />\n                          </ThemeButton>\n                        </div>\n                      </div>\n                      {#if position.description}\n                        <p class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                          {position.description}\n                        </p>\n                      {/if}\n                    </div>\n                  {/each}\n\n                  {#if categoryPositions.length === 0}\n                    <div class=\"col-span-full text-center py-8\">\n                      {#if category === '연구원'}\n                        <FlaskConicalIcon\n                          size={48}\n                          class=\"mx-auto mb-4\"\n                          style=\"color: var(--color-text-secondary);\"\n                        />\n                      {:else if category === '디자이너'}\n                        <UsersIcon\n                          size={48}\n                          class=\"mx-auto mb-4\"\n                          style=\"color: var(--color-text-secondary);\"\n                        />\n                      {:else if category === '행정원'}\n                        <BuildingIcon\n                          size={48}\n                          class=\"mx-auto mb-4\"\n                          style=\"color: var(--color-text-secondary);\"\n                        />\n                      {/if}\n                      <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                        {category} 직급이 등록되지 않았습니다.\n                      </p>\n                    </div>\n                  {/if}\n                </div>\n              </ThemeCard>\n            {/each}\n\n            <!-- 직급 관리 안내 -->\n            <ThemeCard class=\"p-6\">\n              <div class=\"mb-6\">\n                <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                  직급 관리 안내\n                </h3>\n              </div>\n              <div class=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div class=\"space-y-3\">\n                  <h4 class=\"font-medium flex items-center gap-2\" style:color=\"var(--color-text)\">\n                    <FlaskConicalIcon size={16} style=\"color: var(--color-primary);\" />\n                    연구원 직급\n                  </h4>\n                  <ul class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                    <li>• 연구원 → 주임연구원</li>\n                    <li>• 선임연구원 → 책임연구원</li>\n                    <li>• 수석연구원</li>\n                  </ul>\n                </div>\n                <div class=\"space-y-3\">\n                  <h4 class=\"font-medium flex items-center gap-2\" style:color=\"var(--color-text)\">\n                    <UsersIcon size={16} style=\"color: var(--color-primary);\" />\n                    디자이너 직급\n                  </h4>\n                  <ul class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                    <li>• 디자이너 → 주임디자이너</li>\n                    <li>• 선임디자이너 → 책임디자이너</li>\n                    <li>• 수석디자이너</li>\n                  </ul>\n                </div>\n                <div class=\"space-y-3\">\n                  <h4 class=\"font-medium flex items-center gap-2\" style:color=\"var(--color-text)\">\n                    <BuildingIcon size={16} style=\"color: var(--color-primary);\" />\n                    행정원 직급\n                  </h4>\n                  <ul class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                    <li>• 행정원 → 주임행정원</li>\n                    <li>• 선임행정원 → 책임행정원</li>\n                    <li>• 수석행정원</li>\n                  </ul>\n                </div>\n              </div>\n            </ThemeCard>\n          </div>\n        </ThemeSpacer>\n      {:else if tab.id === 'executives'}\n        <!-- 이사관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">이사 관리</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={() => openAddExecutiveModal()}\n              >\n                <PlusIcon size={16} />\n                이사 추가\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-3\">\n              {#if executiveLoading}\n                <div class=\"flex items-center justify-center py-8\">\n                  <div class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                    이사 데이터를 불러오는 중...\n                  </div>\n                </div>\n              {:else if executives.length === 0}\n                <div class=\"text-center py-8\">\n                  <BriefcaseIcon\n                    size={48}\n                    class=\"mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                    등록된 이사가 없습니다.\n                  </p>\n                </div>\n              {:else}\n                {#each executives as executive (executive.id)}\n                  <div\n                    class=\"flex items-center justify-between p-4 rounded-lg border\"\n                    style:border-color=\"var(--color-border)\"\n                    style:background=\"var(--color-surface-elevated)\"\n                  >\n                    <div class=\"flex items-center gap-4\">\n                      <BriefcaseIcon size={24} style=\"color: var(--color-primary);\" />\n                      <div class=\"flex-1\">\n                        <div class=\"flex items-center gap-3 mb-1\">\n                          <h4 class=\"font-semibold text-lg\" style:color=\"var(--color-text)\">\n                            {formatEmployeeName(executive)}\n                          </h4>\n                          <ThemeBadge variant={executive.status === 'active' ? 'success' : 'warning'}\n                          >\n                            {executive.status === 'active' ? '활성' : '비활성'}\n                          </ThemeBadge>\n                        </div>\n                        <div class=\"flex items-center gap-4\">\n                          <div class=\"flex items-center gap-2\">\n                            <BriefcaseIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                            <span class=\"text-sm\" style:color=\"var(--color-text)\">\n                              {executive.job_title_name}\n                            </span>\n                          </div>\n                          <div class=\"flex items-center gap-2\">\n                            <BuildingIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                            <span class=\"text-sm\" style:color=\"var(--color-text)\">\n                              {executive.department}\n                            </span>\n                          </div>\n                          <div class=\"flex items-center gap-2\">\n                            <UserCheckIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                            <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                              레벨: {executive.job_title_level}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                    <div class=\"flex items-center gap-2\">\n                      <ThemeButton\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onclick={() => openEditExecutiveModal(executive)}\n                      >\n                        <EditIcon size={16} />\n                        수정\n                      </ThemeButton>\n                      <ThemeButton\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onclick={() => handleExecutiveDelete(executive)}\n                      >\n                        <TrashIcon size={16} />\n                        삭제\n                      </ThemeButton>\n                    </div>\n                  </div>\n                {/each}\n              {/if}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'job-titles'}\n        <!-- 직책관리 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard class=\"p-6\">\n            <div class=\"flex items-center justify-between mb-6\">\n              <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">직책 관리</h3>\n              <ThemeButton\n                variant=\"primary\"\n                size=\"sm\"\n                class=\"flex items-center gap-2\"\n                onclick={openAddJobTitleModal}\n              >\n                <PlusIcon size={16} />\n                직책 추가\n              </ThemeButton>\n            </div>\n\n            <div class=\"space-y-3\">\n              {#each jobTitles as jobTitle (jobTitle.id)}\n                <div\n                  class=\"flex items-center justify-between p-4 rounded-lg border\"\n                  style:border-color=\"var(--color-border)\"\n                  style:background=\"var(--color-surface-elevated)\"\n                >\n                  <div class=\"flex items-center gap-4\">\n                    <BriefcaseIcon size={24} style=\"color: var(--color-primary);\" />\n                    <div class=\"flex-1\">\n                      <div class=\"flex items-center gap-3 mb-1\">\n                        <h4 class=\"font-semibold text-lg\" style:color=\"var(--color-text)\">\n                          {jobTitle.name}\n                        </h4>\n                        <ThemeBadge variant={jobTitle.is_active ? 'success' : 'warning'}>\n                          {jobTitle.is_active ? '활성' : '비활성'}\n                        </ThemeBadge>\n                      </div>\n                      {#if jobTitle.description}\n                        <p class=\"text-sm mb-2\" style:color=\"var(--color-text-secondary)\">\n                          {jobTitle.description}\n                        </p>\n                      {/if}\n                      <div class=\"flex items-center gap-4\">\n                        <div class=\"flex items-center gap-2\">\n                          <CalendarIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            생성일: {formatDate(jobTitle.created_at)}\n                          </span>\n                        </div>\n                        <div class=\"flex items-center gap-2\">\n                          <UserCheckIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            레벨: {jobTitle.level}\n                          </span>\n                        </div>\n                        <div class=\"flex items-center gap-2\">\n                          <TagIcon size={14} style=\"color: var(--color-text-secondary);\" />\n                          <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                            카테고리: {jobTitle.category}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"flex items-center gap-2\">\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => openEditJobTitleModal(jobTitle)}\n                    >\n                      <EditIcon size={16} />\n                      수정\n                    </ThemeButton>\n                    <ThemeButton\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onclick={() => handleJobTitleDelete(jobTitle)}\n                    >\n                      <TrashIcon size={16} />\n                      삭제\n                    </ThemeButton>\n                  </div>\n                </div>\n              {/each}\n\n              {#if jobTitles.length === 0}\n                <div class=\"text-center py-8\">\n                  <BriefcaseIcon\n                    size={48}\n                    class=\"mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                    등록된 직책이 없습니다.\n                  </p>\n                </div>\n              {/if}\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'org-chart'}\n        <!-- 조직도 탭 -->\n        <OrganizationChart />\n      {/if}\n    {/snippet}\n  </ThemeTabs>\n\n  <!-- 엑셀 업로드 모달 -->\n  <ThemeModal open={showUploadModal} onclose={closeUploadModal} size=\"md\">\n    <div class=\"space-y-6\">\n      <h2 class=\"text-xl font-semibold mb-4\" style:color=\"var(--color-text)\">\n        직원 정보 엑셀 업로드\n      </h2>\n      <!-- 파일 선택 -->\n      <div>\n        <label\n          for=\"employee-file-input\"\n          class=\"block text-sm font-medium mb-2\"\n          style:color=\"var(--color-text)\"\n        >\n          엑셀 파일 선택\n        </label>\n\n        <!-- 드래그 앤 드롭 영역 -->\n        <div\n          class=\"border-2 border-dashed rounded-lg p-6 text-center transition-colors cursor-pointer\"\n          class:drag-over={isDragOver}\n          ondragover={handleDragOver}\n          ondragleave={handleDragLeave}\n          ondrop={handleDrop}\n          onclick={() => document.getElementById('employee-file-input')?.click()}\n          onkeydown={e => {\n            if (e.key === 'Enter' || e.key === ' ') {\n              e.preventDefault()\n              document.getElementById('employee-file-input')?.click()\n            }\n          }}\n          role=\"button\"\n          tabindex=\"0\"\n          aria-label=\"파일 업로드 영역 - 클릭하거나 파일을 드래그하여 업로드하세요\"\n          style:border-color=\"var(--color-border)\"\n          style:background=\"var(--color-surface)\"\n        >\n          {#if uploadFile}\n            <div class=\"flex items-center justify-center space-x-2\">\n              <FileSpreadsheetIcon size={24} style=\"color: var(--color-primary);\" />\n              <span style:color=\"var(--color-text)\">{uploadFile.name}</span>\n            </div>\n          {:else}\n            <div class=\"space-y-2\">\n              <FileSpreadsheetIcon\n                size={48}\n                class=\"mx-auto\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <p style:color=\"var(--color-text)\">파일을 여기에 드래그하거나 클릭하여 선택하세요</p>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                CSV, XLSX, XLS 파일 지원\n              </p>\n            </div>\n          {/if}\n        </div>\n\n        <!-- 숨겨진 파일 입력 -->\n        <input\n          id=\"employee-file-input\"\n          type=\"file\"\n          accept=\".xlsx,.xls,.csv\"\n          onchange={handleFileSelect}\n          class=\"hidden\"\n        />\n      </div>\n\n      <!-- 선택된 파일 정보 -->\n      {#if uploadFile}\n        <div\n          class=\"p-3 rounded-lg\"\n          style:background=\"var(--color-surface-elevated)\"\n          style:border=\"1px solid var(--color-border)\"\n        >\n          <div class=\"flex items-center gap-2\">\n            <FileSpreadsheetIcon size={16} style=\"color: var(--color-primary);\" />\n            <span\n              class=\"text-sm font-medium\"\n              style:color=\"var(--color-text)\"\n            >{uploadFile.name}</span\n            >\n            <span class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n              ({(uploadFile.size / 1024).toFixed(1)} KB)\n            </span>\n          </div>\n        </div>\n      {/if}\n\n      <!-- 업로드 진행률 -->\n      {#if uploadStatus === 'uploading'}\n        <div class=\"space-y-2\">\n          <div class=\"flex justify-between text-sm\">\n            <span style:color=\"var(--color-text-secondary)\">업로드 진행률</span>\n            <span style:color=\"var(--color-text)\">{uploadProgress}%</span>\n          </div>\n          <div class=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div\n              class=\"h-2 rounded-full transition-all duration-300\"\n              style:width=\"{uploadProgress}%\"\n              style:background=\"var(--color-primary)\"\n            ></div>\n          </div>\n        </div>\n      {/if}\n\n      <!-- 상태 메시지 -->\n      {#if uploadMessage}\n        <div\n          class=\"flex items-center gap-2 p-3 rounded-lg\"\n          style:background={uploadStatus === 'success'\n            ? 'var(--color-success-light)'\n            : uploadStatus === 'error'\n            ? 'var(--color-error-light)'\n            : 'var(--color-info-light)'}\n          style:border=\"1px solid {uploadStatus === 'success'\n            ? 'var(--color-success)'\n            : uploadStatus === 'error'\n            ? 'var(--color-error)'\n            : 'var(--color-info)'}\"\n        >\n          {#if uploadStatus === 'success'}\n            <CheckCircleIcon size={16} style=\"color: var(--color-success);\" />\n          {:else if uploadStatus === 'error'}\n            <AlertCircleIcon size={16} style=\"color: var(--color-error);\" />\n          {/if}\n          <span\n            class=\"text-sm\"\n            style:color={uploadStatus === 'success'\n              ? 'var(--color-success)'\n              : uploadStatus === 'error'\n              ? 'var(--color-error)'\n              : 'var(--color-info)'}\n          >\n            {uploadMessage}\n          </span>\n        </div>\n      {/if}\n\n      <!-- 엑셀 템플릿 다운로드 -->\n      <div\n        class=\"p-4 rounded-lg\"\n        style:background=\"var(--color-surface-elevated)\"\n        style:border=\"1px solid var(--color-border)\"\n      >\n        <h4 class=\"text-sm font-medium mb-2\" style:color=\"var(--color-text)\">엑셀 템플릿</h4>\n        <p class=\"text-xs mb-3\" style:color=\"var(--color-text-secondary)\">\n          직원 데이터를 업로드하기 전에 템플릿을 다운로드하여 올바른 형식으로 데이터를 입력하세요.\n        </p>\n        <ThemeButton variant=\"ghost\" size=\"sm\" onclick={downloadEmployeeTemplate}>\n          <DownloadIcon size={16} class=\"mr-2\" />\n          템플릿 다운로드\n        </ThemeButton>\n      </div>\n    </div>\n\n    <!-- 모달 액션 버튼 -->\n    <div class=\"flex justify-end gap-2 pt-4 border-t\" style:border-color=\"var(--color-border)\">\n      <ThemeButton variant=\"ghost\" onclick={closeUploadModal}>취소</ThemeButton>\n      <ThemeButton\n        variant=\"primary\"\n        onclick={uploadExcel}\n        disabled={!uploadFile || uploadStatus === 'uploading'}\n      >\n        {uploadStatus === 'uploading' ? '업로드 중...' : '업로드'}\n      </ThemeButton>\n    </div>\n  </ThemeModal>\n</PageLayout>\n\n<!-- 직원 추가/수정 모달 -->\n<EmployeeModal\n  open={showEmployeeModal}\n  employee={selectedEmployee}\n  loading={employeeLoading}\n  {departments}\n  {positions}\n  {jobTitles}\n  on:close={() => {\n    showEmployeeModal = false\n    selectedEmployee = null\n  }}\n  on:save={handleEmployeeSave}\n/>\n\n<!-- 직원 삭제 확인 모달 -->\n<DeleteConfirmModal\n  open={showDeleteModal}\n  title=\"직원 삭제\"\n  message=\"이 직원을 삭제하시겠습니까?\"\n  itemName={selectedEmployee\n    ? `${formatEmployeeName(selectedEmployee)} (${selectedEmployee.department})`\n    : ''}\n  loading={deleteLoading}\n  showArchive={true}\n  on:close={() => {\n    showDeleteModal = false\n    selectedEmployee = null\n  }}\n  on:confirm={event => handleEmployeeDelete(event.detail.action)}\n/>\n\n<!-- 부서 관리 모달 -->\n<DepartmentModal\n  open={showDepartmentModal}\n  department={selectedDepartment}\n  loading={departmentLoading}\n  on:close={() => {\n    showDepartmentModal = false\n    selectedDepartment = null\n  }}\n  on:save={handleDepartmentSave}\n/>\n\n<!-- 직급 관리 모달 -->\n<PositionModal\n  open={showPositionModal}\n  position={selectedPosition}\n  {departments}\n  loading={positionLoading}\n  on:close={() => {\n    showPositionModal = false\n    selectedPosition = null\n  }}\n  on:save={handlePositionSave}\n/>\n\n<style>\n  .drag-over {\n    border-color: var(--color-primary) !important;\n    background: var(--color-primary-light) !important;\n  }\n</style>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/hr/attendance/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/hr/employees/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/hr/performance/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isCompetencyModalOpen' is assigned a value but never used.","line":36,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":36,"endColumn":28},{"ruleId":"no-unused-vars","severity":2,"message":"'isTrainingModalOpen' is assigned a value but never used.","line":37,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":37,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":493,"column":42,"nodeType":"Identifier","messageId":"unusedVar","endLine":493,"endColumn":43,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[16515,16516],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'strength' is defined but never used.","line":630,"column":48,"nodeType":"Identifier","messageId":"unusedVar","endLine":630,"endColumn":56,"suggestions":[{"messageId":"removeVar","data":{"varName":"strength"},"fix":{"range":[21838,21846],"text":""},"desc":"Remove unused variable 'strength'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'area' is defined but never used.","line":664,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":664,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"area"},"fix":{"range":[23156,23160],"text":""},"desc":"Remove unused variable 'area'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { formatDate } from '$lib/utils/format'\n  import { onMount } from 'svelte'\n\n  import { employees, getActiveEmployees } from '$lib/stores/hr'\n\n  import {\n    addFeedback360,\n    addPerformanceReview,\n    approvePerformanceReview,\n    calculateAverageFeedback360,\n    competencyMatrix,\n    completePerformanceReview,\n    feedback360,\n    getCompetencyMatrixByEmployee,\n    getFeedback360ByReviewee,\n    getPerformanceReviewsByEmployee,\n    getTrainingRecordsByEmployee,\n    performanceReviews,\n    trainingRecords,\n    updatePerformanceReview,\n    type Feedback360,\n    type PerformanceReview\n  } from '$lib/stores/performance'\n\n  // 현재 선택된 직원\n  let selectedEmployeeId = $state('')\n  let selectedYear = $state(new Date().getFullYear())\n\n  // 모달 상태\n  let isReviewModalOpen = $state(false)\n  let isFeedbackModalOpen = $state(false)\n  let isCompetencyModalOpen = $state(false)\n  let isTrainingModalOpen = $state(false)\n  let selectedReview = $state<PerformanceReview | null>(null)\n\n  // 폼 데이터\n  let reviewForm = $state({\n    reviewerId: '',\n    reviewPeriod: {\n      startDate: '',\n      endDate: '',\n      year: 0,\n      quarter: 1\n    },\n    reviewType: 'annual' as PerformanceReview['reviewType'],\n    goals: [\n      {\n        id: '',\n        title: '',\n        description: '',\n        target: '',\n        actual: '',\n        achievement: 0,\n        weight: 0,\n        rating: 0,\n        comments: ''\n      }\n    ],\n    competencies: [{ id: '', name: '', description: '', rating: 0, evidence: '', improvement: '' }],\n    overallRating: 0,\n    strengths: [''],\n    improvementAreas: [''],\n    developmentPlan: '',\n    careerGoals: '',\n    promotionRecommendation: false,\n    salaryIncreaseRecommendation: false,\n    bonusRecommendation: false\n  })\n\n  // Update review form year when selectedYear changes\n  $effect(() => {\n    reviewForm.reviewPeriod.year = selectedYear\n  })\n\n  let feedbackForm = $state({\n    revieweeId: '',\n    reviewerType: 'peer' as Feedback360['reviewerType'],\n    reviewPeriod: {\n      startDate: '',\n      endDate: ''\n    },\n    leadership: 3,\n    communication: 3,\n    teamwork: 3,\n    problemSolving: 3,\n    initiative: 3,\n    adaptability: 3,\n    technicalSkills: 3,\n    strengths: '',\n    improvementAreas: '',\n    recommendations: '',\n    additionalComments: '',\n    isAnonymous: false\n  })\n\n  // 현재 선택된 직원의 데이터\n  let selectedEmployee = $derived($employees.find(emp => emp.id === selectedEmployeeId))\n  let employeeReviews = $derived(\n    getPerformanceReviewsByEmployee(selectedEmployeeId, $performanceReviews)\n  )\n  let employeeFeedback = $derived(getFeedback360ByReviewee(selectedEmployeeId, $feedback360))\n  let employeeCompetencies = $derived(\n    getCompetencyMatrixByEmployee(selectedEmployeeId, $competencyMatrix)\n  )\n  let employeeTraining = $derived(\n    getTrainingRecordsByEmployee(selectedEmployeeId, $trainingRecords)\n  )\n  let averageFeedback = $derived(calculateAverageFeedback360(selectedEmployeeId, $feedback360))\n\n  // 함수들\n  function openReviewModal(review?: PerformanceReview) {\n    if (review) {\n      selectedReview = review\n      reviewForm = {\n        reviewerId: review.reviewerId,\n        reviewPeriod: review.reviewPeriod,\n        reviewType: review.reviewType,\n        goals: review.goals,\n        competencies: review.competencies,\n        overallRating: review.overallRating,\n        strengths: review.strengths,\n        improvementAreas: review.improvementAreas,\n        developmentPlan: review.developmentPlan,\n        careerGoals: review.careerGoals,\n        promotionRecommendation: review.promotionRecommendation,\n        salaryIncreaseRecommendation: review.salaryIncreaseRecommendation,\n        bonusRecommendation: review.bonusRecommendation\n      }\n    } else {\n      selectedReview = null\n      reviewForm = {\n        reviewerId: 'current-user',\n        reviewPeriod: {\n          startDate: `${selectedYear}-01-01`,\n          endDate: `${selectedYear}-12-31`,\n          year: selectedYear,\n          quarter: 1\n        },\n        reviewType: 'annual',\n        goals: [\n          {\n            id: '',\n            title: '',\n            description: '',\n            target: '',\n            actual: '',\n            achievement: 0,\n            weight: 0,\n            rating: 0,\n            comments: ''\n          }\n        ],\n        competencies: [\n          { id: '', name: '', description: '', rating: 0, evidence: '', improvement: '' }\n        ],\n        overallRating: 0,\n        strengths: [''],\n        improvementAreas: [''],\n        developmentPlan: '',\n        careerGoals: '',\n        promotionRecommendation: false,\n        salaryIncreaseRecommendation: false,\n        bonusRecommendation: false\n      }\n    }\n    isReviewModalOpen = true\n  }\n\n  function openFeedbackModal() {\n    feedbackForm = {\n      revieweeId: selectedEmployeeId,\n      reviewerType: 'peer',\n      reviewPeriod: {\n        startDate: `${selectedYear}-01-01`,\n        endDate: `${selectedYear}-12-31`\n      },\n      leadership: 3,\n      communication: 3,\n      teamwork: 3,\n      problemSolving: 3,\n      initiative: 3,\n      adaptability: 3,\n      technicalSkills: 3,\n      strengths: '',\n      improvementAreas: '',\n      recommendations: '',\n      additionalComments: '',\n      isAnonymous: false\n    }\n    isFeedbackModalOpen = true\n  }\n\n  function handleReviewSubmit() {\n    if (!selectedEmployeeId) {\n      alert('직원을 선택해주세요.')\n      return\n    }\n\n    if (selectedReview) {\n      updatePerformanceReview(selectedReview.id, reviewForm)\n    } else {\n      addPerformanceReview({\n        employeeId: selectedEmployeeId,\n        ...reviewForm,\n        status: 'draft'\n      })\n    }\n    isReviewModalOpen = false\n    alert('성과 평가가 저장되었습니다.')\n  }\n\n  function handleFeedbackSubmit() {\n    if (!selectedEmployeeId) {\n      alert('직원을 선택해주세요.')\n      return\n    }\n\n    addFeedback360({\n      reviewerId: 'current-user',\n      ...feedbackForm,\n      status: 'pending'\n    })\n    isFeedbackModalOpen = false\n    alert('360도 피드백이 제출되었습니다.')\n  }\n\n  function completeReview(reviewId: string) {\n    completePerformanceReview(reviewId)\n    alert('성과 평가가 완료되었습니다.')\n  }\n\n  function approveReview(reviewId: string) {\n    approvePerformanceReview(reviewId, 'HR팀')\n    alert('성과 평가가 승인되었습니다.')\n  }\n\n  function getStatusBadgeVariant(\n    status: PerformanceReview['status']\n  ): 'secondary' | 'warning' | 'success' | 'primary' {\n    switch (status) {\n      case 'draft':\n        return 'secondary'\n      case 'in-progress':\n        return 'warning'\n      case 'completed':\n        return 'success'\n      case 'approved':\n        return 'primary'\n      default:\n        return 'secondary'\n    }\n  }\n\n  function getStatusText(status: PerformanceReview['status']): string {\n    switch (status) {\n      case 'draft':\n        return '임시저장'\n      case 'in-progress':\n        return '진행중'\n      case 'completed':\n        return '완료'\n      case 'approved':\n        return '승인'\n      default:\n        return status\n    }\n  }\n\n  function getRatingStars(rating: number): string {\n    return '★'.repeat(rating) + '☆'.repeat(5 - rating)\n  }\n\n  onMount(() => {\n    // 첫 번째 활성 직원을 기본 선택\n    const activeEmployees = getActiveEmployees($employees)\n    if (activeEmployees.length > 0) {\n      selectedEmployeeId = activeEmployees[0].id\n    }\n  })\n</script>\n\n<div class=\"min-h-screen bg-gray-50 p-6\">\n  <div class=\"max-w-7xl mx-auto\">\n    <!-- 헤더 -->\n    <div class=\"mb-8\">\n      <h1 class=\"text-3xl font-bold text-gray-900\">성과 평가</h1>\n      <p class=\"text-gray-600 mt-1\">직원의 성과 평가 및 360도 피드백을 관리합니다</p>\n    </div>\n\n    <!-- 직원 선택 -->\n    <Card class=\"mb-6\">\n      <div class=\"p-6\">\n        <div class=\"flex items-center space-x-4\">\n          <label for=\"employee-select\" class=\"text-sm font-medium text-gray-700\">직원 선택:</label>\n          <select\n            id=\"employee-select\"\n            bind:value={selectedEmployeeId}\n            class=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">직원을 선택하세요</option>\n            {#each getActiveEmployees($employees) as employee (employee.id ?? employee.uuid ?? employee.key)}\n              <option value={employee.id}>{employee.name} ({employee.employeeId})</option>\n            {/each}\n          </select>\n          <label for=\"year-select\" class=\"text-sm font-medium text-gray-700\">평가 연도:</label>\n          <select\n            id=\"year-select\"\n            bind:value={selectedYear}\n            class=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value={2023}>2023</option>\n            <option value={2024}>2024</option>\n          </select>\n        </div>\n      </div>\n    </Card>\n\n    {#if selectedEmployee}\n      <!-- 360도 피드백 요약 -->\n      {#if averageFeedback.overall > 0}\n        <Card class=\"mb-6\">\n          <div class=\"p-6\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">360도 피드백 요약</h3>\n            <div class=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n              <div class=\"text-center\">\n                <p class=\"text-sm text-gray-600\">리더십</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{averageFeedback.leadership}</p>\n                <p class=\"text-sm text-yellow-500\">{getRatingStars(averageFeedback.leadership)}</p>\n              </div>\n              <div class=\"text-center\">\n                <p class=\"text-sm text-gray-600\">커뮤니케이션</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{averageFeedback.communication}</p>\n                <p class=\"text-sm text-yellow-500\">\n                  {getRatingStars(averageFeedback.communication)}\n                </p>\n              </div>\n              <div class=\"text-center\">\n                <p class=\"text-sm text-gray-600\">팀워크</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{averageFeedback.teamwork}</p>\n                <p class=\"text-sm text-yellow-500\">{getRatingStars(averageFeedback.teamwork)}</p>\n              </div>\n              <div class=\"text-center\">\n                <p class=\"text-sm text-gray-600\">기술적 역량</p>\n                <p class=\"text-2xl font-bold text-gray-900\">{averageFeedback.technicalSkills}</p>\n                <p class=\"text-sm text-yellow-500\">\n                  {getRatingStars(averageFeedback.technicalSkills)}\n                </p>\n              </div>\n            </div>\n          </div>\n        </Card>\n      {/if}\n\n      <!-- 성과 평가 및 360도 피드백 -->\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6\">\n        <!-- 성과 평가 -->\n        <Card>\n          <div class=\"p-6\">\n            <div class=\"flex justify-between items-center mb-4\">\n              <h3 class=\"text-lg font-semibold text-gray-900\">성과 평가</h3>\n              <button\n                type=\"button\"\n                onclick={() => openReviewModal()}\n                class=\"px-3 py-1 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors\"\n              >\n                평가 작성\n              </button>\n            </div>\n            <div class=\"space-y-3\">\n              {#each employeeReviews.filter(review => review.reviewPeriod.year === selectedYear) as review (review.id ?? review.uuid ?? review.key)}\n                <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p class=\"text-sm font-medium text-gray-900\">\n                      {review.reviewType === 'annual'\n                        ? '연간'\n                        : review.reviewType === 'quarterly'\n                        ? '분기'\n                        : '프로젝트'} 평가\n                    </p>\n                    <p class=\"text-xs text-gray-500\">\n                      {formatDate(review.reviewPeriod.startDate)} - {formatDate(\n                        review.reviewPeriod.endDate\n                      )}\n                    </p>\n                  </div>\n                  <div class=\"flex items-center space-x-2\">\n                    <Badge variant={getStatusBadgeVariant(review.status)}>\n                      {getStatusText(review.status)}\n                    </Badge>\n                    <div class=\"flex space-x-1\">\n                      <button\n                        type=\"button\"\n                        onclick={() => openReviewModal(review)}\n                        class=\"text-blue-600 hover:text-blue-900 text-sm\"\n                      >\n                        보기\n                      </button>\n                      {#if review.status === 'completed'}\n                        <button\n                          type=\"button\"\n                          onclick={() => approveReview(review.id)}\n                          class=\"text-green-600 hover:text-green-900 text-sm\"\n                        >\n                          승인\n                        </button>\n                      {:else if review.status === 'draft'}\n                        <button\n                          type=\"button\"\n                          onclick={() => completeReview(review.id)}\n                          class=\"text-yellow-600 hover:text-yellow-900 text-sm\"\n                        >\n                          완료\n                        </button>\n                      {/if}\n                    </div>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </div>\n        </Card>\n\n        <!-- 360도 피드백 -->\n        <Card>\n          <div class=\"p-6\">\n            <div class=\"flex justify-between items-center mb-4\">\n              <h3 class=\"text-lg font-semibold text-gray-900\">360도 피드백</h3>\n              <button\n                type=\"button\"\n                onclick={openFeedbackModal}\n                class=\"px-3 py-1 bg-green-600 text-white text-sm rounded-md hover:bg-green-700 transition-colors\"\n              >\n                피드백 작성\n              </button>\n            </div>\n            <div class=\"space-y-3\">\n              {#each employeeFeedback.filter(feedback => new Date(feedback.reviewPeriod.startDate).getFullYear() === selectedYear) as feedback, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p class=\"text-sm font-medium text-gray-900\">\n                      {feedback.reviewerType === 'manager'\n                        ? '상사'\n                        : feedback.reviewerType === 'peer'\n                        ? '동료'\n                        : feedback.reviewerType === 'subordinate'\n                        ? '부하직원'\n                        : '자기평가'}\n                    </p>\n                    <p class=\"text-xs text-gray-500\">\n                      종합점수: {feedback.leadership +\n                        feedback.communication +\n                        feedback.teamwork +\n                        feedback.problemSolving +\n                        feedback.initiative +\n                        feedback.adaptability +\n                        feedback.technicalSkills}/35\n                    </p>\n                  </div>\n                  <div class=\"flex items-center space-x-2\">\n                    <Badge variant={feedback.status === 'completed' ? 'success' : 'warning'}>\n                      {feedback.status === 'completed' ? '완료' : '대기중'}\n                    </Badge>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      <!-- 역량 매트릭스 및 교육 이수 -->\n      <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <!-- 역량 매트릭스 -->\n        <Card>\n          <div class=\"p-6\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">역량 매트릭스</h3>\n            <div class=\"space-y-3\">\n              {#each employeeCompetencies as competency, i (i)}\n                <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p class=\"text-sm font-medium text-gray-900\">{competency.competencyName}</p>\n                    <p class=\"text-xs text-gray-500\">\n                      마지막 평가: {formatDate(competency.lastAssessed)}\n                    </p>\n                  </div>\n                  <div class=\"flex items-center space-x-2\">\n                    <div class=\"flex\">\n                      {#each Array(5) as _, i (i)}\n                        <!-- TODO: replace index key with a stable id when model provides one -->\n                        <div\n                          class=\"w-4 h-4 {i < competency.level\n                            ? 'bg-blue-500'\n                            : 'bg-gray-300'} rounded-full mr-1\"\n                        ></div>\n                      {/each}\n                    </div>\n                    <span class=\"text-sm font-medium text-gray-900\">{competency.level}/5</span>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </div>\n        </Card>\n\n        <!-- 교육 이수 -->\n        <Card>\n          <div class=\"p-6\">\n            <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">교육 이수 현황</h3>\n            <div class=\"space-y-3\">\n              {#each employeeTraining.slice(0, 5) as training, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p class=\"text-sm font-medium text-gray-900\">{training.title}</p>\n                    <p class=\"text-xs text-gray-500\">\n                      {training.provider} • {training.duration}시간\n                    </p>\n                  </div>\n                  <div class=\"flex items-center space-x-2\">\n                    <Badge\n                      variant={training.status === 'completed'\n                        ? 'success'\n                        : training.status === 'in-progress'\n                        ? 'warning'\n                        : 'secondary'}\n                    >\n                      {training.status === 'completed'\n                        ? '완료'\n                        : training.status === 'in-progress'\n                        ? '진행중'\n                        : '예정'}\n                    </Badge>\n                    {#if training.score}\n                      <span class=\"text-sm font-medium text-gray-900\">{training.score}점</span>\n                    {/if}\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </div>\n        </Card>\n      </div>\n    {:else}\n      <Card>\n        <div class=\"p-12 text-center\">\n          <svg\n            class=\"w-16 h-16 text-gray-400 mx-auto mb-4\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              stroke-width=\"2\"\n              d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\"\n            />\n          </svg>\n          <h3 class=\"text-lg font-medium text-gray-900 mb-2\">직원을 선택하세요</h3>\n          <p class=\"text-gray-500\">성과 평가를 위해 직원을 선택해주세요.</p>\n        </div>\n      </Card>\n    {/if}\n\n    <!-- 성과 평가 작성/수정 모달 -->\n    <Modal bind:open={isReviewModalOpen}>\n      <div class=\"p-6 max-w-4xl\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">\n          {selectedReview ? '성과 평가 수정' : '성과 평가 작성'}\n        </h3>\n        <form\n          onsubmit={e => {\n            e.preventDefault()\n            handleReviewSubmit()\n          }}\n        >\n          <div class=\"space-y-6\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label\n                  for=\"review-type\"\n                  class=\"block text-sm font-medium text-gray-700 mb-1\"\n                >평가 유형 *</label\n                >\n                <select\n                  id=\"review-type\"\n                  bind:value={reviewForm.reviewType}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value=\"annual\">연간 평가</option>\n                  <option value=\"quarterly\">분기 평가</option>\n                  <option value=\"probation\">수습 평가</option>\n                  <option value=\"project\">프로젝트 평가</option>\n                </select>\n              </div>\n              <div>\n                <label\n                  for=\"overall-rating\"\n                  class=\"block text-sm font-medium text-gray-700 mb-1\"\n                >종합 평가 점수 *</label\n                >\n                <select\n                  id=\"overall-rating\"\n                  bind:value={reviewForm.overallRating}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                >\n                  <option value={1}>1점 (매우 미흡)</option>\n                  <option value={2}>2점 (미흡)</option>\n                  <option value={3}>3점 (보통)</option>\n                  <option value={4}>4점 (우수)</option>\n                  <option value={5}>5점 (매우 우수)</option>\n                </select>\n              </div>\n            </div>\n\n            <div>\n              <label\n                for=\"strengths\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >강점</label\n              >\n              <div class=\"space-y-2\">\n                {#each reviewForm.strengths as strength, index (index)}\n                  <div class=\"flex space-x-2\">\n                    <input\n                      id=\"strengths-{index}\"\n                      type=\"text\"\n                      bind:value={reviewForm.strengths[index]}\n                      class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <button\n                      type=\"button\"\n                      onclick={() => reviewForm.strengths.splice(index, 1)}\n                      class=\"px-3 py-2 text-red-600 hover:text-red-900\"\n                    >\n                      삭제\n                    </button>\n                  </div>\n                {/each}\n                <button\n                  type=\"button\"\n                  onclick={() => reviewForm.strengths.push('')}\n                  class=\"text-blue-600 hover:text-blue-900 text-sm\"\n                >\n                  + 강점 추가\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <label\n                for=\"improvement-areas\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >개선 영역</label\n              >\n              <div class=\"space-y-2\">\n                {#each reviewForm.improvementAreas as area, index (index)}\n                  <div class=\"flex space-x-2\">\n                    <input\n                      id=\"improvement-areas-{index}\"\n                      type=\"text\"\n                      bind:value={reviewForm.improvementAreas[index]}\n                      class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <button\n                      type=\"button\"\n                      onclick={() => reviewForm.improvementAreas.splice(index, 1)}\n                      class=\"px-3 py-2 text-red-600 hover:text-red-900\"\n                    >\n                      삭제\n                    </button>\n                  </div>\n                {/each}\n                <button\n                  type=\"button\"\n                  onclick={() => reviewForm.improvementAreas.push('')}\n                  class=\"text-blue-600 hover:text-blue-900 text-sm\"\n                >\n                  + 개선 영역 추가\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <label\n                for=\"development-plan\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >개발 계획</label\n              >\n              <textarea\n                id=\"development-plan\"\n                bind:value={reviewForm.developmentPlan}\n                rows=\"3\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"개발 계획을 입력하세요\"\n              ></textarea>\n            </div>\n\n            <div>\n              <label\n                for=\"career-goals\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >경력 목표</label\n              >\n              <textarea\n                id=\"career-goals\"\n                bind:value={reviewForm.careerGoals}\n                rows=\"3\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"경력 목표를 입력하세요\"\n              ></textarea>\n            </div>\n\n            <div class=\"space-y-3\">\n              <label class=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  bind:checked={reviewForm.promotionRecommendation}\n                  class=\"mr-2\"\n                />\n                <span class=\"text-sm text-gray-700\">승진 추천</span>\n              </label>\n              <label class=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  bind:checked={reviewForm.salaryIncreaseRecommendation}\n                  class=\"mr-2\"\n                />\n                <span class=\"text-sm text-gray-700\">급여 인상 추천</span>\n              </label>\n              <label class=\"flex items-center\">\n                <input type=\"checkbox\" bind:checked={reviewForm.bonusRecommendation} class=\"mr-2\" />\n                <span class=\"text-sm text-gray-700\">보너스 추천</span>\n              </label>\n            </div>\n          </div>\n\n          <div class=\"flex justify-end space-x-3 mt-6\">\n            <button\n              type=\"button\"\n              onclick={() => (isReviewModalOpen = false)}\n              class=\"px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              {selectedReview ? '수정' : '저장'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n\n    <!-- 360도 피드백 모달 -->\n    <Modal bind:open={isFeedbackModalOpen}>\n      <div class=\"p-6 max-w-2xl\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">360도 피드백 작성</h3>\n        <form\n          onsubmit={e => {\n            e.preventDefault()\n            handleFeedbackSubmit()\n          }}\n        >\n          <div class=\"space-y-6\">\n            <div>\n              <label\n                for=\"reviewer-type\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >평가자 유형 *</label\n              >\n              <select\n                id=\"reviewer-type\"\n                bind:value={feedbackForm.reviewerType}\n                required\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                <option value=\"manager\">상사</option>\n                <option value=\"peer\">동료</option>\n                <option value=\"subordinate\">부하직원</option>\n                <option value=\"self\">자기평가</option>\n              </select>\n            </div>\n\n            <div class=\"space-y-4\">\n              <h4 class=\"text-md font-medium text-gray-900\">역량 평가 (1-5점)</h4>\n              <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <label\n                    for=\"leadership\"\n                    class=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >리더십</label\n                  >\n                  <select\n                    id=\"leadership\"\n                    bind:value={feedbackForm.leadership}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value={1}>1점</option>\n                    <option value={2}>2점</option>\n                    <option value={3}>3점</option>\n                    <option value={4}>4점</option>\n                    <option value={5}>5점</option>\n                  </select>\n                </div>\n                <div>\n                  <label\n                    for=\"communication\"\n                    class=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >커뮤니케이션</label\n                  >\n                  <select\n                    id=\"communication\"\n                    bind:value={feedbackForm.communication}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value={1}>1점</option>\n                    <option value={2}>2점</option>\n                    <option value={3}>3점</option>\n                    <option value={4}>4점</option>\n                    <option value={5}>5점</option>\n                  </select>\n                </div>\n                <div>\n                  <label\n                    for=\"teamwork\"\n                    class=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >팀워크</label\n                  >\n                  <select\n                    id=\"teamwork\"\n                    bind:value={feedbackForm.teamwork}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value={1}>1점</option>\n                    <option value={2}>2점</option>\n                    <option value={3}>3점</option>\n                    <option value={4}>4점</option>\n                    <option value={5}>5점</option>\n                  </select>\n                </div>\n                <div>\n                  <label\n                    for=\"problem-solving\"\n                    class=\"block text-sm font-medium text-gray-700 mb-1\"\n                  >문제 해결</label\n                  >\n                  <select\n                    id=\"problem-solving\"\n                    bind:value={feedbackForm.problemSolving}\n                    class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  >\n                    <option value={1}>1점</option>\n                    <option value={2}>2점</option>\n                    <option value={3}>3점</option>\n                    <option value={4}>4점</option>\n                    <option value={5}>5점</option>\n                  </select>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <label\n                for=\"feedback-strengths\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >강점</label\n              >\n              <textarea\n                id=\"feedback-strengths\"\n                bind:value={feedbackForm.strengths}\n                rows=\"3\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"강점을 입력하세요\"\n              ></textarea>\n            </div>\n\n            <div>\n              <label\n                for=\"feedback-improvement\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >개선 영역</label\n              >\n              <textarea\n                id=\"feedback-improvement\"\n                bind:value={feedbackForm.improvementAreas}\n                rows=\"3\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"개선이 필요한 영역을 입력하세요\"\n              ></textarea>\n            </div>\n\n            <div>\n              <label\n                for=\"recommendations\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >추천사항</label\n              >\n              <textarea\n                id=\"recommendations\"\n                bind:value={feedbackForm.recommendations}\n                rows=\"3\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                placeholder=\"추천사항을 입력하세요\"\n              ></textarea>\n            </div>\n\n            <div>\n              <label class=\"flex items-center\">\n                <input type=\"checkbox\" bind:checked={feedbackForm.isAnonymous} class=\"mr-2\" />\n                <span class=\"text-sm text-gray-700\">익명으로 제출</span>\n              </label>\n            </div>\n          </div>\n\n          <div class=\"flex justify-end space-x-3 mt-6\">\n            <button\n              type=\"button\"\n              onclick={() => (isFeedbackModalOpen = false)}\n              class=\"px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n            >\n              제출\n            </button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/hr/recruitment/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isCandidateModalOpen' is assigned a value but never used.","line":22,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":22,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'isInterviewModalOpen' is assigned a value but never used.","line":23,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":27},{"ruleId":"no-unused-vars","severity":2,"message":"'selectedCandidate' is assigned a value but never used.","line":25,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'candidateForm' is assigned a value but never used.","line":47,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":47,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'requirement' is defined but never used.","line":366,"column":55,"nodeType":"Identifier","messageId":"unusedVar","endLine":366,"endColumn":66,"suggestions":[{"messageId":"removeVar","data":{"varName":"requirement"},"fix":{"range":[12109,12120],"text":""},"desc":"Remove unused variable 'requirement'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { formatDate } from '$lib/utils/format'\n  import { onMount } from 'svelte'\n\n  import {\n    addJobPosting,\n    candidates,\n    closeJobPosting,\n    getRecruitmentStats,\n    jobPostings,\n    publishJobPosting,\n    updateJobPosting,\n    type Candidate,\n    type JobPosting\n  } from '$lib/stores/recruitment'\n\n  // 모달 상태\n  let isJobPostingModalOpen = $state(false)\n  let isCandidateModalOpen = $state(false)\n  let isInterviewModalOpen = $state(false)\n  let selectedJobPosting = $state<JobPosting | null>(null)\n  let selectedCandidate = $state<Candidate | null>(null)\n\n  // 필터\n  let statusFilter = $state('')\n  let departmentFilter = $state('')\n\n  // 폼 데이터\n  let jobPostingForm = $state({\n    title: '',\n    department: '',\n    position: '',\n    level: '',\n    employmentType: 'full-time' as JobPosting['employmentType'],\n    location: '',\n    description: '',\n    requirements: [''],\n    preferredQualifications: [''],\n    benefits: [''],\n    salaryRange: { min: 0, max: 0, currency: 'KRW' },\n    applicationDeadline: ''\n  })\n\n  let candidateForm = $state({\n    jobPostingId: '',\n    personalInfo: {\n      name: '',\n      email: '',\n      phone: '',\n      address: '',\n      birthDate: '',\n      gender: 'male' as Candidate['personalInfo']['gender']\n    },\n    education: [{ degree: '', school: '', major: '', graduationYear: new Date().getFullYear() }],\n    experience: [{ company: '', position: '', startDate: '', endDate: '', description: '' }],\n    skills: [''],\n    languages: [\n      { language: '', proficiency: 'intermediate' as Candidate['languages'][0]['proficiency'] }\n    ]\n  })\n\n  // 필터링된 채용 공고\n  let filteredJobPostings = $derived(() => {\n    let filtered = $jobPostings\n    if (statusFilter) filtered = filtered.filter(job => job.status === statusFilter)\n    if (departmentFilter) filtered = filtered.filter(job => job.department === departmentFilter)\n    return filtered\n  })\n\n  // 함수들\n  function openJobPostingModal(jobPosting?: JobPosting) {\n    if (jobPosting) {\n      selectedJobPosting = jobPosting\n      jobPostingForm = {\n        title: jobPosting.title,\n        department: jobPosting.department,\n        position: jobPosting.position,\n        level: jobPosting.level,\n        employmentType: jobPosting.employmentType,\n        location: jobPosting.location,\n        description: jobPosting.description,\n        requirements: jobPosting.requirements,\n        preferredQualifications: jobPosting.preferredQualifications,\n        benefits: jobPosting.benefits,\n        salaryRange: jobPosting.salaryRange,\n        applicationDeadline: jobPosting.applicationDeadline\n      }\n    } else {\n      selectedJobPosting = null\n      jobPostingForm = {\n        title: '',\n        department: '',\n        position: '',\n        level: '',\n        employmentType: 'full-time',\n        location: '',\n        description: '',\n        requirements: [''],\n        preferredQualifications: [''],\n        benefits: [''],\n        salaryRange: { min: 0, max: 0, currency: 'KRW' },\n        applicationDeadline: ''\n      }\n    }\n    isJobPostingModalOpen = true\n  }\n\n  function handleJobPostingSubmit() {\n    if (selectedJobPosting) {\n      updateJobPosting(selectedJobPosting.id, jobPostingForm)\n    } else {\n      addJobPosting({\n        ...jobPostingForm,\n        status: 'draft',\n        postedBy: 'current-user'\n      })\n    }\n    isJobPostingModalOpen = false\n  }\n\n  function publishJob(jobId: string) {\n    publishJobPosting(jobId)\n    alert('채용 공고가 게시되었습니다.')\n  }\n\n  function closeJob(jobId: string) {\n    closeJobPosting(jobId)\n    alert('채용 공고가 마감되었습니다.')\n  }\n\n  function getStatusBadgeVariant(\n    status: JobPosting['status']\n  ): 'secondary' | 'success' | 'danger' | 'warning' {\n    switch (status) {\n      case 'draft':\n        return 'secondary'\n      case 'published':\n        return 'success'\n      case 'closed':\n        return 'danger'\n      case 'cancelled':\n        return 'warning'\n      default:\n        return 'secondary'\n    }\n  }\n\n  function getStatusText(status: JobPosting['status']): string {\n    switch (status) {\n      case 'draft':\n        return '임시저장'\n      case 'published':\n        return '게시중'\n      case 'closed':\n        return '마감'\n      case 'cancelled':\n        return '취소'\n      default:\n        return status\n    }\n  }\n\n  onMount(() => {\n  // 초기 데이터 로드\n  })\n</script>\n\n<div class=\"min-h-screen bg-gray-50 p-6\">\n  <div class=\"max-w-7xl mx-auto\">\n    <!-- 헤더 -->\n    <div class=\"flex justify-between items-center mb-8\">\n      <div>\n        <h1 class=\"text-3xl font-bold text-gray-900\">채용 관리</h1>\n        <p class=\"text-gray-600 mt-1\">채용 공고 및 지원자 관리를 합니다</p>\n      </div>\n      <button\n        type=\"button\"\n        onclick={() => openJobPostingModal()}\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n      >\n        채용 공고 작성\n      </button>\n    </div>\n\n    <!-- 필터 -->\n    <Card class=\"mb-6\">\n      <div class=\"p-6\">\n        <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 mb-2\">상태</label>\n            <select\n              bind:value={statusFilter}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">전체 상태</option>\n              <option value=\"draft\">임시저장</option>\n              <option value=\"published\">게시중</option>\n              <option value=\"closed\">마감</option>\n              <option value=\"cancelled\">취소</option>\n            </select>\n          </div>\n          <div>\n            <label class=\"block text-sm font-medium text-gray-700 mb-2\">부서</label>\n            <select\n              bind:value={departmentFilter}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"\">전체 부서</option>\n              <option value=\"부서없음\">부서없음</option>\n              <option value=\"개발팀\">개발팀</option>\n              <option value=\"마케팅팀\">마케팅팀</option>\n              <option value=\"영업팀\">영업팀</option>\n              <option value=\"인사팀\">인사팀</option>\n            </select>\n          </div>\n          <div class=\"flex items-end\">\n            <button\n              type=\"button\"\n              onclick={() => {\n                statusFilter = ''\n                departmentFilter = ''\n              }}\n              class=\"w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors\"\n            >\n              초기화\n            </button>\n          </div>\n        </div>\n      </div>\n    </Card>\n\n    <!-- 채용 공고 목록 -->\n    <div class=\"grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6\">\n      {#each filteredJobPostings() as jobPosting (jobPosting.id ?? jobPosting.uuid ?? jobPosting.key)}\n        <Card>\n          <div class=\"p-6\">\n            <div class=\"flex justify-between items-start mb-4\">\n              <div>\n                <h3 class=\"text-lg font-semibold text-gray-900\">{jobPosting.title}</h3>\n                <p class=\"text-sm text-gray-600\">{jobPosting.department} • {jobPosting.position}</p>\n              </div>\n              <Badge variant={getStatusBadgeVariant(jobPosting.status)}>\n                {getStatusText(jobPosting.status)}\n              </Badge>\n            </div>\n\n            <div class=\"space-y-2 mb-4\">\n              <p class=\"text-sm text-gray-600\">\n                <strong>급여:</strong>\n                {jobPosting.salaryRange.min.toLocaleString()}원 - {jobPosting.salaryRange.max.toLocaleString()}원\n              </p>\n              <p class=\"text-sm text-gray-600\">\n                <strong>위치:</strong>\n                {jobPosting.location}\n              </p>\n              <p class=\"text-sm text-gray-600\">\n                <strong>마감일:</strong>\n                {formatDate(jobPosting.applicationDeadline)}\n              </p>\n            </div>\n\n            <div class=\"flex justify-between items-center\">\n              <div class=\"text-sm text-gray-500\">\n                지원자: {getRecruitmentStats(jobPosting.id, $candidates).totalApplications}명\n              </div>\n              <div class=\"flex space-x-2\">\n                <button\n                  type=\"button\"\n                  onclick={() => openJobPostingModal(jobPosting)}\n                  class=\"text-blue-600 hover:text-blue-900 text-sm\"\n                >\n                  수정\n                </button>\n                {#if jobPosting.status === 'draft'}\n                  <button\n                    type=\"button\"\n                    onclick={() => publishJob(jobPosting.id)}\n                    class=\"text-green-600 hover:text-green-900 text-sm\"\n                  >\n                    게시\n                  </button>\n                {:else if jobPosting.status === 'published'}\n                  <button\n                    type=\"button\"\n                    onclick={() => closeJob(jobPosting.id)}\n                    class=\"text-red-600 hover:text-red-900 text-sm\"\n                  >\n                    마감\n                  </button>\n                {/if}\n              </div>\n            </div>\n          </div>\n        </Card>\n      {/each}\n    </div>\n\n    <!-- 채용 공고 작성/수정 모달 -->\n    <Modal bind:open={isJobPostingModalOpen}>\n      <div class=\"p-6 max-w-4xl\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">\n          {selectedJobPosting ? '채용 공고 수정' : '채용 공고 작성'}\n        </h3>\n        <form\n          onsubmit={e => {\n            e.preventDefault()\n            handleJobPostingSubmit()\n          }}\n        >\n          <div class=\"space-y-6\">\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">제목 *</label>\n                <input\n                  type=\"text\"\n                  bind:value={jobPostingForm.title}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">부서 *</label>\n                <input\n                  type=\"text\"\n                  bind:value={jobPostingForm.department}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">직급 *</label>\n                <input\n                  type=\"text\"\n                  bind:value={jobPostingForm.position}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">레벨 *</label>\n                <input\n                  type=\"text\"\n                  bind:value={jobPostingForm.level}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-1\">직무 설명 *</label>\n              <textarea\n                bind:value={jobPostingForm.description}\n                required\n                rows=\"4\"\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              ></textarea>\n            </div>\n\n            <div>\n              <label class=\"block text-sm font-medium text-gray-700 mb-1\">필수 요구사항</label>\n              <div class=\"space-y-2\">\n                {#each jobPostingForm.requirements as requirement, index (index)}\n                  <div class=\"flex space-x-2\">\n                    <input\n                      type=\"text\"\n                      bind:value={jobPostingForm.requirements[index]}\n                      class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                    />\n                    <button\n                      type=\"button\"\n                      onclick={() => jobPostingForm.requirements.splice(index, 1)}\n                      class=\"px-3 py-2 text-red-600 hover:text-red-900\"\n                    >\n                      삭제\n                    </button>\n                  </div>\n                {/each}\n                <button\n                  type=\"button\"\n                  onclick={() => jobPostingForm.requirements.push('')}\n                  class=\"text-blue-600 hover:text-blue-900 text-sm\"\n                >\n                  + 요구사항 추가\n                </button>\n              </div>\n            </div>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">최소 급여 *</label>\n                <input\n                  type=\"number\"\n                  bind:value={jobPostingForm.salaryRange.min}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">최대 급여 *</label>\n                <input\n                  type=\"number\"\n                  bind:value={jobPostingForm.salaryRange.max}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n\n            <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">위치 *</label>\n                <input\n                  type=\"text\"\n                  bind:value={jobPostingForm.location}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n              <div>\n                <label class=\"block text-sm font-medium text-gray-700 mb-1\">지원 마감일 *</label>\n                <input\n                  type=\"date\"\n                  bind:value={jobPostingForm.applicationDeadline}\n                  required\n                  class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                />\n              </div>\n            </div>\n          </div>\n\n          <div class=\"flex justify-end space-x-3 mt-6\">\n            <button\n              type=\"button\"\n              onclick={() => (isJobPostingModalOpen = false)}\n              class=\"px-4 py-2 text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors\"\n            >\n              취소\n            </button>\n            <button\n              type=\"submit\"\n              class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n            >\n              {selectedJobPosting ? '수정' : '저장'}\n            </button>\n          </div>\n        </form>\n      </div>\n    </Modal>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/personnel/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'totalCount' is assigned a value but never used.","line":75,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":75,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'activeCount' is assigned a value but never used.","line":76,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":76,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":174,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":174,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[6120,6121],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { formatKRW } from '$lib/utils/format'\n  import { personnelStore } from '$lib/stores/personnel'\n  import { quarterlyPersonnelBudgets, budgetThresholds } from '$lib/stores/rnd'\n  import { page } from '$app/state'\n  import { goto } from '$app/navigation'\n  import type { Personnel, Participation } from '$lib/types'\n  let quarter = $state('2025-Q3')\n  let selectedId = $state<string | null>(null)\n  let query = $state('')\n  let orgFilter = $state('')\n  let statusFilter = $state('') as '' | '재직' | '신규' | '퇴사예정'\n  let lastQuery = $state('')\n\n  function personQuarterCost(p: Personnel): number {\n    // 우선 순위: 참여 항목별 quarterlyBreakdown → 연봉 기반 추정치(분기)\n    const breakdownSum = p.participations.reduce<number>(\n      (sum: number, pp: Participation) => sum + (pp.quarterlyBreakdown?.[quarter] ?? 0),\n      0\n    )\n    if (breakdownSum > 0) return breakdownSum\n    // fallback: 연봉 * 참여율 / 4\n    const est =\n      ((p.annualSalaryKRW ?? 0) *\n        (p.participations.reduce((s, pp) => s + pp.allocationPct, 0) / 100)) /\n        4\n    return Math.round(est)\n  }\n  function personQuarterBudget(p: Personnel): number {\n    const map = $quarterlyPersonnelBudgets\n    return p.participations.reduce<number>(\n      (sum: number, pp: Participation) =>\n        sum + (map[pp.projectId]?.[quarter] ?? 0) * (pp.allocationPct / 100),\n      0\n    )\n  }\n\n  // available quarters\n  const quarters = $derived(\n    Array.from(\n      new Set(Object.values($quarterlyPersonnelBudgets).flatMap(m => Object.keys(m)))\n    ).sort()\n  )\n\n  // read initial quarter from URL if present\n  if (typeof window !== 'undefined') {\n    const params = new URLSearchParams(window.location.search)\n    const urlQuarter = params.get('q')\n    if (urlQuarter) {\n      quarter = urlQuarter\n    }\n    lastQuery = params.toString()\n  }\n\n  const projectId = page.url.searchParams.get('projectId')\n  const all = $derived($personnelStore)\n  const filtered = $derived(\n    all.filter(p => {\n      const matchQuery = query\n        ? p.name.includes(query) || p.id.includes(query) || p.organization.includes(query)\n        : true\n      const matchProject = projectId\n        ? p.participations.some(pp => pp.projectId === projectId)\n        : true\n      const matchOrg = orgFilter ? p.organization === orgFilter : true\n      const matchStatus = statusFilter ? p.status === statusFilter : true\n      return matchQuery && matchProject && matchOrg && matchStatus\n    })\n  )\n  const selected = $derived(all.find(p => p.id === selectedId))\n  const orgOptions = $derived(Array.from(new Set(all.map(p => p.organization))))\n  const totalCount = $derived(all.length)\n  const activeCount = $derived(all.filter(p => p.status === '재직').length)\n\n  // KPI summary for selected quarter and current filter\n  const kpiTotalCost = $derived(filtered.reduce((s, p) => s + personQuarterCost(p), 0))\n  const kpiTotalBudget = $derived(filtered.reduce((s, p) => s + personQuarterBudget(p), 0))\n  const kpiUtil = $derived(\n    kpiTotalBudget > 0 ? Math.round((kpiTotalCost / kpiTotalBudget) * 100) : 0\n  )\n  const overCount = $derived(\n    filtered.filter(p => {\n      const b = personQuarterBudget(p)\n      return b > 0 && personQuarterCost(p) / b >= budgetThresholds.critical\n    }).length\n  )\n\n  // URL sync for quarter only (q)\n  $effect(() => {\n    if (typeof window !== 'undefined') {\n      const params = new URLSearchParams(window.location.search)\n      if (quarter) params.set('q', quarter)\n      else params.delete('q')\n      const newQuery = params.toString()\n      if (newQuery !== lastQuery) {\n        lastQuery = newQuery\n        goto(`${window.location.pathname}${newQuery ? `?${newQuery}` : ''}`, {\n          replaceState: true,\n          keepFocus: true,\n          noScroll: true\n        })\n      }\n    }\n  })\n\n  // skeleton loading for table\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<Card header=\"인력 비용 관리\">\n  <div class=\"mb-3 flex flex-col sm:flex-row gap-2 sm:items-center\">\n    <input\n      class=\"w-full sm:w-64 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-primary/30\"\n      placeholder=\"검색 (이름/사번/부서)\"\n      bind:value={query}\n    />\n    <select\n      class=\"w-full sm:w-48 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={orgFilter}\n    >\n      <option value=\"\">전체 부서</option>\n      {#each orgOptions as o, i (i)}\n        <option value={o}>{o}</option>\n      {/each}\n    </select>\n    <select\n      class=\"w-full sm:w-48 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={statusFilter}\n    >\n      <option value=\"\">전체 상태</option>\n      <option value=\"재직\">재직</option>\n      <option value=\"신규\">신규</option>\n      <option value=\"퇴사예정\">퇴사예정</option>\n    </select>\n    <select\n      class=\"w-full sm:w-40 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={quarter}\n    >\n      {#each quarters as q, i (i)}\n        <option value={q}>{q}</option>\n      {/each}\n    </select>\n    {#if projectId}\n      <Badge color=\"blue\">프로젝트 필터: {projectId}</Badge>\n    {/if}\n  </div>\n  <div class=\"grid grid-cols-1 sm:grid-cols-3 gap-3 mb-3\">\n    <div class=\"card\">\n      <div class=\"text-caption\">분기 인건비 합계</div>\n      <div class=\"text-lg font-semibold\">{kpiTotalCost.toLocaleString()}원</div>\n    </div>\n    <div class=\"card\">\n      <div class=\"text-caption\">분기 예산 합계</div>\n      <div class=\"text-lg font-semibold\">{kpiTotalBudget.toLocaleString()}원</div>\n    </div>\n    <div class=\"card\">\n      <div class=\"text-caption\">예산 대비 집행률</div>\n      <div class=\"text-lg font-semibold\">{kpiUtil}%</div>\n    </div>\n  </div>\n  <div class=\"text-caption mb-2\">\n    임계치 {Math.round(budgetThresholds.warning * 100)}%/{Math.round(\n      budgetThresholds.critical * 100\n    )}% 기준, 위험 인원 {overCount}명\n  </div>\n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(8) as _, idx (idx)}\n        <!-- TODO: replace index key with a stable id when model provides one -->\n        <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n      {/each}\n    </div>\n  {:else}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">사번</th>\n            <th class=\"px-3 py-2\">이름</th>\n            <th class=\"px-3 py-2\">부서</th>\n            <th class=\"px-3 py-2\">직급</th>\n            <th class=\"px-3 py-2\">연봉</th>\n            <th class=\"px-3 py-2\">프로젝트</th>\n            <th class=\"px-3 py-2\">{quarter} 인건비</th>\n            <th class=\"px-3 py-2\">예산대비</th>\n            <th class=\"px-3 py-2\">상태</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each filtered as p, i (i)}\n            <tr class=\"hover:bg-gray-50 cursor-pointer\" onclick={() => (selectedId = p.id)}>\n              <td class=\"px-3 py-2\">{p.id}</td>\n              <td class=\"px-3 py-2\">{p.name}</td>\n              <td class=\"px-3 py-2\">{p.organization}</td>\n              <td class=\"px-3 py-2\">{p.role}</td>\n              <td class=\"px-3 py-2\">{p.annualSalaryKRW ? formatKRW(p.annualSalaryKRW) : '-'}</td>\n              <td class=\"px-3 py-2\">{p.participations.length}건</td>\n              <td class=\"px-3 py-2\">{formatKRW(personQuarterCost(p))}</td>\n              <td class=\"px-3 py-2\">\n                {#if personQuarterBudget(p) > 0}\n                  {@const util = personQuarterCost(p) / personQuarterBudget(p)}\n                  <Badge\n                    color={util >= budgetThresholds.over\n                      ? 'red'\n                      : util >= budgetThresholds.critical\n                      ? 'yellow'\n                      : util >= budgetThresholds.warning\n                      ? 'yellow'\n                      : 'green'}>{Math.round(util * 100)}%</Badge\n                  >\n                {:else}\n                  -\n                {/if}\n              </td>\n              <td class=\"px-3 py-2\"\n              ><Badge color={p.status === '퇴사예정' ? 'yellow' : 'green'}>{p.status}</Badge></td\n              >\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/if}\n</Card>\n\n<Modal open={!!selected} title={selected?.name ?? ''} onClose={() => (selectedId = null)}>\n  {#if selected}\n    <div class=\"space-y-3 text-sm\">\n      <div class=\"grid grid-cols-2 gap-3\">\n        <div>\n          <div class=\"text-caption\">사번</div>\n          <div class=\"font-semibold\">{selected.id}</div>\n        </div>\n        <div>\n          <div class=\"text-caption\">부서/직급</div>\n          <div class=\"font-semibold\">{selected.organization} · {selected.role}</div>\n        </div>\n        <div>\n          <div class=\"text-caption\">연봉</div>\n          <div class=\"font-semibold\">\n            {selected.annualSalaryKRW ? formatKRW(selected.annualSalaryKRW) : '-'}\n          </div>\n        </div>\n      </div>\n      <div>\n        <div class=\"text-caption mb-1\">프로젝트 참여</div>\n        <ul class=\"list-disc pl-5 space-y-1\">\n          {#each selected.participations as pp, i (i)}\n            <li>\n              {pp.projectId} · {pp.allocationPct}% · {pp.startDate}{pp.endDate\n                ? ` ~ ${pp.endDate}`\n                : ''}\n            </li>\n          {/each}\n        </ul>\n      </div>\n    </div>\n  {/if}\n</Modal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/+page.svelte","messages":[{"ruleId":"no-redeclare","severity":2,"message":"'fetch' is already defined as a built-in global variable.","line":2,"column":13,"nodeType":"Block","messageId":"redeclaredAsBuiltin","endLine":2,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  /* global fetch */\n  import { goto } from '$app/navigation'\n  import { page } from '$app/stores'\n  import PageLayout from '$lib/components/layout/PageLayout.svelte'\n  import ParticipationCard from '$lib/components/project-management/ParticipationCard.svelte'\n  import ProjectCreationForm from '$lib/components/project-management/ProjectCreationForm.svelte'\n  import ProjectListCard from '$lib/components/project-management/ProjectListCard.svelte'\n  import ProjectOverviewCard from '$lib/components/project-management/ProjectOverviewCard.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import ThemeTabs from '$lib/components/ui/ThemeTabs.svelte'\n  import { BarChart3Icon, FlaskConicalIcon, PercentIcon } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  /**\n   * @typedef {Object} Project\n   * @property {string} id\n   * @property {string} title\n   * @property {string} code\n   * @property {string} [description]\n   * @property {string} [startDate]\n   * @property {string} [endDate]\n   * @property {'planning' | 'active' | 'completed'} status\n   * @property {'internal' | 'government' | 'private' | 'international'} [sponsorType]\n   * @property {'low' | 'medium' | 'high' | 'critical'} [priority]\n   * @property {'basic' | 'applied' | 'development'} [researchType]\n   * @property {string} [updatedAt]\n   */\n\n  /**\n   * @typedef {Object} ProjectSummary\n   * @property {number} totalProjects\n   * @property {number} activeProjects\n   * @property {number} totalBudget\n   * @property {number} currentYearBudget\n   * @property {number} totalMembers\n   * @property {number} activeMembers\n   * @property {number} overParticipationEmployees\n   * @property {Array<{title: string, code: string, status: string, updatedAt: string}>} [recentActivities]\n   */\n\n  /**\n   * @typedef {Object} EmployeeParticipation\n   * @property {string} name\n   * @property {string} email\n   * @property {string} department\n   * @property {number} activeProjects\n   * @property {number} totalParticipationRate\n   */\n\n  // 탭 정의\n  const tabs = [\n    {\n      id: 'overview',\n      label: '개요',\n      icon: BarChart3Icon\n    },\n    {\n      id: 'projects',\n      label: '프로젝트',\n      icon: FlaskConicalIcon\n    },\n    {\n      id: 'participation',\n      label: '참여율 관리',\n      icon: PercentIcon\n    }\n  ]\n\n  // URL 파라미터에서 활성 탭 관리\n  let activeTab = $state($page.url.searchParams.get('tab') || 'overview')\n\n  // 상태 변수들\n  let mounted = $state(false)\n  let projects = $state([])\n  let projectSummary = $state(null)\n  let employeeParticipationSummary = $state([])\n  let alerts = $state([])\n\n  // 탭별 로딩 상태 및 오류 체크\n  let tabLoadingStates = $state({\n    overview: false,\n    projects: false,\n    participation: false\n  })\n  let tabErrors = $state({\n    overview: null,\n    projects: null,\n    participation: null\n  })\n  let tabLastLoaded = $state({\n    overview: null,\n    projects: null,\n    participation: null\n  })\n\n  // 탭별 데이터 로딩 함수들\n  async function loadTabData(tabName) {\n    if (tabLoadingStates[tabName]) return\n\n    tabLoadingStates[tabName] = true\n    tabErrors[tabName] = null\n\n    try {\n      switch (tabName) {\n        case 'overview':\n          await Promise.all([\n            loadProjectSummary(),\n            loadEmployeeParticipationSummary(),\n            loadBudgetSummaryByYear(),\n            loadAlerts()\n          ])\n          break\n        case 'projects':\n          await loadProjectData()\n          break\n        case 'participation':\n          await loadEmployeeParticipationSummary()\n          break\n      }\n      tabLastLoaded[tabName] = new Date()\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : '알 수 없는 오류가 발생했습니다.'\n      tabErrors[tabName] = errorMessage\n      logger.error(`${tabName} 탭 데이터 로딩 실패:`, err)\n    } finally {\n      tabLoadingStates[tabName] = false\n    }\n  }\n\n  // Svelte 5: 탭 변경 시 데이터 로드 (무한 루프 방지)\n  let lastLoadedTab = $state('')\n  $effect(() => {\n    if (mounted && activeTab && activeTab !== lastLoadedTab) {\n      lastLoadedTab = activeTab\n      loadTabData(activeTab)\n    }\n  })\n\n  // Svelte 5: 컴포넌트 마운트 시 mounted 상태 설정\n  onMount(() => {\n    mounted = true\n  })\n\n  // 프로젝트 관련 상태\n  let selectedProject = $state(null)\n  let selectedProjectId = $state('')\n  let showCreateProjectModal = $state(false)\n\n  // 탭 변경 핸들러\n  function handleTabChange(tabId) {\n    activeTab = tabId\n    const url = new URL($page.url)\n    url.searchParams.set('tab', tabId)\n    goto(url.toString(), { replaceState: true })\n  }\n\n  // API 호출 함수들\n  async function loadProjectData() {\n    try {\n      logger.log('🔍 프로젝트 데이터 로딩 시작...')\n\n      // API 응답 시간 측정\n      const startTime = Date.now()\n      const response = await fetch('/api/project-management/projects')\n      const responseTime = Date.now() - startTime\n\n      logger.log(`⏱️ API 응답 시간: ${responseTime}ms`)\n\n      if (response.ok) {\n        const data = await response.json()\n        logger.log('📊 API 응답 데이터:', data)\n\n        if (data.success) {\n          const projectData = data.data || []\n\n          // 프로젝트 데이터 검증\n          const validationResult = validateProjectData(projectData)\n          if (!validationResult.isValid) {\n            logger.error('❌ 프로젝트 데이터 검증 실패:', validationResult.issues)\n            // 검증 실패 시 빈 배열로 설정하여 무한 루프 방지\n            projects = []\n            return // throw 대신 return으로 함수 종료\n          }\n\n          projects = projectData\n          logger.log(`✅ ${projectData.length}개 프로젝트 로드 완료`)\n        } else {\n          throw new Error(data.message || '프로젝트 데이터를 불러오는데 실패했습니다.')\n        }\n      } else if (response.status === 404) {\n        throw new Error('프로젝트 관리 API가 아직 구현되지 않았습니다.')\n      } else if (response.status === 500) {\n        throw new Error('서버 내부 오류가 발생했습니다. 잠시 후 다시 시도해주세요.')\n      } else if (response.status === 403) {\n        throw new Error('프로젝트 데이터에 접근할 권한이 없습니다.')\n      } else {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n      }\n    } catch (err) {\n      // Failed to fetch 오류 특별 처리\n      if (err instanceof Error && err.message && err.message.includes('Failed to fetch')) {\n        logger.error('❌ 네트워크 연결 실패:', err.message)\n      } else {\n        logger.error('❌ 프로젝트 데이터 로드 실패:', err)\n      }\n\n      projects = []\n      throw err // 상위 함수에서 처리할 수 있도록 재throw\n    }\n  }\n\n  // 개선된 프로젝트 데이터 검증 함수 (기획 단계 완화)\n  function validateProjectData(projectData) {\n    const issues = []\n    const warnings = []\n\n    if (!Array.isArray(projectData)) {\n      issues.push('프로젝트 데이터가 배열이 아닙니다.')\n      return { isValid: false, issues }\n    }\n\n    projectData.forEach((project, index) => {\n      const projectName = project.title || project.code || `프로젝트 ${index + 1}`\n      const isPlanning = project.status === 'planning'\n\n      // 모든 프로젝트에 공통으로 필요한 필수 필드\n      if (!project.id) {\n        issues.push(`${projectName}: ID가 누락되었습니다.`)\n      }\n      if (!project.title) {\n        issues.push(`${projectName}: 제목이 누락되었습니다.`)\n      }\n      if (!project.code) {\n        issues.push(`${projectName}: 코드가 누락되었습니다.`)\n      }\n\n      // 기획 단계가 아닌 경우에만 필수인 필드들\n      if (!isPlanning) {\n        if (!project.startDate) {\n          issues.push(`${projectName}: 진행/완료 상태 프로젝트는 시작일이 필요합니다.`)\n        }\n        if (!project.endDate) {\n          issues.push(`${projectName}: 진행/완료 상태 프로젝트는 종료일이 필요합니다.`)\n        }\n      } else {\n        // 기획 단계에서는 경고만 표시\n        if (!project.startDate) {\n          warnings.push(`${projectName}: 시작일이 설정되지 않았습니다. (기획 단계이므로 선택사항)`)\n        }\n        if (!project.endDate) {\n          warnings.push(`${projectName}: 종료일이 설정되지 않았습니다. (기획 단계이므로 선택사항)`)\n        }\n      }\n\n      // 날짜 유효성 검증 (날짜가 있는 경우에만)\n      if (project.startDate && project.endDate) {\n        const startDate = new Date(project.startDate)\n        const endDate = new Date(project.endDate)\n\n        if (isNaN(startDate.getTime())) {\n          issues.push(`${projectName}: 시작일 형식이 올바르지 않습니다.`)\n        }\n        if (isNaN(endDate.getTime())) {\n          issues.push(`${projectName}: 종료일 형식이 올바르지 않습니다.`)\n        }\n        if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime()) && startDate > endDate) {\n          issues.push(`${projectName}: 시작일이 종료일보다 늦습니다.`)\n        }\n      }\n\n      // 상태 값 검증\n      const validStatuses = ['planning', 'active', 'completed']\n      if (project.status && !validStatuses.includes(project.status)) {\n        issues.push(`${projectName}: 유효하지 않은 상태값입니다. (${project.status})`)\n      }\n\n      // 우선순위 값 검증 (있는 경우에만)\n      if (project.priority) {\n        const validPriorities = ['low', 'medium', 'high', 'critical']\n        if (!validPriorities.includes(project.priority)) {\n          issues.push(`${projectName}: 유효하지 않은 우선순위값입니다. (${project.priority})`)\n        }\n      }\n    })\n\n    // 경고가 있으면 콘솔에 출력\n    if (warnings.length > 0) {\n      logger.warn('⚠️ 프로젝트 데이터 경고:', warnings)\n    }\n\n    return {\n      isValid: issues.length === 0,\n      issues\n    }\n  }\n\n  async function loadProjectSummary() {\n    try {\n      const response = await fetch('/api/project-management/summary')\n      if (response.ok) {\n        const data = await response.json()\n        projectSummary = data.data\n      }\n    } catch (err) {\n      logger.error('프로젝트 요약 로드 실패:', err)\n    }\n  }\n\n  async function loadEmployeeParticipationSummary() {\n    try {\n      const response = await fetch('/api/project-management/participation-rates/summary')\n      if (response.ok) {\n        const data = await response.json()\n        employeeParticipationSummary = data.data || []\n      }\n    } catch {\n    // 직원 참여율 데이터 로드 실패 - 조용히 처리\n    }\n  }\n\n  async function loadBudgetSummaryByYear() {\n    try {\n      const response = await fetch('/api/project-management/budgets/summary-by-year')\n      if (response.ok) {\n      // const data = await response.json()\n        // budgetSummaryByYear = data.data || []\n      }\n    } catch {\n    // 연도별 예산 데이터 로드 실패 - 조용히 처리\n    }\n  }\n\n  async function loadAlerts() {\n    try {\n      const response = await fetch('/api/project-management/alerts')\n      if (response.ok) {\n        const data = await response.json()\n        alerts = data.data || []\n      }\n    } catch {\n    // 알림 데이터 로드 실패 - 조용히 처리\n    }\n  }\n\n  // 프로젝트 생성 완료 핸들러\n  function handleProjectCreated() {\n    showCreateProjectModal = false\n    loadProjectData()\n    loadProjectSummary()\n  }\n\n  // 프로젝트 삭제 이벤트 처리\n  function handleProjectDeleted(event) {\n    const { projectId } = event.detail\n\n    // 삭제된 프로젝트가 현재 선택된 프로젝트라면 선택 해제\n    if (selectedProject && selectedProject.id === projectId) {\n      selectedProject = null\n      selectedProjectId = ''\n    }\n\n    // 프로젝트 목록에서 삭제된 프로젝트 제거\n    projects = projects.filter(p => p.id !== projectId)\n\n    // 프로젝트 데이터 새로고침\n    loadProjectData()\n  }\n\n  // 초기화 - 첫 번째 탭만 로드\n  $effect(() => {\n    if (!mounted) {\n      mounted = true\n      // 초기 탭 데이터 로드\n      loadTabData(activeTab)\n    }\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<PageLayout title=\"프로젝트 관리\" subtitle=\"연구개발 프로젝트 및 참여율 관리 시스템\">\n  <div>\n    <!-- 탭 네비게이션 -->\n    <ThemeTabs {tabs} {activeTab} onTabChange={handleTabChange} />\n\n    <!-- 개요 탭 -->\n    {#if activeTab === 'overview'}\n      <div>\n        <!-- 프로젝트 개요 카드 -->\n        <ProjectOverviewCard {projectSummary} {alerts} />\n      </div>\n    {/if}\n\n    <!-- 프로젝트 탭 -->\n    {#if activeTab === 'projects'}\n      <div>\n        <!-- 프로젝트 목록 카드 -->\n        <ProjectListCard\n          {projects}\n          {selectedProject}\n          {selectedProjectId}\n          loading={tabLoadingStates.projects}\n          error={tabErrors.projects}\n          on:create-project={() => (showCreateProjectModal = true)}\n          on:project-deleted={handleProjectDeleted}\n          on:refresh={loadProjectData}\n        />\n      </div>\n    {/if}\n\n    <!-- 참여율 관리 탭 -->\n    {#if activeTab === 'participation'}\n      <div>\n        <!-- 참여율 관리 카드 -->\n        <ParticipationCard\n          {employeeParticipationSummary}\n          loading={tabLoadingStates.participation}\n          error={tabErrors.participation}\n        />\n      </div>\n    {/if}\n  </div>\n</PageLayout>\n\n<!-- 프로젝트 생성 모달 -->\n<ThemeModal open={showCreateProjectModal} onclose={() => (showCreateProjectModal = false)}>\n  <ProjectCreationForm on:projectCreated={handleProjectCreated} />\n</ThemeModal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/budget-overview/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/compliance/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/dashboard/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'daysBetween' is defined but never used.","line":56,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":56,"endColumn":23,"suggestions":[{"messageId":"removeVar","data":{"varName":"daysBetween"},"fix":{"range":[1911,2090],"text":""},"desc":"Remove unused variable 'daysBetween'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":243,"column":24,"nodeType":"Identifier","messageId":"unusedVar","endLine":243,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[7947,7948],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Progress from '$lib/components/ui/Progress.svelte'\n  import { personnelStore } from '$lib/stores/personnel'\n  import {\n    budgetAlerts,\n    expenseDocsStore,\n    getQuarterSummary,\n    overallBudget,\n    projectsStore,\n    quarterlyPersonnelBudgets\n  } from '$lib/stores/rnd'\n  import { formatDateForDisplay, getCurrentUTC, getDateDifference } from '$lib/utils/date-handler'\n\n  const ob = $derived($overallBudget)\n  const avgProgress = $derived(\n    $projectsStore.length\n      ? Math.round($projectsStore.reduce((s, p) => s + p.progressPct, 0) / $projectsStore.length)\n      : 0\n  )\n  const riskCounts = $derived({\n    위험: $projectsStore.filter(p => p.status === '위험').length,\n    지연: $projectsStore.filter(p => p.status === '지연').length,\n    진행중: $projectsStore.filter(p => p.status === '진행중').length,\n    정상: $projectsStore.filter(p => p.status === '정상' || p.status === '완료').length\n  })\n  const overAllocated = $derived(\n    $personnelStore.filter(pr => pr.participations.reduce((s, pp) => s + pp.allocationPct, 0) > 100)\n      .length\n  )\n  const avgAlloc = $derived(\n    $personnelStore.length\n      ? Math.round(\n        $personnelStore.reduce(\n          (sum, pr) => sum + pr.participations.reduce((s, pp) => s + pp.allocationPct, 0),\n          0\n        ) / $personnelStore.length\n      )\n      : 0\n  )\n\n  // Category breakdown (인건비/재료비/연구활동비/여비)\n  const categoryTotals = $derived(\n    (function () {\n      const res = { 인건비: 0, 재료비: 0, 연구활동비: 0, 여비: 0 } as Record<string, number>\n      for (const d of $expenseDocsStore) {\n        const amt = d.amountKRW ?? 0\n        if (res[d.category] !== undefined) res[d.category] += amt\n      }\n      return res\n    })()\n  )\n\n  // Burn rate projection: project-level spent/elapsed → projected over total duration, aggregated\n  function daysBetween(a: string, b: string): number {\n    const ms = new Date(b).getTime() - new Date(a).getTime()\n    return Math.max(1, Math.ceil(ms / (1000 * 60 * 60 * 24)))\n  }\n  const portfolioProjection = $derived(\n    (function () {\n      const todayIso = formatDateForDisplay(getCurrentUTC(), 'ISO')\n      let totalBudget = 0\n      let totalProjected = 0\n      for (const p of $projectsStore) {\n        const start = p.startDate\n        const due = p.dueDate\n        const totalDays = getDateDifference(start, due)\n        // 오늘이 시작 이전이면 0일 경과로 간주\n        const cappedToday = todayIso < start ? start : todayIso > due ? due : todayIso\n        const elapsedDays = Math.max(1, getDateDifference(start, cappedToday))\n        const burn = p.spentKRW / Math.max(1, elapsedDays)\n        const projected = burn * totalDays\n        totalBudget += p.budgetKRW\n        totalProjected += Math.min(projected, p.budgetKRW * 2) // clamp to avoid runaway\n      }\n      const utilization = totalBudget > 0 ? totalProjected / totalBudget : 0\n      return { totalBudget, totalProjected, utilization }\n    })()\n  )\n\n  // 경보 상세 사유\n  const alertDetails = $derived(\n    $budgetAlerts.map(a => {\n      const pct = (a.utilization * 100).toFixed(1)\n      const reason =\n        a.level === 'over'\n          ? `집행률 ${pct}% ≥ 100%`\n          : a.level === 'critical'\n          ? `집행률 ${pct}% ≥ 95%`\n          : `집행률 ${pct}% ≥ 80%`\n      return { ...a, reason }\n    })\n  )\n\n  // 소진 속도 편차: 진행률 대비 집행액 편차 상위\n  const burnVariance = $derived(\n    (function () {\n      return $projectsStore\n        .map(p => {\n          const expected = (p.progressPct / 100) * p.budgetKRW\n          const delta = p.spentKRW - expected\n          return { id: p.id, name: p.name, spent: p.spentKRW, expected, delta }\n        })\n        .sort((a, b) => Math.abs(b.delta) - Math.abs(a.delta))\n        .slice(0, 5)\n    })()\n  )\n\n  // 분기 선택 및 URL 동기화\n  function sortQuarterLabels(labels: string[]): string[] {\n    return labels\n      .map(q => {\n        const [y, qpart] = q.split('-Q')\n        return { q, y: Number(y), qn: Number(qpart) }\n      })\n      .sort((a, b) => (a.y === b.y ? a.qn - b.qn : a.y - b.y))\n      .map(x => x.q)\n  }\n  function currentQuarterLabel(): string {\n    const d = new Date(getCurrentUTC())\n    const y = d.getFullYear()\n    const qn = Math.floor(d.getMonth() / 3) + 1\n    return `${y}-Q${qn}`\n  }\n  const quarters = $derived(\n    (function () {\n      const set = new Set<string>()\n      const qmap = $quarterlyPersonnelBudgets\n      for (const pid in qmap) {\n        for (const k in qmap[pid]) set.add(k)\n      }\n      return sortQuarterLabels(Array.from(set))\n    })()\n  )\n  let selectedQuarter = $state(currentQuarterLabel())\n  let lastQuery = $state('')\n  if (typeof window !== 'undefined') {\n    const params = new URLSearchParams(window.location.search)\n    const qParam = params.get('q')\n    if (qParam) selectedQuarter = qParam\n    lastQuery = params.toString()\n  }\n  const quarterSummary = $derived(getQuarterSummary(selectedQuarter))\n  const docsInQuarter = $derived(\n    (function () {\n      const qn = Number(selectedQuarter.split('-Q')[1] || '0')\n      return $expenseDocsStore.filter(d => Number(d.quarter) === qn).length\n    })()\n  )\n\n  // URL sync\n  $effect(() => {\n    if (typeof window !== 'undefined') {\n      const params = new URLSearchParams(window.location.search)\n      if (selectedQuarter) params.set('q', selectedQuarter)\n      else params.delete('q')\n      const newQuery = params.toString()\n      if (newQuery !== lastQuery) {\n        lastQuery = newQuery\n        const url = `${window.location.pathname}${newQuery ? `?${newQuery}` : ''}`\n        window.history.replaceState(null, '', url)\n      }\n    }\n  })\n\n  // Headcount churn (최근 4분기)\n  function sortQs(labels: string[]): string[] {\n    return sortQuarterLabels(labels)\n  }\n  const allQLabels = $derived(\n    (function () {\n      const s = new Set<string>()\n      for (const p of $personnelStore) {\n        for (const part of p.participations) {\n          const qb = part.quarterlyBreakdown ?? {}\n          for (const k in qb) s.add(k)\n        }\n      }\n      return sortQs(Array.from(s))\n    })()\n  )\n  const last4 = $derived(allQLabels.slice(-4))\n  const activeByQ = $derived(\n    (function () {\n      const map: Record<string, Set<string>> = {}\n      for (const q of last4) map[q] = new Set<string>()\n      for (const p of $personnelStore) {\n        for (const part of p.participations) {\n          const qb = part.quarterlyBreakdown ?? {}\n          for (const q of last4) {\n            if ((qb[q] ?? 0) > 0) map[q].add(p.id)\n          }\n        }\n      }\n      return map\n    })()\n  )\n  const churnData = $derived(\n    (function () {\n      const data: Array<{ q: string; headcount: number; join: number; leave: number }> = []\n      for (let i = 0; i < last4.length; i++) {\n        const q = last4[i]\n        const prev = i > 0 ? last4[i - 1] : null\n        const currSet = activeByQ[q] ?? new Set<string>()\n        const prevSet = prev ? (activeByQ[prev] ?? new Set<string>()) : new Set<string>()\n        let join = 0,\n          leave = 0\n        if (prev) {\n          for (const id of currSet) if (!prevSet.has(id)) join++\n          for (const id of prevSet) if (!currSet.has(id)) leave++\n        }\n        data.push({ q, headcount: currSet.size, join, leave })\n      }\n      return data\n    })()\n  )\n\n  // simple skeleton\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h2 class=\"text-lg font-semibold mb-4\">Project Overview Dashboard</h2>\n\n<div class=\"mb-3 flex items-center gap-2\">\n  <label for=\"qsel\" class=\"text-sm text-gray-600\">분기</label>\n  <select\n    id=\"qsel\"\n    class=\"rounded-md border border-gray-200 px-2 py-1 text-sm\"\n    bind:value={selectedQuarter}\n  >\n    {#each quarters as q, i (i)}\n      <option value={q}>{q}</option>\n    {/each}\n  </select>\n</div>\n\n<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n  {#if loading}\n    {#each Array(4) as _, idx (idx)}\n      <!-- TODO: replace index key with a stable id when model provides one -->\n      <div class=\"card animate-pulse h-24\"></div>\n    {/each}\n  {:else}\n    <Card>\n      {#snippet children()}\n        <div class=\"kpi\">\n          <div>\n            <p class=\"text-caption\">총 프로젝트</p>\n            <div class=\"text-2xl font-bold\">{$projectsStore.length}</div>\n          </div>\n        </div>\n      {/snippet}\n    </Card>\n    <Card>\n      {#snippet children()}\n        <div class=\"kpi\">\n          <div>\n            <p class=\"text-caption\">예산 집행률</p>\n            <div class=\"text-2xl font-bold\">{(ob.utilization * 100).toFixed(1)}%</div>\n            <div class=\"mt-3\"><Progress value={ob.utilization * 100} /></div>\n          </div>\n        </div>\n      {/snippet}\n    </Card>\n    <Card>\n      {#snippet children()}\n        <div class=\"kpi\">\n          <div>\n            <p class=\"text-caption\">평균 진행률</p>\n            <div class=\"text-2xl font-bold\">{avgProgress}%</div>\n            <div class=\"mt-3\"><Progress value={avgProgress} /></div>\n          </div>\n        </div>\n      {/snippet}\n    </Card>\n    <Card>\n      {#snippet children()}\n        <div class=\"kpi\">\n          <div>\n            <p class=\"text-caption\">경보 프로젝트</p>\n            <div class=\"text-2xl font-bold\">{$budgetAlerts.length}</div>\n          </div>\n        </div>\n      {/snippet}\n    </Card>\n  {/if}\n</div>\n\n{#if !loading && $budgetAlerts.length}\n  <Card header=\"예산 경보\">\n    {#snippet children()}\n      <ul class=\"space-y-2 text-sm\">\n        {#each alertDetails as a, i (i)}\n          <li class=\"flex items-center justify-between\">\n            <div class=\"flex items-center gap-3\">\n              <span class=\"font-medium\">{a.name}</span>\n              <span class=\"text-caption\">{a.reason}</span>\n            </div>\n            <Badge color={a.level === 'over' ? 'red' : a.level === 'critical' ? 'yellow' : 'yellow'}\n            >{(a.utilization * 100).toFixed(1)}%</Badge\n            >\n          </li>\n        {/each}\n      </ul>\n    {/snippet}\n  </Card>\n{/if}\n\n<div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-2\">\n  <Card>\n    {#snippet children()}\n      <div class=\"kpi\">\n        <div>\n          <p class=\"text-caption\">{selectedQuarter} 분기 인건비 예산</p>\n          <div class=\"text-2xl font-bold\">{quarterSummary.totalBudgetKRW.toLocaleString()}원</div>\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n  <Card>\n    {#snippet children()}\n      <div class=\"kpi\">\n        <div>\n          <p class=\"text-caption\">{selectedQuarter.split('-Q')[1]}분기 문서 수</p>\n          <div class=\"text-2xl font-bold\">{docsInQuarter}</div>\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n  <Card>\n    {#snippet children()}\n      <div class=\"kpi\">\n        <div>\n          <p class=\"text-caption\">분기 키 개수</p>\n          <div class=\"text-2xl font-bold\">{quarters.length}</div>\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n</div>\n\n<div class=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mt-6\">\n  <Card header=\"리스크 매트릭스\">\n    {#snippet children()}\n      <div class=\"grid grid-cols-2 sm:grid-cols-4 gap-3 text-center\">\n        <div>\n          <div class=\"text-caption mb-1\">위험</div>\n          <Badge color=\"red\">{riskCounts.위험}</Badge>\n        </div>\n        <div>\n          <div class=\"text-caption mb-1\">지연</div>\n          <Badge color=\"yellow\">{riskCounts.지연}</Badge>\n        </div>\n        <div>\n          <div class=\"text-caption mb-1\">진행중</div>\n          <Badge color=\"blue\">{riskCounts.진행중}</Badge>\n        </div>\n        <div>\n          <div class=\"text-caption mb-1\">정상/완료</div>\n          <Badge color=\"green\">{riskCounts.정상}</Badge>\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n\n  <Card header=\"리소스 분석\">\n    {#snippet children()}\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div>\n          <div class=\"text-caption\">평균 참여율</div>\n          <div class=\"text-2xl font-bold\">{avgAlloc}%</div>\n          <div class=\"mt-3\"><Progress value={Math.min(avgAlloc, 100)} /></div>\n        </div>\n        <div>\n          <div class=\"text-caption\">과할당 인원</div>\n          <div class=\"text-2xl font-bold\">{overAllocated}</div>\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n</div>\n\n<div class=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mt-6\">\n  <Card header=\"예산 카테고리 분해\">\n    {#snippet children()}\n      <div class=\"grid grid-cols-2 gap-3 text-sm\">\n        <div class=\"flex items-center justify-between\">\n          <span>인건비</span><span class=\"tabular-nums\"\n          >{categoryTotals['인건비'].toLocaleString()}원</span\n          >\n        </div>\n        <div class=\"flex items-center justify-between\">\n          <span>재료비</span><span class=\"tabular-nums\"\n          >{categoryTotals['재료비'].toLocaleString()}원</span\n          >\n        </div>\n        <div class=\"flex items-center justify-between\">\n          <span>연구활동비</span><span class=\"tabular-nums\"\n          >{categoryTotals['연구활동비'].toLocaleString()}원</span\n          >\n        </div>\n        <div class=\"flex items-center justify-between\">\n          <span>여비</span><span class=\"tabular-nums\"\n          >{categoryTotals['여비'].toLocaleString()}원</span\n          >\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n\n  <Card header=\"번레이트 예측(포트폴리오)\">\n    {#snippet children()}\n      <div class=\"grid grid-cols-1 gap-2 text-sm\">\n        <div class=\"flex items-center justify-between\">\n          <span>총 예산</span><span class=\"tabular-nums\"\n          >{portfolioProjection.totalBudget.toLocaleString()}원</span\n          >\n        </div>\n        <div class=\"flex items-center justify-between\">\n          <span>예상 집행</span><span class=\"tabular-nums\"\n          >{portfolioProjection.totalProjected.toLocaleString()}원</span\n          >\n        </div>\n        <div>\n          <div class=\"text-caption mb-1\">예상 집행률</div>\n          <Progress value={Math.min(100, portfolioProjection.utilization * 100)} />\n        </div>\n      </div>\n    {/snippet}\n  </Card>\n</div>\n\n<Card header=\"소진 속도 편차 상위\">\n  {#snippet children()}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">프로젝트</th>\n            <th class=\"px-3 py-2\">예상</th>\n            <th class=\"px-3 py-2\">집행</th>\n            <th class=\"px-3 py-2\">편차</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each burnVariance as b, i (i)}\n            <tr>\n              <td class=\"px-3 py-2\">{b.name}</td>\n              <td class=\"px-3 py-2 tabular-nums\">{b.expected.toLocaleString()}원</td>\n              <td class=\"px-3 py-2 tabular-nums\">{b.spent.toLocaleString()}원</td>\n              <td class=\"px-3 py-2 tabular-nums\">{b.delta.toLocaleString()}원</td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/snippet}\n</Card>\n\n<Card header=\"인력 변동 (최근 4분기)\">\n  {#snippet children()}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">분기</th>\n            <th class=\"px-3 py-2\">인원수</th>\n            <th class=\"px-3 py-2\">신규</th>\n            <th class=\"px-3 py-2\">퇴사</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each churnData as r, i (i)}\n            <tr>\n              <td class=\"px-3 py-2\">{r.q}</td>\n              <td class=\"px-3 py-2 tabular-nums\">{r.headcount}</td>\n              <td class=\"px-3 py-2 tabular-nums text-green-700\">+{r.join}</td>\n              <td class=\"px-3 py-2 tabular-nums text-red-700\">-{r.leave}</td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/snippet}\n</Card>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/participation/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'selectedTimeframe' is assigned a value but never used.","line":44,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":44,"endColumn":24},{"ruleId":"no-unused-vars","severity":2,"message":"'totalParticipations' is assigned a value but never used.","line":64,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'getStatusColor' is assigned a value but never used.","line":226,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":226,"endColumn":23},{"ruleId":"no-unused-vars","severity":2,"message":"'getParticipationRateColor' is assigned a value but never used.","line":236,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":236,"endColumn":34},{"ruleId":"no-unused-vars","severity":2,"message":"'updateSort' is assigned a value but never used.","line":253,"column":9,"nodeType":"Identifier","messageId":"unusedVar","endLine":253,"endColumn":19}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { goto } from '$app/navigation'\n  import { page } from '$app/stores'\n  import PageLayout from '$lib/components/layout/PageLayout.svelte'\n  import ResearcherValidationTable from '$lib/components/project-management/ResearcherValidationTable.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeGrid from '$lib/components/ui/ThemeGrid.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import ThemeSectionHeader from '$lib/components/ui/ThemeSectionHeader.svelte'\n  import ThemeStatCard from '$lib/components/ui/ThemeStatCard.svelte'\n  import {\n    recommendations as aiRecommendations,\n    employees,\n    participations,\n    projects\n  } from '$lib/stores/rd'\n  import { initializeParticipationManager } from '$lib/stores/rnd/participation-manager'\n  import { formatCurrency } from '$lib/utils/format'\n  import {\n    AlertTriangleIcon,\n    DollarSignIcon,\n    DownloadIcon,\n    FilterIcon,\n    PercentIcon,\n    PlusIcon,\n    TargetIcon,\n    UserIcon,\n    UsersIcon,\n    XCircleIcon,\n    ZapIcon\n  } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  // URL 파라미터에서 정렬 옵션 가져오기\n  let sortOrder = $derived($page.url.searchParams.get('sort') || 'desc')\n  let sortBy = $derived($page.url.searchParams.get('sortBy') || 'participationRate')\n\n  // 상태 관리\n  let searchTerm = $state('')\n  let selectedProject = $state('all')\n  let selectedEmployee = $state('all')\n  let selectedStatus = $state('all')\n  let selectedTimeframe = $state('current')\n  let showAdvancedFilters = $state(false)\n  let showParticipationModal = $state(false)\n  let showAnalyticsModal = $state(false)\n  let showOptimizationModal = $state(false)\n  let selectedParticipation = $state(null)\n  let selectedEmployeeForModal = $state(null)\n  let selectedProjectForModal = $state(null)\n\n  // 고급 필터\n  let minParticipationRate = $state(0)\n  let maxParticipationRate = $state(100)\n  let minSalary = $state(0)\n  let maxSalary = $state(10000000)\n  let selectedDepartment = $state('all')\n  let selectedRole = $state('all')\n\n  // 통계 데이터\n  let totalEmployees = $derived($employees.length)\n  let totalProjects = $derived($projects.length)\n  let totalParticipations = $derived($participations.length)\n  let averageParticipationRate = $derived(\n    $participations.length > 0\n      ? $participations.reduce((sum: number, p: any) => sum + p.participationRate, 0) /\n        $participations.length\n      : 0\n  )\n\n  // 필터링된 참여 데이터\n  let filteredParticipations = $derived(\n    $participations.filter((participation: any) => {\n      const employee = $employees.find((e: any) => e.id === participation.employeeId)\n      const project = $projects.find((p: any) => p.id === participation.projectId)\n\n      if (!employee || !project) return false\n\n      const matchesSearch =\n        employee.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          project.name.toLowerCase().includes(searchTerm.toLowerCase())\n      const matchesProject =\n        selectedProject === 'all' || participation.projectId === selectedProject\n      const matchesEmployee =\n        selectedEmployee === 'all' || participation.employeeId === selectedEmployee\n      const matchesStatus = selectedStatus === 'all' || participation.status === selectedStatus\n      const matchesParticipationRate =\n        participation.participationRate >= minParticipationRate &&\n          participation.participationRate <= maxParticipationRate\n      const matchesSalary = employee.salary >= minSalary && employee.salary <= maxSalary\n      const matchesDepartment =\n        selectedDepartment === 'all' || employee.department === selectedDepartment\n      const matchesRole = selectedRole === 'all' || participation.role === selectedRole\n\n      return (\n        matchesSearch &&\n        matchesProject &&\n        matchesEmployee &&\n        matchesStatus &&\n        matchesParticipationRate &&\n        matchesSalary &&\n        matchesDepartment &&\n        matchesRole\n      )\n    })\n  )\n\n  // 정렬된 참여 데이터\n  let sortedParticipations = $derived(\n    [...filteredParticipations].sort((a: any, b: any) => {\n      const employeeA = $employees.find((e: any) => e.id === a.employeeId)\n      const employeeB = $employees.find((e: any) => e.id === b.employeeId)\n      const projectA = $projects.find((p: any) => p.id === a.projectId)\n      const projectB = $projects.find((p: any) => p.id === b.projectId)\n\n      let valueA, valueB\n\n      switch (sortBy) {\n        case 'participationRate':\n          valueA = a.participationRate\n          valueB = b.participationRate\n          break\n        case 'salary':\n          valueA = employeeA?.salary || 0\n          valueB = employeeB?.salary || 0\n          break\n        case 'employee':\n          valueA = employeeA?.name || ''\n          valueB = employeeB?.name || ''\n          break\n        case 'project':\n          valueA = projectA?.name || ''\n          valueB = projectB?.name || ''\n          break\n        case 'startDate':\n          valueA = new Date(a.startDate).getTime()\n          valueB = new Date(b.startDate).getTime()\n          break\n        default:\n          valueA = a.participationRate\n          valueB = b.participationRate\n      }\n\n      if (sortOrder === 'asc') {\n        return valueA > valueB ? 1 : -1\n      } else {\n        return valueA < valueB ? 1 : -1\n      }\n    })\n  )\n\n  // 참여율 분석 데이터\n  let participationAnalytics = $derived({\n    overloaded: filteredParticipations.filter((p: any) => p.participationRate > 100).length,\n    optimal: filteredParticipations.filter(\n      (p: any) => p.participationRate >= 80 && p.participationRate <= 100\n    ).length,\n    underutilized: filteredParticipations.filter((p: any) => p.participationRate < 50).length,\n    totalCost: filteredParticipations.reduce((sum: number, p: any) => {\n      const employee = $employees.find((e: any) => e.id === p.employeeId)\n      return sum + (employee?.salary || 0) * (p.participationRate / 100)\n    }, 0)\n  })\n\n  // 프로젝트별 참여 현황\n  let projectParticipation = $derived(\n    $projects.map((project: any) => {\n      const projectParticipations = filteredParticipations.filter(\n        (p: any) => p.projectId === project.id\n      )\n      const totalParticipation = projectParticipations.reduce(\n        (sum: number, p: any) => sum + p.participationRate,\n        0\n      )\n      const totalCost = projectParticipations.reduce((sum: number, p: any) => {\n        const employee = $employees.find((e: any) => e.id === p.employeeId)\n        return sum + (employee?.salary || 0) * (p.participationRate / 100)\n      }, 0)\n\n      return {\n        ...project,\n        participantCount: projectParticipations.length,\n        totalParticipation,\n        totalCost,\n        averageParticipation:\n          projectParticipations.length > 0 ? totalParticipation / projectParticipations.length : 0\n      }\n    })\n  )\n\n  // 직원별 참여 현황\n  let employeeParticipation = $derived(\n    $employees.map((employee: any) => {\n      const employeeParticipations = filteredParticipations.filter(\n        (p: any) => p.employeeId === employee.id\n      )\n      const totalParticipation = employeeParticipations.reduce(\n        (sum: number, p: any) => sum + p.participationRate,\n        0\n      )\n      const totalCost = employeeParticipations.reduce((sum: number, p: any) => {\n        return sum + employee.salary * (p.participationRate / 100)\n      }, 0)\n\n      return {\n        ...employee,\n        projectCount: employeeParticipations.length,\n        totalParticipation,\n        totalCost,\n        averageParticipation:\n          employeeParticipations.length > 0\n            ? totalParticipation / employeeParticipations.length\n            : 0,\n        isOverloaded: totalParticipation > 100\n      }\n    })\n  )\n\n  // AI 추천사항\n  let filteredRecommendations = $derived(\n    $aiRecommendations.filter((rec: any) => rec.type === 'participation_optimization')\n  )\n\n  // 함수들\n  const getStatusColor = (status: string) => {\n    const colors: Record<string, string> = {\n      active: 'success',\n      inactive: 'secondary',\n      pending: 'warning',\n      completed: 'info'\n    }\n    return colors[status] || 'secondary'\n  }\n\n  const getParticipationRateColor = (rate: number) => {\n    if (rate > 100) return 'danger'\n    if (rate >= 80) return 'success'\n    if (rate >= 50) return 'warning'\n    return 'secondary'\n  }\n\n  const getEmployeeName = (employeeId: string) => {\n    const employee = $employees.find((e: any) => e.id === employeeId)\n    return employee?.name || 'Unknown'\n  }\n\n  const getProjectName = (projectId: string) => {\n    const project = $projects.find((p: any) => p.id === projectId)\n    return project?.name || 'Unknown'\n  }\n\n  const updateSort = (newSortBy: string) => {\n    const newSortOrder = sortBy === newSortBy && sortOrder === 'desc' ? 'asc' : 'desc'\n    goto(`/project-management/participation?sort=${newSortOrder}&sortBy=${newSortBy}`)\n  }\n\n  const exportData = () => {\n    const data = sortedParticipations.map((p: any) => ({\n      employee: getEmployeeName(p.employeeId),\n      project: getProjectName(p.projectId),\n      participationRate: p.participationRate,\n      role: p.role,\n      startDate: p.startDate,\n      endDate: p.endDate,\n      status: p.status\n    }))\n\n    const csv = [\n      ['직원', '프로젝트', '참여율(%)', '역할', '시작일', '종료일', '상태'],\n      ...data.map(row => Object.values(row))\n    ]\n      .map(row => row.join(','))\n      .join('\\n')\n\n    const blob = new Blob([csv], { type: 'text/csv' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `participation-data-${new Date().toISOString().split('T')[0]}.csv`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n\n  const openParticipationModal = (participation: any = null) => {\n    selectedParticipation = participation\n    selectedEmployeeForModal = participation ? participation.employeeId : null\n    selectedProjectForModal = participation ? participation.projectId : null\n    showParticipationModal = true\n  }\n\n  const closeParticipationModal = () => {\n    showParticipationModal = false\n    selectedParticipation = null\n    selectedEmployeeForModal = null\n    selectedProjectForModal = null\n  }\n\n  const saveParticipation = () => {\n    // 참여 데이터 저장 로직\n    closeParticipationModal()\n  }\n\n  const handleMemberUpdate = (memberId: string, updates: any) => {\n    if (memberId === 'refresh') {\n      // 전체 새로고침\n      initializeParticipationManager()\n    } else {\n      // 특정 멤버 업데이트\n      // TODO: 실제 업데이트 로직 구현\n      logger.log('Member update:', memberId, updates)\n    }\n  }\n\n  onMount(() => {\n    initializeParticipationManager()\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<PageLayout title=\"참여율 관리\" subtitle=\"연구개발 프로젝트 참여율 분석 및 최적화\">\n  <div class=\"space-y-6\">\n    <!-- 통계 카드 -->\n    <ThemeGrid cols={4}>\n      <ThemeStatCard title=\"총 직원 수\" value={totalEmployees.toString()} icon={UsersIcon} />\n      <ThemeStatCard title=\"활성 프로젝트\" value={totalProjects.toString()} icon={TargetIcon} />\n      <ThemeStatCard\n        title=\"평균 참여율\"\n        value={`${averageParticipationRate.toFixed(1)}%`}\n        icon={PercentIcon}\n      />\n      <ThemeStatCard\n        title=\"총 인건비\"\n        value={formatCurrency(participationAnalytics.totalCost)}\n        icon={DollarSignIcon}\n      />\n    </ThemeGrid>\n\n    <!-- 필터 및 검색 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <div class=\"flex flex-col lg:flex-row gap-4 mb-4\">\n          <div class=\"flex-1\">\n            <input\n              type=\"text\"\n              placeholder=\"직원명 또는 프로젝트명으로 검색...\"\n              bind:value={searchTerm}\n              class=\"w-full px-3 py-2 border rounded-md text-sm\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n            />\n          </div>\n          <div class=\"flex gap-2\">\n            <select\n              bind:value={selectedProject}\n              class=\"px-3 py-2 border rounded-md text-sm\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n            >\n              <option value=\"all\">전체 프로젝트</option>\n              {#each $projects as project, i (i)}\n                <option value={project.id}>{project.name}</option>\n              {/each}\n            </select>\n            <select\n              bind:value={selectedEmployee}\n              class=\"px-3 py-2 border rounded-md text-sm\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n            >\n              <option value=\"all\">전체 직원</option>\n              {#each $employees as employee, i (i)}\n                <option value={employee.id}>{employee.name}</option>\n              {/each}\n            </select>\n            <select\n              bind:value={selectedStatus}\n              class=\"px-3 py-2 border rounded-md text-sm\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n            >\n              <option value=\"all\">전체 상태</option>\n              <option value=\"active\">활성</option>\n              <option value=\"inactive\">비활성</option>\n              <option value=\"pending\">대기</option>\n              <option value=\"completed\">완료</option>\n            </select>\n          </div>\n        </div>\n\n        <div class=\"flex justify-between items-center\">\n          <div class=\"flex gap-2\">\n            <ThemeButton\n              variant=\"secondary\"\n              size=\"sm\"\n              onclick={() => (showAdvancedFilters = !showAdvancedFilters)}\n            >\n              <FilterIcon size={16} class=\"mr-2\" />\n              고급 필터\n            </ThemeButton>\n            <ThemeButton variant=\"secondary\" size=\"sm\" onclick={exportData}>\n              <DownloadIcon size={16} class=\"mr-2\" />\n              데이터 내보내기\n            </ThemeButton>\n          </div>\n          <ThemeButton variant=\"primary\" onclick={() => openParticipationModal()}>\n            <PlusIcon size={16} class=\"mr-2\" />\n            참여 추가\n          </ThemeButton>\n        </div>\n\n        <!-- 고급 필터 -->\n        {#if showAdvancedFilters}\n          <div\n            class=\"mt-4 p-4 border rounded-lg\"\n            style:border-color=\"var(--color-border)\"\n            style:background=\"var(--color-surface-elevated)\"\n          >\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div>\n                <div class=\"block text-sm font-medium mb-2\" style:color=\"var(--color-text)\">\n                  참여율 범위\n                </div>\n                <div class=\"flex gap-2\">\n                  <input\n                    type=\"number\"\n                    placeholder=\"최소\"\n                    bind:value={minParticipationRate}\n                    min=\"0\"\n                    max=\"100\"\n                    class=\"px-3 py-2 border rounded-md text-sm\"\n                    style:background=\"var(--color-surface)\"\n                    style:border-color=\"var(--color-border)\"\n                    style:color=\"var(--color-text)\"\n                  />\n                  <input\n                    type=\"number\"\n                    placeholder=\"최대\"\n                    bind:value={maxParticipationRate}\n                    min=\"0\"\n                    max=\"100\"\n                    class=\"px-3 py-2 border rounded-md text-sm\"\n                    style:background=\"var(--color-surface)\"\n                    style:border-color=\"var(--color-border)\"\n                    style:color=\"var(--color-text)\"\n                  />\n                </div>\n              </div>\n              <div>\n                <div class=\"block text-sm font-medium mb-2\" style:color=\"var(--color-text)\">\n                  급여 범위\n                </div>\n                <div class=\"flex gap-2\">\n                  <input\n                    type=\"number\"\n                    placeholder=\"최소 급여\"\n                    bind:value={minSalary}\n                    min=\"0\"\n                    class=\"px-3 py-2 border rounded-md text-sm\"\n                    style:background=\"var(--color-surface)\"\n                    style:border-color=\"var(--color-border)\"\n                    style:color=\"var(--color-text)\"\n                  />\n                  <input\n                    type=\"number\"\n                    placeholder=\"최대 급여\"\n                    bind:value={maxSalary}\n                    min=\"0\"\n                    class=\"px-3 py-2 border rounded-md text-sm\"\n                    style:background=\"var(--color-surface)\"\n                    style:border-color=\"var(--color-border)\"\n                    style:color=\"var(--color-text)\"\n                  />\n                </div>\n              </div>\n              <div>\n                <div class=\"block text-sm font-medium mb-2\" style:color=\"var(--color-text)\">\n                  부서\n                </div>\n                <select\n                  bind:value={selectedDepartment}\n                  class=\"w-full px-3 py-2 border rounded-md text-sm\"\n                  style:background=\"var(--color-surface)\"\n                  style:border-color=\"var(--color-border)\"\n                  style:color=\"var(--color-text)\"\n                >\n                  <option value=\"all\">전체 부서</option>\n                  <option value=\"부서없음\">부서없음</option>\n                  <option value=\"research\">연구개발</option>\n                  <option value=\"engineering\">엔지니어링</option>\n                  <option value=\"design\">디자인</option>\n                  <option value=\"management\">경영지원</option>\n                </select>\n              </div>\n            </div>\n          </div>\n        {/if}\n      </div>\n    </ThemeCard>\n\n    <!-- 분석 대시보드 -->\n    <ThemeGrid cols={2}>\n      <ThemeCard>\n        <div class=\"p-6\">\n          <ThemeSectionHeader title=\"참여율 분석\" />\n          <div class=\"mt-4 space-y-3\">\n            <div class=\"flex justify-between items-center\">\n              <div class=\"flex items-center gap-2\">\n                <div class=\"w-3 h-3 rounded-full bg-red-500\"></div>\n                <span class=\"text-sm\" style:color=\"var(--color-text)\">과부하 (100% 초과)</span>\n              </div>\n              <span\n                class=\"font-medium\"\n                style:color=\"var(--color-text)\"\n              >{participationAnalytics.overloaded}</span\n              >\n            </div>\n            <div class=\"flex justify-between items-center\">\n              <div class=\"flex items-center gap-2\">\n                <div class=\"w-3 h-3 rounded-full bg-green-500\"></div>\n                <span class=\"text-sm\" style:color=\"var(--color-text)\">최적 (80-100%)</span>\n              </div>\n              <span\n                class=\"font-medium\"\n                style:color=\"var(--color-text)\"\n              >{participationAnalytics.optimal}</span\n              >\n            </div>\n            <div class=\"flex justify-between items-center\">\n              <div class=\"flex items-center gap-2\">\n                <div class=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n                <span class=\"text-sm\" style:color=\"var(--color-text)\">미활용 (50% 미만)</span>\n              </div>\n              <span\n                class=\"font-medium\"\n                style:color=\"var(--color-text)\"\n              >{participationAnalytics.underutilized}</span\n              >\n            </div>\n          </div>\n        </div>\n      </ThemeCard>\n\n      <ThemeCard>\n        <div class=\"p-6\">\n          <ThemeSectionHeader title=\"AI 추천사항\" />\n          <div class=\"mt-4 space-y-3\">\n            {#each filteredRecommendations.slice(0, 3) as recommendation, idx (idx)}\n              <!-- TODO: replace index key with a stable id when model provides one -->\n              <div\n                class=\"p-3 rounded-lg border\"\n                style:border-color=\"var(--color-border)\"\n                style:background=\"var(--color-surface-elevated)\"\n              >\n                <div class=\"flex items-start gap-2\">\n                  <ZapIcon size={16} class=\"mt-0.5\" style=\"color: var(--color-primary);\" />\n                  <div class=\"flex-1\">\n                    <p class=\"text-sm font-medium\" style:color=\"var(--color-text)\">\n                      {(recommendation as any).title}\n                    </p>\n                    <p class=\"text-xs mt-1\" style:color=\"var(--color-text-secondary)\">\n                      {(recommendation as any).description}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            {/each}\n          </div>\n        </div>\n      </ThemeCard>\n    </ThemeGrid>\n\n    <!-- 참여연구원 검증 테이블 -->\n    <ResearcherValidationTable\n      projectId=\"851a584c-7b2e-4413-97b3-15665dede7fc\"\n      members={sortedParticipations}\n      onMemberUpdate={handleMemberUpdate}\n    />\n\n    <!-- 프로젝트별 참여 현황 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <ThemeSectionHeader title=\"프로젝트별 참여 현황\" />\n        <div class=\"mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {#each projectParticipation as project, i (i)}\n            <div\n              class=\"p-4 border rounded-lg\"\n              style:border-color=\"var(--color-border)\"\n              style:background=\"var(--color-surface-elevated)\"\n            >\n              <div class=\"flex items-center gap-2 mb-2\">\n                <TargetIcon size={16} style=\"color: var(--color-primary);\" />\n                <h4 class=\"font-medium\" style:color=\"var(--color-text)\">{project.name}</h4>\n              </div>\n              <div class=\"space-y-1 text-sm\">\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">참여자 수:</span>\n                  <span style:color=\"var(--color-text)\">{project.participantCount}명</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">총 참여율:</span>\n                  <span style:color=\"var(--color-text)\"\n                  >{project.totalParticipation.toFixed(1)}%</span\n                  >\n                </div>\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">평균 참여율:</span>\n                  <span style:color=\"var(--color-text)\"\n                  >{project.averageParticipation.toFixed(1)}%</span\n                  >\n                </div>\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">총 비용:</span>\n                  <span style:color=\"var(--color-text)\">{formatCurrency(project.totalCost)}</span>\n                </div>\n              </div>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </ThemeCard>\n\n    <!-- 직원별 참여 현황 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <ThemeSectionHeader title=\"직원별 참여 현황\" />\n        <div class=\"mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {#each employeeParticipation as employee, i (i)}\n            <div\n              class=\"p-4 border rounded-lg\"\n              style:border-color=\"var(--color-border)\"\n              style:background=\"var(--color-surface-elevated)\"\n            >\n              <div class=\"flex items-center gap-2 mb-2\">\n                <UserIcon size={16} style=\"color: var(--color-primary);\" />\n                <h4 class=\"font-medium\" style:color=\"var(--color-text)\">{employee.name}</h4>\n                {#if employee.isOverloaded}\n                  <AlertTriangleIcon size={14} style=\"color: var(--color-danger);\" />\n                {/if}\n              </div>\n              <div class=\"space-y-1 text-sm\">\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">프로젝트 수:</span>\n                  <span style:color=\"var(--color-text)\">{employee.projectCount}개</span>\n                </div>\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">총 참여율:</span>\n                  <span style:color=\"var(--color-text)\"\n                  >{employee.totalParticipation.toFixed(1)}%</span\n                  >\n                </div>\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">평균 참여율:</span>\n                  <span style:color=\"var(--color-text)\"\n                  >{employee.averageParticipation.toFixed(1)}%</span\n                  >\n                </div>\n                <div class=\"flex justify-between\">\n                  <span style:color=\"var(--color-text-secondary)\">총 비용:</span>\n                  <span style:color=\"var(--color-text)\">{formatCurrency(employee.totalCost)}</span>\n                </div>\n              </div>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </ThemeCard>\n  </div>\n\n  <!-- 참여 추가/편집 모달 -->\n  {#if showParticipationModal}\n    <ThemeModal>\n      <div class=\"p-6\">\n        <div class=\"flex justify-between items-center mb-4\">\n          <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n            {selectedParticipation ? '참여 편집' : '참여 추가'}\n          </h3>\n          <button\n            type=\"button\"\n            onclick={closeParticipationModal}\n            class=\"p-1 rounded hover:bg-opacity-20\"\n            style:color=\"var(--color-text-secondary)\"\n          >\n            <XCircleIcon size={20} />\n          </button>\n        </div>\n\n        <form\n          onsubmit={e => {\n            e.preventDefault()\n            saveParticipation()\n          }}\n          class=\"space-y-4\"\n        >\n          <div>\n            <div class=\"block text-sm font-medium mb-2\" style:color=\"var(--color-text)\">직원</div>\n            <select\n              bind:value={selectedEmployeeForModal}\n              class=\"w-full px-3 py-2 border rounded-md\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n              required\n            >\n              <option value=\"\">직원을 선택하세요</option>\n              {#each $employees as employee, i (i)}\n                <option value={employee.id}>{employee.name}</option>\n              {/each}\n            </select>\n          </div>\n\n          <div>\n            <div class=\"block text-sm font-medium mb-2\" style:color=\"var(--color-text)\">\n              프로젝트\n            </div>\n            <select\n              bind:value={selectedProjectForModal}\n              class=\"w-full px-3 py-2 border rounded-md\"\n              style:background=\"var(--color-surface)\"\n              style:border-color=\"var(--color-border)\"\n              style:color=\"var(--color-text)\"\n              required\n            >\n              <option value=\"\">프로젝트를 선택하세요</option>\n              {#each $projects as project, i (i)}\n                <option value={project.id}>{project.name}</option>\n              {/each}\n            </select>\n          </div>\n\n          <div class=\"flex gap-4\">\n            <ThemeButton variant=\"primary\" class=\"flex-1\" onclick={saveParticipation}>\n              저장\n            </ThemeButton>\n            <ThemeButton variant=\"secondary\" onclick={closeParticipationModal} class=\"flex-1\">\n              취소\n            </ThemeButton>\n          </div>\n        </form>\n      </div>\n    </ThemeModal>\n  {/if}\n\n  <!-- 상세 분석 모달 -->\n  {#if showAnalyticsModal}\n    <ThemeModal>\n      <div class=\"p-6\">\n        <div class=\"flex justify-between items-center mb-4\">\n          <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">상세 분석</h3>\n          <button\n            type=\"button\"\n            onclick={() => (showAnalyticsModal = false)}\n            class=\"p-1 rounded hover:bg-opacity-20\"\n            style:color=\"var(--color-text-secondary)\"\n          >\n            <XCircleIcon size={20} />\n          </button>\n        </div>\n\n        <div class=\"space-y-6\">\n          <div\n            class=\"p-4 border rounded-lg\"\n            style:border-color=\"var(--color-border)\"\n            style:background=\"var(--color-surface-elevated)\"\n          >\n            <h4 class=\"font-medium mb-2\" style:color=\"var(--color-text)\">참여율 분포</h4>\n            <div class=\"h-32 bg-gray-100 rounded flex items-center justify-center\">\n              <span class=\"text-gray-500\">차트 영역</span>\n            </div>\n          </div>\n          <div\n            class=\"p-4 border rounded-lg\"\n            style:border-color=\"var(--color-border)\"\n            style:background=\"var(--color-surface-elevated)\"\n          >\n            <h4 class=\"font-medium mb-2\" style:color=\"var(--color-text)\">프로젝트별 비용 분석</h4>\n            <div class=\"h-32 bg-gray-100 rounded flex items-center justify-center\">\n              <span class=\"text-gray-500\">차트 영역</span>\n            </div>\n          </div>\n          <div\n            class=\"p-4 border rounded-lg\"\n            style:border-color=\"var(--color-border)\"\n            style:background=\"var(--color-surface-elevated)\"\n          >\n            <h4 class=\"font-medium mb-2\" style:color=\"var(--color-text)\">시간별 참여 추이</h4>\n            <div class=\"h-32 bg-gray-100 rounded flex items-center justify-center\">\n              <span class=\"text-gray-500\">차트 영역</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ThemeModal>\n  {/if}\n\n  <!-- 최적화 모달 -->\n  {#if showOptimizationModal}\n    <ThemeModal>\n      <div class=\"p-6\">\n        <div class=\"flex justify-between items-center mb-4\">\n          <h3 class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">참여율 최적화</h3>\n          <button\n            type=\"button\"\n            onclick={() => (showOptimizationModal = false)}\n            class=\"p-1 rounded hover:bg-opacity-20\"\n            style:color=\"var(--color-text-secondary)\"\n          >\n            <XCircleIcon size={20} />\n          </button>\n        </div>\n\n        <div class=\"space-y-4\">\n          <div\n            class=\"p-4 border rounded-lg\"\n            style:border-color=\"var(--color-border)\"\n            style:background=\"var(--color-surface-elevated)\"\n          >\n            <h4 class=\"font-medium mb-2\" style:color=\"var(--color-text)\">AI 추천사항</h4>\n            <div class=\"space-y-2\">\n              {#each filteredRecommendations as recommendation, i (i)}\n                <div class=\"flex items-start gap-2\">\n                  <ZapIcon size={16} class=\"mt-0.5\" style=\"color: var(--color-primary);\" />\n                  <div>\n                    <p class=\"text-sm font-medium\" style:color=\"var(--color-text)\">\n                      {(recommendation as any).title}\n                    </p>\n                    <p class=\"text-xs\" style:color=\"var(--color-text-secondary)\">\n                      {(recommendation as any).description}\n                    </p>\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </div>\n\n          <div class=\"flex gap-4\">\n            <ThemeButton variant=\"primary\" class=\"flex-1\">최적화 적용</ThemeButton>\n            <ThemeButton\n              variant=\"secondary\"\n              onclick={() => (showOptimizationModal = false)}\n              class=\"flex-1\"\n            >\n              닫기\n            </ThemeButton>\n          </div>\n        </div>\n      </div>\n    </ThemeModal>\n  {/if}\n</PageLayout>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/budget/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":65,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":65,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[2021,2022],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":72,"column":11,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":76,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":87,"column":30,"nodeType":"Identifier","messageId":"unusedVar","endLine":87,"endColumn":31,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[2798,2799],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Progress from '$lib/components/ui/Progress.svelte'\n  import { projectsStore, expenseDocsStore } from '$lib/stores/rnd'\n  import { page } from '$app/state'\n  import { formatKRW } from '$lib/utils/format'\n\n  const projectId = page.params.projectId\n  const project = $derived($projectsStore.find(p => p.id === projectId))\n  const docs = $derived($expenseDocsStore.filter(d => d.projectId === projectId))\n  const utilization = $derived(\n    project ? Math.round((project.spentKRW / project.budgetKRW) * 100) : 0\n  )\n  const categoryHints = $derived(\n    (function () {\n      const m: Record<string, number> = {}\n      for (const d of docs) m[d.category] = (m[d.category] ?? 0) + (d.amountKRW ?? 0)\n      return m\n    })()\n  )\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Budget Management · {projectId}</h3>\n\n{#if !project}\n  <div class=\"text-sm text-red-700\">프로젝트를 찾을 수 없습니다.</div>\n{:else}\n  <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">총 예산</div>\n          <div class=\"text-2xl font-bold\">{formatKRW(project.budgetKRW)}</div>\n        </div>\n      </div>\n    </Card>\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">집행</div>\n          <div class=\"text-2xl font-bold\">{formatKRW(project.spentKRW)}</div>\n        </div>\n      </div>\n    </Card>\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">집행률</div>\n          <div class=\"text-2xl font-bold\">{utilization}%</div>\n          <div class=\"mt-3\"><Progress value={utilization} /></div>\n        </div>\n      </div>\n    </Card>\n  </div>\n\n  <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mt-6\">\n    <Card header=\"카테고리 힌트(문서 기준)\">\n      {#if loading}\n        <div class=\"space-y-2\">\n          {#each Array(4) as _, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n          {/each}\n        </div>\n      {:else}\n        <div class=\"grid grid-cols-2 gap-2 text-sm\">\n          {#each Object.entries(categoryHints) as [k, v]}\n            <div class=\"flex items-center justify-between\">\n              <span>{k}</span><span class=\"tabular-nums\">{formatKRW(v)}</span>\n            </div>\n          {/each}\n          {#if Object.keys(categoryHints).length === 0}\n            <div class=\"text-gray-500\">문서가 없습니다</div>\n          {/if}\n        </div>\n      {/if}\n    </Card>\n\n    <Card header=\"문서 내역\">\n      {#if loading}\n        <div class=\"space-y-2\">\n          {#each Array(6) as _, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n          {/each}\n        </div>\n      {:else}\n        <div class=\"overflow-auto\">\n          <table class=\"min-w-full text-sm\">\n            <thead class=\"bg-gray-50 text-left text-gray-600\">\n              <tr>\n                <th class=\"px-3 py-2\">문서</th>\n                <th class=\"px-3 py-2\">분류</th>\n                <th class=\"px-3 py-2\">분기</th>\n                <th class=\"px-3 py-2\">금액</th>\n              </tr>\n            </thead>\n            <tbody class=\"divide-y\">\n              {#each docs as d, i (i)}\n                <tr>\n                  <td class=\"px-3 py-2\">{d.id} · {d.title}</td>\n                  <td class=\"px-3 py-2\">{d.category}</td>\n                  <td class=\"px-3 py-2\">{d.quarter}Q</td>\n                  <td class=\"px-3 py-2\">{d.amountKRW ? formatKRW(d.amountKRW) : '-'}</td>\n                </tr>\n              {/each}\n            </tbody>\n          </table>\n        </div>\n      {/if}\n    </Card>\n  </div>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/compliance/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":109,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":109,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[3202,3203],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import { page } from '$app/state'\n  import { goto } from '$app/navigation'\n\n  type CStatus = '충족' | '미비' | '검토중'\n  interface Rule {\n    id: string\n    category: '인건비' | '재료비' | '연구활동비' | '여비' | '보고'\n    title: string\n    status: CStatus\n    note?: string\n  }\n\n  const projectId = page.params.projectId as string\n  let rules: Rule[] = [\n    { id: `${projectId}-C1`, category: '인건비', title: '급여명세서 보관', status: '충족' },\n    {\n      id: `${projectId}-C2`,\n      category: '여비',\n      title: '출장보고서 첨부',\n      status: '미비',\n      note: '보고서 누락'\n    },\n    { id: `${projectId}-C3`, category: '보고', title: '월간 진도보고 제출', status: '검토중' }\n  ]\n\n  let cat = $state('') as '' | Rule['category']\n  let status = $state('') as '' | CStatus\n  let query = $state('')\n\n  let lastQuery = $state('')\n  if (typeof window !== 'undefined') {\n    const sp = new URLSearchParams(window.location.search)\n    cat = (sp.get('cat') as typeof cat) ?? ''\n    status = (sp.get('status') as typeof status) ?? ''\n    query = sp.get('q') ?? ''\n    lastQuery = sp.toString()\n  }\n  $effect(() => {\n    if (typeof window !== 'undefined') {\n      const sp = new URLSearchParams(window.location.search)\n      if (cat) sp.set('cat', cat)\n      else sp.delete('cat')\n      if (status) sp.set('status', status)\n      else sp.delete('status')\n      if (query) sp.set('q', query)\n      else sp.delete('q')\n      const newQuery = sp.toString()\n      if (newQuery !== lastQuery) {\n        lastQuery = newQuery\n        goto(`${window.location.pathname}?${newQuery}`, {\n          replaceState: true,\n          keepFocus: true,\n          noScroll: true\n        })\n      }\n    }\n  })\n\n  const filtered = $derived(\n    rules.filter(\n      r =>\n        (cat ? r.category === cat : true) &&\n          (status ? r.status === status : true) &&\n          (query ? r.title.includes(query) : true)\n    )\n  )\n\n  function colorOf(s: CStatus): 'green' | 'yellow' | 'red' {\n    if (s === '충족') return 'green'\n    if (s === '검토중') return 'yellow'\n    return 'red'\n  }\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Compliance Monitoring · {projectId}</h3>\n\n<Card>\n  <div class=\"mb-3 grid grid-cols-1 sm:grid-cols-4 gap-2 text-sm\">\n    <input\n      class=\"rounded-md border border-gray-200 px-2 py-1\"\n      placeholder=\"규정 검색\"\n      bind:value={query}\n    />\n    <select class=\"rounded-md border border-gray-200 px-2 py-1\" bind:value={cat}>\n      <option value=\"\">카테고리: 전체</option>\n      <option value=\"인건비\">인건비</option>\n      <option value=\"재료비\">재료비</option>\n      <option value=\"연구활동비\">연구활동비</option>\n      <option value=\"여비\">여비</option>\n      <option value=\"보고\">보고</option>\n    </select>\n    <select class=\"rounded-md border border-gray-200 px-2 py-1\" bind:value={status}>\n      <option value=\"\">상태: 전체</option>\n      <option value=\"충족\">충족</option>\n      <option value=\"검토중\">검토중</option>\n      <option value=\"미비\">미비</option>\n    </select>\n  </div>\n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(8) as _, idx (idx)}\n        <!-- TODO: replace index key with a stable id when model provides one -->\n        <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n      {/each}\n    </div>\n  {:else}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">ID</th>\n            <th class=\"px-3 py-2\">카테고리</th>\n            <th class=\"px-3 py-2\">규정</th>\n            <th class=\"px-3 py-2\">상태</th>\n            <th class=\"px-3 py-2\">비고</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each filtered as r, i (i)}\n            <tr>\n              <td class=\"px-3 py-2\">{r.id}</td>\n              <td class=\"px-3 py-2\">{r.category}</td>\n              <td class=\"px-3 py-2\">{r.title}</td>\n              <td class=\"px-3 py-2\"><Badge color={colorOf(r.status)}>{r.status}</Badge></td>\n              <td class=\"px-3 py-2 text-gray-500\">{r.note ?? '-'}</td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/if}\n</Card>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/deliverables/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":114,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":114,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[3005,3006],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import { page } from '$app/state'\n  import { goto } from '$app/navigation'\n\n  type DStatus = '준비' | '진행' | '완료' | '지연'\n  interface Deliverable {\n    id: string\n    title: string\n    status: DStatus\n    due: string\n    owner: string\n  }\n\n  const projectId = page.params.projectId as string\n  // mock per-project deliverables\n  let items: Deliverable[] = [\n    {\n      id: `${projectId}-D1`,\n      title: '중간보고서',\n      status: '진행',\n      due: '2025-11-15',\n      owner: '김철수'\n    },\n    {\n      id: `${projectId}-D2`,\n      title: '프로토타입 v1',\n      status: '지연',\n      due: '2025-12-01',\n      owner: '이영희'\n    },\n    {\n      id: `${projectId}-D3`,\n      title: '최종보고서',\n      status: '준비',\n      due: '2026-05-31',\n      owner: '박민수'\n    }\n  ]\n\n  let status = $state('') as '' | DStatus\n  let query = $state('')\n\n  // initial read\n  let lastQuery = $state('')\n  if (typeof window !== 'undefined') {\n    const sp = new URLSearchParams(window.location.search)\n    status = (sp.get('status') as typeof status) ?? ''\n    query = sp.get('q') ?? ''\n    lastQuery = sp.toString()\n  }\n  // sync to URL\n  $effect(() => {\n    if (typeof window !== 'undefined') {\n      const sp = new URLSearchParams(window.location.search)\n      if (status) sp.set('status', status)\n      else sp.delete('status')\n      if (query) sp.set('q', query)\n      else sp.delete('q')\n      const newQuery = sp.toString()\n      if (newQuery !== lastQuery) {\n        lastQuery = newQuery\n        goto(`${window.location.pathname}?${newQuery}`, {\n          replaceState: true,\n          keepFocus: true,\n          noScroll: true\n        })\n      }\n    }\n  })\n\n  const filtered = $derived(\n    items.filter(\n      d => (status ? d.status === status : true) && (query ? d.title.includes(query) : true)\n    )\n  )\n\n  function colorOf(s: DStatus): 'green' | 'blue' | 'yellow' | 'red' {\n    if (s === '완료') return 'green'\n    if (s === '진행') return 'blue'\n    if (s === '지연') return 'red'\n    return 'yellow'\n  }\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Deliverables · {projectId}</h3>\n\n<Card>\n  <div class=\"mb-3 flex flex-col sm:flex-row gap-2 sm:items-center\">\n    <input\n      class=\"w-full sm:w-64 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-primary/30\"\n      placeholder=\"항목 검색\"\n      bind:value={query}\n    />\n    <select\n      class=\"w-full sm:w-48 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={status}\n    >\n      <option value=\"\">상태: 전체</option>\n      <option value=\"준비\">준비</option>\n      <option value=\"진행\">진행</option>\n      <option value=\"완료\">완료</option>\n      <option value=\"지연\">지연</option>\n    </select>\n  </div>\n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(8) as _, idx (idx)}\n        <!-- TODO: replace index key with a stable id when model provides one -->\n        <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n      {/each}\n    </div>\n  {:else}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">ID</th>\n            <th class=\"px-3 py-2\">제목</th>\n            <th class=\"px-3 py-2\">담당</th>\n            <th class=\"px-3 py-2\">마감</th>\n            <th class=\"px-3 py-2\">상태</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each filtered as d, i (i)}\n            <tr>\n              <td class=\"px-3 py-2\">{d.id}</td>\n              <td class=\"px-3 py-2\">{d.title}</td>\n              <td class=\"px-3 py-2\">{d.owner}</td>\n              <td class=\"px-3 py-2\">{d.due}</td>\n              <td class=\"px-3 py-2\"><Badge color={colorOf(d.status)}>{d.status}</Badge></td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/if}\n</Card>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/expenses/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":103,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":103,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[3088,3089],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import { page } from '$app/state'\n  import { expenseDocsStore } from '$lib/stores/rnd'\n  import { formatKRW } from '$lib/utils/format'\n  import type { ExpenseDocument } from '$lib/types'\n  import { goto } from '$app/navigation'\n\n  const projectId = page.params.projectId as string\n  const all = $derived($expenseDocsStore.filter(d => d.projectId === projectId))\n\n  let status = $state('') as '' | '대기' | '승인' | '반려'\n  let query = $state('')\n\n  // read initial from URL\n  let lastQuery = $state('')\n  if (typeof window !== 'undefined') {\n    const sp = new URLSearchParams(window.location.search)\n    status = (sp.get('status') as typeof status) ?? ''\n    query = sp.get('q') ?? ''\n    lastQuery = sp.toString()\n  }\n\n  // sync to URL\n  $effect(() => {\n    if (typeof window !== 'undefined') {\n      const sp = new URLSearchParams(window.location.search)\n      if (status) sp.set('status', status)\n      else sp.delete('status')\n      if (query) sp.set('q', query)\n      else sp.delete('q')\n      const newQuery = sp.toString()\n      if (newQuery !== lastQuery) {\n        lastQuery = newQuery\n        goto(`${window.location.pathname}?${newQuery}`, {\n          replaceState: true,\n          keepFocus: true,\n          noScroll: true\n        })\n      }\n    }\n  })\n\n  const filtered = $derived(\n    all.filter(\n      d =>\n        (status ? d.status === status : true) &&\n          (query ? d.title.includes(query) || d.id.includes(query) : true)\n    )\n  )\n\n  // 간단한 컴플라이언스 규칙\n  const requiredAttachments: Record<string, number> = {\n    인건비: 2,\n    재료비: 1,\n    연구활동비: 1,\n    여비: 2\n  }\n  const requiredDocNames: Record<string, string[]> = {\n    인건비: ['급여명세서', '4대보험 납부확인'],\n    재료비: ['세금계산서'],\n    연구활동비: ['증빙서류'],\n    여비: ['영수증', '출장보고서']\n  }\n  function isCompliant(d: ExpenseDocument): boolean {\n    const min = requiredAttachments[d.category] ?? 0\n    return (d.attachments ?? 0) >= min\n  }\n  function missingDocs(d: ExpenseDocument): string[] {\n    const req = requiredDocNames[d.category] ?? []\n    const have = d.attachments ?? 0\n    return have >= req.length ? [] : req.slice(have)\n  }\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Project Expenses · {projectId}</h3>\n\n<Card>\n  <div class=\"mb-3 flex flex-col sm:flex-row gap-2 sm:items-center\">\n    <input\n      class=\"w-full sm:w-64 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-primary/30\"\n      placeholder=\"문서 검색\"\n      bind:value={query}\n    />\n    <select\n      class=\"w-full sm:w-48 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={status}\n    >\n      <option value=\"\">상태: 전체</option>\n      <option value=\"대기\">대기</option>\n      <option value=\"승인\">승인</option>\n      <option value=\"반려\">반려</option>\n    </select>\n  </div>\n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(8) as _, idx (idx)}\n        <!-- TODO: replace index key with a stable id when model provides one -->\n        <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n      {/each}\n    </div>\n  {:else}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">문서번호</th>\n            <th class=\"px-3 py-2\">제목</th>\n            <th class=\"px-3 py-2\">분류</th>\n            <th class=\"px-3 py-2\">분기</th>\n            <th class=\"px-3 py-2\">금액</th>\n            <th class=\"px-3 py-2\">첨부</th>\n            <th class=\"px-3 py-2\">상태</th>\n            <th class=\"px-3 py-2\">컴플라이언스</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each filtered as d, i (i)}\n            <tr>\n              <td class=\"px-3 py-2\">{d.id}</td>\n              <td class=\"px-3 py-2\">{d.title}</td>\n              <td class=\"px-3 py-2\">{d.category}</td>\n              <td class=\"px-3 py-2\">{d.quarter}Q</td>\n              <td class=\"px-3 py-2\">{d.amountKRW ? formatKRW(d.amountKRW) : '-'}</td>\n              <td class=\"px-3 py-2\">{d.attachments}</td>\n              <td class=\"px-3 py-2\"\n              ><Badge color={d.status === '대기' ? 'yellow' : d.status === '반려' ? 'red' : 'green'}\n              >{d.status}</Badge\n              ></td\n              >\n              <td class=\"px-3 py-2\">\n                {#if isCompliant(d)}\n                  <Badge color=\"green\">충족</Badge>\n                {:else}\n                  <Badge color=\"red\">미비: {missingDocs(d).join(', ')}</Badge>\n                {/if}\n              </td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/if}\n</Card>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/personnel/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":94,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":94,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[3157,3158],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Card from '$lib/components/ui/Card.svelte'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Progress from '$lib/components/ui/Progress.svelte'\n  import { page } from '$app/state'\n  import { projectsStore, quarterlyPersonnelBudgets } from '$lib/stores/rnd'\n  import { personnelStore } from '$lib/stores/personnel'\n  import { formatKRW } from '$lib/utils/format'\n  import type { Personnel } from '$lib/types'\n\n  const projectId = page.params.projectId as string\n  const project = $derived($projectsStore.find(p => p.id === projectId))\n  const people = $derived(\n    $personnelStore.filter(p => p.participations.some(pp => pp.projectId === projectId))\n  )\n\n  function currentQuarterLabel(): string {\n    const d = new Date()\n    const y = d.getFullYear()\n    const qn = Math.floor(d.getMonth() / 3) + 1\n    return `${y}-Q${qn}`\n  }\n  let quarter = $state(currentQuarterLabel())\n  const budgetMap = $derived(\n    ($quarterlyPersonnelBudgets[projectId as string] ?? {}) as Record<string, number>\n  )\n\n  function allocOf(person: Personnel): number {\n    const pp = person.participations.find(x => x.projectId === projectId)\n    return pp ? pp.allocationPct : 0\n  }\n  function quarterCost(person: Personnel): number {\n    const breakdown =\n      person.participations.find(x => x.projectId === projectId)?.quarterlyBreakdown?.[quarter] ?? 0\n    if (breakdown > 0) return breakdown\n    const alloc = allocOf(person)\n    const est = ((person.annualSalaryKRW ?? 0) * (alloc / 100)) / 4\n    return Math.round(est)\n  }\n  function quarterBudget(person: Personnel): number {\n    const alloc = allocOf(person)\n    const base = budgetMap?.[quarter] ?? 0\n    return Math.round(base * (alloc / 100))\n  }\n\n  const totalBudget = $derived(\n    Object.entries(budgetMap).reduce((s, [k, v]) => (k === quarter ? s + v : s), 0)\n  )\n  const totalCost = $derived(people.reduce((s, p) => s + quarterCost(p), 0))\n  const util = $derived(totalBudget > 0 ? Math.round((totalCost / totalBudget) * 100) : 0)\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Project Personnel · {projectId}</h3>\n\n{#if !project}\n  <div class=\"text-sm text-red-700\">프로젝트를 찾을 수 없습니다.</div>\n{:else}\n  <div class=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">분기 예산</div>\n          <div class=\"text-2xl font-bold\">{formatKRW(budgetMap?.[quarter] ?? 0)}</div>\n        </div>\n      </div>\n    </Card>\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">분기 추정 인건비</div>\n          <div class=\"text-2xl font-bold\">{formatKRW(totalCost)}</div>\n        </div>\n      </div>\n    </Card>\n    <Card>\n      <div class=\"kpi\">\n        <div>\n          <div class=\"text-caption\">예산 대비</div>\n          <div class=\"text-2xl font-bold\">{util}%</div>\n          <div class=\"mt-3\"><Progress value={util} /></div>\n        </div>\n      </div>\n    </Card>\n  </div>\n\n  <Card header=\"참여 인력\">\n    {#if loading}\n      <div class=\"space-y-2\">\n        {#each Array(8) as _, idx (idx)}\n          <!-- TODO: replace index key with a stable id when model provides one -->\n          <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n        {/each}\n      </div>\n    {:else}\n      <div class=\"overflow-auto\">\n        <table class=\"min-w-full text-sm\">\n          <thead class=\"bg-gray-50 text-left text-gray-600\">\n            <tr>\n              <th class=\"px-3 py-2\">사번</th>\n              <th class=\"px-3 py-2\">이름</th>\n              <th class=\"px-3 py-2\">참여율</th>\n              <th class=\"px-3 py-2\">{quarter} 인건비</th>\n              <th class=\"px-3 py-2\">예산대비</th>\n            </tr>\n          </thead>\n          <tbody class=\"divide-y\">\n            {#each people as p, i (i)}\n              {@const alloc = allocOf(p)}\n              {@const qc = quarterCost(p)}\n              {@const qb = quarterBudget(p)}\n              {@const ratio = qb > 0 ? Math.round((qc / qb) * 100) : 0}\n              <tr>\n                <td class=\"px-3 py-2\">{p.id}</td>\n                <td class=\"px-3 py-2\">{p.name}</td>\n                <td class=\"px-3 py-2 tabular-nums\">{alloc}%</td>\n                <td class=\"px-3 py-2\">{formatKRW(qc)}</td>\n                <td class=\"px-3 py-2\">\n                  {#if qb > 0}\n                    <Badge\n                      color={ratio >= 100\n                        ? 'red'\n                        : ratio >= 95\n                        ? 'yellow'\n                        : ratio >= 80\n                        ? 'yellow'\n                        : 'green'}>{ratio}%</Badge\n                    >\n                  {:else}\n                    -\n                  {/if}\n                </td>\n              </tr>\n            {/each}\n          </tbody>\n        </table>\n      </div>\n    {/if}\n  </Card>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/projects/[projectId]/reports/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":123,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":123,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[3537,3538],"text":""},"desc":"Remove unused variable '_'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { goto } from '$app/navigation'\n  import { page } from '$app/state'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n\n  type RStatus = '작성중' | '제출' | '반려'\n  interface Report {\n    id: string\n    title: string\n    status: RStatus\n    period: string\n    submittedAt?: string\n  }\n\n  const projectId = page.params.projectId as string\n  let items: Report[] = [\n    {\n      id: `${projectId}-R1`,\n      title: '9월 월간 진도보고',\n      status: '제출',\n      period: '2025-09',\n      submittedAt: '2025-10-02'\n    },\n    { id: `${projectId}-R2`, title: '10월 월간 진도보고', status: '작성중', period: '2025-10' },\n    {\n      id: `${projectId}-R3`,\n      title: '분기 성과보고(Q3)',\n      status: '반려',\n      period: '2025-Q3',\n      submittedAt: '2025-10-05'\n    }\n  ]\n\n  let status = $state('') as '' | RStatus\n  let query = $state('')\n\n  let lastQuery = $state('')\n  if (typeof window !== 'undefined') {\n    const sp = new URLSearchParams(window.location.search)\n    status = (sp.get('status') as typeof status) ?? ''\n    query = sp.get('q') ?? ''\n    lastQuery = sp.toString()\n  }\n  $effect(() => {\n    if (typeof window !== 'undefined') {\n      const sp = new URLSearchParams(window.location.search)\n      if (status) sp.set('status', status)\n      else sp.delete('status')\n      if (query) sp.set('q', query)\n      else sp.delete('q')\n      const newQuery = sp.toString()\n      if (newQuery !== lastQuery) {\n        lastQuery = newQuery\n        goto(`${window.location.pathname}?${newQuery}`, {\n          replaceState: true,\n          keepFocus: true,\n          noScroll: true\n        })\n      }\n    }\n  })\n\n  const filtered = $derived(\n    items.filter(\n      r => (status ? r.status === status : true) && (query ? r.title.includes(query) : true)\n    )\n  )\n\n  function colorOf(s: RStatus): 'green' | 'blue' | 'yellow' | 'red' {\n    if (s === '제출') return 'green'\n    if (s === '작성중') return 'blue'\n    if (s === '반려') return 'red'\n    return 'yellow'\n  }\n\n  let loading = $state(true)\n  if (typeof window !== 'undefined') {\n    setTimeout(() => (loading = false), 300)\n  }\n\n  function exportCSV() {\n    const header = 'id,title,status,period,submittedAt\\n'\n    const rows = filtered\n      .map(r => `${r.id},${r.title},${r.status},${r.period},${r.submittedAt ?? ''}`)\n      .join('\\n')\n    const blob = new Blob([header + rows], { type: 'text/csv;charset=utf-8;' })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = `${projectId}-reports.csv`\n    a.click()\n    URL.revokeObjectURL(url)\n  }\n</script>\n\n<h3 class=\"text-lg font-semibold mb-3\">Progress Reports · {projectId}</h3>\n\n<Card>\n  <div class=\"mb-3 flex flex-col sm:flex-row gap-2 sm:items-center\">\n    <input\n      class=\"w-full sm:w-64 rounded-md border border-gray-200 bg-white px-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-primary/30\"\n      placeholder=\"보고서 검색\"\n      bind:value={query}\n    />\n    <select\n      class=\"w-full sm:w-48 rounded-md border border-gray-200 bg-white px-2 py-1.5 text-sm\"\n      bind:value={status}\n    >\n      <option value=\"\">상태: 전체</option>\n      <option value=\"작성중\">작성중</option>\n      <option value=\"제출\">제출</option>\n      <option value=\"반려\">반려</option>\n    </select>\n    <button\n      type=\"button\"\n      class=\"ml-auto px-3 py-1.5 rounded-md border bg-white hover:bg-gray-50\"\n      onclick={exportCSV}>CSV 내보내기</button\n    >\n  </div>\n  {#if loading}\n    <div class=\"space-y-2\">\n      {#each Array(8) as _, idx (idx)}\n        <!-- TODO: replace index key with a stable id when model provides one -->\n        <div class=\"h-8 bg-gray-100 animate-pulse rounded\"></div>\n      {/each}\n    </div>\n  {:else}\n    <div class=\"overflow-auto\">\n      <table class=\"min-w-full text-sm\">\n        <thead class=\"bg-gray-50 text-left text-gray-600\">\n          <tr>\n            <th class=\"px-3 py-2\">ID</th>\n            <th class=\"px-3 py-2\">제목</th>\n            <th class=\"px-3 py-2\">기간</th>\n            <th class=\"px-3 py-2\">제출일</th>\n            <th class=\"px-3 py-2\">상태</th>\n          </tr>\n        </thead>\n        <tbody class=\"divide-y\">\n          {#each filtered as r, i (i)}\n            <tr>\n              <td class=\"px-3 py-2\">{r.id}</td>\n              <td class=\"px-3 py-2\">{r.title}</td>\n              <td class=\"px-3 py-2\">{r.period}</td>\n              <td class=\"px-3 py-2\">{r.submittedAt ?? '-'}</td>\n              <td class=\"px-3 py-2\"><Badge color={colorOf(r.status)}>{r.status}</Badge></td>\n            </tr>\n          {/each}\n        </tbody>\n      </table>\n    </div>\n  {/if}\n</Card>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/project-management/reports/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/reports/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/+layout.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getHealthText' is defined but never used.","line":193,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":193,"endColumn":25,"suggestions":[{"messageId":"removeVar","data":{"varName":"getHealthText"},"fix":{"range":[4044,4273],"text":""},"desc":"Remove unused variable 'getHealthText'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getHealthColor' is defined but never used.","line":207,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":207,"endColumn":26,"suggestions":[{"messageId":"removeVar","data":{"varName":"getHealthColor"},"fix":{"range":[4291,4613],"text":""},"desc":"Remove unused variable 'getHealthColor'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import SimpleChart from '$lib/components/ui/SimpleChart.svelte'\n  import { initializeDummyData } from '$lib/stores/rnd/init-dummy-data'\n  import { ExternalLinkIcon } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  // 대시보드 데이터\n  let dashboardData = $state({\n    // 프로젝트 현황\n    projects: {\n      total: 0,\n      active: 0,\n      completed: 0,\n      atRisk: 0\n    },\n    // 예산 현황\n    budget: {\n      totalAllocated: 0,\n      spent: 0,\n      remaining: 0,\n      utilizationRate: 0\n    },\n    // 인력 현황\n    personnel: {\n      total: 0,\n      active: 0,\n      onLeave: 0,\n      utilizationRate: 0\n    },\n    // 지출 현황\n    expenses: {\n      pending: 0,\n      approved: 0,\n      rejected: 0,\n      totalAmount: 0\n    },\n    // 연구노트 현황\n    researchNotes: {\n      submitted: 0,\n      pending: 0,\n      overdue: 0\n    },\n    // 결재 현황\n    approvals: {\n      pending: 0,\n      completed: 0,\n      overdue: 0\n    }\n  })\n\n  // 최근 활동\n  let recentActivities = $state<any[]>([])\n\n  // 알림 및 경고\n  let alerts = $state<any[]>([])\n\n  // 헬스 인디케이터\n  let healthIndicators = $state({\n    overall: 'green',\n    schedule: 85,\n    budget: 92,\n    people: 78,\n    risk: 15\n  })\n\n  // 차트 데이터\n  let projectStatusData = $derived(() => [\n    { label: '진행중', value: dashboardData.projects.active, color: '#3B82F6' },\n    { label: '완료', value: dashboardData.projects.completed, color: '#10B981' },\n    { label: '위험', value: dashboardData.projects.atRisk, color: '#EF4444' }\n  ])\n\n  let budgetUtilizationData = $derived(() => [\n    { label: '사용', value: dashboardData.budget.spent, color: '#F59E0B' },\n    { label: '잔여', value: dashboardData.budget.remaining, color: '#6B7280' }\n  ])\n\n  // 대시보드 데이터 로드\n  async function loadDashboardData() {\n    // 실제로는 API에서 데이터를 가져옴\n    // 여기서는 더미 데이터로 시뮬레이션\n    dashboardData = {\n      projects: {\n        total: 15,\n        active: 8,\n        completed: 5,\n        atRisk: 2\n      },\n      budget: {\n        totalAllocated: 2500000000, // 25억원\n        spent: 1800000000, // 18억원\n        remaining: 700000000, // 7억원\n        utilizationRate: 72\n      },\n      personnel: {\n        total: 45,\n        active: 42,\n        onLeave: 3,\n        utilizationRate: 93\n      },\n      expenses: {\n        pending: 12,\n        approved: 156,\n        rejected: 3,\n        totalAmount: 450000000 // 4.5억원\n      },\n      researchNotes: {\n        submitted: 180,\n        pending: 8,\n        overdue: 2\n      },\n      approvals: {\n        pending: 5,\n        completed: 89,\n        overdue: 1\n      }\n    }\n\n    recentActivities = [\n      {\n        id: 1,\n        type: 'expense',\n        title: 'AI 프로젝트 재료비 지출 승인',\n        user: '김연구',\n        time: '2시간 전',\n        status: 'approved'\n      },\n      {\n        id: 2,\n        type: 'milestone',\n        title: 'Q4 마일스톤 달성',\n        user: '박PM',\n        time: '4시간 전',\n        status: 'completed'\n      },\n      {\n        id: 3,\n        type: 'research_note',\n        title: '주간 연구노트 제출',\n        user: '이연구',\n        time: '6시간 전',\n        status: 'submitted'\n      },\n      {\n        id: 4,\n        type: 'approval',\n        title: '특허출원비 결재 완료',\n        user: '최경영',\n        time: '1일 전',\n        status: 'approved'\n      },\n      {\n        id: 5,\n        type: 'alert',\n        title: '예산 소진률 80% 초과 경고',\n        user: '시스템',\n        time: '2일 전',\n        status: 'warning'\n      }\n    ]\n\n    alerts = [\n      {\n        id: 1,\n        type: 'warning',\n        title: '예산 소진률 경고',\n        message: 'AI 프로젝트의 예산 소진률이 85%에 도달했습니다.',\n        priority: 'high',\n        time: '1시간 전'\n      },\n      {\n        id: 2,\n        type: 'info',\n        title: '연구노트 제출 마감',\n        message: '3명의 연구원이 아직 주간 연구노트를 제출하지 않았습니다.',\n        priority: 'medium',\n        time: '3시간 전'\n      },\n      {\n        id: 3,\n        type: 'error',\n        title: '결재 지연',\n        message: '특허출원비 결재가 SLA를 초과했습니다.',\n        priority: 'high',\n        time: '5시간 전'\n      }\n    ]\n  }\n\n  // 헬스 상태 텍스트\n  function getHealthText(status: string) {\n    switch (status) {\n      case 'green':\n        return '양호'\n      case 'amber':\n        return '주의'\n      case 'red':\n        return '위험'\n      default:\n        return '알 수 없음'\n    }\n  }\n\n  // 헬스 상태 색상\n  function getHealthColor(status: string) {\n    switch (status) {\n      case 'green':\n        return 'text-green-600 bg-green-100'\n      case 'amber':\n        return 'text-yellow-600 bg-yellow-100'\n      case 'red':\n        return 'text-red-600 bg-red-100'\n      default:\n        return 'text-gray-600 bg-gray-100'\n    }\n  }\n\n  // 활동 타입 아이콘\n  function getActivityIcon(type: string) {\n    switch (type) {\n      case 'expense':\n        return '💳'\n      case 'milestone':\n        return '🎯'\n      case 'research_note':\n        return '📝'\n      case 'approval':\n        return '✅'\n      case 'alert':\n        return '⚠️'\n      default:\n        return '📋'\n    }\n  }\n\n  // 알림 타입 색상\n  function getAlertColor(type: string) {\n    switch (type) {\n      case 'warning':\n        return 'border-yellow-200 bg-yellow-50'\n      case 'info':\n        return 'border-blue-200 bg-blue-50'\n      case 'error':\n        return 'border-red-200 bg-red-50'\n      default:\n        return 'border-gray-200 bg-gray-50'\n    }\n  }\n\n  // 금액 포맷팅\n  function formatCurrency(amount: number) {\n    return new Intl.NumberFormat('ko-KR', {\n      style: 'currency',\n      currency: 'KRW',\n      minimumFractionDigits: 0\n    }).format(amount)\n  }\n\n  onMount(() => {\n    // 더미데이터 초기화\n    initializeDummyData()\n    loadDashboardData()\n  })\n</script>\n\n<div class=\"space-y-6\">\n  <!-- 페이지 헤더 -->\n  <div class=\"flex justify-between items-center\">\n    <div>\n      <h1 class=\"text-3xl font-bold text-gray-900\">R&D 통합관리 대시보드</h1>\n      <p class=\"mt-2 text-gray-600\">경영지원팀 - 전체 프로젝트 현황 및 모니터링</p>\n    </div>\n    <div class=\"flex items-center space-x-4\">\n      <a\n        href=\"/rnd/rnd-asw\"\n        class=\"inline-flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n      >\n        <ExternalLinkIcon size={16} class=\"mr-2\" />\n        RND-ASW 프로젝트\n      </a>\n      <button\n        type=\"button\"\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\"\n      >\n        새 프로젝트 생성\n      </button>\n      <button\n        type=\"button\"\n        class=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors\"\n      >\n        리포트 생성\n      </button>\n    </div>\n  </div>\n\n  <!-- 헬스 인디케이터 -->\n  <div class=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n    <Card>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between\">\n          <div>\n            <p class=\"text-sm font-medium text-gray-600\">일정 관리</p>\n            <p class=\"text-2xl font-bold text-gray-900\">{healthIndicators.schedule}점</p>\n          </div>\n          <div class=\"h-12 w-12 bg-blue-100 rounded-full flex items-center justify-center\">\n            <span class=\"text-blue-600 font-bold\">📅</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n\n    <Card>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between\">\n          <div>\n            <p class=\"text-sm font-medium text-gray-600\">예산 관리</p>\n            <p class=\"text-2xl font-bold text-gray-900\">{healthIndicators.budget}점</p>\n          </div>\n          <div class=\"h-12 w-12 bg-green-100 rounded-full flex items-center justify-center\">\n            <span class=\"text-green-600 font-bold\">💰</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n\n    <Card>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between\">\n          <div>\n            <p class=\"text-sm font-medium text-gray-600\">인력 관리</p>\n            <p class=\"text-2xl font-bold text-gray-900\">{healthIndicators.people}점</p>\n          </div>\n          <div class=\"h-12 w-12 bg-yellow-100 rounded-full flex items-center justify-center\">\n            <span class=\"text-yellow-600 font-bold\">👥</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n\n    <Card>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between\">\n          <div>\n            <p class=\"text-sm font-medium text-gray-600\">리스크 관리</p>\n            <p class=\"text-2xl font-bold text-gray-900\">{healthIndicators.risk}점</p>\n          </div>\n          <div class=\"h-12 w-12 bg-red-100 rounded-full flex items-center justify-center\">\n            <span class=\"text-red-600 font-bold\">⚠️</span>\n          </div>\n        </div>\n      </div>\n    </Card>\n  </div>\n\n  <!-- 주요 지표 -->\n  <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n    <!-- 프로젝트 현황 -->\n    <Card>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">프로젝트 현황</h3>\n        <div class=\"space-y-4\">\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">전체 프로젝트</span>\n            <span class=\"text-lg font-semibold text-gray-900\">{dashboardData.projects.total}개</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">진행중</span>\n            <span class=\"text-lg font-semibold text-blue-600\"\n            >{dashboardData.projects.active}개</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">완료</span>\n            <span class=\"text-lg font-semibold text-green-600\"\n            >{dashboardData.projects.completed}개</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">위험</span>\n            <span class=\"text-lg font-semibold text-red-600\">{dashboardData.projects.atRisk}개</span\n            >\n          </div>\n        </div>\n        <div class=\"mt-4\">\n          <SimpleChart data={projectStatusData()} type=\"pie\" />\n        </div>\n      </div>\n    </Card>\n\n    <!-- 예산 현황 -->\n    <Card>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">예산 현황</h3>\n        <div class=\"space-y-4\">\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">총 배정 예산</span>\n            <span class=\"text-lg font-semibold text-gray-900\"\n            >{formatCurrency(dashboardData.budget.totalAllocated)}</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">사용 금액</span>\n            <span class=\"text-lg font-semibold text-blue-600\"\n            >{formatCurrency(dashboardData.budget.spent)}</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">잔여 금액</span>\n            <span class=\"text-lg font-semibold text-green-600\"\n            >{formatCurrency(dashboardData.budget.remaining)}</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">사용률</span>\n            <span class=\"text-lg font-semibold text-orange-600\"\n            >{dashboardData.budget.utilizationRate}%</span\n            >\n          </div>\n        </div>\n        <div class=\"mt-4\">\n          <SimpleChart data={budgetUtilizationData()} type=\"pie\" />\n        </div>\n      </div>\n    </Card>\n  </div>\n\n  <!-- 인력 및 지출 현황 -->\n  <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n    <!-- 인력 현황 -->\n    <Card>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">인력 현황</h3>\n        <div class=\"space-y-4\">\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">전체 인력</span>\n            <span class=\"text-lg font-semibold text-gray-900\"\n            >{dashboardData.personnel.total}명</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">활성 인력</span>\n            <span class=\"text-lg font-semibold text-green-600\"\n            >{dashboardData.personnel.active}명</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">휴가/부재</span>\n            <span class=\"text-lg font-semibold text-yellow-600\"\n            >{dashboardData.personnel.onLeave}명</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">활용률</span>\n            <span class=\"text-lg font-semibold text-blue-600\"\n            >{dashboardData.personnel.utilizationRate}%</span\n            >\n          </div>\n        </div>\n      </div>\n    </Card>\n\n    <!-- 지출 현황 -->\n    <Card>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">지출 현황</h3>\n        <div class=\"space-y-4\">\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">대기중</span>\n            <span class=\"text-lg font-semibold text-yellow-600\"\n            >{dashboardData.expenses.pending}건</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">승인</span>\n            <span class=\"text-lg font-semibold text-green-600\"\n            >{dashboardData.expenses.approved}건</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">거부</span>\n            <span class=\"text-lg font-semibold text-red-600\"\n            >{dashboardData.expenses.rejected}건</span\n            >\n          </div>\n          <div class=\"flex justify-between items-center\">\n            <span class=\"text-sm text-gray-600\">총 지출액</span>\n            <span class=\"text-lg font-semibold text-gray-900\"\n            >{formatCurrency(dashboardData.expenses.totalAmount)}</span\n            >\n          </div>\n        </div>\n      </div>\n    </Card>\n  </div>\n\n  <!-- 알림 및 최근 활동 -->\n  <div class=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n    <!-- 알림 -->\n    <Card>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">알림 및 경고</h3>\n        <div class=\"space-y-3\">\n          {#each alerts as alert, i (i)}\n            <div class=\"p-3 rounded-lg border {getAlertColor(alert.type)}\">\n              <div class=\"flex items-start justify-between\">\n                <div class=\"flex-1\">\n                  <p class=\"text-sm font-medium text-gray-900\">{alert.title}</p>\n                  <p class=\"text-xs text-gray-600 mt-1\">{alert.message}</p>\n                  <p class=\"text-xs text-gray-500 mt-1\">{alert.time}</p>\n                </div>\n                <Badge variant={alert.priority === 'high' ? 'danger' : 'warning'}>\n                  {alert.priority === 'high' ? '높음' : '보통'}\n                </Badge>\n              </div>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </Card>\n\n    <!-- 최근 활동 -->\n    <Card>\n      <div class=\"p-6\">\n        <h3 class=\"text-lg font-semibold text-gray-900 mb-4\">최근 활동</h3>\n        <div class=\"space-y-3\">\n          {#each recentActivities as activity, i (i)}\n            <div class=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors\"\n            >\n              <div class=\"text-2xl\">{getActivityIcon(activity.type)}</div>\n              <div class=\"flex-1\">\n                <p class=\"text-sm font-medium text-gray-900\">{activity.title}</p>\n                <p class=\"text-xs text-gray-600\">{activity.user} • {activity.time}</p>\n              </div>\n              <Badge\n                variant={activity.status === 'approved' || activity.status === 'completed'\n                  ? 'success'\n                  : 'warning'}\n              >\n                {activity.status === 'approved'\n                  ? '승인'\n                  : activity.status === 'completed'\n                  ? '완료'\n                  : activity.status === 'submitted'\n                  ? '제출'\n                  : activity.status === 'warning'\n                  ? '경고'\n                  : '대기'}\n              </Badge>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </Card>\n  </div>\n</div>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/expenses/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/milestones/+page.svelte","messages":[{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":394,"column":5,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":494,"endColumn":12}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { employees, projects } from '$lib/stores/rd'\n  import { onMount } from 'svelte'\n\n  interface Milestone {\n    id: string\n    title: string\n    description: string\n    projectId: string\n    ownerId: string\n    dueDate: string\n    status: 'pending' | 'in_progress' | 'completed' | 'overdue'\n    priority: 'low' | 'medium' | 'high' | 'critical'\n    progress: number\n    dependencies: string[]\n    quarter: string\n    deliverables: Array<{\n      name: string\n      status: string\n      dueDate: string\n    }>\n    kpis: Array<{\n      name: string\n      target: string\n      unit: string\n      current: number\n    }>\n    createdAt: string\n    updatedAt: string\n  }\n\n  // Mock milestones data\n  let milestones = $state<any[]>([\n    {\n      id: 'milestone-1',\n      projectId: 'project-1',\n      quarter: '2024-Q1',\n      title: 'AI 모델 프로토타입 개발',\n      description: '기본 AI 모델 아키텍처 설계 및 프로토타입 구현',\n      kpis: [\n        { name: '모델 정확도', target: '85%', current: 82, unit: '%' },\n        { name: '처리 속도', target: '100ms', current: 120, unit: 'ms' },\n        { name: '메모리 사용량', target: '2GB', current: 2.1, unit: 'GB' }\n      ],\n      deliverables: [\n        { name: 'AI 모델 설계서', status: 'completed', dueDate: '2024-01-15' },\n        { name: '프로토타입 코드', status: 'in_progress', dueDate: '2024-02-28' },\n        { name: '성능 테스트 보고서', status: 'pending', dueDate: '2024-03-15' }\n      ],\n      ownerId: 'person-1',\n      dueDate: '2024-03-31',\n      status: 'in_progress',\n      priority: 'high',\n      progress: 75,\n      dependencies: [],\n      createdAt: '2024-01-01T00:00:00Z',\n      updatedAt: '2024-01-15T10:30:00Z'\n    },\n    {\n      id: 'milestone-2',\n      projectId: 'project-1',\n      quarter: '2024-Q2',\n      title: '데이터 파이프라인 구축',\n      description: '대용량 데이터 처리 및 전처리 파이프라인 개발',\n      kpis: [\n        { name: '데이터 처리량', target: '1TB/day', current: 800, unit: 'GB/day' },\n        { name: '처리 시간', target: '2시간', current: 2.5, unit: '시간' },\n        { name: '에러율', target: '0.1%', current: 0.2, unit: '%' }\n      ],\n      deliverables: [\n        { name: '파이프라인 설계서', status: 'pending', dueDate: '2024-04-15' },\n        { name: 'ETL 코드', status: 'pending', dueDate: '2024-05-30' },\n        { name: '모니터링 대시보드', status: 'pending', dueDate: '2024-06-15' }\n      ],\n      ownerId: 'person-2',\n      dueDate: '2024-06-30',\n      status: 'pending',\n      priority: 'medium',\n      progress: 0,\n      dependencies: [],\n      createdAt: '2024-01-01T00:00:00Z',\n      updatedAt: '2024-01-01T00:00:00Z'\n    },\n    {\n      id: 'milestone-3',\n      projectId: 'project-2',\n      quarter: '2024-Q1',\n      title: '사용자 인터페이스 설계',\n      description: '웹 기반 사용자 인터페이스 설계 및 프로토타입 개발',\n      kpis: [\n        { name: '사용자 만족도', target: '4.5/5', current: 4.2, unit: '/5' },\n        { name: '페이지 로딩 시간', target: '2초', current: 2.3, unit: '초' },\n        { name: '접근성 점수', target: '95점', current: 92, unit: '점' }\n      ],\n      deliverables: [\n        { name: 'UI/UX 설계서', status: 'completed', dueDate: '2024-01-30' },\n        { name: '프로토타입', status: 'completed', dueDate: '2024-02-15' },\n        { name: '사용성 테스트 보고서', status: 'in_progress', dueDate: '2024-03-31' }\n      ],\n      ownerId: 'person-3',\n      dueDate: '2024-03-31',\n      status: 'in_progress',\n      priority: 'high',\n      progress: 80,\n      dependencies: [],\n      createdAt: '2024-01-01T00:00:00Z',\n      updatedAt: '2024-02-20T14:15:00Z'\n    }\n  ])\n\n  let selectedMilestone = $state<Milestone | null>(null)\n  let showDetailModal = $state(false)\n  let showCreateModal = $state(false)\n  let searchTerm = $state('')\n  let selectedProject = $state<string>('all')\n  let selectedQuarter = $state<string>('all')\n  let selectedStatus = $state<string>('all')\n\n  // Form data for creating new milestone\n  let formData = $state({\n    projectId: '',\n    quarter: '',\n    title: '',\n    description: '',\n    ownerId: '',\n    dueDate: '',\n    kpis: [] as Array<{ name: string; target: string; unit: string }>,\n    deliverables: [] as Array<{ name: string; dueDate: string }>\n  })\n\n  // Get filtered milestones\n  let filteredMilestones = $derived(() => {\n    let filtered = milestones\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        milestone =>\n          milestone.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            milestone.description.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    if (selectedProject !== 'all') {\n      filtered = filtered.filter(milestone => milestone.projectId === selectedProject)\n    }\n\n    if (selectedQuarter !== 'all') {\n      filtered = filtered.filter(milestone => milestone.quarter === selectedQuarter)\n    }\n\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(milestone => milestone.status === selectedStatus)\n    }\n\n    return filtered.sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n  })\n\n  // Get unique quarters for filter\n  let availableQuarters = $derived(() => {\n    const quarters = [...new Set(milestones.map(m => m.quarter))]\n    return quarters.sort()\n  })\n\n  // Get person name by ID\n  function getPersonName(personId: string): string {\n    const person = $employees.find(p => p.id === personId)\n    return person ? person.name : 'Unknown'\n  }\n\n  // Get project name by ID\n  function getProjectName(projectId: string): string {\n    const project = $projects.find((p: any) => p.id === projectId)\n    return project ? project.name : 'Unknown Project'\n  }\n\n  // Show milestone detail\n  function showMilestoneDetail(milestone: Milestone) {\n    selectedMilestone = milestone\n    showDetailModal = true\n  }\n\n  // Create new milestone\n  function createMilestone() {\n    if (\n      !formData.projectId ||\n      !formData.quarter ||\n      !formData.title ||\n      !formData.ownerId ||\n      !formData.dueDate\n    ) {\n      alert('모든 필수 필드를 입력해주세요.')\n      return\n    }\n\n    const newMilestone: Milestone = {\n      id: `milestone-${Date.now()}`,\n      projectId: formData.projectId,\n      quarter: formData.quarter,\n      title: formData.title,\n      description: formData.description,\n      kpis: formData.kpis.map(kpi => ({\n        ...kpi,\n        current: 0,\n        unit: kpi.unit\n      })),\n      deliverables: formData.deliverables.map(deliverable => ({\n        ...deliverable,\n        status: 'pending' as const\n      })),\n      ownerId: formData.ownerId,\n      dueDate: formData.dueDate,\n      status: 'pending',\n      priority: 'medium',\n      progress: 0,\n      dependencies: [],\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n\n    milestones.push(newMilestone)\n\n    // Reset form\n    formData = {\n      projectId: '',\n      quarter: '',\n      title: '',\n      description: '',\n      ownerId: '',\n      dueDate: '',\n      kpis: [],\n      deliverables: []\n    }\n\n    showCreateModal = false\n  }\n\n  // Update milestone status\n  function updateMilestoneStatus(\n    milestoneId: string,\n    status: 'pending' | 'in_progress' | 'completed'\n  ) {\n    const milestone = milestones.find(m => m.id === milestoneId)\n    if (milestone) {\n      milestone.status = status\n      milestone.updatedAt = new Date().toISOString()\n    }\n  }\n\n  // Add KPI\n  function addKPI() {\n    formData.kpis.push({ name: '', target: '', unit: '' })\n  }\n\n  // Remove KPI\n  function removeKPI(index: number) {\n    formData.kpis.splice(index, 1)\n  }\n\n  // Add deliverable\n  function addDeliverable() {\n    formData.deliverables.push({ name: '', dueDate: '' })\n  }\n\n  // Remove deliverable\n  function removeDeliverable(index: number) {\n    formData.deliverables.splice(index, 1)\n  }\n\n  // Format date\n  function formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleDateString('ko-KR')\n  }\n\n  // Get status badge variant\n  function getStatusVariant(status: string): 'success' | 'warning' | 'danger' {\n    switch (status) {\n      case 'completed':\n        return 'success'\n      case 'in_progress':\n        return 'warning'\n      default:\n        return 'danger'\n    }\n  }\n\n  // Get status text\n  function getStatusText(status: string): string {\n    switch (status) {\n      case 'completed':\n        return '완료'\n      case 'in_progress':\n        return '진행중'\n      default:\n        return '대기'\n    }\n  }\n\n  // Calculate progress percentage\n  function calculateProgress(milestone: Milestone): number {\n    const completed = milestone.deliverables.filter(d => d.status === 'completed').length\n    return Math.round((completed / milestone.deliverables.length) * 100) || 0\n  }\n\n  onMount(() => {\n  // Initialize dummy data if needed\n  })\n</script>\n\n<div class=\"container mx-auto p-6\">\n  <div class=\"mb-6\">\n    <h1 class=\"text-3xl font-bold text-gray-900 mb-2\">분기 목표/산출물 관리</h1>\n    <p class=\"text-gray-600\">프로젝트별 분기 목표, KPI, 산출물을 관리하고 진행상황을 추적합니다.</p>\n  </div>\n\n  <!-- Filters -->\n  <div class=\"bg-white rounded-lg shadow-sm border p-4 mb-6\">\n    <div class=\"grid grid-cols-1 md:grid-cols-6 gap-4\">\n      <div>\n        <label for=\"search\" class=\"block text-sm font-medium text-gray-700 mb-1\">검색</label>\n        <input\n          id=\"search\"\n          type=\"text\"\n          bind:value={searchTerm}\n          placeholder=\"제목 또는 설명 검색...\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"project-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트</label\n        >\n        <select\n          id=\"project-filter\"\n          bind:value={selectedProject}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label for=\"quarter-filter\" class=\"block text-sm font-medium text-gray-700 mb-1\">분기</label\n        >\n        <select\n          id=\"quarter-filter\"\n          bind:value={selectedQuarter}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each availableQuarters() as quarter, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <option value={quarter}>{quarter}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"rnd-mil-status-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >상태</label\n        >\n        <select\n          id=\"rnd-mil-status-filter\"\n          bind:value={selectedStatus}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          <option value=\"pending\">대기</option>\n          <option value=\"in_progress\">진행중</option>\n          <option value=\"completed\">완료</option>\n        </select>\n      </div>\n      <div class=\"flex items-end\">\n        <button\n          type=\"button\"\n          onclick={() => (showCreateModal = true)}\n          class=\"w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          새 마일스톤 추가\n        </button>\n      </div>\n    </div>\n  </div>\n\n  <!-- Milestones List -->\n  <div class=\"grid gap-6\">\n    {#each filteredMilestones() as milestone}\n      <Card class=\"p-6 hover:shadow-md transition-shadow\">\n        <div class=\"flex justify-between items-start mb-4\">\n          <div class=\"flex-1\">\n            <div class=\"flex items-center gap-3 mb-2\">\n              <h3 class=\"text-xl font-semibold text-gray-900\">{milestone.title}</h3>\n              <Badge variant={getStatusVariant(milestone.status)}\n              >{getStatusText(milestone.status)}</Badge\n              >\n            </div>\n            <p class=\"text-gray-600 mb-3\">{milestone.description}</p>\n            <div class=\"text-sm text-gray-500 space-y-1\">\n              <p>\n                <span class=\"font-medium\">프로젝트:</span>\n                {getProjectName(milestone.projectId)}\n              </p>\n              <p><span class=\"font-medium\">분기:</span> {milestone.quarter}</p>\n              <p><span class=\"font-medium\">담당자:</span> {getPersonName(milestone.ownerId)}</p>\n              <p><span class=\"font-medium\">마감일:</span> {formatDate(milestone.dueDate)}</p>\n            </div>\n          </div>\n          <div class=\"flex gap-2 ml-4\">\n            <button\n              type=\"button\"\n              onclick={() => showMilestoneDetail(milestone)}\n              class=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n              aria-label=\"상세보기\"\n            >\n              상세보기\n            </button>\n            {#if milestone.status === 'pending'}\n              <button\n                type=\"button\"\n                onclick={() => updateMilestoneStatus(milestone.id, 'in_progress')}\n                class=\"px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                시작\n              </button>\n            {/if}\n            {#if milestone.status === 'in_progress'}\n              <button\n                type=\"button\"\n                onclick={() => updateMilestoneStatus(milestone.id, 'completed')}\n                class=\"px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500\"\n              >\n                완료\n              </button>\n            {/if}\n          </div>\n        </div>\n\n        <!-- Progress Bar -->\n        <div class=\"mb-4\">\n          <div class=\"flex justify-between text-sm text-gray-600 mb-1\">\n            <span>진행률</span>\n            <span>{calculateProgress(milestone)}%</span>\n          </div>\n          <div class=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              class=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style:width=\"{calculateProgress(milestone)}%\"\n            ></div>\n          </div>\n        </div>\n\n        <!-- KPIs -->\n        {#if milestone.kpis.length > 0}\n          <div class=\"mb-4\">\n            <h4 class=\"font-medium text-gray-900 mb-2\">KPI 현황</h4>\n            <div class=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              {#each milestone.kpis as kpi, i (i)}\n                <div class=\"bg-gray-50 p-3 rounded-md\">\n                  <div class=\"text-sm font-medium text-gray-900\">{kpi.name}</div>\n                  <div class=\"text-sm text-gray-600\">\n                    목표: {kpi.target} | 현재: {kpi.current}\n                  </div>\n                </div>\n              {/each}\n            </div>\n          </div>\n        {/if}\n\n        <!-- Deliverables -->\n        <div>\n          <h4 class=\"font-medium text-gray-900 mb-2\">산출물 현황</h4>\n          <div class=\"space-y-2\">\n            {#each milestone.deliverables as deliverable, i (i)}\n              <div class=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n                <span class=\"text-sm text-gray-900\">{deliverable.name}</span>\n                <div class=\"flex items-center gap-2\">\n                  <Badge variant={getStatusVariant(deliverable.status)}>\n                    {getStatusText(deliverable.status)}\n                  </Badge>\n                  <span class=\"text-xs text-gray-500\">{formatDate(deliverable.dueDate)}</span>\n                </div>\n              </div>\n            {/each}\n          </div>\n        </div>\n      </Card>\n    {/each}\n  </div>\n\n  {#if filteredMilestones().length === 0}\n    <div class=\"text-center py-12\">\n      <div class=\"text-gray-400 text-6xl mb-4\">🎯</div>\n      <h3 class=\"text-lg font-medium text-gray-900 mb-2\">마일스톤이 없습니다</h3>\n      <p class=\"text-gray-500\">새로운 분기 목표를 설정해보세요.</p>\n    </div>\n  {/if}\n</div>\n\n<!-- Detail Modal -->\n<Modal bind:open={showDetailModal} title=\"마일스톤 상세\">\n  {#if selectedMilestone}\n    <div class=\"space-y-6\">\n      <div>\n        <h3 class=\"text-xl font-semibold text-gray-900 mb-2\">{selectedMilestone.title}</h3>\n        <p class=\"text-gray-600 mb-4\">{selectedMilestone.description}</p>\n        <div class=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span class=\"font-medium text-gray-700\">프로젝트:</span>\n            <span class=\"ml-2\">{getProjectName(selectedMilestone.projectId)}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">분기:</span>\n            <span class=\"ml-2\">{selectedMilestone.quarter}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">담당자:</span>\n            <span class=\"ml-2\">{getPersonName(selectedMilestone.ownerId)}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">마감일:</span>\n            <span class=\"ml-2\">{formatDate(selectedMilestone.dueDate)}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- KPIs -->\n      {#if selectedMilestone.kpis.length > 0}\n        <div>\n          <h4 class=\"font-medium text-gray-900 mb-3\">KPI 현황</h4>\n          <div class=\"space-y-3\">\n            {#each selectedMilestone.kpis as kpi, i (i)}\n              <div class=\"bg-gray-50 p-4 rounded-md\">\n                <div class=\"flex justify-between items-center mb-2\">\n                  <span class=\"font-medium text-gray-900\">{kpi.name}</span>\n                  <span class=\"text-sm text-gray-600\">{kpi.unit}</span>\n                </div>\n                <div class=\"flex justify-between text-sm text-gray-600\">\n                  <span>목표: {kpi.target}</span>\n                  <span>현재: {kpi.current}</span>\n                </div>\n              </div>\n            {/each}\n          </div>\n        </div>\n      {/if}\n\n      <!-- Deliverables -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">산출물 현황</h4>\n        <div class=\"space-y-2\">\n          {#each selectedMilestone.deliverables as deliverable, i (i)}\n            <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-md\">\n              <span class=\"text-gray-900\">{deliverable.name}</span>\n              <div class=\"flex items-center gap-3\">\n                <Badge variant={getStatusVariant(deliverable.status)}>\n                  {getStatusText(deliverable.status)}\n                </Badge>\n                <span class=\"text-sm text-gray-500\">{formatDate(deliverable.dueDate)}</span>\n              </div>\n            </div>\n          {/each}\n        </div>\n      </div>\n    </div>\n  {/if}\n</Modal>\n\n<!-- Create Modal -->\n<Modal bind:open={showCreateModal} title=\"새 마일스톤 추가\">\n  <div class=\"space-y-4\">\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-project\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트 *</label\n        >\n        <select\n          id=\"create-project\"\n          bind:value={formData.projectId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">프로젝트 선택</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-quarter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >분기 *</label\n        >\n        <input\n          id=\"create-quarter\"\n          type=\"text\"\n          bind:value={formData.quarter}\n          placeholder=\"예: 2024-Q1\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n    </div>\n    <div>\n      <label for=\"create-title\" class=\"block text-sm font-medium text-gray-700 mb-1\">제목 *</label>\n      <input\n        id=\"create-title\"\n        type=\"text\"\n        bind:value={formData.title}\n        placeholder=\"마일스톤 제목\"\n        class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      />\n    </div>\n    <div>\n      <label\n        for=\"create-description\"\n        class=\"block text-sm font-medium text-gray-700 mb-1\"\n      >설명</label\n      >\n      <textarea\n        id=\"create-description\"\n        bind:value={formData.description}\n        rows=\"3\"\n        placeholder=\"마일스톤 설명\"\n        class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      ></textarea>\n    </div>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-owner\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >담당자 *</label\n        >\n        <select\n          id=\"create-owner\"\n          bind:value={formData.ownerId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">담당자 선택</option>\n          {#each $employees as person, i (i)}\n            <option value={person.id}>{person.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-due-date\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >마감일 *</label\n        >\n        <input\n          id=\"create-due-date\"\n          type=\"date\"\n          bind:value={formData.dueDate}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n    </div>\n\n    <!-- KPIs -->\n    <div>\n      <div class=\"flex justify-between items-center mb-2\">\n        <div class=\"block text-sm font-medium text-gray-700\">KPI</div>\n        <button type=\"button\" onclick={addKPI} class=\"text-sm text-blue-600 hover:text-blue-700\">\n          + KPI 추가\n        </button>\n      </div>\n      <div class=\"space-y-2\">\n        {#each formData.kpis as kpi, index (index)}\n          <div class=\"flex gap-2 items-center\">\n            <input\n              type=\"text\"\n              bind:value={kpi.name}\n              placeholder=\"KPI 이름\"\n              class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <input\n              type=\"text\"\n              bind:value={kpi.target}\n              placeholder=\"목표값\"\n              class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <input\n              type=\"text\"\n              bind:value={kpi.unit}\n              placeholder=\"단위\"\n              class=\"w-20 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              type=\"button\"\n              onclick={() => removeKPI(index)}\n              class=\"text-red-600 hover:text-red-700\"\n            >\n              삭제\n            </button>\n          </div>\n        {/each}\n      </div>\n    </div>\n\n    <!-- Deliverables -->\n    <div>\n      <div class=\"flex justify-between items-center mb-2\">\n        <div class=\"block text-sm font-medium text-gray-700\">산출물</div>\n        <button\n          type=\"button\"\n          onclick={addDeliverable}\n          class=\"text-sm text-blue-600 hover:text-blue-700\"\n        >\n          + 산출물 추가\n        </button>\n      </div>\n      <div class=\"space-y-2\">\n        {#each formData.deliverables as deliverable, index (index)}\n          <div class=\"flex gap-2 items-center\">\n            <input\n              type=\"text\"\n              bind:value={deliverable.name}\n              placeholder=\"산출물 이름\"\n              class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <input\n              type=\"date\"\n              bind:value={deliverable.dueDate}\n              class=\"px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              type=\"button\"\n              onclick={() => removeDeliverable(index)}\n              class=\"text-red-600 hover:text-red-700\"\n            >\n              삭제\n            </button>\n          </div>\n        {/each}\n      </div>\n    </div>\n\n    <div class=\"flex justify-end gap-2 pt-4\">\n      <button\n        type=\"button\"\n        onclick={() => (showCreateModal = false)}\n        class=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n      >\n        취소\n      </button>\n      <button\n        type=\"button\"\n        onclick={createMilestone}\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        생성\n      </button>\n    </div>\n  </div>\n</Modal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/replacements/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getPriorityVariant' is defined but never used.","line":368,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":368,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"getPriorityVariant"},"fix":{"range":[10673,10960],"text":""},"desc":"Remove unused variable 'getPriorityVariant'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getPriorityText' is defined but never used.","line":382,"column":12,"nodeType":"Identifier","messageId":"unusedVar","endLine":382,"endColumn":27,"suggestions":[{"messageId":"removeVar","data":{"varName":"getPriorityText"},"fix":{"range":[10987,11226],"text":""},"desc":"Remove unused variable 'getPriorityText'."}]},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":500,"column":5,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":607,"endColumn":12},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":548,"column":13,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":590,"endColumn":20},{"ruleId":"no-unused-vars","severity":2,"message":"'skill' is defined but never used.","line":855,"column":43,"nodeType":"Identifier","messageId":"unusedVar","endLine":855,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"skill"},"fix":{"range":[28315,28320],"text":""},"desc":"Remove unused variable 'skill'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { employees, projects } from '$lib/stores/rd'\n  import { onMount } from 'svelte'\n\n  interface ReplacementCandidate {\n    id: string\n    originalPersonId: string\n    reason: string\n    priority: 'low' | 'medium' | 'high' | 'urgent'\n    status: 'pending' | 'in_progress' | 'completed' | 'cancelled' | 'approved' | 'rejected'\n    requestedBy: string\n    requestedAt: string\n    dueDate: string\n    projectId: string\n    effectiveDate: string\n    candidates: Array<{\n      personId: string\n      score: number\n      reasons: string[]\n      availability: number\n      experience: string\n      salaryMatch: boolean\n      skillsMatch: string[]\n      recommended: boolean\n    }>\n    selectedCandidate?: string\n    notes: string\n    createdAt: string\n    updatedAt: string\n  }\n\n  // Mock replacement candidates data\n  let replacementCandidates = $state<ReplacementCandidate[]>([\n    {\n      id: 'replacement-1',\n      originalPersonId: 'person-1',\n      projectId: 'project-1',\n      reason: '퇴사',\n      effectiveDate: '2024-02-01',\n      status: 'pending',\n      priority: 'high',\n      requestedBy: 'emp-001',\n      requestedAt: '2024-01-15T00:00:00Z',\n      dueDate: '2024-02-01',\n      notes: '긴급 대체 인력 필요',\n      candidates: [\n        {\n          personId: 'person-4',\n          score: 95,\n          reasons: ['동일 기술 스택', '유사 프로젝트 경험', '높은 성과 이력'],\n          availability: 80,\n          salaryMatch: true,\n          skillsMatch: ['AI/ML', 'Python', 'TensorFlow'],\n          experience: '5년',\n          recommended: true\n        },\n        {\n          personId: 'person-5',\n          score: 87,\n          reasons: ['강한 학습 능력', '팀워크 우수', '프로젝트 관리 경험'],\n          availability: 60,\n          salaryMatch: true,\n          skillsMatch: ['Python', 'Data Science', 'Machine Learning'],\n          experience: '3년',\n          recommended: false\n        },\n        {\n          personId: 'person-6',\n          score: 82,\n          reasons: ['도메인 전문성', '문제 해결 능력', '커뮤니케이션 스킬'],\n          availability: 70,\n          salaryMatch: false,\n          skillsMatch: ['AI/ML', 'Python', 'Research'],\n          experience: '4년',\n          recommended: false\n        }\n      ],\n      createdAt: '2024-01-15T10:00:00Z',\n      updatedAt: '2024-01-15T10:00:00Z'\n    },\n    {\n      id: 'replacement-2',\n      originalPersonId: 'person-2',\n      projectId: 'project-2',\n      reason: '프로젝트 변경',\n      effectiveDate: '2024-03-01',\n      status: 'approved',\n      priority: 'medium',\n      requestedBy: 'emp-002',\n      requestedAt: '2024-02-01T00:00:00Z',\n      dueDate: '2024-03-01',\n      notes: '프로젝트 우선순위 변경으로 인한 인력 재배치',\n      candidates: [\n        {\n          personId: 'person-7',\n          score: 92,\n          reasons: ['UI/UX 전문성', 'React 경험', '사용자 중심 설계'],\n          availability: 90,\n          salaryMatch: true,\n          skillsMatch: ['React', 'UI/UX', 'Frontend'],\n          experience: '4년',\n          recommended: true\n        },\n        {\n          personId: 'person-8',\n          score: 85,\n          reasons: ['풀스택 개발', '빠른 적응력', '코드 품질'],\n          availability: 75,\n          salaryMatch: true,\n          skillsMatch: ['React', 'Node.js', 'Full Stack'],\n          experience: '3년',\n          recommended: false\n        }\n      ],\n      createdAt: '2024-01-20T14:30:00Z',\n      updatedAt: '2024-01-25T09:15:00Z'\n    },\n    {\n      id: 'replacement-3',\n      originalPersonId: 'person-3',\n      projectId: 'project-1',\n      reason: '휴직',\n      effectiveDate: '2024-02-15',\n      status: 'in_progress',\n      priority: 'medium',\n      requestedBy: 'emp-003',\n      requestedAt: '2024-02-01T00:00:00Z',\n      dueDate: '2024-02-15',\n      notes: '개인 사정으로 인한 휴직',\n      candidates: [\n        {\n          personId: 'person-9',\n          score: 88,\n          reasons: ['백엔드 전문성', 'API 설계', '데이터베이스 최적화'],\n          availability: 85,\n          salaryMatch: true,\n          skillsMatch: ['Backend', 'API', 'Database'],\n          experience: '6년',\n          recommended: true\n        },\n        {\n          personId: 'person-10',\n          score: 79,\n          reasons: ['시스템 아키텍처', '클라우드 경험', 'DevOps'],\n          availability: 65,\n          salaryMatch: false,\n          skillsMatch: ['Backend', 'Cloud', 'DevOps'],\n          experience: '5년',\n          recommended: false\n        }\n      ],\n      createdAt: '2024-01-25T16:45:00Z',\n      updatedAt: '2024-01-30T11:20:00Z'\n    }\n  ])\n\n  let selectedReplacement = $state<ReplacementCandidate | null>(null)\n  let showDetailModal = $state(false)\n  let showCreateModal = $state(false)\n  let searchTerm = $state('')\n  let selectedProject = $state<string>('all')\n  let selectedStatus = $state<string>('all')\n  let selectedReason = $state<string>('all')\n\n  // Form data for creating new replacement request\n  let formData = $state({\n    originalPersonId: '',\n    projectId: '',\n    reason: '',\n    effectiveDate: '',\n    priority: 'medium' as 'low' | 'medium' | 'high',\n    requiredSkills: [] as string[],\n    experienceLevel: '',\n    salaryRange: '',\n    availability: 100\n  })\n\n  // Get filtered replacements\n  let filteredReplacements = $derived(() => {\n    let filtered = replacementCandidates\n\n    if (searchTerm) {\n      filtered = filtered.filter(replacement => {\n        const originalPerson = $employees.find(p => p.id === replacement.originalPersonId)\n        return (\n          originalPerson?.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n          replacement.reason.toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      })\n    }\n\n    if (selectedProject !== 'all') {\n      filtered = filtered.filter(replacement => replacement.projectId === selectedProject)\n    }\n\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter(replacement => replacement.status === selectedStatus)\n    }\n\n    if (selectedReason !== 'all') {\n      filtered = filtered.filter(replacement => replacement.reason === selectedReason)\n    }\n\n    return filtered.sort(\n      (a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    )\n  })\n\n  // Get unique reasons for filter\n  let availableReasons = $derived(() => {\n    const reasons = [...new Set(replacementCandidates.map(r => r.reason))]\n    return reasons\n  })\n\n  // Get person name by ID\n  function getPersonName(personId: string): string {\n    const person = $employees.find(p => p.id === personId)\n    return person ? person.name : 'Unknown'\n  }\n\n  // Get project name by ID\n  function getProjectName(projectId: string): string {\n    const project = $projects.find((p: any) => p.id === projectId)\n    return project ? project.name : 'Unknown Project'\n  }\n\n  // Show replacement detail\n  function showReplacementDetail(replacement: ReplacementCandidate) {\n    selectedReplacement = replacement\n    showDetailModal = true\n  }\n\n  // Create new replacement request\n  function createReplacementRequest() {\n    if (\n      !formData.originalPersonId ||\n      !formData.projectId ||\n      !formData.reason ||\n      !formData.effectiveDate\n    ) {\n      alert('모든 필수 필드를 입력해주세요.')\n      return\n    }\n\n    // Find matching candidates based on criteria\n    const matchingCandidates = findMatchingCandidates(formData)\n\n    const newReplacement: ReplacementCandidate = {\n      id: `replacement-${Date.now()}`,\n      originalPersonId: formData.originalPersonId,\n      projectId: formData.projectId,\n      reason: formData.reason,\n      effectiveDate: formData.effectiveDate,\n      status: 'pending',\n      priority: 'medium',\n      requestedBy: 'emp-001',\n      requestedAt: new Date().toISOString(),\n      dueDate: formData.effectiveDate,\n      notes: '',\n      candidates: matchingCandidates,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    }\n\n    replacementCandidates.push(newReplacement)\n\n    // Reset form\n    formData = {\n      originalPersonId: '',\n      projectId: '',\n      reason: '',\n      effectiveDate: '',\n      priority: 'medium',\n      requiredSkills: [],\n      experienceLevel: '',\n      salaryRange: '',\n      availability: 100\n    }\n\n    showCreateModal = false\n  }\n\n  // Find matching candidates based on criteria\n  function findMatchingCandidates(criteria: any) {\n    // Mock algorithm - in real implementation, this would use ML/AI\n    const availablePersons = $employees.filter(p => p.id !== criteria.originalPersonId)\n\n    return availablePersons.slice(0, 3).map((person, index) => ({\n      personId: person.id,\n      score: 95 - index * 10,\n      reasons: ['기술 스택 일치', '프로젝트 경험', '팀워크 우수'],\n      availability: Math.floor(Math.random() * 40) + 60,\n      salaryMatch: Math.random() > 0.3,\n      skillsMatch: ['Python', 'React', 'Database'],\n      experience: `${Math.floor(Math.random() * 5) + 2}년`,\n      recommended: index === 0\n    }))\n  }\n\n  // Approve replacement\n  function approveReplacement(replacementId: string, candidatePersonId: string) {\n    const replacement = replacementCandidates.find(r => r.id === replacementId)\n    if (replacement) {\n      replacement.status = 'approved'\n      replacement.updatedAt = new Date().toISOString()\n\n      // In real implementation, this would update project assignments\n      logger.log(`Approved replacement: ${candidatePersonId} for ${replacement.originalPersonId}`)\n    }\n  }\n\n  // Reject replacement\n  function rejectReplacement(replacementId: string) {\n    const replacement = replacementCandidates.find(r => r.id === replacementId)\n    if (replacement) {\n      replacement.status = 'rejected'\n      replacement.updatedAt = new Date().toISOString()\n    }\n  }\n\n  // Add required skill\n  function addRequiredSkill() {\n    formData.requiredSkills.push('')\n  }\n\n  // Remove required skill\n  function removeRequiredSkill(index: number) {\n    formData.requiredSkills.splice(index, 1)\n  }\n\n  // Format date\n  function formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleDateString('ko-KR')\n  }\n\n  // Get status badge variant\n  function getStatusVariant(status: string): 'success' | 'warning' | 'danger' {\n    switch (status) {\n      case 'approved':\n        return 'success'\n      case 'in_progress':\n        return 'warning'\n      case 'rejected':\n        return 'danger'\n      default:\n        return 'danger'\n    }\n  }\n\n  // Get status text\n  function getStatusText(status: string): string {\n    switch (status) {\n      case 'approved':\n        return '승인됨'\n      case 'in_progress':\n        return '진행중'\n      case 'rejected':\n        return '거부됨'\n      default:\n        return '대기'\n    }\n  }\n\n  // Get priority badge variant\n  function getPriorityVariant(priority: string): 'success' | 'warning' | 'danger' {\n    switch (priority) {\n      case 'low':\n        return 'success'\n      case 'medium':\n        return 'warning'\n      case 'high':\n        return 'danger'\n      default:\n        return 'warning'\n    }\n  }\n\n  // Get priority text\n  function getPriorityText(priority: string): string {\n    switch (priority) {\n      case 'low':\n        return '낮음'\n      case 'medium':\n        return '보통'\n      case 'high':\n        return '높음'\n      default:\n        return '보통'\n    }\n  }\n\n  // Calculate match score color\n  function getScoreColor(score: number): string {\n    if (score >= 90) return 'text-green-600'\n    if (score >= 80) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  onMount(() => {\n  // Initialize dummy data if needed\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"container mx-auto p-6\">\n  <div class=\"mb-6\">\n    <h1 class=\"text-3xl font-bold text-gray-900 mb-2\">인력 대체 추천</h1>\n    <p class=\"text-gray-600\">인력 이탈 시 AI 기반 대체 인력 추천 및 승인 프로세스를 관리합니다.</p>\n  </div>\n\n  <!-- Action Buttons -->\n  <div class=\"flex gap-4 mb-6\">\n    <button\n      type=\"button\"\n      onclick={() => (showCreateModal = true)}\n      class=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    >\n      대체 요청 생성\n    </button>\n    <button\n      type=\"button\"\n      onclick={() => alert('AI 추천 알고리즘을 실행합니다.')}\n      class=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500\"\n    >\n      AI 추천 실행\n    </button>\n  </div>\n\n  <!-- Filters -->\n  <div class=\"bg-white rounded-lg shadow-sm border p-4 mb-6\">\n    <div class=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n      <div>\n        <label for=\"search\" class=\"block text-sm font-medium text-gray-700 mb-1\">검색</label>\n        <input\n          id=\"search\"\n          type=\"text\"\n          bind:value={searchTerm}\n          placeholder=\"인력명 또는 사유 검색...\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"project-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트</label\n        >\n        <select\n          id=\"project-filter\"\n          bind:value={selectedProject}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"rnd-rep-status-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >상태</label\n        >\n        <select\n          id=\"rnd-rep-status-filter\"\n          bind:value={selectedStatus}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          <option value=\"pending\">대기</option>\n          <option value=\"in_progress\">진행중</option>\n          <option value=\"approved\">승인됨</option>\n          <option value=\"rejected\">거부됨</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"reason-filter\" class=\"block text-sm font-medium text-gray-700 mb-1\">사유</label>\n        <select\n          id=\"reason-filter\"\n          bind:value={selectedReason}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each availableReasons() as reason, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <option value={reason}>{reason}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <!-- Replacements List -->\n  <div class=\"grid gap-6\">\n    {#each filteredReplacements() as replacement}\n      <Card class=\"p-6 hover:shadow-md transition-shadow\">\n        <div class=\"flex justify-between items-start mb-4\">\n          <div class=\"flex-1\">\n            <div class=\"flex items-center gap-3 mb-2\">\n              <h3 class=\"text-xl font-semibold text-gray-900\">\n                {getPersonName(replacement.originalPersonId)} 대체 요청\n              </h3>\n              <Badge variant={getStatusVariant(replacement.status)}>\n                {getStatusText(replacement.status)}\n              </Badge>\n            </div>\n            <div class=\"text-sm text-gray-600 mb-3\">\n              <span class=\"font-medium\">프로젝트:</span>\n              {getProjectName(replacement.projectId)} |\n              <span class=\"font-medium\">사유:</span>\n              {replacement.reason} |\n              <span class=\"font-medium\">효력일:</span>\n              {formatDate(replacement.effectiveDate)} |\n              <span class=\"font-medium\">후보:</span>\n              {replacement.candidates.length}명\n            </div>\n          </div>\n          <div class=\"flex gap-2 ml-4\">\n            <button\n              type=\"button\"\n              onclick={() => showReplacementDetail(replacement)}\n              class=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n              aria-label=\"상세보기\"\n            >\n              상세보기\n            </button>\n            {#if replacement.status === 'pending'}\n              <button\n                type=\"button\"\n                onclick={() => rejectReplacement(replacement.id)}\n                class=\"px-3 py-1 text-sm bg-red-100 text-red-700 rounded hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-red-500\"\n              >\n                거부\n              </button>\n            {/if}\n          </div>\n        </div>\n\n        <!-- Top Candidates -->\n        <div class=\"mb-4\">\n          <h4 class=\"font-medium text-gray-900 mb-3\">추천 후보 (상위 3명)</h4>\n          <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {#each replacement.candidates.slice(0, 3) as candidate}\n              <div class=\"bg-gray-50 p-4 rounded-md\">\n                <div class=\"flex justify-between items-start mb-2\">\n                  <h5 class=\"font-medium text-gray-900\">{getPersonName(candidate.personId)}</h5>\n                  <div class=\"flex items-center gap-2\">\n                    <span class=\"text-sm font-bold {getScoreColor(candidate.score)}\">\n                      {candidate.score}점\n                    </span>\n                    {#if candidate.recommended}\n                      <Badge variant=\"success\">추천</Badge>\n                    {/if}\n                  </div>\n                </div>\n                <div class=\"text-sm text-gray-600 space-y-1\">\n                  <p><span class=\"font-medium\">경력:</span> {candidate.experience}</p>\n                  <p><span class=\"font-medium\">가용성:</span> {candidate.availability}%</p>\n                  <p>\n                    <span class=\"font-medium\">급여 매치:</span>\n                    {candidate.salaryMatch ? '✓' : '✗'}\n                  </p>\n                </div>\n                <div class=\"mt-2\">\n                  <div class=\"text-xs text-gray-500 mb-1\">주요 기술:</div>\n                  <div class=\"flex flex-wrap gap-1\">\n                    {#each candidate.skillsMatch.slice(0, 3) as skill, idx (idx)}\n                      <!-- TODO: replace index key with a stable id when model provides one -->\n                      <span class=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded\">\n                        {skill}\n                      </span>\n                    {/each}\n                  </div>\n                </div>\n                {#if replacement.status === 'pending'}\n                  <button\n                    type=\"button\"\n                    onclick={() => approveReplacement(replacement.id, candidate.personId)}\n                    class=\"w-full mt-3 px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500\"\n                  >\n                    승인\n                  </button>\n                {/if}\n              </div>\n            {/each}\n          </div>\n        </div>\n\n        <!-- Match Reasons -->\n        <div>\n          <h4 class=\"font-medium text-gray-900 mb-2\">추천 이유 (1순위)</h4>\n          <ul class=\"text-sm text-gray-600 space-y-1\">\n            {#each replacement.candidates[0]?.reasons || [] as reason, i (i)}\n              <li class=\"flex items-center gap-2\">\n                <span class=\"text-green-500\">✓</span>\n                {reason}\n              </li>\n            {/each}\n          </ul>\n        </div>\n      </Card>\n    {/each}\n  </div>\n\n  {#if filteredReplacements().length === 0}\n    <div class=\"text-center py-12\">\n      <div class=\"text-gray-400 text-6xl mb-4\">👥</div>\n      <h3 class=\"text-lg font-medium text-gray-900 mb-2\">대체 요청이 없습니다</h3>\n      <p class=\"text-gray-500\">새로운 인력 대체 요청을 생성해보세요.</p>\n    </div>\n  {/if}\n</div>\n\n<!-- Detail Modal -->\n<Modal bind:open={showDetailModal} title=\"대체 요청 상세\">\n  {#if selectedReplacement}\n    <div class=\"space-y-6\">\n      <div>\n        <h3 class=\"text-xl font-semibold text-gray-900 mb-2\">\n          {selectedReplacement && getPersonName(selectedReplacement.originalPersonId)} 대체 요청\n        </h3>\n        <div class=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span class=\"font-medium text-gray-700\">프로젝트:</span>\n            <span class=\"ml-2\"\n            >{selectedReplacement && getProjectName(selectedReplacement.projectId)}</span\n            >\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">사유:</span>\n            <span class=\"ml-2\">{selectedReplacement && selectedReplacement.reason}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">효력일:</span>\n            <span class=\"ml-2\"\n            >{selectedReplacement && formatDate(selectedReplacement.effectiveDate)}</span\n            >\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">상태:</span>\n            <span class=\"ml-2\">\n              <Badge variant={selectedReplacement && getStatusVariant(selectedReplacement.status)}>\n                {selectedReplacement && getStatusText(selectedReplacement.status)}\n              </Badge>\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <!-- All Candidates -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">모든 후보자</h4>\n        <div class=\"space-y-4\">\n          {#each selectedReplacement?.candidates || [] as candidate, index (index)}\n            <div class=\"bg-gray-50 p-4 rounded-md\">\n              <div class=\"flex justify-between items-start mb-3\">\n                <div>\n                  <h5 class=\"font-medium text-gray-900\">\n                    {index + 1}순위: {getPersonName(candidate.personId)}\n                  </h5>\n                  <div class=\"text-sm text-gray-600 mt-1\">\n                    경력: {candidate.experience} | 가용성: {candidate.availability}% | 급여 매치: {candidate.salaryMatch\n                      ? '✓'\n                      : '✗'}\n                  </div>\n                </div>\n                <div class=\"text-right\">\n                  <div class=\"text-2xl font-bold {getScoreColor(candidate.score)}\">\n                    {candidate.score}점\n                  </div>\n                  {#if candidate.recommended}\n                    <Badge variant=\"success\">추천</Badge>\n                  {/if}\n                </div>\n              </div>\n              <div class=\"mb-3\">\n                <div class=\"text-sm font-medium text-gray-700 mb-1\">추천 이유:</div>\n                <ul class=\"text-sm text-gray-600 space-y-1\">\n                  {#each candidate.reasons as reason, i (i)}\n                    <li class=\"flex items-center gap-2\">\n                      <span class=\"text-green-500\">✓</span>\n                      {reason}\n                    </li>\n                  {/each}\n                </ul>\n              </div>\n              <div>\n                <div class=\"text-sm font-medium text-gray-700 mb-1\">기술 스택:</div>\n                <div class=\"flex flex-wrap gap-1\">\n                  {#each candidate.skillsMatch as skill, i (i)}\n                    <span class=\"px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded\">\n                      {skill}\n                    </span>\n                  {/each}\n                </div>\n              </div>\n              {#if selectedReplacement && selectedReplacement.status === 'pending'}\n                <button\n                  type=\"button\"\n                  onclick={() =>\n                    selectedReplacement &&\n                      approveReplacement(selectedReplacement.id, candidate.personId)}\n                  class=\"w-full mt-3 px-3 py-2 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500\"\n                >\n                  이 후보자 승인\n                </button>\n              {/if}\n            </div>\n          {/each}\n        </div>\n      </div>\n    </div>\n  {/if}\n</Modal>\n\n<!-- Create Modal -->\n<Modal bind:open={showCreateModal} title=\"대체 요청 생성\">\n  <div class=\"space-y-4\">\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-person\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >대체 대상 *</label\n        >\n        <select\n          id=\"create-person\"\n          bind:value={formData.originalPersonId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">인력 선택</option>\n          {#each $employees as person, i (i)}\n            <option value={person.id}>{person.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-project\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트 *</label\n        >\n        <select\n          id=\"create-project\"\n          bind:value={formData.projectId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">프로젝트 선택</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-reason\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >대체 사유 *</label\n        >\n        <select\n          id=\"create-reason\"\n          bind:value={formData.reason}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">사유 선택</option>\n          <option value=\"퇴사\">퇴사</option>\n          <option value=\"프로젝트 변경\">프로젝트 변경</option>\n          <option value=\"휴직\">휴직</option>\n          <option value=\"성과 부진\">성과 부진</option>\n          <option value=\"기타\">기타</option>\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-date\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >효력일 *</label\n        >\n        <input\n          id=\"create-date\"\n          type=\"date\"\n          bind:value={formData.effectiveDate}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n    </div>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-priority\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >우선순위</label\n        >\n        <select\n          id=\"create-priority\"\n          bind:value={formData.priority}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"low\">낮음</option>\n          <option value=\"medium\">보통</option>\n          <option value=\"high\">높음</option>\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-experience\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >필요 경력</label\n        >\n        <select\n          id=\"create-experience\"\n          bind:value={formData.experienceLevel}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">경력 선택</option>\n          <option value=\"1-2년\">1-2년</option>\n          <option value=\"3-5년\">3-5년</option>\n          <option value=\"5년 이상\">5년 이상</option>\n        </select>\n      </div>\n    </div>\n    <div>\n      <label\n        for=\"create-salary\"\n        class=\"block text-sm font-medium text-gray-700 mb-1\"\n      >급여 범위</label\n      >\n      <input\n        id=\"create-salary\"\n        type=\"text\"\n        bind:value={formData.salaryRange}\n        placeholder=\"예: 5000-7000만원\"\n        class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      />\n    </div>\n    <div>\n      <div class=\"flex justify-between items-center mb-2\">\n        <div class=\"block text-sm font-medium text-gray-700\">필수 기술</div>\n        <button\n          type=\"button\"\n          onclick={addRequiredSkill}\n          class=\"text-sm text-blue-600 hover:text-blue-700\"\n        >\n          + 기술 추가\n        </button>\n      </div>\n      <div class=\"space-y-2\">\n        {#each formData.requiredSkills as skill, index (index)}\n          <div class=\"flex gap-2 items-center\">\n            <input\n              type=\"text\"\n              bind:value={formData.requiredSkills[index]}\n              placeholder=\"기술명\"\n              class=\"flex-1 px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <button\n              type=\"button\"\n              onclick={() => removeRequiredSkill(index)}\n              class=\"text-red-600 hover:text-red-700\"\n            >\n              삭제\n            </button>\n          </div>\n        {/each}\n      </div>\n    </div>\n    <div class=\"flex justify-end gap-2 pt-4\">\n      <button\n        type=\"button\"\n        onclick={() => (showCreateModal = false)}\n        class=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n      >\n        취소\n      </button>\n      <button\n        type=\"button\"\n        onclick={createReplacementRequest}\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        요청 생성\n      </button>\n    </div>\n  </div>\n</Modal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/reports/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'localReports' is assigned a value but never used.","line":25,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":25,"endColumn":19},{"ruleId":"no-unused-vars","severity":2,"message":"'project' is assigned a value but never used.","line":197,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":197,"endColumn":18},{"ruleId":"no-unused-vars","severity":2,"message":"'projectExpenses' is assigned a value but never used.","line":198,"column":11,"nodeType":"Identifier","messageId":"unusedVar","endLine":198,"endColumn":26},{"ruleId":"svelte/require-each-key","severity":1,"message":"Each block should have a key","line":454,"column":5,"nodeType":"SvelteEachBlock","messageId":"expectedKey","endLine":554,"endColumn":12}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import { onMount } from 'svelte'\n  import { projects, employees } from '$lib/stores/rd'\n  import { reports, expenseItems } from '$lib/stores/rnd/mock-data'\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import type { Report } from '$lib/stores/rnd/types'\n\n  // Extended Report interface for this page\n  interface ExtendedReport extends Omit<Report, 'summaryJson'> {\n    summary: {\n      progress: number\n      budgetUtilization: number\n      deliverablesCompleted: number\n      totalDeliverables: number\n      risks: string[]\n      achievements: string[]\n      nextWeekGoals: string[]\n    }\n    summaryJson: Record<string, any> // Add required summaryJson to match Report interface\n  }\n\n  // Mock reports data\n  let localReports = $state<ExtendedReport[]>([\n    {\n      id: 'report-1',\n      projectId: 'project-1',\n      type: 'weekly',\n      periodStart: '2024-01-01',\n      periodEnd: '2024-01-07',\n      summary: {\n        progress: 75,\n        budgetUtilization: 68,\n        deliverablesCompleted: 3,\n        totalDeliverables: 4,\n        risks: ['예산 초과 가능성', '인력 부족'],\n        achievements: ['AI 모델 프로토타입 완성', '데이터 수집 완료'],\n        nextWeekGoals: ['모델 성능 최적화', '사용자 테스트 진행']\n      },\n      fileUrl: '/reports/weekly-2024-01-01.pdf',\n      generatedAt: '2024-01-08T09:00:00Z',\n      generatedBy: 'emp-001',\n      summaryJson: {\n        progress: 75,\n        budgetUtilization: 68,\n        deliverablesCompleted: 3,\n        totalDeliverables: 4,\n        risks: ['예산 초과 가능성', '인력 부족'],\n        achievements: ['AI 모델 프로토타입 완성', '데이터 수집 완료'],\n        nextWeekGoals: ['모델 성능 최적화', '사용자 테스트 진행']\n      }\n    },\n    {\n      id: 'report-2',\n      projectId: 'project-1',\n      type: 'quarterly',\n      periodStart: '2024-01-01',\n      periodEnd: '2024-03-31',\n      summary: {\n        progress: 85,\n        budgetUtilization: 72,\n        deliverablesCompleted: 8,\n        totalDeliverables: 10,\n        risks: ['일정 지연', '기술적 도전'],\n        achievements: ['핵심 기능 개발 완료', '사용자 피드백 수집'],\n        nextWeekGoals: ['성능 최적화', '보안 강화']\n      },\n      fileUrl: '/reports/quarterly-2024-Q1.pdf',\n      generatedAt: '2024-04-01T10:00:00Z',\n      generatedBy: 'emp-002',\n      summaryJson: {\n        progress: 85,\n        budgetUtilization: 78,\n        deliverablesCompleted: 8,\n        totalDeliverables: 10,\n        risks: ['기술적 도전', '일정 지연'],\n        achievements: ['핵심 기능 완성', '사용자 피드백 수집'],\n        nextWeekGoals: ['성능 최적화', '문서화 완료']\n      }\n    },\n    {\n      id: 'report-3',\n      projectId: 'project-2',\n      type: 'weekly',\n      periodStart: '2024-01-08',\n      periodEnd: '2024-01-14',\n      summary: {\n        progress: 60,\n        budgetUtilization: 45,\n        deliverablesCompleted: 2,\n        totalDeliverables: 5,\n        risks: ['요구사항 변경'],\n        achievements: ['UI 설계 완료', '프로토타입 개발 시작'],\n        nextWeekGoals: ['프론트엔드 개발', '백엔드 API 설계']\n      },\n      fileUrl: '/reports/weekly-2024-01-08.pdf',\n      generatedAt: '2024-01-15T09:30:00Z',\n      generatedBy: 'emp-003',\n      summaryJson: {\n        progress: 60,\n        budgetUtilization: 45,\n        deliverablesCompleted: 2,\n        totalDeliverables: 5,\n        risks: ['요구사항 변경'],\n        achievements: ['UI 설계 완료', '프로토타입 개발 시작'],\n        nextWeekGoals: ['프론트엔드 개발', '백엔드 API 설계']\n      }\n    }\n  ])\n\n  let selectedReport = $state<ExtendedReport | null>(null)\n  let showDetailModal = $state(false)\n  let showGenerateModal = $state(false)\n  let searchTerm = $state('')\n  let selectedProject = $state<string>('all')\n  let selectedType = $state<string>('all')\n  let selectedPeriod = $state<string>('all')\n\n  // Form data for generating new report\n  let formData = $state({\n    projectId: '',\n    type: 'weekly' as 'weekly' | 'quarterly',\n    periodStart: '',\n    periodEnd: '',\n    includeBudget: true,\n    includeDeliverables: true,\n    includeRisks: true,\n    includeAchievements: true\n  })\n\n  // Get filtered reports\n  let filteredReports = $derived(() => {\n    let filtered = $reports\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (report: any) =>\n          report.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            report.type.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    if (selectedProject !== 'all') {\n      filtered = filtered.filter((report: any) => report.projectId === selectedProject)\n    }\n\n    if (selectedType !== 'all') {\n      filtered = filtered.filter((report: any) => report.type === selectedType)\n    }\n\n    if (selectedPeriod !== 'all') {\n      filtered = filtered.filter(\n        (report: any) =>\n          report.periodStart.startsWith(selectedPeriod) ||\n            report.periodEnd.startsWith(selectedPeriod)\n      )\n    }\n\n    return filtered.sort(\n      (a: any, b: any) => new Date(b.generatedAt).getTime() - new Date(a.generatedAt).getTime()\n    )\n  })\n\n  // Get unique periods for filter\n  let availablePeriods = $derived(() => {\n    const periods = [...new Set($reports.map((r: any) => r.periodStart.substring(0, 7)))]\n    return periods.sort().reverse()\n  })\n\n  // Get person name by ID\n  function getPersonName(personId: string): string {\n    const person = $employees.find((p: any) => p.id === personId)\n    return person ? person.name : 'Unknown'\n  }\n\n  // Get project name by ID\n  function getProjectName(projectId: string): string {\n    const project = $projects.find((p: any) => p.id === projectId)\n    return project ? project.name : 'Unknown Project'\n  }\n\n  // Show report detail\n  function showReportDetail(report: ExtendedReport) {\n    selectedReport = report\n    showDetailModal = true\n  }\n\n  // Generate new report\n  function generateReport() {\n    if (!formData.projectId || !formData.periodStart || !formData.periodEnd) {\n      alert('모든 필수 필드를 입력해주세요.')\n      return\n    }\n\n    // Calculate summary data based on project data\n    const project = $projects.find((p: any) => p.id === formData.projectId)\n    const projectExpenses = $expenseItems.filter((e: any) => e.projectId === formData.projectId)\n\n    // Mock calculation - in real implementation, this would be calculated from actual data\n    const progress = Math.floor(Math.random() * 40) + 60 // 60-100%\n    const budgetUtilization = Math.floor(Math.random() * 30) + 50 // 50-80%\n    const deliverablesCompleted = Math.floor(Math.random() * 5) + 1\n    const totalDeliverables = deliverablesCompleted + Math.floor(Math.random() * 3) + 1\n\n    const newReport: ExtendedReport = {\n      id: `report-${Date.now()}`,\n      projectId: formData.projectId,\n      type: formData.type,\n      periodStart: formData.periodStart,\n      periodEnd: formData.periodEnd,\n      summary: {\n        progress,\n        budgetUtilization,\n        deliverablesCompleted,\n        totalDeliverables,\n        risks: ['일정 지연 가능성', '예산 초과 위험'],\n        achievements: ['주요 기능 개발 완료', '테스트 진행'],\n        nextWeekGoals: ['성능 최적화', '문서화 작업']\n      },\n      fileUrl: `/reports/${formData.type}-${formData.periodStart}.pdf`,\n      generatedAt: new Date().toISOString(),\n      generatedBy: 'emp-001', // Current user\n      summaryJson: {\n        progress,\n        budgetUtilization,\n        deliverablesCompleted,\n        totalDeliverables,\n        risks: ['일정 지연 가능성', '예산 초과 위험'],\n        achievements: ['주요 기능 개발 완료', '테스트 진행'],\n        nextWeekGoals: ['성능 최적화', '문서화 작업']\n      }\n    }\n\n    $reports.push(newReport)\n\n    // Reset form\n    formData = {\n      projectId: '',\n      type: 'weekly',\n      periodStart: '',\n      periodEnd: '',\n      includeBudget: true,\n      includeDeliverables: true,\n      includeRisks: true,\n      includeAchievements: true\n    }\n\n    showGenerateModal = false\n  }\n\n  // Download report\n  function downloadReport(report: ExtendedReport) {\n    // In real implementation, this would download the actual file\n    logger.log('Downloading report:', report.fileUrl)\n    alert(`리포트 다운로드: ${report.fileUrl}`)\n  }\n\n  // Format date\n  function formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleDateString('ko-KR')\n  }\n\n  // Get type badge variant\n  function getTypeVariant(type: string): 'success' | 'warning' | 'danger' {\n    switch (type) {\n      case 'quarterly':\n        return 'success'\n      case 'weekly':\n        return 'warning'\n      default:\n        return 'danger'\n    }\n  }\n\n  // Get type text\n  function getTypeText(type: string): string {\n    switch (type) {\n      case 'quarterly':\n        return '분기'\n      case 'weekly':\n        return '주간'\n      default:\n        return '기타'\n    }\n  }\n\n  // Get progress color\n  function getProgressColor(progress: number): string {\n    if (progress >= 80) return 'text-green-600'\n    if (progress >= 60) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  // Get budget utilization color\n  function getBudgetColor(utilization: number): string {\n    if (utilization <= 70) return 'text-green-600'\n    if (utilization <= 90) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  // Auto-generate weekly reports for all projects\n  function generateWeeklyReports() {\n    const currentDate = new Date()\n    const weekStart = new Date(currentDate)\n    weekStart.setDate(currentDate.getDate() - currentDate.getDay())\n    const weekEnd = new Date(weekStart)\n    weekEnd.setDate(weekStart.getDate() + 6)\n\n    $projects.forEach((project: any) => {\n      const existingReport = $reports.find(\n        (r: any) =>\n          r.projectId === project.id &&\n            r.type === 'weekly' &&\n            r.periodStart === weekStart.toISOString().split('T')[0]\n      )\n\n      if (!existingReport) {\n        const progress = Math.floor(Math.random() * 40) + 60\n        const budgetUtilization = Math.floor(Math.random() * 30) + 50\n        const deliverablesCompleted = Math.floor(Math.random() * 3) + 1\n        const totalDeliverables = deliverablesCompleted + Math.floor(Math.random() * 2) + 1\n\n        const newReport: ExtendedReport = {\n          id: `report-auto-${Date.now()}-${project.id}`,\n          projectId: project.id,\n          type: 'weekly',\n          periodStart: weekStart.toISOString().split('T')[0],\n          periodEnd: weekEnd.toISOString().split('T')[0],\n          summary: {\n            progress,\n            budgetUtilization,\n            deliverablesCompleted,\n            totalDeliverables,\n            risks: ['일정 관리', '품질 보증'],\n            achievements: ['주요 작업 완료', '테스트 진행'],\n            nextWeekGoals: ['다음 단계 진행', '문서화']\n          },\n          fileUrl: `/reports/weekly-${weekStart.toISOString().split('T')[0]}-${project.id}.pdf`,\n          generatedAt: new Date().toISOString(),\n          generatedBy: 'emp-001',\n          summaryJson: {\n            progress,\n            budgetUtilization,\n            deliverablesCompleted,\n            totalDeliverables,\n            risks: ['일정 관리', '품질 보증'],\n            achievements: ['주요 작업 완료', '테스트 진행'],\n            nextWeekGoals: ['다음 단계 진행', '문서화']\n          }\n        }\n\n        $reports.push(newReport)\n      }\n    })\n\n    alert('모든 프로젝트의 주간 리포트가 자동 생성되었습니다.')\n  }\n\n  onMount(() => {\n  // Initialize dummy data if needed\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"container mx-auto p-6\">\n  <div class=\"mb-6\">\n    <h1 class=\"text-3xl font-bold text-gray-900 mb-2\">진도보고 관리</h1>\n    <p class=\"text-gray-600\">\n      프로젝트별 주간/분기 진도보고서를 생성, 관리하고 자동화된 리포트를 확인합니다.\n    </p>\n  </div>\n\n  <!-- Action Buttons -->\n  <div class=\"flex gap-4 mb-6\">\n    <button\n      type=\"button\"\n      onclick={() => (showGenerateModal = true)}\n      class=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    >\n      리포트 생성\n    </button>\n    <button\n      type=\"button\"\n      onclick={generateWeeklyReports}\n      class=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500\"\n    >\n      주간 리포트 자동 생성\n    </button>\n  </div>\n\n  <!-- Filters -->\n  <div class=\"bg-white rounded-lg shadow-sm border p-4 mb-6\">\n    <div class=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n      <div>\n        <label for=\"search\" class=\"block text-sm font-medium text-gray-700 mb-1\">검색</label>\n        <input\n          id=\"search\"\n          type=\"text\"\n          bind:value={searchTerm}\n          placeholder=\"리포트 ID 또는 타입 검색...\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"project-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트</label\n        >\n        <select\n          id=\"project-filter\"\n          bind:value={selectedProject}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label for=\"type-filter\" class=\"block text-sm font-medium text-gray-700 mb-1\">타입</label>\n        <select\n          id=\"type-filter\"\n          bind:value={selectedType}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          <option value=\"weekly\">주간</option>\n          <option value=\"quarterly\">분기</option>\n        </select>\n      </div>\n      <div>\n        <label for=\"period-filter\" class=\"block text-sm font-medium text-gray-700 mb-1\">기간</label>\n        <select\n          id=\"period-filter\"\n          bind:value={selectedPeriod}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each availablePeriods() as period, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <option value={period}>{period}</option>\n          {/each}\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <!-- Reports List -->\n  <div class=\"grid gap-6\">\n    {#each filteredReports() as report}\n      <Card class=\"p-6 hover:shadow-md transition-shadow\">\n        <div class=\"flex justify-between items-start mb-4\">\n          <div class=\"flex-1\">\n            <div class=\"flex items-center gap-3 mb-2\">\n              <h3 class=\"text-xl font-semibold text-gray-900\">\n                {getTypeText(report.type)} 진도보고서\n              </h3>\n              <Badge variant={getTypeVariant(report.type)}>\n                {getTypeText(report.type)}\n              </Badge>\n            </div>\n            <div class=\"text-sm text-gray-600 mb-3\">\n              <span class=\"font-medium\">프로젝트:</span>\n              {getProjectName(report.projectId)} |\n              <span class=\"font-medium\">기간:</span>\n              {formatDate(report.periodStart)} ~ {formatDate(report.periodEnd)} |\n              <span class=\"font-medium\">생성자:</span>\n              {getPersonName(report.generatedBy)} |\n              <span class=\"font-medium\">생성일:</span>\n              {formatDate(report.generatedAt)}\n            </div>\n          </div>\n          <div class=\"flex gap-2 ml-4\">\n            <button\n              type=\"button\"\n              onclick={() => showReportDetail(report as any)}\n              class=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n              aria-label=\"상세보기\"\n            >\n              상세보기\n            </button>\n            <button\n              type=\"button\"\n              onclick={() => downloadReport(report as any)}\n              class=\"px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              다운로드\n            </button>\n          </div>\n        </div>\n\n        <!-- Summary Cards -->\n        <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">진행률</div>\n            <div class=\"text-2xl font-bold {getProgressColor((report as any).summary.progress)}\">\n              {(report as any).summary.progress}%\n            </div>\n          </div>\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">예산 집행률</div>\n            <div class=\"text-2xl font-bold {getBudgetColor((report as any).summary.budgetUtilization)}\"\n            >\n              {(report as any).summary.budgetUtilization}%\n            </div>\n          </div>\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">산출물 완료</div>\n            <div class=\"text-2xl font-bold text-gray-900\">\n              {(report as any).summary.deliverablesCompleted}/{(report as any).summary\n                .totalDeliverables}\n            </div>\n          </div>\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">리스크</div>\n            <div class=\"text-2xl font-bold text-red-600\">\n              {(report as any).summary.risks.length}\n            </div>\n          </div>\n        </div>\n\n        <!-- Quick Summary -->\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 class=\"font-medium text-gray-900 mb-2\">주요 성과</h4>\n            <ul class=\"text-sm text-gray-600 space-y-1\">\n              {#each (report as any).summary.achievements.slice(0, 2) as achievement, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <li class=\"flex items-center gap-2\">\n                  <span class=\"text-green-500\">✓</span>\n                  {achievement}\n                </li>\n              {/each}\n            </ul>\n          </div>\n          <div>\n            <h4 class=\"font-medium text-gray-900 mb-2\">다음 주 목표</h4>\n            <ul class=\"text-sm text-gray-600 space-y-1\">\n              {#each (report as any).summary.nextWeekGoals.slice(0, 2) as goal, idx (idx)}\n                <!-- TODO: replace index key with a stable id when model provides one -->\n                <li class=\"flex items-center gap-2\">\n                  <span class=\"text-blue-500\">→</span>\n                  {goal}\n                </li>\n              {/each}\n            </ul>\n          </div>\n        </div>\n      </Card>\n    {/each}\n  </div>\n\n  {#if filteredReports().length === 0}\n    <div class=\"text-center py-12\">\n      <div class=\"text-gray-400 text-6xl mb-4\">📊</div>\n      <h3 class=\"text-lg font-medium text-gray-900 mb-2\">리포트가 없습니다</h3>\n      <p class=\"text-gray-500\">새로운 진도보고서를 생성해보세요.</p>\n    </div>\n  {/if}\n</div>\n\n<!-- Detail Modal -->\n<Modal bind:open={showDetailModal} title=\"리포트 상세\">\n  {#if selectedReport}\n    <div class=\"space-y-6\">\n      <div>\n        <h3 class=\"text-xl font-semibold text-gray-900 mb-2\">\n          {getTypeText(selectedReport.type)} 진도보고서\n        </h3>\n        <div class=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span class=\"font-medium text-gray-700\">프로젝트:</span>\n            <span class=\"ml-2\">{getProjectName(selectedReport.projectId)}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">기간:</span>\n            <span class=\"ml-2\"\n            >{formatDate(selectedReport.periodStart)} ~ {formatDate(\n              selectedReport.periodEnd\n            )}</span\n            >\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">생성자:</span>\n            <span class=\"ml-2\">{getPersonName(selectedReport.generatedBy)}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">생성일:</span>\n            <span class=\"ml-2\">{formatDate(selectedReport.generatedAt)}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Summary Metrics -->\n      <div class=\"grid grid-cols-2 gap-4\">\n        <div class=\"bg-gray-50 p-4 rounded-md\">\n          <div class=\"text-sm text-gray-600 mb-1\">진행률</div>\n          <div class=\"text-3xl font-bold {getProgressColor(selectedReport.summary.progress)}\">\n            {selectedReport.summary.progress}%\n          </div>\n        </div>\n        <div class=\"bg-gray-50 p-4 rounded-md\">\n          <div class=\"text-sm text-gray-600 mb-1\">예산 집행률</div>\n          <div class=\"text-3xl font-bold {getBudgetColor(selectedReport.summary.budgetUtilization)}\"\n          >\n            {selectedReport.summary.budgetUtilization}%\n          </div>\n        </div>\n      </div>\n\n      <!-- Achievements -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">주요 성과</h4>\n        <ul class=\"space-y-2\">\n          {#each selectedReport.summary.achievements as achievement, i (i)}\n            <li class=\"flex items-center gap-2 p-2 bg-green-50 rounded\">\n              <span class=\"text-green-500\">✓</span>\n              <span class=\"text-gray-900\">{achievement}</span>\n            </li>\n          {/each}\n        </ul>\n      </div>\n\n      <!-- Next Week Goals -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">다음 주 목표</h4>\n        <ul class=\"space-y-2\">\n          {#each selectedReport.summary.nextWeekGoals as goal, i (i)}\n            <li class=\"flex items-center gap-2 p-2 bg-blue-50 rounded\">\n              <span class=\"text-blue-500\">→</span>\n              <span class=\"text-gray-900\">{goal}</span>\n            </li>\n          {/each}\n        </ul>\n      </div>\n\n      <!-- Risks -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">리스크 및 이슈</h4>\n        <ul class=\"space-y-2\">\n          {#each selectedReport.summary.risks as risk, i (i)}\n            <li class=\"flex items-center gap-2 p-2 bg-red-50 rounded\">\n              <span class=\"text-red-500\">⚠</span>\n              <span class=\"text-gray-900\">{risk}</span>\n            </li>\n          {/each}\n        </ul>\n      </div>\n\n      <div class=\"flex justify-end\">\n        <button\n          type=\"button\"\n          onclick={() => selectedReport && downloadReport(selectedReport)}\n          class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          리포트 다운로드\n        </button>\n      </div>\n    </div>\n  {/if}\n</Modal>\n\n<!-- Generate Modal -->\n<Modal bind:open={showGenerateModal} title=\"리포트 생성\">\n  <div class=\"space-y-4\">\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"generate-project\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트 *</label\n        >\n        <select\n          id=\"generate-project\"\n          bind:value={formData.projectId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">프로젝트 선택</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"generate-type\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >리포트 타입 *</label\n        >\n        <select\n          id=\"generate-type\"\n          bind:value={formData.type}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"weekly\">주간</option>\n          <option value=\"quarterly\">분기</option>\n        </select>\n      </div>\n    </div>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"generate-start\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >시작일 *</label\n        >\n        <input\n          id=\"generate-start\"\n          type=\"date\"\n          bind:value={formData.periodStart}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"generate-end\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >종료일 *</label\n        >\n        <input\n          id=\"generate-end\"\n          type=\"date\"\n          bind:value={formData.periodEnd}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n    </div>\n    <div>\n      <div class=\"block text-sm font-medium text-gray-700 mb-2\">포함할 내용</div>\n      <div class=\"space-y-2\">\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeBudget} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">예산 집행 현황</span>\n        </label>\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeDeliverables} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">산출물 현황</span>\n        </label>\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeRisks} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">리스크 및 이슈</span>\n        </label>\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeAchievements} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">주요 성과</span>\n        </label>\n      </div>\n    </div>\n    <div class=\"flex justify-end gap-2 pt-4\">\n      <button\n        type=\"button\"\n        onclick={() => (showGenerateModal = false)}\n        class=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n      >\n        취소\n      </button>\n      <button\n        type=\"button\"\n        onclick={generateReport}\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        생성\n      </button>\n    </div>\n  </div>\n</Modal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/research-notes/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/rnd-asw/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'isEditing' is assigned a value but never used.","line":23,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeModal from '$lib/components/ui/ThemeModal.svelte'\n  import { formatCurrency, formatDate } from '$lib/utils/format'\n  import {\n    DollarSignIcon,\n    EditIcon,\n    FileTextIcon,\n    PlusIcon,\n    SaveIcon,\n    UsersIcon,\n    XIcon\n  } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  // 프로젝트 데이터\n  let project = $state<any>(null)\n  let projectBudgets = $state<any[]>([])\n  let projectMembers = $state<any[]>([])\n  let evidenceItems = $state<any[]>([])\n  let isLoading = $state(true)\n  let isEditing = $state(false)\n  let showEditModal = $state(false)\n  let showBudgetModal = $state(false)\n  let showMemberModal = $state(false)\n\n  // 편집 폼 데이터\n  let editForm = $state({\n    code: '',\n    title: '',\n    description: '',\n    sponsor_type: 'government',\n    sponsor_name: '',\n    start_date: '',\n    end_date: '',\n    manager_id: '',\n    status: 'active',\n    budget_total: 0,\n    research_type: 'applied',\n    technology_area: '',\n    priority: 'high'\n  })\n\n  // 예산 폼 데이터\n  let budgetForm = $state({\n    period_number: 1,\n    fiscal_year: new Date().getFullYear(),\n    start_date: '',\n    end_date: '',\n    personnel_cost_cash: 0,\n    personnel_cost_in_kind: 0,\n    research_material_cost_cash: 0,\n    research_material_cost_in_kind: 0,\n    research_activity_cost_cash: 0,\n    research_activity_cost_in_kind: 0,\n    indirect_cost_cash: 0,\n    indirect_cost_in_kind: 0\n  })\n\n  // 멤버 폼 데이터\n  let memberForm = $state({\n    employee_id: '',\n    role: 'researcher',\n    participation_rate: 100,\n    monthly_amount: 0,\n    contribution_type: 'cash'\n  })\n\n  let availableEmployees = $state<any[]>([])\n\n  // 데이터 로드\n  async function loadProjectData() {\n    try {\n      isLoading = true\n\n      // RND-ASW 프로젝트 정보 로드\n      const projectResponse = await fetch('/api/project-management/projects?code=RND-ASW')\n      if (projectResponse.ok) {\n        const projectResult = await projectResponse.json()\n\n        if (projectResult.success && projectResult.data.length > 0) {\n          project = projectResult.data[0]\n          initEditForm()\n\n          // 예산 정보 로드\n          await loadBudgets()\n\n          // 멤버 정보 로드\n          await loadMembers()\n\n          // 증빙 정보 로드\n          await loadEvidenceItems()\n        } else {\n          logger.log('RND-ASW 프로젝트를 찾을 수 없습니다.')\n        }\n      } else {\n        logger.error('프로젝트 정보 로드 실패:', projectResponse.status)\n      }\n\n      // 직원 목록 로드\n      await loadEmployees()\n    } catch (error) {\n      logger.error('프로젝트 데이터 로드 실패:', error)\n    } finally {\n      isLoading = false\n    }\n  }\n\n  async function loadBudgets() {\n    if (!project) return\n\n    try {\n      const response = await fetch(\n        `/api/project-management/project-budgets?projectId=${project.id}`\n      )\n      const result = await response.json()\n\n      if (result.success) {\n        projectBudgets = result.data\n      }\n    } catch (error) {\n      logger.error('예산 데이터 로드 실패:', error)\n    }\n  }\n\n  async function loadMembers() {\n    if (!project) return\n\n    try {\n      const response = await fetch(\n        `/api/project-management/project-members?projectId=${project.id}`\n      )\n      const result = await response.json()\n\n      if (result.success) {\n        projectMembers = result.data\n      }\n    } catch (error) {\n      logger.error('멤버 데이터 로드 실패:', error)\n    }\n  }\n\n  async function loadEvidenceItems() {\n    if (!project || projectBudgets.length === 0) return\n\n    try {\n      const currentBudget = projectBudgets[0]\n      const response = await fetch(\n        `/api/project-management/evidence?projectBudgetId=${currentBudget.id}`\n      )\n      const result = await response.json()\n\n      if (result.success) {\n        evidenceItems = result.data\n      }\n    } catch (error) {\n      logger.error('증빙 데이터 로드 실패:', error)\n    }\n  }\n\n  async function loadEmployees() {\n    try {\n      const response = await fetch('/api/project-management/employees')\n      const result = await response.json()\n\n      if (result.success) {\n        availableEmployees = result.data\n      }\n    } catch (error) {\n      logger.error('직원 데이터 로드 실패:', error)\n    }\n  }\n\n  // 편집 폼 초기화\n  function initEditForm() {\n    if (!project) return\n\n    editForm = {\n      code: project.code || '',\n      title: project.title || '',\n      description: project.description || '',\n      sponsor_type: project.sponsor_type || 'government',\n      sponsor_name: project.sponsor_name || '',\n      start_date: project.start_date || '',\n      end_date: project.end_date || '',\n      manager_id: project.manager_id || '',\n      status: project.status || 'active',\n      budget_total: project.budget_total || 0,\n      research_type: project.research_type || 'applied',\n      technology_area: project.technology_area || '',\n      priority: project.priority || 'high'\n    }\n  }\n\n  // 프로젝트 정보 저장\n  async function saveProject() {\n    if (!project) return\n\n    try {\n      const response = await fetch(`/api/project-management/projects/${project.id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(editForm)\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        project = { ...project, ...editForm }\n        showEditModal = false\n        alert('프로젝트 정보가 저장되었습니다.')\n      } else {\n        alert('저장에 실패했습니다: ' + result.message)\n      }\n    } catch (error) {\n      logger.error('프로젝트 저장 실패:', error)\n      alert('저장 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 예산 추가\n  async function addBudget() {\n    if (!project) return\n\n    try {\n      const response = await fetch('/api/project-management/project-budgets', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: project.id,\n          ...budgetForm\n        })\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await loadBudgets()\n        showBudgetModal = false\n        alert('예산이 추가되었습니다.')\n      } else {\n        alert('예산 추가에 실패했습니다: ' + result.message)\n      }\n    } catch (error) {\n      logger.error('예산 추가 실패:', error)\n      alert('예산 추가 중 오류가 발생했습니다.')\n    }\n  }\n\n  // 멤버 추가\n  async function addMember() {\n    if (!project) return\n\n    try {\n      const response = await fetch('/api/project-management/project-members', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          projectId: project.id,\n          ...memberForm\n        })\n      })\n\n      const result = await response.json()\n\n      if (result.success) {\n        await loadMembers()\n        showMemberModal = false\n        alert('멤버가 추가되었습니다.')\n      } else {\n        alert('멤버 추가에 실패했습니다: ' + result.message)\n      }\n    } catch (error) {\n      logger.error('멤버 추가 실패:', error)\n      alert('멤버 추가 중 오류가 발생했습니다.')\n    }\n  }\n\n  onMount(() => {\n    loadProjectData()\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"space-y-6\">\n  <!-- 페이지 헤더 -->\n  <div class=\"flex items-center justify-between\">\n    <div>\n      <h1 class=\"text-2xl font-bold text-gray-900\">RND-ASW 프로젝트 관리</h1>\n      <p class=\"text-gray-600\">A-SW 플랫폼 기술 개발 프로젝트</p>\n    </div>\n    <ThemeButton onclick={() => (showEditModal = true)}>\n      <EditIcon size={16} class=\"mr-2\" />\n      프로젝트 편집\n    </ThemeButton>\n  </div>\n\n  {#if isLoading}\n    <div class=\"text-center py-8\">\n      <div class=\"inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n      <p class=\"mt-2 text-sm text-gray-500\">데이터를 로드하는 중...</p>\n    </div>\n  {:else if project}\n    <!-- 프로젝트 기본 정보 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <h2 class=\"text-lg font-semibold text-gray-900 mb-4\">프로젝트 기본 정보</h2>\n        <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <div>\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">프로젝트 코드</div>\n            <p class=\"text-sm text-gray-900\">{project.code}</p>\n          </div>\n          <div>\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">프로젝트 제목</div>\n            <p class=\"text-sm text-gray-900\">{project.title}</p>\n          </div>\n          <div class=\"md:col-span-2\">\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">설명</div>\n            <p class=\"text-sm text-gray-900\">{project.description}</p>\n          </div>\n          <div>\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">스폰서 유형</div>\n            <p class=\"text-sm text-gray-900\">{project.sponsor_type}</p>\n          </div>\n          <div>\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">상태</div>\n            <span\n              class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\n                {project.status === 'active'\n                  ? 'bg-green-100 text-green-800'\n                  : 'bg-gray-100 text-gray-800'}\"\n            >\n              {project.status || 'active'}\n            </span>\n          </div>\n          <div>\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">총 예산</div>\n            <p class=\"text-sm text-gray-900\">{formatCurrency(project.budget_total)}</p>\n          </div>\n          <div>\n            <div class=\"block text-sm font-medium text-gray-700 mb-1\">연구 유형</div>\n            <p class=\"text-sm text-gray-900\">{project.research_type || 'applied'}</p>\n          </div>\n        </div>\n      </div>\n    </ThemeCard>\n\n    <!-- 예산 정보 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h2 class=\"text-lg font-semibold text-gray-900\">예산 정보</h2>\n          <ThemeButton size=\"sm\" onclick={() => (showBudgetModal = true)}>\n            <PlusIcon size={14} class=\"mr-1\" />\n            예산 추가\n          </ThemeButton>\n        </div>\n\n        {#if projectBudgets.length > 0}\n          <div class=\"space-y-4\">\n            {#each projectBudgets as budget, i (i)}\n              <div class=\"border border-gray-200 rounded-lg p-4\">\n                <div class=\"flex items-center justify-between mb-3\">\n                  <h3 class=\"font-medium text-gray-900\">\n                    {budget.period_number}연차 ({budget.fiscal_year}년)\n                  </h3>\n                  <span class=\"text-sm text-gray-500\">\n                    {formatDate(budget.start_date)} ~ {formatDate(budget.end_date)}\n                  </span>\n                </div>\n                <div class=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                  <div>\n                    <span class=\"text-gray-600\">인건비:</span>\n                    <span class=\"ml-2 font-medium\"\n                    >{formatCurrency(\n                      budget.personnel_cost_cash + budget.personnel_cost_in_kind\n                    )}</span\n                    >\n                  </div>\n                  <div>\n                    <span class=\"text-gray-600\">연구재료비:</span>\n                    <span class=\"ml-2 font-medium\"\n                    >{formatCurrency(\n                      budget.research_material_cost_cash + budget.research_material_cost_in_kind\n                    )}</span\n                    >\n                  </div>\n                  <div>\n                    <span class=\"text-gray-600\">연구활동비:</span>\n                    <span class=\"ml-2 font-medium\"\n                    >{formatCurrency(\n                      budget.research_activity_cost_cash + budget.research_activity_cost_in_kind\n                    )}</span\n                    >\n                  </div>\n                  <div>\n                    <span class=\"text-gray-600\">간접비:</span>\n                    <span class=\"ml-2 font-medium\"\n                    >{formatCurrency(\n                      budget.indirect_cost_cash + budget.indirect_cost_in_kind\n                    )}</span\n                    >\n                  </div>\n                </div>\n              </div>\n            {/each}\n          </div>\n        {:else}\n          <div class=\"text-center py-8 text-gray-500\">\n            <DollarSignIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n            <p>등록된 예산이 없습니다.</p>\n          </div>\n        {/if}\n      </div>\n    </ThemeCard>\n\n    <!-- 프로젝트 멤버 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h2 class=\"text-lg font-semibold text-gray-900\">프로젝트 멤버</h2>\n          <ThemeButton size=\"sm\" onclick={() => (showMemberModal = true)}>\n            <PlusIcon size={14} class=\"mr-1\" />\n            멤버 추가\n          </ThemeButton>\n        </div>\n\n        {#if projectMembers.length > 0}\n          <div class=\"overflow-x-auto\">\n            <table class=\"min-w-full divide-y divide-gray-200\">\n              <thead class=\"bg-gray-50\">\n                <tr>\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >이름</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >역할</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >참여율</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >월간 금액</th\n                  >\n                  <th class=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                  >기여 유형</th\n                  >\n                </tr>\n              </thead>\n              <tbody class=\"bg-white divide-y divide-gray-200\">\n                {#each projectMembers as member, i (i)}\n                  <tr>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                      {member.first_name}\n                      {member.last_name}\n                    </td>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">{member.role}</td>\n                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"\n                    >{member.participation_rate}%</td\n                    >\n                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"\n                    >{formatCurrency(member.monthly_amount)}</td\n                    >\n                    <td class=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\"\n                    >{member.contribution_type}</td\n                    >\n                  </tr>\n                {/each}\n              </tbody>\n            </table>\n          </div>\n        {:else}\n          <div class=\"text-center py-8 text-gray-500\">\n            <UsersIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n            <p>등록된 멤버가 없습니다.</p>\n          </div>\n        {/if}\n      </div>\n    </ThemeCard>\n\n    <!-- 증빙 관리 -->\n    <ThemeCard>\n      <div class=\"p-6\">\n        <div class=\"flex items-center justify-between mb-4\">\n          <h2 class=\"text-lg font-semibold text-gray-900\">증빙 관리</h2>\n          <ThemeButton size=\"sm\">\n            <PlusIcon size={14} class=\"mr-1\" />\n            증빙 추가\n          </ThemeButton>\n        </div>\n\n        {#if evidenceItems.length > 0}\n          <div class=\"space-y-3\">\n            {#each evidenceItems as item, i (i)}\n              <div class=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                <div>\n                  <h4 class=\"font-medium text-gray-900\">{item.name}</h4>\n                  <p class=\"text-sm text-gray-500\">\n                    {item.category_name} | {formatCurrency(item.budget_amount)}\n                  </p>\n                </div>\n                <div class=\"flex items-center space-x-2\">\n                  <span\n                    class=\"px-2 py-1 text-xs font-medium rounded-full\n                      {item.status === 'completed'\n                        ? 'bg-green-100 text-green-800'\n                        : item.status === 'in_progress'\n                        ? 'bg-yellow-100 text-yellow-800'\n                        : 'bg-gray-100 text-gray-800'}\"\n                  >\n                    {item.status}\n                  </span>\n                  <span class=\"text-sm text-gray-500\">{item.progress}%</span>\n                </div>\n              </div>\n            {/each}\n          </div>\n        {:else}\n          <div class=\"text-center py-8 text-gray-500\">\n            <FileTextIcon size={48} class=\"mx-auto mb-2 text-gray-300\" />\n            <p>등록된 증빙이 없습니다.</p>\n          </div>\n        {/if}\n      </div>\n    </ThemeCard>\n  {:else}\n    <div class=\"text-center py-8 text-gray-500\">\n      <p>RND-ASW 프로젝트를 찾을 수 없습니다.</p>\n    </div>\n  {/if}\n</div>\n\n<!-- 프로젝트 편집 모달 -->\n{#if showEditModal}\n  <ThemeModal open={showEditModal} onclose={() => (showEditModal = false)}>\n    <div class=\"p-6 max-w-2xl\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h3 class=\"text-lg font-medium text-gray-900\">프로젝트 편집</h3>\n        <button\n          type=\"button\"\n          onclick={() => (showEditModal = false)}\n          class=\"text-gray-400 hover:text-gray-600\"\n        >\n          <XIcon size={20} />\n        </button>\n      </div>\n\n      <div class=\"space-y-4\">\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label\n              for=\"edit-code\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >프로젝트 코드</label\n            >\n            <input\n              id=\"edit-code\"\n              type=\"text\"\n              bind:value={editForm.code}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label\n              for=\"edit-status\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >상태</label\n            >\n            <select\n              id=\"edit-status\"\n              bind:value={editForm.status}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"active\">활성</option>\n              <option value=\"completed\">완료</option>\n              <option value=\"paused\">일시정지</option>\n              <option value=\"cancelled\">취소</option>\n            </select>\n          </div>\n        </div>\n\n        <div>\n          <label\n            for=\"edit-title\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >프로젝트 제목</label\n          >\n          <input\n            id=\"edit-title\"\n            type=\"text\"\n            bind:value={editForm.title}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        <div>\n          <label\n            for=\"edit-description\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >설명</label\n          >\n          <textarea\n            id=\"edit-description\"\n            bind:value={editForm.description}\n            rows=\"3\"\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          ></textarea>\n        </div>\n\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label\n              for=\"edit-start-date\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >시작일</label\n            >\n            <input\n              id=\"edit-start-date\"\n              type=\"date\"\n              bind:value={editForm.start_date}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label\n              for=\"edit-end-date\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >종료일</label\n            >\n            <input\n              id=\"edit-end-date\"\n              type=\"date\"\n              bind:value={editForm.end_date}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label\n              for=\"edit-sponsor-type\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >스폰서 유형</label\n            >\n            <select\n              id=\"edit-sponsor-type\"\n              bind:value={editForm.sponsor_type}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"government\">정부</option>\n              <option value=\"private\">민간</option>\n              <option value=\"internal\">내부</option>\n            </select>\n          </div>\n          <div>\n            <label\n              for=\"edit-budget-total\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >총 예산</label\n            >\n            <input\n              id=\"edit-budget-total\"\n              type=\"number\"\n              bind:value={editForm.budget_total}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"flex justify-end space-x-3 pt-4 border-t border-gray-200 mt-6\">\n        <ThemeButton variant=\"ghost\" onclick={() => (showEditModal = false)}>취소</ThemeButton>\n        <ThemeButton onclick={saveProject}>\n          <SaveIcon size={16} class=\"mr-2\" />\n          저장\n        </ThemeButton>\n      </div>\n    </div>\n  </ThemeModal>\n{/if}\n\n<!-- 예산 추가 모달 -->\n{#if showBudgetModal}\n  <ThemeModal open={showBudgetModal} onclose={() => (showBudgetModal = false)}>\n    <div class=\"p-6 max-w-2xl\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h3 class=\"text-lg font-medium text-gray-900\">예산 추가</h3>\n        <button\n          type=\"button\"\n          onclick={() => (showBudgetModal = false)}\n          class=\"text-gray-400 hover:text-gray-600\"\n        >\n          <XIcon size={20} />\n        </button>\n      </div>\n\n      <div class=\"space-y-4\">\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label\n              for=\"budget-period\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >연차</label\n            >\n            <input\n              id=\"budget-period\"\n              type=\"number\"\n              bind:value={budgetForm.period_number}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label\n              for=\"budget-fiscal-year\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >회계연도</label\n            >\n            <input\n              id=\"budget-fiscal-year\"\n              type=\"number\"\n              bind:value={budgetForm.fiscal_year}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        <div class=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label\n              for=\"budget-start-date\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >시작일</label\n            >\n            <input\n              id=\"budget-start-date\"\n              type=\"date\"\n              bind:value={budgetForm.start_date}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n          <div>\n            <label\n              for=\"budget-end-date\"\n              class=\"block text-sm font-medium text-gray-700 mb-1\"\n            >종료일</label\n            >\n            <input\n              id=\"budget-end-date\"\n              type=\"date\"\n              bind:value={budgetForm.end_date}\n              class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n          </div>\n        </div>\n\n        <div class=\"space-y-3\">\n          <h4 class=\"font-medium text-gray-900\">인건비</h4>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"personnel-cash\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현금</label\n              >\n              <input\n                id=\"personnel-cash\"\n                type=\"number\"\n                bind:value={budgetForm.personnel_cost_cash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"personnel-kind\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현물</label\n              >\n              <input\n                id=\"personnel-kind\"\n                type=\"number\"\n                bind:value={budgetForm.personnel_cost_in_kind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div class=\"space-y-3\">\n          <h4 class=\"font-medium text-gray-900\">연구재료비</h4>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"material-cash\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현금</label\n              >\n              <input\n                id=\"material-cash\"\n                type=\"number\"\n                bind:value={budgetForm.research_material_cost_cash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"material-kind\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현물</label\n              >\n              <input\n                id=\"material-kind\"\n                type=\"number\"\n                bind:value={budgetForm.research_material_cost_in_kind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div class=\"space-y-3\">\n          <h4 class=\"font-medium text-gray-900\">연구활동비</h4>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"activity-cash\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현금</label\n              >\n              <input\n                id=\"activity-cash\"\n                type=\"number\"\n                bind:value={budgetForm.research_activity_cost_cash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"activity-kind\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현물</label\n              >\n              <input\n                id=\"activity-kind\"\n                type=\"number\"\n                bind:value={budgetForm.research_activity_cost_in_kind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div class=\"space-y-3\">\n          <h4 class=\"font-medium text-gray-900\">간접비</h4>\n          <div class=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label\n                for=\"indirect-cash\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현금</label\n              >\n              <input\n                id=\"indirect-cash\"\n                type=\"number\"\n                bind:value={budgetForm.indirect_cost_cash}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n            <div>\n              <label\n                for=\"indirect-kind\"\n                class=\"block text-sm font-medium text-gray-700 mb-1\"\n              >현물</label\n              >\n              <input\n                id=\"indirect-kind\"\n                type=\"number\"\n                bind:value={budgetForm.indirect_cost_in_kind}\n                class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"flex justify-end space-x-3 pt-4 border-t border-gray-200 mt-6\">\n        <ThemeButton variant=\"ghost\" onclick={() => (showBudgetModal = false)}>취소</ThemeButton>\n        <ThemeButton onclick={addBudget}>\n          <SaveIcon size={16} class=\"mr-2\" />\n          추가\n        </ThemeButton>\n      </div>\n    </div>\n  </ThemeModal>\n{/if}\n\n<!-- 멤버 추가 모달 -->\n{#if showMemberModal}\n  <ThemeModal open={showMemberModal} onclose={() => (showMemberModal = false)}>\n    <div class=\"p-6 max-w-lg\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h3 class=\"text-lg font-medium text-gray-900\">멤버 추가</h3>\n        <button\n          type=\"button\"\n          onclick={() => (showMemberModal = false)}\n          class=\"text-gray-400 hover:text-gray-600\"\n        >\n          <XIcon size={20} />\n        </button>\n      </div>\n\n      <div class=\"space-y-4\">\n        <div>\n          <label\n            for=\"member-employee\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >직원</label\n          >\n          <select\n            id=\"member-employee\"\n            bind:value={memberForm.employee_id}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"\">직원을 선택하세요</option>\n            {#each availableEmployees as employee, i (i)}\n              <option value={employee.id}>{employee.first_name} {employee.last_name}</option>\n            {/each}\n          </select>\n        </div>\n\n        <div>\n          <label for=\"member-role\" class=\"block text-sm font-medium text-gray-700 mb-1\">역할</label>\n          <select\n            id=\"member-role\"\n            bind:value={memberForm.role}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"researcher\">연구원</option>\n            <option value=\"manager\">관리자</option>\n            <option value=\"coordinator\">코디네이터</option>\n          </select>\n        </div>\n\n        <div>\n          <label\n            for=\"member-participation\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >참여율 (%)</label\n          >\n          <input\n            id=\"member-participation\"\n            type=\"number\"\n            bind:value={memberForm.participation_rate}\n            min=\"0\"\n            max=\"100\"\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        <div>\n          <label\n            for=\"member-monthly-amount\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >월간 금액</label\n          >\n          <input\n            id=\"member-monthly-amount\"\n            type=\"number\"\n            bind:value={memberForm.monthly_amount}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          />\n        </div>\n\n        <div>\n          <label\n            for=\"member-contribution-type\"\n            class=\"block text-sm font-medium text-gray-700 mb-1\"\n          >기여 유형</label\n          >\n          <select\n            id=\"member-contribution-type\"\n            bind:value={memberForm.contribution_type}\n            class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"cash\">현금</option>\n            <option value=\"in_kind\">현물</option>\n          </select>\n        </div>\n      </div>\n\n      <div class=\"flex justify-end space-x-3 pt-4 border-t border-gray-200 mt-6\">\n        <ThemeButton variant=\"ghost\" onclick={() => (showMemberModal = false)}>취소</ThemeButton>\n        <ThemeButton onclick={addMember}>\n          <SaveIcon size={16} class=\"mr-2\" />\n          추가\n        </ThemeButton>\n      </div>\n    </div>\n  </ThemeModal>\n{/if}\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/rnd/submissions/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'localSubmissionBundles' is assigned a value but never used.","line":23,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":23,"endColumn":29}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import Badge from '$lib/components/ui/Badge.svelte'\n  import Card from '$lib/components/ui/Card.svelte'\n  import Modal from '$lib/components/ui/Modal.svelte'\n  import { employees, projects } from '$lib/stores/rd'\n  import { documents, expenseItems, submissionBundles } from '$lib/stores/rnd/mock-data'\n  import type { SubmissionBundle } from '$lib/stores/rnd/types'\n  import { onMount } from 'svelte'\n\n  // Extended SubmissionBundle interface for this page\n  interface ExtendedSubmissionBundle extends SubmissionBundle {\n    documentCount?: number\n    totalSize?: string\n    validationResults?: {\n      valid: boolean\n      errors: string[]\n      warnings: string[]\n      completeness: number\n    }\n  }\n\n  // Mock submission bundles data\n  let localSubmissionBundles = $state<ExtendedSubmissionBundle[]>([\n    {\n      id: 'bundle-1',\n      projectId: 'project-1',\n      period: '2024-Q1',\n      fileUrl: '/bundles/project-1-2024-Q1.zip',\n      manifestXml: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><manifest>...</manifest>',\n      checksum: 'sha256:abc123def456...',\n      createdBy: 'person-2',\n      createdAt: '2024-04-01T10:00:00Z',\n      status: 'uploaded',\n      documentCount: 45,\n      totalSize: '125.6 MB',\n      validationResults: {\n        valid: true,\n        errors: [],\n        warnings: ['일부 문서의 해상도가 낮습니다'],\n        completeness: 98\n      }\n    },\n    {\n      id: 'bundle-2',\n      projectId: 'project-2',\n      period: '2024-Q1',\n      fileUrl: '/bundles/project-2-2024-Q1.zip',\n      manifestXml: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><manifest>...</manifest>',\n      checksum: 'sha256:def456ghi789...',\n      createdBy: 'person-2',\n      createdAt: '2024-04-02T14:30:00Z',\n      status: 'ready',\n      documentCount: 32,\n      totalSize: '89.2 MB',\n      validationResults: {\n        valid: false,\n        errors: ['필수 문서 누락: 연구노트 3주차', '서명 누락: 지출 승인서 2건'],\n        warnings: ['일부 영수증 해상도 부족'],\n        completeness: 85\n      }\n    },\n    {\n      id: 'bundle-3',\n      projectId: 'project-1',\n      period: '2024-Q2',\n      fileUrl: '/bundles/project-1-2024-Q2.zip',\n      manifestXml: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><manifest>...</manifest>',\n      checksum: 'sha256:ghi789jkl012...',\n      createdBy: 'person-2',\n      createdAt: '2024-07-01T09:15:00Z',\n      status: 'generating',\n      documentCount: 0,\n      totalSize: '0 MB',\n      validationResults: {\n        valid: false,\n        errors: [],\n        warnings: [],\n        completeness: 0\n      }\n    }\n  ])\n\n  let selectedBundle = $state<ExtendedSubmissionBundle | null>(null)\n  let showDetailModal = $state(false)\n  let showCreateModal = $state(false)\n  let showValidationModal = $state(false)\n  let searchTerm = $state('')\n  let selectedProject = $state<string>('all')\n  let selectedPeriod = $state<string>('all')\n  let selectedStatus = $state<string>('all')\n\n  // Form data for creating new bundle\n  let formData = $state({\n    projectId: '',\n    period: '',\n    includeDocuments: true,\n    includeExpenses: true,\n    includeReports: true,\n    includeResearchNotes: true,\n    compressionLevel: 'medium' as 'low' | 'medium' | 'high',\n    generateManifest: true\n  })\n\n  // Get filtered bundles\n  let filteredBundles = $derived(() => {\n    let filtered = $submissionBundles\n\n    if (searchTerm) {\n      filtered = filtered.filter(\n        (bundle: any) =>\n          bundle.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n            bundle.period.toLowerCase().includes(searchTerm.toLowerCase())\n      )\n    }\n\n    if (selectedProject !== 'all') {\n      filtered = filtered.filter((bundle: any) => bundle.projectId === selectedProject)\n    }\n\n    if (selectedPeriod !== 'all') {\n      filtered = filtered.filter((bundle: any) => bundle.period === selectedPeriod)\n    }\n\n    if (selectedStatus !== 'all') {\n      filtered = filtered.filter((bundle: any) => bundle.status === selectedStatus)\n    }\n\n    return filtered.sort(\n      (a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()\n    )\n  })\n\n  // Get unique periods for filter\n  let availablePeriods = $derived(() => {\n    const periods = [...new Set($submissionBundles.map((b: any) => b.period))]\n    return periods.sort().reverse()\n  })\n\n  // Get person name by ID\n  function getPersonName(personId: string): string {\n    const person = $employees.find((p: any) => p.id === personId)\n    return person ? person.name : 'Unknown'\n  }\n\n  // Get project name by ID\n  function getProjectName(projectId: string): string {\n    const project = $projects.find((p: any) => p.id === projectId)\n    return project ? project.name : 'Unknown Project'\n  }\n\n  // Show bundle detail\n  function showBundleDetail(bundle: ExtendedSubmissionBundle) {\n    selectedBundle = bundle\n    showDetailModal = true\n  }\n\n  // Create new bundle\n  function createBundle() {\n    if (!formData.projectId || !formData.period) {\n      alert('모든 필수 필드를 입력해주세요.')\n      return\n    }\n\n    // Check if bundle already exists\n    const existingBundle = $submissionBundles.find(\n      (b: any) => b.projectId === formData.projectId && b.period === formData.period\n    )\n\n    if (existingBundle) {\n      alert('해당 기간의 번들이 이미 존재합니다.')\n      return\n    }\n\n    const newBundle: ExtendedSubmissionBundle = {\n      id: `bundle-${Date.now()}`,\n      projectId: formData.projectId,\n      period: formData.period,\n      fileUrl: `/bundles/${formData.projectId}-${formData.period}.zip`,\n      manifestXml: '<?xml version=\"1.0\" encoding=\"UTF-8\"?><manifest>...</manifest>',\n      checksum: 'sha256:generating...',\n      createdBy: 'emp-001', // Current user\n      createdAt: new Date().toISOString(),\n      status: 'generating',\n      documentCount: 0,\n      totalSize: '0 MB',\n      validationResults: {\n        valid: false,\n        errors: [],\n        warnings: [],\n        completeness: 0\n      }\n    }\n\n    $submissionBundles.push(newBundle)\n\n    // Simulate bundle generation\n    window.setTimeout(() => {\n      generateBundleContent(newBundle.id)\n    }, 2000)\n\n    // Reset form\n    formData = {\n      projectId: '',\n      period: '',\n      includeDocuments: true,\n      includeExpenses: true,\n      includeReports: true,\n      includeResearchNotes: true,\n      compressionLevel: 'medium',\n      generateManifest: true\n    }\n\n    showCreateModal = false\n  }\n\n  // Generate bundle content (simulation)\n  function generateBundleContent(bundleId: string) {\n    const bundle = $submissionBundles.find((b: any) => b.id === bundleId)\n    if (bundle) {\n      // Simulate document collection and validation\n      const projectExpenses = $expenseItems.filter((e: any) => e.projectId === bundle.projectId)\n      const projectDocuments = $documents.filter(\n        (d: any) => d.expenseId && projectExpenses.some((e: any) => e.id === d.expenseId)\n      )\n\n      ;(bundle as any).documentCount = projectDocuments.length\n      ;(bundle as any).totalSize = `${(Math.random() * 100 + 50).toFixed(1)} MB`\n      bundle.checksum = `sha256:${Math.random().toString(36).substring(2, 15)}...`\n      bundle.status = 'ready'\n\n      // Simulate validation\n      window.setTimeout(() => {\n        validateBundle(bundleId)\n      }, 3000)\n    }\n  }\n\n  // Validate bundle\n  function validateBundle(bundleId: string) {\n    const bundle = $submissionBundles.find((b: any) => b.id === bundleId)\n    if (bundle) {\n      // Mock validation results\n      const hasErrors = Math.random() > 0.7\n      const completeness = Math.floor(Math.random() * 20) + 80\n\n      ;(bundle as any).validationResults = {\n        valid: !hasErrors,\n        errors: hasErrors ? ['일부 필수 문서 누락', '서명 누락 문서 2건'] : [],\n        warnings: ['일부 영수증 해상도 부족', '연구노트 서명 누락 1건'],\n        completeness\n      }\n\n      bundle.status = hasErrors ? 'failed' : 'uploaded'\n    }\n  }\n\n  // Download bundle\n  function downloadBundle(bundle: ExtendedSubmissionBundle) {\n    if (bundle.status !== 'uploaded') {\n      alert('번들이 아직 준비되지 않았습니다.')\n      return\n    }\n\n    // In real implementation, this would download the actual file\n    logger.log('Downloading bundle:', bundle.fileUrl)\n    alert(`번들 다운로드: ${bundle.fileUrl}`)\n  }\n\n  // Re-validate bundle\n  function revalidateBundle(bundleId: string) {\n    const bundle = $submissionBundles.find((b: any) => b.id === bundleId)\n    if (bundle) {\n      bundle.status = 'generating'\n\n      window.setTimeout(() => {\n        validateBundle(bundleId)\n      }, 2000)\n    }\n  }\n\n  // Show validation details\n  function showValidationDetails(bundle: SubmissionBundle) {\n    selectedBundle = bundle\n    showValidationModal = true\n  }\n\n  // Format date\n  function formatDate(dateString: string): string {\n    return new Date(dateString).toLocaleDateString('ko-KR')\n  }\n\n  // Get status badge variant\n  function getStatusVariant(status: string): 'success' | 'warning' | 'danger' {\n    switch (status) {\n      case 'completed':\n        return 'success'\n      case 'generating':\n        return 'warning'\n      case 'validating':\n        return 'warning'\n      case 'pending_validation':\n        return 'warning'\n      case 'validation_failed':\n        return 'danger'\n      default:\n        return 'danger'\n    }\n  }\n\n  // Get status text\n  function getStatusText(status: string): string {\n    switch (status) {\n      case 'completed':\n        return '완료'\n      case 'generating':\n        return '생성중'\n      case 'validating':\n        return '검증중'\n      case 'pending_validation':\n        return '검증대기'\n      case 'validation_failed':\n        return '검증실패'\n      default:\n        return '알 수 없음'\n    }\n  }\n\n  // Get completeness color\n  function getCompletenessColor(completeness: number): string {\n    if (completeness >= 95) return 'text-green-600'\n    if (completeness >= 85) return 'text-yellow-600'\n    return 'text-red-600'\n  }\n\n  // Get validation status color\n  function getValidationColor(valid: boolean): string {\n    return valid ? 'text-green-600' : 'text-red-600'\n  }\n\n  onMount(() => {\n  // Initialize dummy data if needed\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<div class=\"container mx-auto p-6\">\n  <div class=\"mb-6\">\n    <h1 class=\"text-3xl font-bold text-gray-900 mb-2\">국가R&D 업로드 번들</h1>\n    <p class=\"text-gray-600\">\n      프로젝트별 문서를 국가R&D 시스템 업로드용 번들로 생성하고 검증합니다.\n    </p>\n  </div>\n\n  <!-- Action Buttons -->\n  <div class=\"flex gap-4 mb-6\">\n    <button\n      type=\"button\"\n      onclick={() => (showCreateModal = true)}\n      class=\"bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n    >\n      번들 생성\n    </button>\n    <button\n      type=\"button\"\n      onclick={() => alert('모든 프로젝트의 분기별 번들을 자동 생성합니다.')}\n      class=\"bg-green-600 text-white px-4 py-2 rounded-md hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500\"\n    >\n      자동 생성\n    </button>\n  </div>\n\n  <!-- Filters -->\n  <div class=\"bg-white rounded-lg shadow-sm border p-4 mb-6\">\n    <div class=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n      <div>\n        <label for=\"search\" class=\"block text-sm font-medium text-gray-700 mb-1\">검색</label>\n        <input\n          id=\"search\"\n          type=\"text\"\n          bind:value={searchTerm}\n          placeholder=\"번들 ID 또는 기간 검색...\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n      <div>\n        <label\n          for=\"project-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트</label\n        >\n        <select\n          id=\"project-filter\"\n          bind:value={selectedProject}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label for=\"period-filter\" class=\"block text-sm font-medium text-gray-700 mb-1\">기간</label>\n        <select\n          id=\"period-filter\"\n          bind:value={selectedPeriod}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          {#each availablePeriods() as period, idx (idx)}\n            <!-- TODO: replace index key with a stable id when model provides one -->\n            <option value={period}>{period}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"rnd-sub-status-filter\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >상태</label\n        >\n        <select\n          id=\"rnd-sub-status-filter\"\n          bind:value={selectedStatus}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"all\">전체</option>\n          <option value=\"generating\">생성중</option>\n          <option value=\"validating\">검증중</option>\n          <option value=\"pending_validation\">검증대기</option>\n          <option value=\"completed\">완료</option>\n          <option value=\"validation_failed\">검증실패</option>\n        </select>\n      </div>\n    </div>\n  </div>\n\n  <!-- Bundles List -->\n  <div class=\"grid gap-6\">\n    {#each filteredBundles() as bundle (bundle.id ?? bundle.uuid ?? bundle.key)}\n      <Card class=\"p-6 hover:shadow-md transition-shadow\">\n        <div class=\"flex justify-between items-start mb-4\">\n          <div class=\"flex-1\">\n            <div class=\"flex items-center gap-3 mb-2\">\n              <h3 class=\"text-xl font-semibold text-gray-900\">\n                {getProjectName(bundle.projectId)} - {bundle.period}\n              </h3>\n              <Badge variant={getStatusVariant(bundle.status)}>\n                {getStatusText(bundle.status)}\n              </Badge>\n            </div>\n            <div class=\"text-sm text-gray-600 mb-3\">\n              <span class=\"font-medium\">생성자:</span>\n              {getPersonName(bundle.createdBy)} |\n              <span class=\"font-medium\">생성일:</span>\n              {formatDate(bundle.createdAt)} |\n              <span class=\"font-medium\">문서수:</span>\n              {(bundle as any).documentCount}개 |\n              <span class=\"font-medium\">크기:</span>\n              {(bundle as any).totalSize}\n            </div>\n          </div>\n          <div class=\"flex gap-2 ml-4\">\n            <button\n              type=\"button\"\n              onclick={() => showBundleDetail(bundle)}\n              class=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n              aria-label=\"상세보기\"\n            >\n              상세보기\n            </button>\n            {#if bundle.status === 'uploaded'}\n              <button\n                type=\"button\"\n                onclick={() => downloadBundle(bundle)}\n                class=\"px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n              >\n                다운로드\n              </button>\n            {/if}\n            {#if bundle.status === 'failed' || bundle.status === 'ready'}\n              <button\n                type=\"button\"\n                onclick={() => revalidateBundle(bundle.id)}\n                class=\"px-3 py-1 text-sm bg-yellow-100 text-yellow-700 rounded hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-yellow-500\"\n              >\n                재검증\n              </button>\n            {/if}\n            <button\n              type=\"button\"\n              onclick={() => showValidationDetails(bundle)}\n              class=\"px-3 py-1 text-sm bg-green-100 text-green-700 rounded hover:bg-green-200 focus:outline-none focus:ring-2 focus:ring-green-500\"\n            >\n              검증상세\n            </button>\n          </div>\n        </div>\n\n        <!-- Bundle Info -->\n        <div class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">문서 수</div>\n            <div class=\"text-2xl font-bold text-gray-900\">{(bundle as any).documentCount}</div>\n          </div>\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">총 크기</div>\n            <div class=\"text-2xl font-bold text-gray-900\">{(bundle as any).totalSize}</div>\n          </div>\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">완성도</div>\n            <div\n              class=\"text-2xl font-bold {getCompletenessColor(\n                (bundle as any).validationResults.completeness\n              )}\"\n            >\n              {(bundle as any).validationResults.completeness}%\n            </div>\n          </div>\n          <div class=\"bg-gray-50 p-4 rounded-md\">\n            <div class=\"text-sm text-gray-600 mb-1\">검증 상태</div>\n            <div\n              class=\"text-2xl font-bold {getValidationColor(\n                (bundle as any).validationResults.valid\n              )}\"\n            >\n              {(bundle as any).validationResults.valid ? '✓' : '✗'}\n            </div>\n          </div>\n        </div>\n\n        <!-- Validation Summary -->\n        <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <h4 class=\"font-medium text-gray-900 mb-2\">에러</h4>\n            <div class=\"text-sm text-red-600\">\n              {(bundle as any).validationResults.errors.length}개\n            </div>\n          </div>\n          <div>\n            <h4 class=\"font-medium text-gray-900 mb-2\">경고</h4>\n            <div class=\"text-sm text-yellow-600\">\n              {(bundle as any).validationResults.warnings.length}개\n            </div>\n          </div>\n          <div>\n            <h4 class=\"font-medium text-gray-900 mb-2\">체크섬</h4>\n            <div class=\"text-xs text-gray-500 font-mono\">\n              {bundle.checksum}\n            </div>\n          </div>\n        </div>\n      </Card>\n    {/each}\n  </div>\n\n  {#if filteredBundles().length === 0}\n    <div class=\"text-center py-12\">\n      <div class=\"text-gray-400 text-6xl mb-4\">📦</div>\n      <h3 class=\"text-lg font-medium text-gray-900 mb-2\">번들이 없습니다</h3>\n      <p class=\"text-gray-500\">새로운 업로드 번들을 생성해보세요.</p>\n    </div>\n  {/if}\n</div>\n\n<!-- Detail Modal -->\n<Modal bind:open={showDetailModal} title=\"번들 상세\">\n  {#if selectedBundle}\n    <div class=\"space-y-6\">\n      <div>\n        <h3 class=\"text-xl font-semibold text-gray-900 mb-2\">\n          {getProjectName(selectedBundle.projectId)} - {selectedBundle.period}\n        </h3>\n        <div class=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span class=\"font-medium text-gray-700\">생성자:</span>\n            <span class=\"ml-2\">{getPersonName(selectedBundle.createdBy)}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">생성일:</span>\n            <span class=\"ml-2\">{formatDate(selectedBundle.createdAt)}</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">문서 수:</span>\n            <span class=\"ml-2\">{selectedBundle.documentCount}개</span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">총 크기:</span>\n            <span class=\"ml-2\">{selectedBundle.totalSize}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Bundle Status -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">번들 상태</h4>\n        <div class=\"bg-gray-50 p-4 rounded-md\">\n          <div class=\"flex items-center gap-3 mb-2\">\n            <Badge variant={getStatusVariant(selectedBundle.status)}>\n              {getStatusText(selectedBundle.status)}\n            </Badge>\n            <span class=\"text-sm text-gray-600\">\n              완성도: {(selectedBundle as any).validationResults.completeness}%\n            </span>\n          </div>\n          <div class=\"text-xs text-gray-500 font-mono\">\n            체크섬: {selectedBundle.checksum}\n          </div>\n        </div>\n      </div>\n\n      <!-- File Info -->\n      <div>\n        <h4 class=\"font-medium text-gray-900 mb-3\">파일 정보</h4>\n        <div class=\"bg-gray-50 p-4 rounded-md\">\n          <div class=\"text-sm text-gray-600\">\n            <div class=\"mb-1\">\n              <span class=\"font-medium\">파일 경로:</span>\n              {selectedBundle.fileUrl}\n            </div>\n            <div class=\"mb-1\">\n              <span class=\"font-medium\">문서 수:</span>\n              {selectedBundle.documentCount}개\n            </div>\n            <div><span class=\"font-medium\">총 크기:</span> {selectedBundle.totalSize}</div>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"flex justify-end\">\n        {#if selectedBundle.status === 'uploaded'}\n          <button\n            type=\"button\"\n            onclick={() => selectedBundle && downloadBundle(selectedBundle)}\n            class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            번들 다운로드\n          </button>\n        {/if}\n      </div>\n    </div>\n  {/if}\n</Modal>\n\n<!-- Validation Modal -->\n<Modal bind:open={showValidationModal} title=\"검증 상세\">\n  {#if selectedBundle}\n    <div class=\"space-y-6\">\n      <div>\n        <h3 class=\"text-xl font-semibold text-gray-900 mb-2\">\n          {getProjectName(selectedBundle.projectId)} - {selectedBundle.period}\n        </h3>\n        <div class=\"flex items-center gap-3 mb-4\">\n          <Badge variant={getStatusVariant(selectedBundle.status)}>\n            {getStatusText(selectedBundle.status)}\n          </Badge>\n          <span class=\"text-sm text-gray-600\">\n            완성도: {(selectedBundle as any).validationResults.completeness}%\n          </span>\n        </div>\n      </div>\n\n      <!-- Errors -->\n      {#if (selectedBundle as any).validationResults.errors.length > 0}\n        <div>\n          <h4 class=\"font-medium text-red-700 mb-3\">\n            에러 ({(selectedBundle as any).validationResults.errors.length}개)\n          </h4>\n          <div class=\"space-y-2\">\n            {#each (selectedBundle as any).validationResults.errors as error, idx (idx)}\n              <!-- TODO: replace index key with a stable id when model provides one -->\n              <div class=\"flex items-center gap-2 p-3 bg-red-50 rounded-md\">\n                <span class=\"text-red-500\">✗</span>\n                <span class=\"text-red-700\">{error}</span>\n              </div>\n            {/each}\n          </div>\n        </div>\n      {/if}\n\n      <!-- Warnings -->\n      {#if (selectedBundle as any).validationResults.warnings.length > 0}\n        <div>\n          <h4 class=\"font-medium text-yellow-700 mb-3\">\n            경고 ({(selectedBundle as any).validationResults.warnings.length}개)\n          </h4>\n          <div class=\"space-y-2\">\n            {#each (selectedBundle as any).validationResults.warnings as warning, idx (idx)}\n              <!-- TODO: replace index key with a stable id when model provides one -->\n              <div class=\"flex items-center gap-2 p-3 bg-yellow-50 rounded-md\">\n                <span class=\"text-yellow-500\">⚠</span>\n                <span class=\"text-yellow-700\">{warning}</span>\n              </div>\n            {/each}\n          </div>\n        </div>\n      {/if}\n\n      <!-- Validation Summary -->\n      <div class=\"bg-gray-50 p-4 rounded-md\">\n        <h4 class=\"font-medium text-gray-900 mb-3\">검증 요약</h4>\n        <div class=\"grid grid-cols-2 gap-4 text-sm\">\n          <div>\n            <span class=\"font-medium text-gray-700\">검증 상태:</span>\n            <span class=\"ml-2 {getValidationColor((selectedBundle as any).validationResults.valid)}\"\n            >\n              {(selectedBundle as any).validationResults.valid ? '통과' : '실패'}\n            </span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">완성도:</span>\n            <span\n              class=\"ml-2 {getCompletenessColor(\n                (selectedBundle as any).validationResults.completeness\n              )}\"\n            >\n              {(selectedBundle as any).validationResults.completeness}%\n            </span>\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">에러 수:</span>\n            <span class=\"ml-2 text-red-600\"\n            >{(selectedBundle as any).validationResults.errors.length}개</span\n            >\n          </div>\n          <div>\n            <span class=\"font-medium text-gray-700\">경고 수:</span>\n            <span class=\"ml-2 text-yellow-600\"\n            >{(selectedBundle as any).validationResults.warnings.length}개</span\n            >\n          </div>\n        </div>\n      </div>\n\n      <div class=\"flex justify-end gap-2\">\n        {#if selectedBundle.status === 'failed' || selectedBundle.status === 'ready'}\n          <button\n            type=\"button\"\n            onclick={() => selectedBundle && revalidateBundle(selectedBundle.id)}\n            class=\"px-4 py-2 bg-yellow-600 text-white rounded-md hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-yellow-500\"\n          >\n            재검증\n          </button>\n        {/if}\n        {#if selectedBundle.status === 'uploaded'}\n          <button\n            type=\"button\"\n            onclick={() => selectedBundle && downloadBundle(selectedBundle)}\n            class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            다운로드\n          </button>\n        {/if}\n      </div>\n    </div>\n  {/if}\n</Modal>\n\n<!-- Create Modal -->\n<Modal bind:open={showCreateModal} title=\"번들 생성\">\n  <div class=\"space-y-4\">\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-project\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >프로젝트 *</label\n        >\n        <select\n          id=\"create-project\"\n          bind:value={formData.projectId}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"\">프로젝트 선택</option>\n          {#each $projects as project, i (i)}\n            <option value={project.id}>{project.name}</option>\n          {/each}\n        </select>\n      </div>\n      <div>\n        <label\n          for=\"create-period\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >기간 *</label\n        >\n        <input\n          id=\"create-period\"\n          type=\"text\"\n          bind:value={formData.period}\n          placeholder=\"예: 2024-Q1\"\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        />\n      </div>\n    </div>\n    <div>\n      <div class=\"block text-sm font-medium text-gray-700 mb-2\">포함할 내용</div>\n      <div class=\"space-y-2\">\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeDocuments} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">문서 (계약서, 견적서 등)</span>\n        </label>\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeExpenses} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">지출 내역</span>\n        </label>\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeReports} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">진도보고서</span>\n        </label>\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.includeResearchNotes} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">연구노트</span>\n        </label>\n      </div>\n    </div>\n    <div class=\"grid grid-cols-2 gap-4\">\n      <div>\n        <label\n          for=\"create-compression\"\n          class=\"block text-sm font-medium text-gray-700 mb-1\"\n        >압축 수준</label\n        >\n        <select\n          id=\"create-compression\"\n          bind:value={formData.compressionLevel}\n          class=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          <option value=\"low\">낮음 (빠른 생성)</option>\n          <option value=\"medium\">보통 (균형)</option>\n          <option value=\"high\">높음 (작은 크기)</option>\n        </select>\n      </div>\n      <div class=\"flex items-end\">\n        <label class=\"flex items-center\">\n          <input type=\"checkbox\" bind:checked={formData.generateManifest} class=\"mr-2\" />\n          <span class=\"text-sm text-gray-700\">매니페스트 생성</span>\n        </label>\n      </div>\n    </div>\n    <div class=\"flex justify-end gap-2 pt-4\">\n      <button\n        type=\"button\"\n        onclick={() => (showCreateModal = false)}\n        class=\"px-4 py-2 text-gray-700 bg-gray-100 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500\"\n      >\n        취소\n      </button>\n      <button\n        type=\"button\"\n        onclick={createBundle}\n        class=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      >\n        생성\n      </button>\n    </div>\n  </div>\n</Modal>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/salary/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/salary/history/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/salary/payslips/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/sales/+page.svelte","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/routes/settings/+page.svelte","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'event' is defined but never used.","line":107,"column":36,"nodeType":"Identifier","messageId":"unusedVar","endLine":107,"endColumn":54,"suggestions":[{"messageId":"removeVar","data":{"varName":"event"},"fix":{"range":[2341,2359],"text":""},"desc":"Remove unused variable 'event'."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<script lang=\"ts\">\n  import PageLayout from '$lib/components/layout/PageLayout.svelte'\n  import CompanyModal from '$lib/components/ui/CompanyModal.svelte'\n  import ThemeButton from '$lib/components/ui/ThemeButton.svelte'\n  import ThemeCard from '$lib/components/ui/ThemeCard.svelte'\n  import ThemeSectionHeader from '$lib/components/ui/ThemeSectionHeader.svelte'\n  import ThemeSpacer from '$lib/components/ui/ThemeSpacer.svelte'\n  import ThemeTabs from '$lib/components/ui/ThemeTabs.svelte'\n  import {\n    availableTimezones,\n    currentTimezone,\n    setUserTimezone,\n    userTimezone\n  } from '$lib/stores/timezone'\n  import {\n    BellIcon,\n    BuildingIcon,\n    ClockIcon,\n    DatabaseIcon,\n    FileTextIcon,\n    PaletteIcon,\n    PlusIcon,\n    ShieldIcon,\n    UserIcon\n  } from '@lucide/svelte'\n  import { onMount } from 'svelte'\n\n  // 회사 정보 관련 상태\n  interface Company {\n    id?: string\n    name: string\n    establishment_date?: string\n    ceo_name?: string\n    business_type?: string\n    address?: string\n    phone?: string\n    fax?: string\n    email?: string\n    website?: string\n    registration_number?: string\n    created_at?: string\n    updated_at?: string\n  }\n\n  let company = $state<Company | null>(null)\n  let companyLoading = $state(false)\n  let showCompanyModal = $state(false)\n\n  // 탭 설정\n  const tabs = [\n    {\n      id: 'company',\n      label: '회사 정보',\n      icon: BuildingIcon\n    },\n    {\n      id: 'profile',\n      label: '프로필',\n      icon: UserIcon\n    },\n    {\n      id: 'timezone',\n      label: '시간 설정',\n      icon: ClockIcon\n    },\n    {\n      id: 'security',\n      label: '보안',\n      icon: ShieldIcon\n    },\n    {\n      id: 'notifications',\n      label: '알림',\n      icon: BellIcon\n    },\n    {\n      id: 'appearance',\n      label: '외관',\n      icon: PaletteIcon\n    },\n    {\n      id: 'data',\n      label: '데이터',\n      icon: DatabaseIcon\n    }\n  ]\n\n  let activeTab = $state('company')\n\n  // 회사 정보 가져오기\n  async function fetchCompany() {\n    try {\n      companyLoading = true\n      const response = await window.fetch('/api/company')\n      if (response.ok) {\n        const result = await response.json()\n        company = result.data\n      }\n    } catch (err) {\n      logger.error('Error fetching company:', err)\n    } finally {\n      companyLoading = false\n    }\n  }\n\n  // 회사 정보 저장 핸들러\n  async function handleCompanySave(event: CustomEvent) {\n    await fetchCompany()\n  }\n\n  onMount(() => {\n    fetchCompany()\n  })\n</script>\n\nimport {logger} from '$lib/utils/logger';\n\n<PageLayout title=\"설정\">\n  <ThemeSectionHeader title=\"설정\" />\n\n  <div class=\"mb-6\">\n    <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n      시스템 및 계정 설정을 관리합니다\n    </p>\n  </div>\n\n  <ThemeTabs {tabs} bind:activeTab>\n    {#snippet children(tab: { id: string; label: string })}\n      {#if tab.id === 'company'}\n        <!-- 회사 정보 탭 -->\n        <ThemeSpacer size={6}>\n          <div class=\"space-y-6\">\n            <!-- 헤더 -->\n            <div class=\"flex items-center justify-between\">\n              <div>\n                <h2 class=\"text-2xl font-bold\" style:color=\"var(--color-text)\">회사 정보</h2>\n                <p class=\"text-sm mt-1\" style:color=\"var(--color-text-secondary)\">\n                  회사의 기본 정보를 관리합니다.\n                </p>\n              </div>\n              <ThemeButton onclick={() => (showCompanyModal = true)} variant=\"primary\" size=\"md\">\n                <PlusIcon class=\"w-4 h-4 mr-2\" />\n                {company ? '회사 정보 수정' : '회사 정보 등록'}\n              </ThemeButton>\n            </div>\n\n            <!-- 회사 정보 카드 -->\n            {#if companyLoading}\n              <ThemeCard>\n                <div class=\"flex items-center justify-center py-12\">\n                  <div class=\"text-center\">\n                    <div class=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"\n                    ></div>\n                    <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                      회사 정보를 불러오는 중...\n                    </p>\n                  </div>\n                </div>\n              </ThemeCard>\n            {:else if company}\n              <ThemeCard>\n                <div class=\"space-y-6\">\n                  <!-- 기본 정보 -->\n                  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div>\n                      <h3 class=\"text-lg font-semibold mb-4\" style:color=\"var(--color-text)\">\n                        기본 정보\n                      </h3>\n                      <div class=\"space-y-3\">\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            회사명\n                          </div>\n                          <p class=\"text-lg font-semibold\" style:color=\"var(--color-text)\">\n                            {company.name}\n                          </p>\n                        </div>\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            대표이사\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.ceo_name || '-'}\n                          </p>\n                        </div>\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            설립일\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.establishment_date\n                              ? new Date(company.establishment_date).toLocaleDateString('ko-KR')\n                              : '-'}\n                          </p>\n                        </div>\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            업종\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.business_type || '-'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div>\n                      <h3 class=\"text-lg font-semibold mb-4\" style:color=\"var(--color-text)\">\n                        연락처 정보\n                      </h3>\n                      <div class=\"space-y-3\">\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            전화번호\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.phone || '-'}\n                          </p>\n                        </div>\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            팩스번호\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.fax || '-'}\n                          </p>\n                        </div>\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            이메일\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.email || '-'}\n                          </p>\n                        </div>\n                        <div>\n                          <div\n                            class=\"text-sm font-medium\"\n                            style:color=\"var(--color-text-secondary)\"\n                          >\n                            웹사이트\n                          </div>\n                          <p class=\"text-base\" style:color=\"var(--color-text)\">\n                            {company.website || '-'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- 주소 정보 -->\n                  <div>\n                    <h3 class=\"text-lg font-semibold mb-4\" style:color=\"var(--color-text)\">\n                      주소 정보\n                    </h3>\n                    <div>\n                      <div class=\"text-sm font-medium\" style:color=\"var(--color-text-secondary)\">\n                        주소\n                      </div>\n                      <p class=\"text-base\" style:color=\"var(--color-text)\">\n                        {company.address || '-'}\n                      </p>\n                    </div>\n                  </div>\n\n                  <!-- 사업자 정보 -->\n                  {#if company.registration_number}\n                    <div>\n                      <h3 class=\"text-lg font-semibold mb-4\" style:color=\"var(--color-text)\">\n                        사업자 정보\n                      </h3>\n                      <div>\n                        <div class=\"text-sm font-medium\" style:color=\"var(--color-text-secondary)\">\n                          사업자등록번호\n                        </div>\n                        <p class=\"text-base\" style:color=\"var(--color-text)\">\n                          {company.registration_number}\n                        </p>\n                      </div>\n                    </div>\n                  {/if}\n                </div>\n              </ThemeCard>\n            {:else}\n              <ThemeCard>\n                <div class=\"text-center py-12\">\n                  <FileTextIcon\n                    class=\"w-16 h-16 mx-auto mb-4\"\n                    style=\"color: var(--color-text-secondary);\"\n                  />\n                  <h3 class=\"text-lg font-semibold mb-2\" style:color=\"var(--color-text)\">\n                    등록된 회사 정보가 없습니다\n                  </h3>\n                  <p class=\"text-sm mb-6\" style:color=\"var(--color-text-secondary)\">\n                    회사 정보를 등록하여 조직 관리를 시작하세요.\n                  </p>\n                  <ThemeButton\n                    onclick={() => (showCompanyModal = true)}\n                    variant=\"primary\"\n                    size=\"md\"\n                  >\n                    <PlusIcon class=\"w-4 h-4 mr-2\" />\n                    회사 정보 등록\n                  </ThemeButton>\n                </div>\n              </ThemeCard>\n            {/if}\n          </div>\n        </ThemeSpacer>\n      {:else if tab.id === 'profile'}\n        <!-- 프로필 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard>\n            <div class=\"text-center py-12\">\n              <UserIcon\n                class=\"w-16 h-16 mx-auto mb-4\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <h3 class=\"text-lg font-semibold mb-2\" style:color=\"var(--color-text)\">\n                프로필 설정\n              </h3>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                개인 프로필 설정 기능이 곧 추가될 예정입니다.\n              </p>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'timezone'}\n        <!-- 시간 설정 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard>\n            <ThemeSectionHeader title=\"시간대 설정\" />\n\n            <div class=\"space-y-6\">\n              <!-- 현재 시간 표시 -->\n              <div class=\"p-4 rounded-lg\" style:background-color=\"var(--color-surface-secondary)\">\n                <h4 class=\"font-medium mb-2\" style:color=\"var(--color-text)\">현재 시간</h4>\n                <div class=\"text-2xl font-mono\" style:color=\"var(--color-text-accent)\">\n                  {$currentTimezone.displayName}\n                </div>\n                <div class=\"text-sm mt-1\" style:color=\"var(--color-text-secondary)\">\n                  현재 시간: {new Date().toLocaleString('ko-KR', {\n                    timeZone: $currentTimezone.timezoneString,\n                    year: 'numeric',\n                    month: '2-digit',\n                    day: '2-digit',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                    timeZoneName: 'short'\n                  })}\n                </div>\n              </div>\n\n              <!-- 타임존 선택 -->\n              <div>\n                <label\n                  for=\"timezone-select\"\n                  class=\"block text-sm font-medium mb-2\"\n                  style:color=\"var(--color-text)\"\n                >\n                  시간대 선택\n                </label>\n                <select\n                  id=\"timezone-select\"\n                  bind:value={$userTimezone}\n                  onchange={e => setUserTimezone((e.target as HTMLSelectElement).value as any)}\n                  class=\"w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n                  style:background-color=\"var(--color-surface)\"\n                  style:color=\"var(--color-text)\"\n                  style:border-color=\"var(--color-border)\"\n                >\n                  {#each availableTimezones as tz, i (i)}\n                    <option value={tz.key}>{tz.displayName}</option>\n                  {/each}\n                </select>\n                <p class=\"text-xs mt-1\" style:color=\"var(--color-text-secondary)\">\n                  시간대를 변경하면 모든 날짜와 시간이 새로운 시간대에 맞게 표시됩니다.\n                </p>\n              </div>\n\n              <!-- 지원되는 타임존 목록 -->\n              <div>\n                <h4 class=\"font-medium mb-3\" style:color=\"var(--color-text)\">지원되는 시간대</h4>\n                <div class=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {#each availableTimezones as tz, i (i)}\n                    <button\n                      type=\"button\"\n                      class=\"p-3 rounded-lg border cursor-pointer transition-colors text-left w-full\"\n                      class:bg-blue-50={$userTimezone === tz.key}\n                      class:border-blue-300={$userTimezone === tz.key}\n                      class:bg-gray-50={$userTimezone !== tz.key}\n                      class:border-gray-200={$userTimezone !== tz.key}\n                      onclick={() => setUserTimezone(tz.key)}\n                    >\n                      <div class=\"font-medium text-sm\" style:color=\"var(--color-text)\">\n                        {tz.displayName}\n                      </div>\n                      <div class=\"text-xs mt-1\" style:color=\"var(--color-text-secondary)\">\n                        {tz.value}\n                      </div>\n                    </button>\n                  {/each}\n                </div>\n              </div>\n\n              <!-- 시간대 정보 -->\n              <div class=\"p-4 rounded-lg\" style:background-color=\"var(--color-surface-secondary)\">\n                <h4 class=\"font-medium mb-2\" style:color=\"var(--color-text)\">시간대 정보</h4>\n                <div class=\"text-sm space-y-1\" style:color=\"var(--color-text-secondary)\">\n                  <p>• 모든 데이터는 UTC 기준으로 저장됩니다</p>\n                  <p>• 선택한 시간대에 따라 날짜와 시간이 표시됩니다</p>\n                  <p>• 프로젝트 생성 및 수정 시 선택한 시간대가 적용됩니다</p>\n                  <p>• 설정은 브라우저에 저장되며 다른 기기와 동기화되지 않습니다</p>\n                </div>\n              </div>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'security'}\n        <!-- 보안 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard>\n            <div class=\"text-center py-12\">\n              <ShieldIcon\n                class=\"w-16 h-16 mx-auto mb-4\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <h3 class=\"text-lg font-semibold mb-2\" style:color=\"var(--color-text)\">보안 설정</h3>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                보안 설정 기능이 곧 추가될 예정입니다.\n              </p>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'notifications'}\n        <!-- 알림 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard>\n            <div class=\"text-center py-12\">\n              <BellIcon\n                class=\"w-16 h-16 mx-auto mb-4\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <h3 class=\"text-lg font-semibold mb-2\" style:color=\"var(--color-text)\">알림 설정</h3>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                알림 설정 기능이 곧 추가될 예정입니다.\n              </p>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'appearance'}\n        <!-- 외관 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard>\n            <div class=\"text-center py-12\">\n              <PaletteIcon\n                class=\"w-16 h-16 mx-auto mb-4\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <h3 class=\"text-lg font-semibold mb-2\" style:color=\"var(--color-text)\">외관 설정</h3>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                외관 설정 기능이 곧 추가될 예정입니다.\n              </p>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {:else if tab.id === 'data'}\n        <!-- 데이터 탭 -->\n        <ThemeSpacer size={6}>\n          <ThemeCard>\n            <div class=\"text-center py-12\">\n              <DatabaseIcon\n                class=\"w-16 h-16 mx-auto mb-4\"\n                style=\"color: var(--color-text-secondary);\"\n              />\n              <h3 class=\"text-lg font-semibold mb-2\" style:color=\"var(--color-text)\">\n                데이터 관리\n              </h3>\n              <p class=\"text-sm\" style:color=\"var(--color-text-secondary)\">\n                데이터 관리 기능이 곧 추가될 예정입니다.\n              </p>\n            </div>\n          </ThemeCard>\n        </ThemeSpacer>\n      {/if}\n    {/snippet}\n  </ThemeTabs>\n\n  <!-- 회사 정보 모달 -->\n  <CompanyModal\n    open={showCompanyModal}\n    {company}\n    loading={companyLoading}\n    onclose={() => {\n      showCompanyModal = false\n    }}\n    onsave={handleCompanySave}\n  />\n</PageLayout>\n","usedDeprecatedRules":[{"ruleId":"svelte/no-dynamic-slot-name","replacedBy":{"note":"Now Svelte compiler itself throws an compile error."}}]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/src/types/lucide-svelte-icons.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/utils/ai-coding-guidelines.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/utils/code-dependency-analyzer.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":163,"column":20,"nodeType":"Identifier","messageId":"unusedVar","endLine":163,"endColumn":25},{"ruleId":"no-unused-vars","severity":2,"message":"'otherAnalysis' is assigned a value but never used.","line":280,"column":32,"nodeType":"Identifier","messageId":"unusedVar","endLine":280,"endColumn":45,"suggestions":[{"messageId":"removeVar","data":{"varName":"otherAnalysis"},"fix":{"range":[8199,8214],"text":""},"desc":"Remove unused variable 'otherAnalysis'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'allAnalysis' is defined but never used.","line":316,"column":52,"nodeType":"Identifier","messageId":"unusedVar","endLine":316,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"allAnalysis"},"fix":{"range":[9207,9220],"text":""},"desc":"Remove unused variable 'allAnalysis'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'filePath' is defined but never used.","line":374,"column":28,"nodeType":"Identifier","messageId":"unusedVar","endLine":374,"endColumn":36,"suggestions":[{"messageId":"removeVar","data":{"varName":"filePath"},"fix":{"range":[10900,10909],"text":""},"desc":"Remove unused variable 'filePath'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'importPath' is defined but never used.","line":374,"column":38,"nodeType":"Identifier","messageId":"unusedVar","endLine":374,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"importPath"},"fix":{"range":[10908,10920],"text":""},"desc":"Remove unused variable 'importPath'."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict'\nObject.defineProperty(exports, '__esModule', { value: true })\nexports.CodeDependencyAnalyzer = void 0\nconst fs_1 = require('fs')\nconst path_1 = require('path')\n// 코드 의존성 분석기\nclass CodeDependencyAnalyzer {\n  /**\n   * 전체 프로젝트 의존성 분석\n   */\n  static async analyzeProjectDependencies() {\n    const analysis = new Map()\n    const files = this.getAllSourceFiles()\n    console.log(`🔍 [의존성 분석] ${files.length}개 파일 분석 시작`)\n    // 1단계: 각 파일의 기본 정보 수집\n    for (const file of files) {\n      try {\n        const content = (0, fs_1.readFileSync)(file, 'utf-8')\n        const fileAnalysis = this.analyzeFile(file, content)\n        analysis.set(file, fileAnalysis)\n      } catch (error) {\n        console.error(`파일 분석 실패: ${file}`, error)\n      }\n    }\n    // 2단계: 의존성 관계 분석\n    for (const [filePath, fileAnalysis] of analysis) {\n      fileAnalysis.dependencies = this.findDependencies(filePath, analysis)\n      fileAnalysis.dependents = this.findDependents(filePath, analysis)\n      fileAnalysis.riskLevel = this.calculateRiskLevel(fileAnalysis)\n    }\n    // 3단계: 변경 영향도 분석\n    for (const [filePath, fileAnalysis] of analysis) {\n      fileAnalysis.changeImpact = this.calculateChangeImpact(filePath, fileAnalysis, analysis)\n    }\n    console.log(`✅ [의존성 분석] 완료 - ${analysis.size}개 파일 분석`)\n    return analysis\n  }\n  /**\n   * 특정 파일의 의존성 분석\n   */\n  static analyzeFileDependencies(filePath) {\n    try {\n      const content = (0, fs_1.readFileSync)(filePath, 'utf-8')\n      return this.analyzeFile(filePath, content)\n    } catch (error) {\n      console.error(`파일 분석 실패: ${filePath}`, error)\n      return null\n    }\n  }\n  /**\n   * 변경 영향도 예측\n   */\n  static predictChangeImpact(filePath, changeType, analysis) {\n    const fileAnalysis = analysis.get(filePath)\n    if (!fileAnalysis) return []\n    const impacts = []\n    // 직접 의존하는 파일들\n    for (const dependent of fileAnalysis.dependents) {\n      impacts.push({\n        affectedFile: dependent,\n        impactType: changeType === 'delete' ? 'breaking' : 'unknown',\n        description: `${changeType} 변경으로 인한 직접적 영향`,\n        severity: changeType === 'delete' ? 'critical' : 'medium'\n      })\n    }\n    // 간접 의존하는 파일들 (2단계)\n    for (const dependent of fileAnalysis.dependents) {\n      const dependentAnalysis = analysis.get(dependent)\n      if (dependentAnalysis) {\n        for (const indirectDependent of dependentAnalysis.dependents) {\n          impacts.push({\n            affectedFile: indirectDependent,\n            impactType: 'unknown',\n            description: `${changeType} 변경으로 인한 간접적 영향`,\n            severity: 'low'\n          })\n        }\n      }\n    }\n    return impacts\n  }\n  /**\n   * 안전한 변경 절차 생성\n   */\n  static generateSafeChangeProcedure(filePath, changeType, analysis) {\n    const fileAnalysis = analysis.get(filePath)\n    if (!fileAnalysis) {\n      return {\n        procedure: [],\n        risks: ['파일을 찾을 수 없습니다.'],\n        recommendations: ['파일 경로를 확인하세요.'],\n        affectedFiles: []\n      }\n    }\n    const impacts = this.predictChangeImpact(filePath, changeType, analysis)\n    const affectedFiles = [...new Set(impacts.map(impact => impact.affectedFile))]\n    const procedure = []\n    const risks = []\n    const recommendations = []\n    // 절차 생성\n    procedure.push('1. 변경 전 백업 생성')\n    procedure.push('2. 의존성 분석 결과 검토')\n    procedure.push('3. 영향받는 파일들 식별')\n    procedure.push('4. 단계별 변경 실행')\n    procedure.push('5. 변경 후 검증')\n    // 위험 요소 식별\n    if (fileAnalysis.riskLevel === 'critical' || fileAnalysis.riskLevel === 'high') {\n      risks.push('높은 위험도 파일 - 신중한 변경 필요')\n    }\n    if (affectedFiles.length > 10) {\n      risks.push('많은 파일에 영향 - 광범위한 테스트 필요')\n    }\n    if (impacts.some(impact => impact.impactType === 'breaking')) {\n      risks.push('Breaking Change 감지 - 하위 호환성 문제 가능')\n    }\n    // 권장사항\n    if (changeType === 'delete') {\n      recommendations.push('삭제 전 모든 참조 제거')\n      recommendations.push('대체 방안 마련')\n    }\n    if (changeType === 'rename') {\n      recommendations.push('단계적 이름 변경 (별칭 유지)')\n      recommendations.push('모든 참조 업데이트')\n    }\n    if (changeType === 'modify') {\n      recommendations.push('하위 호환성 유지')\n      recommendations.push('API 변경 시 버전 관리')\n    }\n    recommendations.push('변경 후 전체 테스트 실행')\n    recommendations.push('문서 업데이트')\n    return {\n      procedure,\n      risks,\n      recommendations,\n      affectedFiles\n    }\n  }\n  /**\n   * 모든 소스 파일 목록 가져오기\n   */\n  static getAllSourceFiles() {\n    const files = []\n    try {\n      const scanDirectory = dir => {\n        if (!(0, fs_1.statSync)(dir).isDirectory()) {\n          return\n        }\n        const items = (0, fs_1.readdirSync)(dir)\n        for (const item of items) {\n          const fullPath = (0, path_1.join)(dir, item)\n          try {\n            const stat = (0, fs_1.statSync)(fullPath)\n            if (stat.isDirectory()) {\n              if (!this.IGNORE_PATTERNS.some(pattern => item.includes(pattern))) {\n                scanDirectory(fullPath)\n              }\n            } else if (stat.isFile()) {\n              const ext = (0, path_1.extname)(item)\n              if (this.SUPPORTED_EXTENSIONS.includes(ext)) {\n                files.push(fullPath)\n              }\n            }\n          } catch (error) {\n            // 개별 파일/디렉토리 접근 실패는 무시\n            console.warn(`파일 접근 실패: ${fullPath}`)\n          }\n        }\n      }\n      scanDirectory(this.SRC_DIR)\n    } catch (error) {\n      console.error('소스 디렉토리 스캔 실패:', error)\n    }\n    return files\n  }\n  /**\n   * 파일 분석\n   */\n  static analyzeFile(filePath, content) {\n    const imports = this.extractImports(content)\n    const exports = this.extractExports(content)\n    return {\n      filePath,\n      dependencies: [],\n      dependents: [],\n      imports,\n      exports,\n      usage: [],\n      riskLevel: 'low',\n      changeImpact: []\n    }\n  }\n  /**\n   * Import 정보 추출\n   */\n  static extractImports(content) {\n    const imports = []\n    const lines = content.split('\\n')\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim()\n      // ES6 import\n      const es6Match = line.match(\n        /^import\\s+(?:{[^}]*}|\\*\\s+as\\s+\\w+|\\w+)\\s+from\\s+['\"]([^'\"]+)['\"]/\n      )\n      if (es6Match) {\n        imports.push({\n          path: es6Match[1],\n          type: this.getImportType(es6Match[1]),\n          importedItems: this.extractImportedItems(line),\n          lineNumber: i + 1\n        })\n      }\n      // CommonJS require\n      const requireMatch = line.match(/require\\(['\"]([^'\"]+)['\"]\\)/)\n      if (requireMatch) {\n        imports.push({\n          path: requireMatch[1],\n          type: this.getImportType(requireMatch[1]),\n          importedItems: [],\n          lineNumber: i + 1\n        })\n      }\n    }\n    return imports\n  }\n  /**\n   * Export 정보 추출\n   */\n  static extractExports(content) {\n    const exports = []\n    const lines = content.split('\\n')\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim()\n      // Named export\n      const namedExportMatch = line.match(\n        /^export\\s+(?:const|let|var|function|class|interface|type)\\s+(\\w+)/\n      )\n      if (namedExportMatch) {\n        exports.push({\n          name: namedExportMatch[1],\n          type: this.getExportType(line),\n          lineNumber: i + 1,\n          isDefault: false\n        })\n      }\n      // Default export\n      const defaultExportMatch = line.match(/^export\\s+default\\s+(\\w+)/)\n      if (defaultExportMatch) {\n        exports.push({\n          name: defaultExportMatch[1],\n          type: this.getExportType(line),\n          lineNumber: i + 1,\n          isDefault: true\n        })\n      }\n    }\n    return exports\n  }\n  /**\n   * 의존성 찾기\n   */\n  static findDependencies(filePath, analysis) {\n    const fileAnalysis = analysis.get(filePath)\n    if (!fileAnalysis) return []\n    const dependencies = []\n    for (const importInfo of fileAnalysis.imports) {\n      if (importInfo.type === 'relative') {\n        const resolvedPath = this.resolveImportPath(filePath, importInfo.path)\n        if (resolvedPath && analysis.has(resolvedPath)) {\n          dependencies.push(resolvedPath)\n        }\n      }\n    }\n    return dependencies\n  }\n  /**\n   * 의존하는 파일들 찾기\n   */\n  static findDependents(filePath, analysis) {\n    const dependents = []\n    for (const [otherFilePath, otherAnalysis] of analysis) {\n      if (otherFilePath === filePath) continue\n      const dependencies = this.findDependencies(otherFilePath, analysis)\n      if (dependencies.includes(filePath)) {\n        dependents.push(otherFilePath)\n      }\n    }\n    return dependents\n  }\n  /**\n   * 위험도 계산\n   */\n  static calculateRiskLevel(analysis) {\n    let riskScore = 0\n    // 의존하는 파일 수\n    riskScore += analysis.dependencies.length * 1\n    // 의존하는 파일 수\n    riskScore += analysis.dependents.length * 2\n    // Export 수\n    riskScore += analysis.exports.length * 1\n    // 글로벌 유틸리티 파일인지 확인\n    if (analysis.filePath.includes('/utils/') || analysis.filePath.includes('/lib/')) {\n      riskScore += 5\n    }\n    // API 파일인지 확인\n    if (analysis.filePath.includes('/api/')) {\n      riskScore += 3\n    }\n    if (riskScore >= 20) return 'critical'\n    if (riskScore >= 15) return 'high'\n    if (riskScore >= 10) return 'medium'\n    return 'low'\n  }\n  /**\n   * 변경 영향도 계산\n   */\n  static calculateChangeImpact(filePath, analysis, allAnalysis) {\n    const impacts = []\n    for (const dependent of analysis.dependents) {\n      impacts.push({\n        affectedFile: dependent,\n        impactType: 'unknown',\n        description: '직접 의존성으로 인한 영향',\n        severity: analysis.riskLevel === 'critical' ? 'high' : 'medium'\n      })\n    }\n    return impacts\n  }\n  /**\n   * Import 타입 결정\n   */\n  static getImportType(path) {\n    if (path.startsWith('.')) return 'relative'\n    if (path.startsWith('/')) return 'absolute'\n    return 'package'\n  }\n  /**\n   * Export 타입 결정\n   */\n  static getExportType(line) {\n    if (line.includes('function')) return 'function'\n    if (line.includes('class')) return 'class'\n    if (line.includes('interface')) return 'interface'\n    if (line.includes('type')) return 'type'\n    if (line.includes('const')) return 'const'\n    if (line.includes('let')) return 'let'\n    return 'var'\n  }\n  /**\n   * Import된 항목들 추출\n   */\n  static extractImportedItems(line) {\n    const items = []\n    // Named imports: import { a, b, c } from '...'\n    const namedMatch = line.match(/import\\s+{([^}]+)}\\s+from/)\n    if (namedMatch) {\n      const namedItems = namedMatch[1].split(',').map(item => item.trim())\n      items.push(...namedItems)\n    }\n    // Default import: import defaultName from '...'\n    const defaultMatch = line.match(/import\\s+(\\w+)\\s+from/)\n    if (defaultMatch && !line.includes('{')) {\n      items.push(defaultMatch[1])\n    }\n    // Namespace import: import * as name from '...'\n    const namespaceMatch = line.match(/import\\s+\\*\\s+as\\s+(\\w+)\\s+from/)\n    if (namespaceMatch) {\n      items.push(namespaceMatch[1])\n    }\n    return items\n  }\n  /**\n   * Import 경로 해결\n   */\n  static resolveImportPath(filePath, importPath) {\n    // 상대 경로 해결 로직\n    // 실제 구현에서는 path.resolve 등을 사용\n    return null\n  }\n}\nexports.CodeDependencyAnalyzer = CodeDependencyAnalyzer\nCodeDependencyAnalyzer.SRC_DIR = 'src'\nCodeDependencyAnalyzer.SUPPORTED_EXTENSIONS = ['.ts', '.js', '.svelte', '.vue', '.jsx', '.tsx']\nCodeDependencyAnalyzer.IGNORE_PATTERNS = ['node_modules', '.git', 'dist', 'build', '.svelte-kit']\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/utils/safe-change-manager.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'analysis' is defined but never used.","line":157,"column":56,"nodeType":"Identifier","messageId":"unusedVar","endLine":157,"endColumn":64,"suggestions":[{"messageId":"removeVar","data":{"varName":"analysis"},"fix":{"range":[4849,4859],"text":""},"desc":"Remove unused variable 'analysis'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'impacts' is defined but never used.","line":157,"column":66,"nodeType":"Identifier","messageId":"unusedVar","endLine":157,"endColumn":73,"suggestions":[{"messageId":"removeVar","data":{"varName":"impacts"},"fix":{"range":[4859,4868],"text":""},"desc":"Remove unused variable 'impacts'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'impacts' is defined but never used.","line":180,"column":53,"nodeType":"Identifier","messageId":"unusedVar","endLine":180,"endColumn":60,"suggestions":[{"messageId":"removeVar","data":{"varName":"impacts"},"fix":{"range":[5545,5554],"text":""},"desc":"Remove unused variable 'impacts'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use strict'\nObject.defineProperty(exports, '__esModule', { value: true })\nexports.SafeChangeManager = void 0\nconst code_dependency_analyzer_1 = require('./code-dependency-analyzer')\n// 안전한 변경 관리자\nclass SafeChangeManager {\n  /**\n   * 안전한 변경 계획 생성\n   */\n  static async createChangePlan(filePath, changeType, description) {\n    console.log(`📋 [변경 계획 생성] ${changeType}: ${filePath}`)\n    // 의존성 분석\n    const analysis =\n      await code_dependency_analyzer_1.CodeDependencyAnalyzer.analyzeProjectDependencies()\n    const fileAnalysis = analysis.get(filePath)\n    if (!fileAnalysis) {\n      throw new Error(`파일을 찾을 수 없습니다: ${filePath}`)\n    }\n    // 변경 영향도 예측 (ChangeType을 predictChangeImpact가 받는 타입으로 변환)\n    const impactChangeType = changeType === 'add' ? 'modify' : changeType\n    const impacts = code_dependency_analyzer_1.CodeDependencyAnalyzer.predictChangeImpact(\n      filePath,\n      impactChangeType,\n      analysis\n    )\n    // 안전한 변경 절차 생성\n    const procedure = this.generateChangeProcedure(filePath, changeType, fileAnalysis, impacts)\n    // 롤백 계획 생성\n    const rollbackPlan = this.generateRollbackPlan(filePath, changeType, impacts)\n    // 검증 체크리스트 생성\n    const validationChecks = this.generateValidationChecks(filePath, changeType, fileAnalysis)\n    const plan = {\n      id: this.generatePlanId(),\n      filePath,\n      changeType,\n      description,\n      status: 'pending',\n      currentStep: 'analysis',\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      analysis: fileAnalysis,\n      impacts,\n      procedure,\n      risks: this.identifyRisks(fileAnalysis, impacts),\n      recommendations: this.generateRecommendations(filePath, changeType, fileAnalysis),\n      affectedFiles: impacts.map(impact => impact.affectedFile),\n      rollbackPlan,\n      validationChecks\n    }\n    this.changePlans.set(plan.id, plan)\n    console.log(`✅ [변경 계획 생성] 완료 - ID: ${plan.id}`)\n    return plan\n  }\n  /**\n   * 변경 계획 실행\n   */\n  static async executeChangePlan(planId) {\n    const plan = this.changePlans.get(planId)\n    if (!plan) {\n      return { success: false, message: '변경 계획을 찾을 수 없습니다.' }\n    }\n    console.log(`🚀 [변경 실행] ${plan.changeType}: ${plan.filePath}`)\n    try {\n      plan.status = 'in_progress'\n      plan.updatedAt = new Date()\n      // 현재 단계에 따른 실행\n      switch (plan.currentStep) {\n        case 'analysis':\n          return await this.executeAnalysisStep(plan)\n        case 'backup':\n          return await this.executeBackupStep(plan)\n        case 'preparation':\n          return await this.executePreparationStep(plan)\n        case 'execution':\n          return await this.executeExecutionStep(plan)\n        case 'validation':\n          return await this.executeValidationStep(plan)\n        case 'cleanup':\n          return await this.executeCleanupStep(plan)\n        default:\n          return { success: false, message: '알 수 없는 단계입니다.' }\n      }\n    } catch (error) {\n      plan.status = 'failed'\n      plan.updatedAt = new Date()\n      return {\n        success: false,\n        message: `변경 실행 실패: ${error instanceof Error ? error.message : 'Unknown error'}`\n      }\n    }\n  }\n  /**\n   * 변경 계획 롤백\n   */\n  static async rollbackChangePlan(planId) {\n    const plan = this.changePlans.get(planId)\n    if (!plan) {\n      return { success: false, message: '변경 계획을 찾을 수 없습니다.' }\n    }\n    console.log(`🔄 [변경 롤백] ${plan.changeType}: ${plan.filePath}`)\n    try {\n      // 롤백 계획 실행\n      for (const rollbackStep of plan.rollbackPlan) {\n        console.log(`  🔄 ${rollbackStep}`)\n        // 실제 롤백 로직 구현\n      }\n      plan.status = 'rolled_back'\n      plan.updatedAt = new Date()\n      return { success: true, message: '롤백이 완료되었습니다.' }\n    } catch (error) {\n      return {\n        success: false,\n        message: `롤백 실패: ${error instanceof Error ? error.message : 'Unknown error'}`\n      }\n    }\n  }\n  /**\n   * 변경 계획 조회\n   */\n  static getChangePlan(planId) {\n    return this.changePlans.get(planId) || null\n  }\n  /**\n   * 모든 변경 계획 조회\n   */\n  static getAllChangePlans() {\n    return Array.from(this.changePlans.values())\n  }\n  /**\n   * 변경 검증\n   */\n  static validateChange(filePath, changeType, content) {\n    const result = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      recommendations: []\n    }\n    // 파일 타입별 검증 규칙 적용\n    if (filePath.includes('/utils/') || filePath.includes('/lib/')) {\n      this.validateGlobalFile(filePath, content, result)\n    }\n    if (filePath.includes('/routes/') || filePath.includes('/pages/')) {\n      this.validatePageFile(filePath, content, result)\n    }\n    if (filePath.includes('/api/')) {\n      this.validateApiFile(filePath, content, result)\n    }\n    // 일반적인 검증 규칙\n    this.validateGeneralRules(filePath, content, result)\n    result.isValid = result.errors.length === 0\n    return result\n  }\n  /**\n   * 변경 절차 생성\n   */\n  static generateChangeProcedure(filePath, changeType, analysis, impacts) {\n    const procedure = []\n    procedure.push('1. 변경 전 의존성 분석 완료')\n    procedure.push('2. 백업 생성')\n    procedure.push('3. 영향받는 파일들 확인')\n    if (changeType === 'delete') {\n      procedure.push('4. 모든 참조 제거')\n      procedure.push('5. 파일 삭제')\n    } else if (changeType === 'rename') {\n      procedure.push('4. 새 이름으로 파일 생성')\n      procedure.push('5. 모든 참조 업데이트')\n      procedure.push('6. 기존 파일 삭제')\n    } else if (changeType === 'modify') {\n      procedure.push('4. 파일 수정')\n    }\n    procedure.push('6. 변경 후 검증')\n    procedure.push('7. 테스트 실행')\n    procedure.push('8. 문서 업데이트')\n    return procedure\n  }\n  /**\n   * 롤백 계획 생성\n   */\n  static generateRollbackPlan(filePath, changeType, impacts) {\n    const rollbackPlan = []\n    rollbackPlan.push('1. 백업에서 원본 파일 복원')\n    if (changeType === 'delete') {\n      rollbackPlan.push('2. 삭제된 파일 복원')\n    } else if (changeType === 'rename') {\n      rollbackPlan.push('2. 파일명을 원래대로 변경')\n      rollbackPlan.push('3. 모든 참조를 원래대로 복원')\n    } else if (changeType === 'modify') {\n      rollbackPlan.push('2. 수정된 파일을 원본으로 복원')\n    }\n    rollbackPlan.push('3. 영향받은 파일들 복원')\n    rollbackPlan.push('4. 검증 및 테스트')\n    return rollbackPlan\n  }\n  /**\n   * 검증 체크리스트 생성\n   */\n  static generateValidationChecks(filePath, changeType, analysis) {\n    const checks = []\n    // 기본 검증\n    checks.push('문법 오류 없음')\n    checks.push('타입 오류 없음')\n    checks.push('린트 오류 없음')\n    // 의존성 관련 검증\n    if (analysis.dependents.length > 0) {\n      checks.push('의존하는 파일들이 정상 작동')\n      checks.push('Import/Export 관계 정상')\n    }\n    // 파일 타입별 검증\n    if (filePath.includes('/api/')) {\n      checks.push('API 엔드포인트 정상 응답')\n      checks.push('에러 처리 정상')\n    }\n    if (filePath.includes('/utils/')) {\n      checks.push('유틸리티 함수 정상 작동')\n      checks.push('모든 사용처에서 정상 호출')\n    }\n    return checks\n  }\n  /**\n   * 위험 요소 식별\n   */\n  static identifyRisks(analysis, impacts) {\n    const risks = []\n    if (analysis.riskLevel === 'critical') {\n      risks.push('Critical 위험도 파일 - 신중한 변경 필요')\n    }\n    if (impacts.length > 10) {\n      risks.push('많은 파일에 영향 - 광범위한 테스트 필요')\n    }\n    if (impacts.some(impact => impact.impactType === 'breaking')) {\n      risks.push('Breaking Change 감지 - 하위 호환성 문제 가능')\n    }\n    return risks\n  }\n  /**\n   * 권장사항 생성\n   */\n  static generateRecommendations(filePath, changeType, analysis) {\n    const recommendations = []\n    if (changeType === 'delete') {\n      recommendations.push('삭제 전 모든 참조 제거')\n      recommendations.push('대체 방안 마련')\n    }\n    if (changeType === 'rename') {\n      recommendations.push('단계적 이름 변경 (별칭 유지)')\n      recommendations.push('모든 참조 업데이트')\n    }\n    if (analysis.dependents.length > 5) {\n      recommendations.push('의존하는 파일이 많음 - 단계적 변경 고려')\n    }\n    recommendations.push('변경 후 전체 테스트 실행')\n    recommendations.push('문서 업데이트')\n    return recommendations\n  }\n  /**\n   * 글로벌 파일 검증\n   */\n  static validateGlobalFile(filePath, content, result) {\n    // 글로벌 유틸리티 함수 검증\n    if (content.includes('export') && !content.includes('export default')) {\n      result.warnings.push('글로벌 유틸리티 함수 변경 시 모든 사용처 확인 필요')\n    }\n    // 타입 정의 검증\n    if (content.includes('interface') || content.includes('type')) {\n      result.warnings.push('타입 정의 변경 시 모든 구현체 확인 필요')\n    }\n  }\n  /**\n   * 페이지 파일 검증\n   */\n  static validatePageFile(filePath, content, result) {\n    // 컴포넌트 props 검증\n    if (content.includes('export let')) {\n      result.warnings.push('컴포넌트 props 변경 시 상위 컴포넌트 확인 필요')\n    }\n    // 라우트 검증\n    if (filePath.includes('/routes/')) {\n      result.warnings.push('라우트 변경 시 네비게이션 링크 확인 필요')\n    }\n  }\n  /**\n   * API 파일 검증\n   */\n  static validateApiFile(filePath, content, result) {\n    // API 응답 형식 검증\n    if (content.includes('json(')) {\n      result.warnings.push('API 응답 형식 변경 시 클라이언트 호환성 확인 필요')\n    }\n    // 인증/권한 검증\n    if (content.includes('auth') || content.includes('permission')) {\n      result.warnings.push('인증/권한 로직 변경 시 보안 영향 확인 필요')\n    }\n  }\n  /**\n   * 일반적인 검증 규칙\n   */\n  static validateGeneralRules(filePath, content, result) {\n    // 하드코딩된 값 검증\n    if (content.includes('localhost') || content.includes('127.0.0.1')) {\n      result.warnings.push('하드코딩된 URL 사용 - 환경 변수 사용 권장')\n    }\n    // 에러 처리 검증\n    if (content.includes('await') && !content.includes('try') && !content.includes('catch')) {\n      result.warnings.push('비동기 작업에 에러 처리 추가 권장')\n    }\n  }\n  /**\n   * 계획 ID 생성\n   */\n  static generatePlanId() {\n    return `plan_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n  }\n  /**\n   * 분석 단계 실행\n   */\n  static async executeAnalysisStep(plan) {\n    console.log('  📊 의존성 분석 완료')\n    plan.currentStep = 'backup'\n    plan.updatedAt = new Date()\n    return { success: true, message: '분석 완료', nextStep: 'backup' }\n  }\n  /**\n   * 백업 단계 실행\n   */\n  static async executeBackupStep(plan) {\n    console.log('  💾 백업 생성 완료')\n    plan.currentStep = 'preparation'\n    plan.updatedAt = new Date()\n    return { success: true, message: '백업 완료', nextStep: 'preparation' }\n  }\n  /**\n   * 준비 단계 실행\n   */\n  static async executePreparationStep(plan) {\n    console.log('  🔧 변경 준비 완료')\n    plan.currentStep = 'execution'\n    plan.updatedAt = new Date()\n    return { success: true, message: '준비 완료', nextStep: 'execution' }\n  }\n  /**\n   * 실행 단계 실행\n   */\n  static async executeExecutionStep(plan) {\n    console.log('  ⚡ 변경 실행 완료')\n    plan.currentStep = 'validation'\n    plan.updatedAt = new Date()\n    return { success: true, message: '실행 완료', nextStep: 'validation' }\n  }\n  /**\n   * 검증 단계 실행\n   */\n  static async executeValidationStep(plan) {\n    console.log('  ✅ 검증 완료')\n    plan.currentStep = 'cleanup'\n    plan.updatedAt = new Date()\n    return { success: true, message: '검증 완료', nextStep: 'cleanup' }\n  }\n  /**\n   * 정리 단계 실행\n   */\n  static async executeCleanupStep(plan) {\n    console.log('  🧹 정리 완료')\n    plan.status = 'completed'\n    plan.updatedAt = new Date()\n    return { success: true, message: '모든 단계 완료' }\n  }\n}\nexports.SafeChangeManager = SafeChangeManager\nSafeChangeManager.changePlans = new Map()\nSafeChangeManager.VALIDATION_RULES = {\n  global: [\n    '글로벌 유틸리티 함수 변경 시 모든 사용처 확인',\n    'API 엔드포인트 변경 시 클라이언트 코드 확인',\n    '데이터베이스 스키마 변경 시 마이그레이션 계획',\n    '타입 정의 변경 시 모든 구현체 확인'\n  ],\n  page: [\n    '페이지별 컴포넌트 변경 시 상위/하위 컴포넌트 확인',\n    '라우트 변경 시 네비게이션 링크 확인',\n    '상태 관리 변경 시 관련 컴포넌트 확인',\n    '스타일 변경 시 테마 일관성 확인'\n  ],\n  api: [\n    'API 응답 형식 변경 시 클라이언트 호환성 확인',\n    '인증/권한 로직 변경 시 보안 영향 확인',\n    '데이터베이스 쿼리 변경 시 성능 영향 확인',\n    '에러 처리 변경 시 클라이언트 에러 핸들링 확인'\n  ]\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/utils/schema-validation.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/adminvia/devwork/_viahub/vws/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
