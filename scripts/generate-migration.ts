#!/usr/bin/env tsx
/**
 * Migration 생성 스크립트
 *
 * resources.ts와 DB의 차이를 분석하여 SQL Migration 파일을 자동 생성합니다.
 *
 * Usage:
 *   npm run generate-migration
 *   tsx scripts/generate-migration.ts
 */

import { Pool } from 'pg'
import { writeFileSync, readdirSync } from 'fs'
import { join } from 'path'
import { extractResourcesToSync } from './sync-resources-to-db.js'
import { getResourceData } from '../src/lib/config/resources.js'

// ============================================
// 설정
// ============================================

const DB_URL =
  process.env.DATABASE_URL ||
  'postgresql://postgres:viahubdev@db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com:5432/postgres'

const pool = new Pool({
  connectionString: DB_URL,
  ssl: {
    rejectUnauthorized: false,
  },
})

const ACTIONS = ['read', 'write', 'delete', 'approve'] as const
const MIGRATIONS_DIR = join(process.cwd(), 'migrations')

// ============================================
// 색상 유틸리티
// ============================================

const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
}

function color(text: string, colorCode: string): string {
  return `${colorCode}${text}${colors.reset}`
}

// ============================================
// Migration 번호 생성
// ============================================

function getNextMigrationNumber(): string {
  const files = readdirSync(MIGRATIONS_DIR)
  const numbers = files.filter((f) => f.match(/^\d{3}_/)).map((f) => parseInt(f.substring(0, 3)))

  const maxNumber = numbers.length > 0 ? Math.max(...numbers) : 0
  return String(maxNumber + 1).padStart(3, '0')
}

// ============================================
// 액션명 한글화
// ============================================

function getActionNameKo(action: string): string {
  const map: Record<string, string> = {
    read: '조회',
    write: '수정',
    delete: '삭제',
    approve: '승인',
  }
  return map[action] || action
}

// ============================================
// 변경사항 감지
// ============================================

interface PermissionChange {
  code: string
  resource: string
  action: string
  description: string
  isNew: boolean
}

async function detectChanges(): Promise<PermissionChange[]> {
  console.log(color('\n🔍 Detecting changes...', colors.cyan))

  // 1. 코드에서 리소스 추출
  const resourceData = getResourceData()
  const resources = extractResourcesToSync(resourceData)
  console.log(color(`   Found ${resources.length} resources in code`, colors.green))

  // 2. DB에서 기존 권한 조회
  const dbPermissions = await pool.query<{ code: string }>('SELECT code FROM permissions')
  const existingCodes = new Set(dbPermissions.rows.map((r) => r.code))
  console.log(color(`   Found ${existingCodes.size} permissions in DB`, colors.green))

  // 3. 변경사항 수집
  const changes: PermissionChange[] = []

  for (const resource of resources) {
    for (const action of ACTIONS) {
      const code = `${resource.key}.${action}`
      const description = `${resource.nameKo} ${getActionNameKo(action)}`

      if (!existingCodes.has(code)) {
        changes.push({
          code,
          resource: resource.key,
          action,
          description,
          isNew: true,
        })
      }
    }
  }

  console.log(color(`   Found ${changes.length} new permissions to add\n`, colors.yellow))

  return changes
}

// ============================================
// SQL 생성
// ============================================

function generateSQL(changes: PermissionChange[]): string {
  const timestamp = new Date().toISOString()
  const migrationNumber = getNextMigrationNumber()

  let sql = `-- =============================================
-- Migration ${migrationNumber}: Sync resources from resources.ts
-- Auto-generated: ${timestamp}
-- =============================================
-- 
-- This migration adds missing permissions based on resources.ts
-- Generated by: scripts/generate-migration.ts
-- 
-- Changes:
--   - ${changes.length} new permissions
--   - Auto-assigned to ADMIN role
-- 
-- =============================================

BEGIN;

`

  // 권한 추가
  if (changes.length > 0) {
    sql += `-- =============================================
-- 1. Add new permissions
-- =============================================

INSERT INTO permissions (code, resource, action, description, scope, is_active)
VALUES
`

    sql += changes
      .map(
        (c) => `  ('${c.code}', '${c.resource}', '${c.action}', '${c.description}', 'all', true)`,
      )
      .join(',\n')

    sql += `
ON CONFLICT (code) DO NOTHING;

`
  }

  // ADMIN 할당
  sql += `-- =============================================
-- 2. Assign new permissions to ADMIN role
-- =============================================

INSERT INTO role_permissions (role_id, permission_id)
SELECT 
  (SELECT id FROM roles WHERE code = 'ADMIN'),
  p.id
FROM permissions p
WHERE p.code IN (
`

  if (changes.length > 0) {
    sql += changes.map((c) => `  '${c.code}'`).join(',\n')
  } else {
    sql += `  -- No new permissions`
  }

  sql += `
)
AND NOT EXISTS (
  SELECT 1 FROM role_permissions rp
  WHERE rp.role_id = (SELECT id FROM roles WHERE code = 'ADMIN')
    AND rp.permission_id = p.id
);

`

  // 캐시 무효화
  sql += `-- =============================================
-- 3. Clear permission cache
-- =============================================

DELETE FROM permission_cache;

-- =============================================
-- Complete
-- =============================================

COMMIT;

-- =============================================
-- Verification Query (run after migration)
-- =============================================
-- 
-- SELECT COUNT(*) as total_permissions 
-- FROM permissions;
-- 
-- SELECT r.code, COUNT(rp.id) as permission_count
-- FROM roles r
-- LEFT JOIN role_permissions rp ON r.id = rp.role_id
-- WHERE r.code = 'ADMIN'
-- GROUP BY r.code;
-- 
-- =============================================
`

  return sql
}

// ============================================
// Migration 파일 생성
// ============================================

function saveMigration(sql: string, migrationNumber: string): string {
  const filename = `${migrationNumber}_sync_resources.sql`
  const filepath = join(MIGRATIONS_DIR, filename)

  writeFileSync(filepath, sql, 'utf-8')

  return filepath
}

// ============================================
// 결과 출력
// ============================================

function printResults(changes: PermissionChange[], filepath: string) {
  console.log(color('━'.repeat(60), colors.blue))
  console.log(color('\n📊 Migration Generation Results:', colors.bold))

  if (changes.length === 0) {
    console.log(color('\n✅ No changes needed!', colors.green))
    console.log(color('   All resources are already synchronized.', colors.green))
  } else {
    console.log(
      color(`\n📝 Generated migration with ${changes.length} new permissions:`, colors.cyan),
    )
    console.log(color(`   File: ${filepath}`, colors.bold))

    console.log(color('\n📋 New permissions:', colors.yellow))
    const byResource = changes.reduce(
      (acc, c) => {
        if (!acc[c.resource]) acc[c.resource] = []
        acc[c.resource].push(c.action)
        return acc
      },
      {} as Record<string, string[]>,
    )

    Object.entries(byResource).forEach(([resource, actions]) => {
      console.log(color(`   • ${resource}`, colors.bold))
      console.log(color(`     └─ ${actions.join(', ')}`, colors.cyan))
    })

    console.log(color('\n🚀 Next steps:', colors.magenta))
    console.log('   1. Review the generated migration file')
    console.log('   2. Test in development environment')
    console.log('   3. Commit and deploy to production')
    console.log(color('\n   Migration file ready for deployment! ✨', colors.green))
  }

  console.log(color('\n━'.repeat(60), colors.blue))
  console.log('')
}

// ============================================
// 메인 실행
// ============================================

async function main() {
  try {
    console.log(color('\n🏗️  Migration Generator', colors.bold))
    console.log(color('━'.repeat(60), colors.blue))

    // 1. 변경사항 감지
    const changes = await detectChanges()

    if (changes.length === 0) {
      console.log(color('\n✅ No changes detected. Database is up to date!', colors.green))
      await pool.end()
      process.exit(0)
      return
    }

    // 2. SQL 생성
    console.log(color('📝 Generating SQL...', colors.cyan))
    const sql = generateSQL(changes)

    // 3. Migration 파일 저장
    const migrationNumber = getNextMigrationNumber()
    const filepath = saveMigration(sql, migrationNumber)

    // 4. 결과 출력
    printResults(changes, filepath)

    await pool.end()
    process.exit(0)
  } catch (error) {
    console.error(color('\n❌ Error:', colors.red), error)
    await pool.end()
    process.exit(1)
  }
}

// 직접 실행 시 (ES 모듈)
main()

export { generateSQL, detectChanges }
