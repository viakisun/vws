import { Pool } from 'pg'

const pool = new Pool({
  host: 'db-viahub.cdgqkcss8mpj.ap-northeast-2.rds.amazonaws.com',
  port: 5432,
  database: 'postgres',
  user: 'postgres',
  password: 'viahubdev',
  ssl: { rejectUnauthorized: false },
})

async function removeResearcherPermissions() {
  const client = await pool.connect()

  try {
    console.log('\nüîç Ïó∞Íµ¨Ïõê Í∂åÌïú ÌôïÏù∏ Ï§ë...\n')

    // ÌòÑÏû¨ Ïó∞Íµ¨Ïõê Í∂åÌïú ÌôïÏù∏
    const current = await client.query(`
      SELECT 
        p.id,
        p.resource,
        p.action,
        p.description
      FROM role_permissions rp
      JOIN roles r ON r.id = rp.role_id
      JOIN permissions p ON p.id = rp.permission_id
      WHERE r.code = 'RESEARCHER'
      ORDER BY p.resource, p.action
    `)

    console.log(`ÌòÑÏû¨ Ïó∞Íµ¨Ïõê Í∂åÌïú: ${current.rows.length}Í∞ú\n`)
    
    // Í∏âÏó¨Í¥ÄÎ¶¨ÏôÄ ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨ Í∂åÌïú Ï∞æÍ∏∞
    const salaryPerms = current.rows.filter(p => p.resource.startsWith('salary.'))
    const projectPerms = current.rows.filter(p => p.resource.startsWith('project.'))
    
    console.log('üìã Í∏âÏó¨Í¥ÄÎ¶¨ Í∂åÌïú:')
    salaryPerms.forEach(p => console.log(`  - ${p.resource}.${p.action}: ${p.description}`))
    
    console.log('\nüìã ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨ Í∂åÌïú:')
    projectPerms.forEach(p => console.log(`  - ${p.resource}.${p.action}: ${p.description}`))

    // ÏÇ≠Ï†ú ÌôïÏù∏
    const toRemove = [...salaryPerms, ...projectPerms]
    if (toRemove.length === 0) {
      console.log('\n‚úÖ ÏÇ≠Ï†úÌï† Í∂åÌïúÏù¥ ÏóÜÏäµÎãàÎã§.')
      return
    }

    console.log(`\nüóëÔ∏è  Ï¥ù ${toRemove.length}Í∞ú Í∂åÌïú ÏÇ≠Ï†ú Ï§ë...`)

    // Ïó∞Íµ¨Ïõê Ïó≠Ìï† ID Í∞ÄÏ†∏Ïò§Í∏∞
    const roleResult = await client.query(
      "SELECT id FROM roles WHERE code = 'RESEARCHER'"
    )
    const researcherRoleId = roleResult.rows[0].id

    // Í∏âÏó¨Í¥ÄÎ¶¨ Í∂åÌïú ÏÇ≠Ï†ú
    if (salaryPerms.length > 0) {
      const salaryIds = salaryPerms.map(p => p.id)
      await client.query(
        `DELETE FROM role_permissions 
         WHERE role_id = $1 
         AND permission_id = ANY($2)`,
        [researcherRoleId, salaryIds]
      )
      console.log(`  ‚úÖ Í∏âÏó¨Í¥ÄÎ¶¨ Í∂åÌïú ${salaryPerms.length}Í∞ú ÏÇ≠Ï†ú`)
    }

    // ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨ Í∂åÌïú ÏÇ≠Ï†ú
    if (projectPerms.length > 0) {
      const projectIds = projectPerms.map(p => p.id)
      await client.query(
        `DELETE FROM role_permissions 
         WHERE role_id = $1 
         AND permission_id = ANY($2)`,
        [researcherRoleId, projectIds]
      )
      console.log(`  ‚úÖ ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨ Í∂åÌïú ${projectPerms.length}Í∞ú ÏÇ≠Ï†ú`)
    }

    // permission_cache Ï¥àÍ∏∞Ìôî
    await client.query('DELETE FROM permission_cache')
    console.log('  ‚úÖ Í∂åÌïú Ï∫êÏãú Ï¥àÍ∏∞Ìôî')

    // ÏµúÏ¢Ö Í≤∞Í≥º ÌôïÏù∏
    const final = await client.query(`
      SELECT COUNT(*) as count
      FROM role_permissions rp
      JOIN roles r ON r.id = rp.role_id
      WHERE r.code = 'RESEARCHER'
    `)

    console.log(`\n‚úÖ ÏôÑÎ£å! Ïó∞Íµ¨Ïõê ÏµúÏ¢Ö Í∂åÌïú: ${final.rows[0].count}Í∞ú`)

    // ÎÇ®ÏùÄ Í∂åÌïú Î™©Î°ù
    const remaining = await client.query(`
      SELECT p.resource, COUNT(*) as count
      FROM role_permissions rp
      JOIN roles r ON r.id = rp.role_id
      JOIN permissions p ON p.id = rp.permission_id
      WHERE r.code = 'RESEARCHER'
      GROUP BY p.resource
      ORDER BY p.resource
    `)

    console.log('\nüìã ÎÇ®ÏùÄ Í∂åÌïú:')
    remaining.rows.forEach(r => {
      console.log(`  - ${r.resource}: ${r.count}Í∞ú`)
    })

  } catch (error) {
    console.error('‚ùå Ïò§Î•ò:', error)
    throw error
  } finally {
    client.release()
    await pool.end()
  }
}

removeResearcherPermissions()
